
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000372e  000037c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000372e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080019c  0080019c  0000385e  2**0
                  ALLOC
  3 .stab         0000bf64  00000000  00000000  00003860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f83  00000000  00000000  0000f7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012747  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012758  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2a  00000000  00000000  00012878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  000135a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004fa  00000000  00000000  00013e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  00014396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 05 14 	jmp	0x280a	; 0x280a <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_18>
      4c:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ee e2       	ldi	r30, 0x2E	; 46
      ce:	f7 e3       	ldi	r31, 0x37	; 55
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a7 3c       	cpi	r26, 0xC7	; 199
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
      f0:	0c 94 95 1b 	jmp	0x372a	; 0x372a <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
    host_active = 0;
     1ae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
    lockout_active = 0;
     1b2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    status_byt = 0;
     1b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
    test_mode = 0;
     1d2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_output = 0;
     1e2:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1e6:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
     1ea:	80 e4       	ldi	r24, 0x40	; 64
     1ec:	0e 94 98 13 	call	0x2730	; 0x2730 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 b3 13 	call	0x2766	; 0x2766 <enable_ADC_auto_conversion>
    adc_started_at = millis();
     1f6:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     1fa:	60 93 7e 03 	sts	0x037E, r22	; 0x80037e <adc_started_at>
     1fe:	70 93 7f 03 	sts	0x037F, r23	; 0x80037f <adc_started_at+0x1>
     202:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <adc_started_at+0x2>
     206:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <adc_started_at+0x3>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20a:	60 e9       	ldi	r22, 0x90	; 144
     20c:	70 ed       	ldi	r23, 0xD0	; 208
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 0c 13 	call	0x2618	; 0x2618 <uartstream0_init>
     216:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <__iob+0x1>
     21a:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <__iob>
     21e:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <__iob+0x3>
     222:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     226:	89 e2       	ldi	r24, 0x29	; 41
     228:	0e 94 bf 14 	call	0x297e	; 0x297e <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     22c:	80 e8       	ldi	r24, 0x80	; 128
     22e:	9b e0       	ldi	r25, 0x0B	; 11
     230:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     234:	83 e4       	ldi	r24, 0x43	; 67
     236:	9b e0       	ldi	r25, 0x0B	; 11
     238:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 a1 14 	call	0x2942	; 0x2942 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     242:	8a e2       	ldi	r24, 0x2A	; 42
     244:	0e 94 49 16 	call	0x2c92	; 0x2c92 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     248:	8d e0       	ldi	r24, 0x0D	; 13
     24a:	9c e0       	ldi	r25, 0x0C	; 12
     24c:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     250:	80 e9       	ldi	r24, 0x90	; 144
     252:	9b e0       	ldi	r25, 0x0B	; 11
     254:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     25e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     260:	2f eb       	ldi	r18, 0xBF	; 191
     262:	84 ed       	ldi	r24, 0xD4	; 212
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	21 50       	subi	r18, 0x01	; 1
     268:	80 40       	sbci	r24, 0x00	; 0
     26a:	90 40       	sbci	r25, 0x00	; 0
     26c:	e1 f7       	brne	.-8      	; 0x266 <setup+0x16e>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <setup+0x178>
     270:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     272:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     274:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     276:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     278:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear, blocking at this point is OK.
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
     27a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
     27e:	0e 94 41 0c 	call	0x1882	; 0x1882 <check_for_eeprom_id>
     282:	88 23       	and	r24, r24
     284:	29 f0       	breq	.+10     	; 0x290 <setup+0x198>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     286:	82 e3       	ldi	r24, 0x32	; 50
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 1f 1b 	call	0x363e	; 0x363e <eeprom_read_byte>
     28e:	01 c0       	rjmp	.+2      	; 0x292 <setup+0x19a>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     290:	81 e3       	ldi	r24, 0x31	; 49
     292:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     296:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
     29a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LoadBatLimitsFromEEPROM>

    // load Day-Night state machien values from EEPROM (or set defaults)
    LoadDayNightValuesFromEEPROM();
     29e:	0e 94 57 10 	call	0x20ae	; 0x20ae <LoadDayNightValuesFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     2a2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     2a6:	88 60       	ori	r24, 0x08	; 8
     2a8:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     2ac:	08 95       	ret

000002ae <main>:
#endif
}

int main(void)
{
    setup();
     2ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2b2:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     2b6:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     2ba:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     2be:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     2c2:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>

    while (1) // scan time for each loop varies depending on how much of each thing needs to be done 
    {
        if (!test_mode) 
     2c6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
     2ca:	81 11       	cpse	r24, r1
     2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <main+0x34>
        {
            blink_on_activate();
     2ce:	0e 94 03 02 	call	0x406	; 0x406 <blink_on_activate>
            check_Bootload_Time();
     2d2:	0e 94 b2 02 	call	0x564	; 0x564 <check_Bootload_Time>
            check_DTR();
     2d6:	0e 94 55 03 	call	0x6aa	; 0x6aa <check_DTR>
            check_lockout();
     2da:	0e 94 db 02 	call	0x5b6	; 0x5b6 <check_lockout>
            check_shutdown();
     2de:	0e 94 04 03 	call	0x608	; 0x608 <check_shutdown>
        }
        save_rpu_addr_state();
     2e2:	0e 94 16 0c 	call	0x182c	; 0x182c <save_rpu_addr_state>
        check_uart();
     2e6:	0e 94 0f 04 	call	0x81e	; 0x81e <check_uart>
        adc_burst();
     2ea:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <adc_burst>
        CalReferancesFromI2CtoEE();
     2ee:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <CalReferancesFromI2CtoEE>
        BatLimitsFromI2CtoEE();
     2f2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <BatLimitsFromI2CtoEE>
        check_if_alt_should_be_on();
     2f6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <check_if_alt_should_be_on>
        DayNightValuesFromI2CtoEE();
     2fa:	0e 94 03 11 	call	0x2206	; 0x2206 <DayNightValuesFromI2CtoEE>
        check_daynight();
     2fe:	0e 94 50 11 	call	0x22a0	; 0x22a0 <check_daynight>
        handle_smbus_receive();
     302:	0e 94 99 0b 	call	0x1732	; 0x1732 <handle_smbus_receive>
    }    
     306:	df cf       	rjmp	.-66     	; 0x2c6 <main+0x18>

00000308 <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     308:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     30c:	88 23       	and	r24, r24
     30e:	c1 f0       	breq	.+48     	; 0x340 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     310:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     312:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     314:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     316:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     318:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     31a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     31c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     31e:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     320:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     324:	88 23       	and	r24, r24
     326:	21 f0       	breq	.+8      	; 0x330 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     328:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     32a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     32c:	5d 9a       	sbi	0x0b, 5	; 11
     32e:	03 c0       	rjmp	.+6      	; 0x336 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     330:	8f b7       	in	r24, 0x3f	; 63
     332:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     334:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     336:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     338:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     33c:	42 9a       	sbi	0x08, 2	; 8
     33e:	17 c0       	rjmp	.+46     	; 0x36e <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     340:	8f b7       	in	r24, 0x3f	; 63
     342:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     344:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     346:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     348:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     34a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     34c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     34e:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     350:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     354:	88 23       	and	r24, r24
     356:	21 f0       	breq	.+8      	; 0x360 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     358:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     35a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     35c:	5d 9a       	sbi	0x0b, 5	; 11
     35e:	03 c0       	rjmp	.+6      	; 0x366 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     360:	8f b7       	in	r24, 0x3f	; 63
     362:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     364:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     366:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     368:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     36a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     36c:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     36e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     370:	08 95       	ret

00000372 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     372:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     376:	88 23       	and	r24, r24
     378:	81 f0       	breq	.+32     	; 0x39a <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     37a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     37c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     37e:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     380:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     382:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     384:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     386:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     388:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     38a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     38c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     38e:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     390:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     392:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     394:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     396:	42 9a       	sbi	0x08, 2	; 8
     398:	0f c0       	rjmp	.+30     	; 0x3b8 <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     39a:	8f b7       	in	r24, 0x3f	; 63
     39c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     39e:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3a6:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3aa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ac:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3ae:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3b6:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3ba:	08 95       	ret

000003bc <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3bc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3c0:	88 23       	and	r24, r24
     3c2:	81 f0       	breq	.+32     	; 0x3e4 <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3c8:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ce:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3d0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3d8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3da:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3de:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3e0:	42 9a       	sbi	0x08, 2	; 8
     3e2:	0f c0       	rjmp	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e4:	8f b7       	in	r24, 0x3f	; 63
     3e6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3e8:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ea:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ee:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3f0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3f8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3fc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3fe:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     400:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     402:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     404:	08 95       	ret

00000406 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     40a:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     40e:	81 11       	cpse	r24, r1
     410:	a6 c0       	rjmp	.+332    	; 0x55e <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     412:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     416:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <blink_started_at>
     41a:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     41e:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     422:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     426:	dc 01       	movw	r26, r24
     428:	cb 01       	movw	r24, r22
     42a:	80 1b       	sub	r24, r16
     42c:	91 0b       	sbc	r25, r17
     42e:	a2 0b       	sbc	r26, r18
     430:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     432:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     436:	27 7f       	andi	r18, 0xF7	; 247
     438:	09 f0       	breq	.+2      	; 0x43c <blink_on_activate+0x36>
     43a:	6d c0       	rjmp	.+218    	; 0x516 <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     43c:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <host_is_foreign>
     440:	22 23       	and	r18, r18
     442:	21 f0       	breq	.+8      	; 0x44c <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     444:	b6 95       	lsr	r27
     446:	a7 95       	ror	r26
     448:	97 95       	ror	r25
     44a:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     44c:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started>
     450:	22 23       	and	r18, r18
     452:	e9 f0       	breq	.+58     	; 0x48e <blink_on_activate+0x88>
     454:	8c 34       	cpi	r24, 0x4C	; 76
     456:	91 05       	cpc	r25, r1
     458:	a1 05       	cpc	r26, r1
     45a:	b1 05       	cpc	r27, r1
     45c:	c0 f0       	brcs	.+48     	; 0x48e <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     45e:	25 9b       	sbis	0x04, 5	; 4
     460:	09 c0       	rjmp	.+18     	; 0x474 <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     462:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     464:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     466:	f8 94       	cli
    {
        if (value_for_bit) 
     468:	95 fd       	sbrc	r25, 5
     46a:	02 c0       	rjmp	.+4      	; 0x470 <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     46c:	2d 9a       	sbi	0x05, 5	; 5
     46e:	01 c0       	rjmp	.+2      	; 0x472 <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     470:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     472:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     474:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     478:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     47c:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     480:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     484:	85 5b       	subi	r24, 0xB5	; 181
     486:	9f 4f       	sbci	r25, 0xFF	; 255
     488:	af 4f       	sbci	r26, 0xFF	; 255
     48a:	bf 4f       	sbci	r27, 0xFF	; 255
     48c:	60 c0       	rjmp	.+192    	; 0x54e <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     48e:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     492:	22 23       	and	r18, r18
     494:	f1 f0       	breq	.+60     	; 0x4d2 <blink_on_activate+0xcc>
     496:	81 3d       	cpi	r24, 0xD1	; 209
     498:	27 e0       	ldi	r18, 0x07	; 7
     49a:	92 07       	cpc	r25, r18
     49c:	a1 05       	cpc	r26, r1
     49e:	b1 05       	cpc	r27, r1
     4a0:	c0 f0       	brcs	.+48     	; 0x4d2 <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4a2:	25 9b       	sbis	0x04, 5	; 4
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4a6:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4aa:	f8 94       	cli
    {
        if (value_for_bit) 
     4ac:	95 fd       	sbrc	r25, 5
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     4b0:	2d 9a       	sbi	0x05, 5	; 5
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4b4:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4b6:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4b8:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4bc:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4c0:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4c4:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4c8:	80 53       	subi	r24, 0x30	; 48
     4ca:	98 4f       	sbci	r25, 0xF8	; 248
     4cc:	af 4f       	sbci	r26, 0xFF	; 255
     4ce:	bf 4f       	sbci	r27, 0xFF	; 255
     4d0:	3e c0       	rjmp	.+124    	; 0x54e <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4d2:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <host_active>
     4d6:	22 23       	and	r18, r18
     4d8:	09 f4       	brne	.+2      	; 0x4dc <blink_on_activate+0xd6>
     4da:	41 c0       	rjmp	.+130    	; 0x55e <blink_on_activate+0x158>
     4dc:	85 3f       	cpi	r24, 0xF5	; 245
     4de:	91 40       	sbci	r25, 0x01	; 1
     4e0:	a1 05       	cpc	r26, r1
     4e2:	b1 05       	cpc	r27, r1
     4e4:	e0 f1       	brcs	.+120    	; 0x55e <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4e6:	25 9b       	sbis	0x04, 5	; 4
     4e8:	09 c0       	rjmp	.+18     	; 0x4fc <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4ea:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4ee:	f8 94       	cli
    {
        if (value_for_bit) 
     4f0:	95 fd       	sbrc	r25, 5
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     4f4:	2d 9a       	sbi	0x05, 5	; 5
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4f8:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4fa:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     4fc:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     500:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     504:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     508:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     50c:	8c 50       	subi	r24, 0x0C	; 12
     50e:	9e 4f       	sbci	r25, 0xFE	; 254
     510:	af 4f       	sbci	r26, 0xFF	; 255
     512:	bf 4f       	sbci	r27, 0xFF	; 255
     514:	1c c0       	rjmp	.+56     	; 0x54e <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     516:	89 3c       	cpi	r24, 0xC9	; 201
     518:	91 05       	cpc	r25, r1
     51a:	a1 05       	cpc	r26, r1
     51c:	b1 05       	cpc	r27, r1
     51e:	f8 f0       	brcs	.+62     	; 0x55e <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     520:	25 9b       	sbis	0x04, 5	; 4
     522:	09 c0       	rjmp	.+18     	; 0x536 <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     524:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     526:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     528:	f8 94       	cli
    {
        if (value_for_bit) 
     52a:	95 fd       	sbrc	r25, 5
     52c:	02 c0       	rjmp	.+4      	; 0x532 <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     52e:	2d 9a       	sbi	0x05, 5	; 5
     530:	01 c0       	rjmp	.+2      	; 0x534 <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     532:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     534:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     536:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     53a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     53e:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     542:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     546:	88 53       	subi	r24, 0x38	; 56
     548:	9f 4f       	sbci	r25, 0xFF	; 255
     54a:	af 4f       	sbci	r26, 0xFF	; 255
     54c:	bf 4f       	sbci	r27, 0xFF	; 255
     54e:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <blink_started_at>
     552:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <blink_started_at+0x1>
     556:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <blink_started_at+0x2>
     55a:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <blink_started_at+0x3>
        }
    }
}
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
    if (bootloader_started)
     568:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     56c:	88 23       	and	r24, r24
     56e:	01 f1       	breq	.+64     	; 0x5b0 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     570:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     574:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     578:	21 11       	cpse	r18, r1
     57a:	1a c0       	rjmp	.+52     	; 0x5b0 <check_Bootload_Time+0x4c>
     57c:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <bootloader_started_at>
     580:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <bootloader_started_at+0x1>
     584:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <bootloader_started_at+0x2>
     588:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <bootloader_started_at+0x3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	80 1b       	sub	r24, r16
     592:	91 0b       	sbc	r25, r17
     594:	a2 0b       	sbc	r26, r18
     596:	b3 0b       	sbc	r27, r19
     598:	89 33       	cpi	r24, 0x39	; 57
     59a:	91 4c       	sbci	r25, 0xC1	; 193
     59c:	a1 40       	sbci	r26, 0x01	; 1
     59e:	b1 05       	cpc	r27, r1
     5a0:	38 f0       	brcs	.+14     	; 0x5b0 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     5a2:	0e 94 84 01 	call	0x308	; 0x308 <connect_normal_mode>
            host_active =1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
            bootloader_started = 0;
     5ac:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
        }
    }
}
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	08 95       	ret

000005b6 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5ba:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5be:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5c2:	21 11       	cpse	r18, r1
     5c4:	1e c0       	rjmp	.+60     	; 0x602 <check_lockout+0x4c>
     5c6:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     5ca:	22 23       	and	r18, r18
     5cc:	d1 f0       	breq	.+52     	; 0x602 <check_lockout+0x4c>
     5ce:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <lockout_started_at>
     5d2:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <lockout_started_at+0x1>
     5d6:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <lockout_started_at+0x2>
     5da:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <lockout_started_at+0x3>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	80 1b       	sub	r24, r16
     5e4:	91 0b       	sbc	r25, r17
     5e6:	a2 0b       	sbc	r26, r18
     5e8:	b3 0b       	sbc	r27, r19
     5ea:	81 3c       	cpi	r24, 0xC1	; 193
     5ec:	94 4d       	sbci	r25, 0xD4	; 212
     5ee:	a1 40       	sbci	r26, 0x01	; 1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	38 f0       	brcs	.+14     	; 0x602 <check_lockout+0x4c>
    {
        connect_normal_mode();
     5f4:	0e 94 84 01 	call	0x308	; 0x308 <connect_normal_mode>

        host_active = 1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
        lockout_active =0;
     5fe:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    }
}
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <check_shutdown>:


void check_shutdown(void)
{
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
    if (shutdown_started)
     60c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_started>
     610:	88 23       	and	r24, r24
     612:	19 f1       	breq	.+70     	; 0x65a <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     614:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     618:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <shutdown_started_at>
     61c:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <shutdown_started_at+0x1>
     620:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <shutdown_started_at+0x2>
     624:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <shutdown_started_at+0x3>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	80 1b       	sub	r24, r16
     62e:	91 0b       	sbc	r25, r17
     630:	a2 0b       	sbc	r26, r18
     632:	b3 0b       	sbc	r27, r19
     634:	89 3e       	cpi	r24, 0xE9	; 233
     636:	93 40       	sbci	r25, 0x03	; 3
     638:	a1 05       	cpc	r26, r1
     63a:	b1 05       	cpc	r27, r1
     63c:	98 f1       	brcs	.+102    	; 0x6a4 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     63e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     640:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     642:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     644:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     646:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     648:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     64a:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     64c:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     64e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <shutdown_detected>
     658:	25 c0       	rjmp	.+74     	; 0x6a4 <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     65a:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     65e:	81 11       	cpse	r24, r1
     660:	21 c0       	rjmp	.+66     	; 0x6a4 <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     662:	18 99       	sbic	0x03, 0	; 3
     664:	1f c0       	rjmp	.+62     	; 0x6a4 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     666:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     668:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     66a:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     66c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     66e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     670:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     672:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     674:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     676:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     678:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     67a:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     67c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     67e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     680:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     682:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     684:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     686:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
                shutdown_started_at = millis();
     690:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     694:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
     698:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
     69c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
     6a0:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
            }
        }
}
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <check_DTR>:
uint8_t uart_previous_byte;
uint8_t my_mcu_is_target_and_i_have_it_reset;

void check_DTR(void)
{
    if (!host_is_foreign) 
     6aa:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     6ae:	81 11       	cpse	r24, r1
     6b0:	b5 c0       	rjmp	.+362    	; 0x81c <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     6b2:	4b 99       	sbic	0x09, 3	; 9
     6b4:	56 c0       	rjmp	.+172    	; 0x762 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6b6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     6ba:	83 fd       	sbrc	r24, 3
     6bc:	af c0       	rjmp	.+350    	; 0x81c <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     6be:	4a 9b       	sbis	0x09, 2	; 9
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6c4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6c6:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6c8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6ca:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6cc:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     6d0:	81 11       	cpse	r24, r1
     6d2:	a4 c0       	rjmp	.+328    	; 0x81c <check_DTR+0x172>
     6d4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     6d8:	81 11       	cpse	r24, r1
     6da:	a0 c0       	rjmp	.+320    	; 0x81c <check_DTR+0x172>
     6dc:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     6e0:	81 11       	cpse	r24, r1
     6e2:	9c c0       	rjmp	.+312    	; 0x81c <check_DTR+0x172>
     6e4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     6e8:	81 11       	cpse	r24, r1
     6ea:	98 c0       	rjmp	.+304    	; 0x81c <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     6ec:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     6f0:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
     6f4:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
     6f8:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
     6fc:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     700:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <bootloader_address>
     704:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     708:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     70c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     710:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	20 95       	com	r18
     718:	30 95       	com	r19
     71a:	2a 70       	andi	r18, 0x0A	; 10
     71c:	33 27       	eor	r19, r19
     71e:	64 e0       	ldi	r22, 0x04	; 4
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	6a 95       	dec	r22
     726:	e1 f7       	brne	.-8      	; 0x720 <check_DTR+0x76>
     728:	89 2f       	mov	r24, r25
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	80 95       	com	r24
     72e:	90 95       	com	r25
     730:	80 75       	andi	r24, 0x50	; 80
     732:	99 27       	eor	r25, r25
     734:	74 e0       	ldi	r23, 0x04	; 4
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	7a 95       	dec	r23
     73c:	e1 f7       	brne	.-8      	; 0x736 <check_DTR+0x8c>
     73e:	82 2b       	or	r24, r18
     740:	93 2b       	or	r25, r19
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	1f 92       	push	r1
     748:	4f 93       	push	r20
     74a:	86 e1       	ldi	r24, 0x16	; 22
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
                        uart_has_TTL = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
                        localhost_active = 1;
     75c:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <localhost_active>
     760:	57 c0       	rjmp	.+174    	; 0x810 <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     762:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     766:	88 23       	and	r24, r24
     768:	09 f4       	brne	.+2      	; 0x76c <check_DTR+0xc2>
     76a:	58 c0       	rjmp	.+176    	; 0x81c <check_DTR+0x172>
     76c:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     770:	88 23       	and	r24, r24
     772:	09 f4       	brne	.+2      	; 0x776 <check_DTR+0xcc>
     774:	53 c0       	rjmp	.+166    	; 0x81c <check_DTR+0x172>
     776:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     77a:	81 11       	cpse	r24, r1
     77c:	4f c0       	rjmp	.+158    	; 0x81c <check_DTR+0x172>
     77e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     782:	81 11       	cpse	r24, r1
     784:	4b c0       	rjmp	.+150    	; 0x81c <check_DTR+0x172>
     786:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     78a:	81 11       	cpse	r24, r1
     78c:	47 c0       	rjmp	.+142    	; 0x81c <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     78e:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     792:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
     796:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
     79a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
     79e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7a2:	8f ec       	ldi	r24, 0xCF	; 207
     7a4:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7a8:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     7ac:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     7b0:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	20 95       	com	r18
     7b8:	30 95       	com	r19
     7ba:	2a 70       	andi	r18, 0x0A	; 10
     7bc:	33 27       	eor	r19, r19
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	22 0f       	add	r18, r18
     7c2:	33 1f       	adc	r19, r19
     7c4:	8a 95       	dec	r24
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <check_DTR+0x116>
     7c8:	89 2f       	mov	r24, r25
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	80 95       	com	r24
     7ce:	90 95       	com	r25
     7d0:	80 75       	andi	r24, 0x50	; 80
     7d2:	99 27       	eor	r25, r25
     7d4:	54 e0       	ldi	r21, 0x04	; 4
     7d6:	95 95       	asr	r25
     7d8:	87 95       	ror	r24
     7da:	5a 95       	dec	r21
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <check_DTR+0x12c>
     7de:	82 2b       	or	r24, r18
     7e0:	93 2b       	or	r25, r19
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	1f 92       	push	r1
     7e8:	4f 93       	push	r20
     7ea:	86 e1       	ldi	r24, 0x16	; 22
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
                uart_has_TTL = 1;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     7fc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7fe:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     800:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     802:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     804:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     808:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     80a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     80c:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     80e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	08 95       	ret

0000081e <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     81e:	4f 92       	push	r4
     820:	5f 92       	push	r5
     822:	6f 92       	push	r6
     824:	7f 92       	push	r7
     826:	8f 92       	push	r8
     828:	9f 92       	push	r9
     82a:	af 92       	push	r10
     82c:	bf 92       	push	r11
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     83e:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     842:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <uart_has_TTL>
     846:	22 23       	and	r18, r18
     848:	d9 f0       	breq	.+54     	; 0x880 <check_uart+0x62>
     84a:	40 90 0a 03 	lds	r4, 0x030A	; 0x80030a <uart_started_at>
     84e:	50 90 0b 03 	lds	r5, 0x030B	; 0x80030b <uart_started_at+0x1>
     852:	60 90 0c 03 	lds	r6, 0x030C	; 0x80030c <uart_started_at+0x2>
     856:	70 90 0d 03 	lds	r7, 0x030D	; 0x80030d <uart_started_at+0x3>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	84 19       	sub	r24, r4
     860:	95 09       	sbc	r25, r5
     862:	a6 09       	sbc	r26, r6
     864:	b7 09       	sbc	r27, r7
     866:	85 3f       	cpi	r24, 0xF5	; 245
     868:	91 40       	sbci	r25, 0x01	; 1
     86a:	a1 05       	cpc	r26, r1
     86c:	b1 05       	cpc	r27, r1
     86e:	40 f0       	brcs	.+16     	; 0x880 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     870:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     874:	81 70       	andi	r24, 0x01	; 1
     876:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
        uart_has_TTL = 0;
     87a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     87e:	f5 c1       	rjmp	.+1002   	; 0xc6a <__stack+0x36b>
    }
    else
    {
        if ( uart0_available() )
     880:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <uart0_available>
     884:	89 2b       	or	r24, r25
     886:	09 f4       	brne	.+2      	; 0x88a <check_uart+0x6c>
     888:	f0 c1       	rjmp	.+992    	; 0xc6a <__stack+0x36b>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     88a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <__iob>
     88e:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <__iob+0x1>
     892:	0e 94 3a 18 	call	0x3074	; 0x3074 <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     896:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <uart_previous_byte>
     89a:	26 2f       	mov	r18, r22
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	20 95       	com	r18
     8a0:	30 95       	com	r19
     8a2:	a9 01       	movw	r20, r18
     8a4:	4a 70       	andi	r20, 0x0A	; 10
     8a6:	55 27       	eor	r21, r21
     8a8:	74 e0       	ldi	r23, 0x04	; 4
     8aa:	44 0f       	add	r20, r20
     8ac:	55 1f       	adc	r21, r21
     8ae:	7a 95       	dec	r23
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <check_uart+0x8c>
     8b2:	20 75       	andi	r18, 0x50	; 80
     8b4:	33 27       	eor	r19, r19
     8b6:	e4 e0       	ldi	r30, 0x04	; 4
     8b8:	35 95       	asr	r19
     8ba:	27 95       	ror	r18
     8bc:	ea 95       	dec	r30
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <check_uart+0x9a>
     8c0:	24 2b       	or	r18, r20
     8c2:	35 2b       	or	r19, r21
     8c4:	ac 01       	movw	r20, r24
     8c6:	55 27       	eor	r21, r21
     8c8:	24 17       	cp	r18, r20
     8ca:	35 07       	cpc	r19, r21
     8cc:	39 f4       	brne	.+14     	; 0x8dc <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8ce:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8d2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     8d6:	81 11       	cpse	r24, r1
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <check_uart+0xc4>
     8da:	0f c0       	rjmp	.+30     	; 0x8fa <check_uart+0xdc>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     8dc:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_previous_byte>
                return;
     8e0:	c4 c1       	rjmp	.+904    	; 0xc6a <__stack+0x36b>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     8e2:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
     8e6:	68 17       	cp	r22, r24
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     8ea:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     8ee:	84 70       	andi	r24, 0x04	; 4
     8f0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
                }
                uart_has_TTL = 0;
     8f4:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0x3>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     8fa:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     8fe:	88 23       	and	r24, r24
     900:	19 f0       	breq	.+6      	; 0x908 <__stack+0x9>
                {
                    host_is_foreign = 0; // used to connect the host
     902:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
     906:	03 c0       	rjmp	.+6      	; 0x90e <__stack+0xf>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     90e:	61 11       	cpse	r22, r1
     910:	27 c0       	rjmp	.+78     	; 0x960 <__stack+0x61>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     912:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	80 5c       	subi	r24, 0xC0	; 192
     91c:	94 4d       	sbci	r25, 0xD4	; 212
     91e:	a1 40       	sbci	r26, 0x01	; 1
     920:	b1 09       	sbc	r27, r1
     922:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     926:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     92a:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     92e:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     932:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     936:	dc 01       	movw	r26, r24
     938:	cb 01       	movw	r24, r22
     93a:	88 53       	subi	r24, 0x38	; 56
     93c:	91 4c       	sbci	r25, 0xC1	; 193
     93e:	a1 40       	sbci	r26, 0x01	; 1
     940:	b1 09       	sbc	r27, r1
     942:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     946:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     94a:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     94e:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     952:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     954:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     956:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     958:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     95a:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
     95e:	5e c1       	rjmp	.+700    	; 0xc1c <__stack+0x31d>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     960:	6f 3f       	cpi	r22, 0xFF	; 255
     962:	31 f4       	brne	.+12     	; 0x970 <__stack+0x71>
            {
                arduino_mode_started = 0;
     964:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
                arduino_mode = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <arduino_mode>
                return;
     96e:	7d c1       	rjmp	.+762    	; 0xc6a <__stack+0x36b>
            }
            if (input == RPU_START_TEST_MODE) 
     970:	61 30       	cpi	r22, 0x01	; 1
     972:	09 f0       	breq	.+2      	; 0x976 <__stack+0x77>
     974:	6f c0       	rjmp	.+222    	; 0xa54 <__stack+0x155>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     976:	f9 b1       	in	r31, 0x09	; 9
     978:	e9 b1       	in	r30, 0x09	; 9
     97a:	56 b1       	in	r21, 0x06	; 6
     97c:	49 b1       	in	r20, 0x09	; 9
     97e:	39 b1       	in	r19, 0x09	; 9
     980:	89 b1       	in	r24, 0x09	; 9
     982:	29 b1       	in	r18, 0x09	; 9
     984:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	88 0f       	add	r24, r24
     98a:	89 2f       	mov	r24, r25
     98c:	88 1f       	adc	r24, r24
     98e:	99 0b       	sbc	r25, r25
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	73 fb       	bst	r23, 3
     99a:	99 27       	eor	r25, r25
     99c:	90 f9       	bld	r25, 0
     99e:	89 2b       	or	r24, r25
     9a0:	f3 fb       	bst	r31, 3
     9a2:	aa 24       	eor	r10, r10
     9a4:	a0 f8       	bld	r10, 0
     9a6:	b1 2c       	mov	r11, r1
     9a8:	b6 94       	lsr	r11
     9aa:	ba 2c       	mov	r11, r10
     9ac:	aa 24       	eor	r10, r10
     9ae:	b7 94       	ror	r11
     9b0:	a7 94       	ror	r10
     9b2:	a8 2a       	or	r10, r24
     9b4:	e2 fb       	bst	r30, 2
     9b6:	cc 24       	eor	r12, r12
     9b8:	c0 f8       	bld	r12, 0
     9ba:	d1 2c       	mov	r13, r1
     9bc:	d6 e0       	ldi	r29, 0x06	; 6
     9be:	cc 0c       	add	r12, r12
     9c0:	dd 1c       	adc	r13, r13
     9c2:	da 95       	dec	r29
     9c4:	e1 f7       	brne	.-8      	; 0x9be <__stack+0xbf>
     9c6:	ca 28       	or	r12, r10
     9c8:	52 fb       	bst	r21, 2
     9ca:	ee 24       	eor	r14, r14
     9cc:	e0 f8       	bld	r14, 0
     9ce:	f1 2c       	mov	r15, r1
     9d0:	15 e0       	ldi	r17, 0x05	; 5
     9d2:	ee 0c       	add	r14, r14
     9d4:	ff 1c       	adc	r15, r15
     9d6:	1a 95       	dec	r17
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <__stack+0xd3>
     9da:	ec 28       	or	r14, r12
     9dc:	45 fb       	bst	r20, 5
     9de:	00 27       	eor	r16, r16
     9e0:	00 f9       	bld	r16, 0
     9e2:	10 e0       	ldi	r17, 0x00	; 0
     9e4:	84 e0       	ldi	r24, 0x04	; 4
     9e6:	00 0f       	add	r16, r16
     9e8:	11 1f       	adc	r17, r17
     9ea:	8a 95       	dec	r24
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <__stack+0xe7>
     9ee:	0e 29       	or	r16, r14
     9f0:	36 fb       	bst	r19, 6
     9f2:	33 27       	eor	r19, r19
     9f4:	30 f9       	bld	r19, 0
     9f6:	c3 2f       	mov	r28, r19
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	d8 2f       	mov	r29, r24
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	cc 0f       	add	r28, r28
     a00:	dd 1f       	adc	r29, r29
     a02:	9a 95       	dec	r25
     a04:	e1 f7       	brne	.-8      	; 0x9fe <__stack+0xff>
     a06:	c0 2b       	or	r28, r16
     a08:	24 fb       	bst	r18, 4
     a0a:	88 24       	eor	r8, r8
     a0c:	80 f8       	bld	r8, 0
     a0e:	91 2c       	mov	r9, r1
     a10:	88 0c       	add	r8, r8
     a12:	99 1c       	adc	r9, r9
     a14:	8c 2a       	or	r8, r28
     a16:	80 92 f4 02 	sts	0x02F4, r8	; 0x8002f4 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a1a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a1c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a1e:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a20:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a22:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a24:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a26:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a28:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a2a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a2c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a2e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a30:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a32:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a34:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a36:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a38:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a3a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a3e:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a40:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a42:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a44:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a46:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a48:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a4a:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 1;
     a4e:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <test_mode>
                return;
     a52:	0b c1       	rjmp	.+534    	; 0xc6a <__stack+0x36b>
            }
            if (input == RPU_END_TEST_MODE) 
     a54:	6e 3f       	cpi	r22, 0xFE	; 254
     a56:	09 f0       	breq	.+2      	; 0xa5a <__stack+0x15b>
     a58:	76 c0       	rjmp	.+236    	; 0xb46 <__stack+0x247>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a5a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a5e:	88 1f       	adc	r24, r24
     a60:	88 27       	eor	r24, r24
     a62:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a64:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a66:	f8 94       	cli
    {
        if (value_for_bit) 
     a68:	88 23       	and	r24, r24
     a6a:	11 f0       	breq	.+4      	; 0xa70 <__stack+0x171>
        {
            *register_addr |= 1 << bit_offset;
     a6c:	5b 9a       	sbi	0x0b, 3	; 11
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <__stack+0x173>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a70:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a72:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a74:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a78:	86 fb       	bst	r24, 6
     a7a:	88 27       	eor	r24, r24
     a7c:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a7e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a80:	f8 94       	cli
    {
        if (value_for_bit) 
     a82:	88 23       	and	r24, r24
     a84:	11 f0       	breq	.+4      	; 0xa8a <__stack+0x18b>
        {
            *register_addr |= 1 << bit_offset;
     a86:	5a 9a       	sbi	0x0b, 2	; 11
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <__stack+0x18d>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a8a:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a8c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a8e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a92:	85 fb       	bst	r24, 5
     a94:	88 27       	eor	r24, r24
     a96:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a98:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a9a:	f8 94       	cli
    {
        if (value_for_bit) 
     a9c:	88 23       	and	r24, r24
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <__stack+0x1a5>
        {
            *register_addr |= 1 << bit_offset;
     aa0:	42 9a       	sbi	0x08, 2	; 8
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__stack+0x1a7>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aa4:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aa8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     aac:	82 95       	swap	r24
     aae:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ab0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ab2:	f8 94       	cli
    {
        if (value_for_bit) 
     ab4:	88 23       	and	r24, r24
     ab6:	11 f0       	breq	.+4      	; 0xabc <__stack+0x1bd>
        {
            *register_addr |= 1 << bit_offset;
     ab8:	5d 9a       	sbi	0x0b, 5	; 11
     aba:	01 c0       	rjmp	.+2      	; 0xabe <__stack+0x1bf>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     abc:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     abe:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ac0:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ac4:	83 fb       	bst	r24, 3
     ac6:	88 27       	eor	r24, r24
     ac8:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     acc:	f8 94       	cli
    {
        if (value_for_bit) 
     ace:	88 23       	and	r24, r24
     ad0:	11 f0       	breq	.+4      	; 0xad6 <__stack+0x1d7>
        {
            *register_addr |= 1 << bit_offset;
     ad2:	5e 9a       	sbi	0x0b, 6	; 11
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <__stack+0x1d9>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ad6:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad8:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ada:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     adc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     ade:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ae2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ae6:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae8:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     aea:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     aee:	88 61       	ori	r24, 0x18	; 24
     af0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     af4:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     af8:	82 fb       	bst	r24, 2
     afa:	88 27       	eor	r24, r24
     afc:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     afe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b00:	f8 94       	cli
    {
        if (value_for_bit) 
     b02:	88 23       	and	r24, r24
     b04:	11 f0       	breq	.+4      	; 0xb0a <__stack+0x20b>
        {
            *register_addr |= 1 << bit_offset;
     b06:	5f 9a       	sbi	0x0b, 7	; 11
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <__stack+0x20d>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b0a:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b0c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b0e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b12:	86 95       	lsr	r24
     b14:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b16:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b18:	f8 94       	cli
    {
        if (value_for_bit) 
     b1a:	88 23       	and	r24, r24
     b1c:	11 f0       	breq	.+4      	; 0xb22 <__stack+0x223>
        {
            *register_addr |= 1 << bit_offset;
     b1e:	5c 9a       	sbi	0x0b, 4	; 11
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <__stack+0x225>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b22:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b24:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b26:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b2a:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b2c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b2e:	f8 94       	cli
    {
        if (value_for_bit) 
     b30:	88 23       	and	r24, r24
     b32:	11 f0       	breq	.+4      	; 0xb38 <__stack+0x239>
        {
            *register_addr |= 1 << bit_offset;
     b34:	43 9a       	sbi	0x08, 3	; 8
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <__stack+0x23b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b38:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b3a:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b3c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 0;
     b40:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
                return;
     b44:	92 c0       	rjmp	.+292    	; 0xc6a <__stack+0x36b>
            }
            if (input == rpu_address) // that is my local address
     b46:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     b4a:	68 13       	cpse	r22, r24
     b4c:	52 c0       	rjmp	.+164    	; 0xbf2 <__stack+0x2f3>
            {
                if(!my_mcu_is_target_and_i_have_it_reset)
     b4e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <my_mcu_is_target_and_i_have_it_reset>
     b52:	81 11       	cpse	r24, r1
     b54:	14 c0       	rjmp	.+40     	; 0xb7e <__stack+0x27f>
                {
                    connect_bootload_mode();
     b56:	0e 94 b9 01 	call	0x372	; 0x372 <connect_bootload_mode>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b5a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b5c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b5e:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b60:	8f bf       	out	0x3f, r24	; 63

                    // start the bootloader
                    digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                    target_reset_started_at = millis();
     b62:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     b66:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <target_reset_started_at>
     b6a:	70 93 0f 03 	sts	0x030F, r23	; 0x80030f <target_reset_started_at+0x1>
     b6e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <target_reset_started_at+0x2>
     b72:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <target_reset_started_at+0x3>
                    my_mcu_is_target_and_i_have_it_reset = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <my_mcu_is_target_and_i_have_it_reset>
                    return; 
     b7c:	76 c0       	rjmp	.+236    	; 0xc6a <__stack+0x36b>
                }
                unsigned long kRuntime= millis() - target_reset_started_at;
     b7e:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
                if (kRuntime < 20UL) // hold reset low for a short time but don't delay (the mcu runs 200k instruction in 20 mSec)
     b82:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <target_reset_started_at>
     b86:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <target_reset_started_at+0x1>
     b8a:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <target_reset_started_at+0x2>
     b8e:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <target_reset_started_at+0x3>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	80 1b       	sub	r24, r16
     b98:	91 0b       	sbc	r25, r17
     b9a:	a2 0b       	sbc	r26, r18
     b9c:	b3 0b       	sbc	r27, r19
     b9e:	44 97       	sbiw	r24, 0x14	; 20
     ba0:	a1 05       	cpc	r26, r1
     ba2:	b1 05       	cpc	r27, r1
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <__stack+0x2a9>
     ba6:	61 c0       	rjmp	.+194    	; 0xc6a <__stack+0x36b>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ba8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     baa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     bac:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bae:	8f bf       	out	0x3f, r24	; 63
                {
                    return;
                } 
                //_delay_ms(20);  // hold reset low for a short time, but this locks the mcu which which blocks i2c, SMBus, and ADC burst. 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                my_mcu_is_target_and_i_have_it_reset = 0;
     bb0:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <my_mcu_is_target_and_i_have_it_reset>
                bootloader_started = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started>
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     bba:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <local_mcu_is_rpu_aware>
                daynight_state &= ~( (1<<6) | (1<<7) );  //clear the day and night work bits since appliction has restart
     bbe:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
     bc2:	8f 73       	andi	r24, 0x3F	; 63
     bc4:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_state>
                blink_started_at = millis();
     bc8:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     bcc:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     bd0:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     bd4:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     bd8:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                bootloader_started_at = millis();
     bdc:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     be0:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <bootloader_started_at>
     be4:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <bootloader_started_at+0x1>
     be8:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <bootloader_started_at+0x2>
     bec:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <bootloader_started_at+0x3>
                return;
     bf0:	3c c0       	rjmp	.+120    	; 0xc6a <__stack+0x36b>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     bf2:	67 fd       	sbrc	r22, 7
     bf4:	1e c0       	rjmp	.+60     	; 0xc32 <__stack+0x333>
            {  
                lockout_active =1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lockout_active>
                bootloader_started = 0;
     bfc:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
                host_active =0;
     c00:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>

                connect_lockout_mode();
     c04:	0e 94 de 01 	call	0x3bc	; 0x3bc <connect_lockout_mode>

                lockout_started_at = millis();
     c08:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     c0c:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <lockout_started_at>
     c10:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <lockout_started_at+0x1>
     c14:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <lockout_started_at+0x2>
     c18:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <lockout_started_at+0x3>
                blink_started_at = millis();
     c1c:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
     c20:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     c24:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     c28:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     c2c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                return;
     c30:	1c c0       	rjmp	.+56     	; 0xc6a <__stack+0x36b>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     c32:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
                lockout_active =0;
     c36:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
                host_active =0;
     c3a:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
                bootloader_started = 0;
     c3e:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c42:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c44:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c46:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c48:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c4a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c4c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c4e:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c50:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c52:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c54:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c56:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c58:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c5a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c5c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c5e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c60:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c62:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c64:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c66:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c68:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	bf 90       	pop	r11
     c7c:	af 90       	pop	r10
     c7e:	9f 90       	pop	r9
     c80:	8f 90       	pop	r8
     c82:	7f 90       	pop	r7
     c84:	6f 90       	pop	r6
     c86:	5f 90       	pop	r5
     c88:	4f 90       	pop	r4
     c8a:	08 95       	ret

00000c8c <fnWtMgrAddr>:
    }
}

// (Obsolete) I2C command to access manager address
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
     c8c:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
     c90:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     c94:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
     c96:	80 ed       	ldi	r24, 0xD0	; 208
     c98:	89 0f       	add	r24, r25
     c9a:	8b 34       	cpi	r24, 0x4B	; 75
     c9c:	28 f4       	brcc	.+10     	; 0xca8 <fnWtMgrAddr+0x1c>
    {
        rpu_address = tmp_addr;
     c9e:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <rpu_address>
        write_rpu_address_to_eeprom = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
     ca8:	08 95       	ret

00000caa <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     caa:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <bootloader_address>
     cae:	fc 01       	movw	r30, r24
     cb0:	21 83       	std	Z+1, r18	; 0x01
     cb2:	08 95       	ret

00000cb4 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     cb4:	fc 01       	movw	r30, r24
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
     cbc:	08 95       	ret

00000cbe <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     cbe:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <shutdown_detected>
     cc2:	fc 01       	movw	r30, r24
     cc4:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     cc6:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
     cca:	08 95       	ret

00000ccc <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     ccc:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     cce:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <status_byt>
     cd2:	9f 70       	andi	r25, 0x0F	; 15
     cd4:	91 83       	std	Z+1, r25	; 0x01
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     cd6:	83 b1       	in	r24, 0x03	; 3
    i2cBuffer[1] &= digitalRead(ALT_EN)<<4; // report if alternat power is enabled
     cd8:	11 82       	std	Z+1, r1	; 0x01
     cda:	83 b1       	in	r24, 0x03	; 3
     cdc:	08 95       	ret

00000cde <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    if ( (i2cBuffer[1] & 0x10) ) 
     cde:	fc 01       	movw	r30, r24
     ce0:	21 81       	ldd	r18, Z+1	; 0x01
     ce2:	24 ff       	sbrs	r18, 4
     ce4:	0b c0       	rjmp	.+22     	; 0xcfc <fnWtStatus+0x1e>
    {
        enable_alternate_power = 1;
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <enable_alternate_power>
        alt_pwm_accum_charge_time = 0; // clear charge time
     cec:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <alt_pwm_accum_charge_time>
     cf0:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <alt_pwm_accum_charge_time+0x1>
     cf4:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <alt_pwm_accum_charge_time+0x2>
     cf8:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <alt_pwm_accum_charge_time+0x3>
    }
    if ( (i2cBuffer[1] & 0x20) && !shutdown_started && !shutdown_detected ) enable_sbc_power = 1;
     cfc:	fc 01       	movw	r30, r24
     cfe:	81 81       	ldd	r24, Z+1	; 0x01
     d00:	85 ff       	sbrs	r24, 5
     d02:	0b c0       	rjmp	.+22     	; 0xd1a <fnWtStatus+0x3c>
     d04:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <shutdown_started>
     d08:	91 11       	cpse	r25, r1
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <fnWtStatus+0x3c>
     d0c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <shutdown_detected>
     d10:	91 11       	cpse	r25, r1
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <fnWtStatus+0x3c>
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <enable_sbc_power>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     d1a:	8f 70       	andi	r24, 0x0F	; 15
     d1c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     d20:	08 95       	ret

00000d22 <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     d22:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     d26:	fc 01       	movw	r30, r24
     d28:	21 83       	std	Z+1, r18	; 0x01
     d2a:	08 95       	ret

00000d2c <fnBatStartChrg>:

// I2C command for Battery charge start limit (uint16_t)
void fnBatStartChrg(uint8_t* i2cBuffer)
{
    // battery_low_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_low_limit>>8) & 0xFF;
     d2c:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <battery_low_limit+0x1>
    battery_low_limit = 0x00FF & battery_low_limit; // mask out the old value
    battery_low_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_low_limit; // place new value in high byte
     d30:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <battery_low_limit+0x1>
     d34:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <battery_low_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d38:	fc 01       	movw	r30, r24
     d3a:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_low_limit & 0xFF;
     d3c:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <battery_low_limit>
    battery_low_limit = 0xFFFFFF00 & battery_low_limit;
    battery_low_limit = ((uint32_t) (i2cBuffer[2])) & battery_low_limit;  
     d40:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <battery_low_limit+0x1>
     d44:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <battery_low_limit>
    i2cBuffer[2] = temp;
     d48:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <bat_limit_loaded>
     d50:	08 95       	ret

00000d52 <fnBatDoneChrg>:

// I2C command for Battery charge done limit (uint16_t)
void fnBatDoneChrg(uint8_t* i2cBuffer)
{
    // battery_high_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_high_limit>>8) & 0xFF;
     d52:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <battery_high_limit+0x1>
    battery_high_limit = 0x00FF & battery_high_limit; // mask out the old value
    battery_high_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_high_limit; // place new value in high byte
     d56:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <battery_high_limit+0x1>
     d5a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <battery_high_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d5e:	fc 01       	movw	r30, r24
     d60:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_high_limit & 0xFF;
     d62:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <battery_high_limit>
    battery_high_limit = 0xFFFFFF00 & battery_high_limit;
    battery_high_limit = ((uint32_t) (i2cBuffer[2])) & battery_high_limit;  
     d66:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <battery_high_limit+0x1>
     d6a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <battery_high_limit>
    i2cBuffer[2] = temp;
     d6e:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <bat_limit_loaded>
     d76:	08 95       	ret

00000d78 <fnRdBatChrgTime>:
}

// I2C command to read battery charging time while doing pwm e.g., absorption time
void fnRdBatChrgTime(uint8_t* i2cBuffer)
{
     d78:	fc 01       	movw	r30, r24
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (alt_pwm_accum_charge_time>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     d7a:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <alt_pwm_accum_charge_time+0x3>
     d7e:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (alt_pwm_accum_charge_time>>16) & 0xFF;
     d80:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <alt_pwm_accum_charge_time+0x2>
     d84:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (alt_pwm_accum_charge_time>>8) & 0xFF;
     d86:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <alt_pwm_accum_charge_time+0x1>
     d8a:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  alt_pwm_accum_charge_time & 0xFF; // low byte. Again Mask should optimize out
     d8c:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <alt_pwm_accum_charge_time>
     d90:	84 83       	std	Z+4, r24	; 0x04
     d92:	08 95       	ret

00000d94 <fnMorningThreshold>:
}

// I2C command for day-night Morning Threshold (uint16_t)
void fnMorningThreshold(uint8_t* i2cBuffer)
{
     d94:	fc 01       	movw	r30, r24
    // daynight_morning_threshold is a uint16_t e.g., two bytes
    uint16_t old = daynight_morning_threshold;
     d96:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <daynight_morning_threshold>
     d9a:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <daynight_morning_threshold+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     d9e:	21 81       	ldd	r18, Z+1	; 0x01
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	32 2f       	mov	r19, r18
     da4:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     da6:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     da8:	92 81       	ldd	r25, Z+2	; 0x02
     daa:	29 0f       	add	r18, r25
     dac:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     dae:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    daynight_morning_threshold = new;
     db0:	30 93 9f 03 	sts	0x039F, r19	; 0x80039f <daynight_morning_threshold+0x1>
     db4:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <daynight_morning_threshold>
    
    daynight_values_loaded = DAYNIGHT_MORNING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <daynight_values_loaded>
     dbe:	08 95       	ret

00000dc0 <fnEveningThreshold>:
}

// I2C command for day-night Evening Threshold (uint16_t)
void fnEveningThreshold(uint8_t* i2cBuffer)
{
     dc0:	fc 01       	movw	r30, r24
    // daynight_evening_threshold is a uint16_t e.g., two bytes
    uint16_t old = daynight_evening_threshold;
     dc2:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <daynight_evening_threshold>
     dc6:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <daynight_evening_threshold+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     dca:	21 81       	ldd	r18, Z+1	; 0x01
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	32 2f       	mov	r19, r18
     dd0:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     dd2:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     dd4:	92 81       	ldd	r25, Z+2	; 0x02
     dd6:	29 0f       	add	r18, r25
     dd8:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     dda:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    daynight_evening_threshold = new;
     ddc:	30 93 a2 03 	sts	0x03A2, r19	; 0x8003a2 <daynight_evening_threshold+0x1>
     de0:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <daynight_evening_threshold>

    daynight_values_loaded = DAYNIGHT_EVENING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <daynight_values_loaded>
     dea:	08 95       	ret

00000dec <fnDayNightState>:
// I2C command to read Day-Night state. It is one byte,
// the low nimmble has Day-Night state, the high nimmble helps tell if start of day (bit 6) or night (bit 7)
// bit 4 set from master will clear bits 6 & 7 (readback depends on if bit 5 is set)
// bit 5 set from master will include bits 6 & 7 in readback otherwise only only the Day-Night state is in readback
void fnDayNightState(uint8_t* i2cBuffer)
{ 
     dec:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] & (1<<4) )
     dee:	21 81       	ldd	r18, Z+1	; 0x01
     df0:	24 ff       	sbrs	r18, 4
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <fnDayNightState+0x12>
    {
        daynight_state &= ~( (1<<6) | (1<<7) );  // clear the day and night work bits
     df4:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
     df8:	8f 73       	andi	r24, 0x3F	; 63
     dfa:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_state>
     dfe:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <daynight_state>
    }
    if (i2cBuffer[1] & (1<<5) ) 
     e02:	25 ff       	sbrs	r18, 5
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <fnDayNightState+0x1e>
    {
        i2cBuffer[1] = daynight_state & ~( (1<<4) | (1<<5) );  // return bits mask is 0b11001111
     e06:	9f 7c       	andi	r25, 0xCF	; 207
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <fnDayNightState+0x20>
    }
    else
    {
        i2cBuffer[1] = daynight_state & ~( (1<<7) | (1<<6) | (1<<5) | (1<<4) );  // return bits mask is 0b00001111
     e0a:	9f 70       	andi	r25, 0x0F	; 15
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	08 95       	ret

00000e10 <fnRdTimedAccumAltI>:
    i2cBuffer[2] =  adc_buffer & 0xFF; 
}

// I2C command to read timed accumulation of analog channel ALT_I
void fnRdTimedAccumAltI(uint8_t* i2cBuffer)
{
     e10:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_alt_ti>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     e12:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <accumulate_alt_ti+0x3>
     e16:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_alt_ti>>16) & 0xFF;
     e18:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <accumulate_alt_ti+0x2>
     e1c:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_alt_ti>>8) & 0xFF;
     e1e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <accumulate_alt_ti+0x1>
     e22:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_alt_ti & 0xFF; // low byte. Again Mask should optimize out
     e24:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <accumulate_alt_ti>
     e28:	84 83       	std	Z+4, r24	; 0x04
     e2a:	08 95       	ret

00000e2c <fnRdTimedAccumPwrI>:
}

// I2C command to read timed accumulation of analog channel PWR_I
void fnRdTimedAccumPwrI(uint8_t* i2cBuffer)
{
     e2c:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_pwr_ti>>24) & 0xFF;
     e2e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <accumulate_pwr_ti+0x3>
     e32:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_pwr_ti>>16) & 0xFF;
     e34:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <accumulate_pwr_ti+0x2>
     e38:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_pwr_ti>>8) & 0xFF;
     e3a:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <accumulate_pwr_ti+0x1>
     e3e:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_pwr_ti & 0xFF;
     e40:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <accumulate_pwr_ti>
     e44:	84 83       	std	Z+4, r24	; 0x04
     e46:	08 95       	ret

00000e48 <fnAnalogRefExternAVCC>:
// I2C command for Analog referance EXTERNAL_AVCC
// swap the I2C buffer with the ref_extern_avcc_uV in use
// set ref_loaded so main loop will try to save it to EEPROM
// the main loop will reload EEPROM or default value if new is out of range
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_extern_avcc_uV;
     e52:	c0 91 83 03 	lds	r28, 0x0383	; 0x800383 <ref_extern_avcc_uV>
     e56:	d0 91 84 03 	lds	r29, 0x0384	; 0x800384 <ref_extern_avcc_uV+0x1>
     e5a:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <ref_extern_avcc_uV+0x2>
     e5e:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <ref_extern_avcc_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     e62:	41 81       	ldd	r20, Z+1	; 0x01
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	34 2f       	mov	r19, r20
     e6c:	22 27       	eor	r18, r18
     e6e:	11 27       	eor	r17, r17
     e70:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     e72:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     e74:	42 81       	ldd	r20, Z+2	; 0x02
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	ba 01       	movw	r22, r20
     e7e:	55 27       	eor	r21, r21
     e80:	44 27       	eor	r20, r20
     e82:	40 0f       	add	r20, r16
     e84:	51 1f       	adc	r21, r17
     e86:	62 1f       	adc	r22, r18
     e88:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     e8a:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ba 2f       	mov	r27, r26
     e96:	a9 2f       	mov	r26, r25
     e98:	98 2f       	mov	r25, r24
     e9a:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     e9c:	d3 83       	std	Z+3, r29	; 0x03
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	42 0f       	add	r20, r18
     ea2:	51 1d       	adc	r21, r1
     ea4:	61 1d       	adc	r22, r1
     ea6:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     ea8:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_extern_avcc_uV = new;
     eaa:	84 0f       	add	r24, r20
     eac:	95 1f       	adc	r25, r21
     eae:	a6 1f       	adc	r26, r22
     eb0:	b7 1f       	adc	r27, r23
     eb2:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <ref_extern_avcc_uV>
     eb6:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <ref_extern_avcc_uV+0x1>
     eba:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <ref_extern_avcc_uV+0x2>
     ebe:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <ref_extern_avcc_uV+0x3>

    ref_loaded = REF_AVCC_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_loaded>
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <fnAnalogRefIntern1V1>:

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_intern_1v1_uV;
     edc:	c0 91 87 03 	lds	r28, 0x0387	; 0x800387 <ref_intern_1v1_uV>
     ee0:	d0 91 88 03 	lds	r29, 0x0388	; 0x800388 <ref_intern_1v1_uV+0x1>
     ee4:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <ref_intern_1v1_uV+0x2>
     ee8:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <ref_intern_1v1_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     eec:	41 81       	ldd	r20, Z+1	; 0x01
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	34 2f       	mov	r19, r20
     ef6:	22 27       	eor	r18, r18
     ef8:	11 27       	eor	r17, r17
     efa:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     efc:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     efe:	42 81       	ldd	r20, Z+2	; 0x02
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	ba 01       	movw	r22, r20
     f08:	55 27       	eor	r21, r21
     f0a:	44 27       	eor	r20, r20
     f0c:	40 0f       	add	r20, r16
     f0e:	51 1f       	adc	r21, r17
     f10:	62 1f       	adc	r22, r18
     f12:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     f14:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     f16:	83 81       	ldd	r24, Z+3	; 0x03
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ba 2f       	mov	r27, r26
     f20:	a9 2f       	mov	r26, r25
     f22:	98 2f       	mov	r25, r24
     f24:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     f26:	d3 83       	std	Z+3, r29	; 0x03
     f28:	24 81       	ldd	r18, Z+4	; 0x04
     f2a:	42 0f       	add	r20, r18
     f2c:	51 1d       	adc	r21, r1
     f2e:	61 1d       	adc	r22, r1
     f30:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     f32:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_intern_1v1_uV = new;
     f34:	84 0f       	add	r24, r20
     f36:	95 1f       	adc	r25, r21
     f38:	a6 1f       	adc	r26, r22
     f3a:	b7 1f       	adc	r27, r23
     f3c:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <ref_intern_1v1_uV>
     f40:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <ref_intern_1v1_uV+0x1>
     f44:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <ref_intern_1v1_uV+0x2>
     f48:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <ref_intern_1v1_uV+0x3>
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_loaded>
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <fnMorningDebounce>:
    }
}

// I2C command for day-night morning debounce time (unsigned long)
void fnMorningDebounce(uint8_t* i2cBuffer)
{
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	fc 01       	movw	r30, r24
    // daynight_morning_debounce is a unsigned long and has four bytes
    uint32_t old = daynight_morning_debounce;
     f66:	c0 91 a3 03 	lds	r28, 0x03A3	; 0x8003a3 <daynight_morning_debounce>
     f6a:	d0 91 a4 03 	lds	r29, 0x03A4	; 0x8003a4 <daynight_morning_debounce+0x1>
     f6e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <daynight_morning_debounce+0x2>
     f72:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <daynight_morning_debounce+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     f76:	41 81       	ldd	r20, Z+1	; 0x01
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	34 2f       	mov	r19, r20
     f80:	22 27       	eor	r18, r18
     f82:	11 27       	eor	r17, r17
     f84:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     f86:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     f88:	42 81       	ldd	r20, Z+2	; 0x02
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	ba 01       	movw	r22, r20
     f92:	55 27       	eor	r21, r21
     f94:	44 27       	eor	r20, r20
     f96:	40 0f       	add	r20, r16
     f98:	51 1f       	adc	r21, r17
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     f9e:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     fa0:	83 81       	ldd	r24, Z+3	; 0x03
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ba 2f       	mov	r27, r26
     faa:	a9 2f       	mov	r26, r25
     fac:	98 2f       	mov	r25, r24
     fae:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     fb0:	d3 83       	std	Z+3, r29	; 0x03
     fb2:	24 81       	ldd	r18, Z+4	; 0x04
     fb4:	42 0f       	add	r20, r18
     fb6:	51 1d       	adc	r21, r1
     fb8:	61 1d       	adc	r22, r1
     fba:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     fbc:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    daynight_morning_debounce = new;
     fbe:	84 0f       	add	r24, r20
     fc0:	95 1f       	adc	r25, r21
     fc2:	a6 1f       	adc	r26, r22
     fc4:	b7 1f       	adc	r27, r23
     fc6:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <daynight_morning_debounce>
     fca:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <daynight_morning_debounce+0x1>
     fce:	a0 93 a5 03 	sts	0x03A5, r26	; 0x8003a5 <daynight_morning_debounce+0x2>
     fd2:	b0 93 a6 03 	sts	0x03A6, r27	; 0x8003a6 <daynight_morning_debounce+0x3>

    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <daynight_values_loaded>
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <fnEveningDebounce>:

// I2C command for day-night evening debounce time (unsigned long)
void fnEveningDebounce(uint8_t* i2cBuffer)
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	fc 01       	movw	r30, r24
    // daynight_evening_debounce is a unsigned long and has four bytes
    uint32_t old = daynight_evening_debounce;
     ff0:	c0 91 9a 03 	lds	r28, 0x039A	; 0x80039a <daynight_evening_debounce>
     ff4:	d0 91 9b 03 	lds	r29, 0x039B	; 0x80039b <daynight_evening_debounce+0x1>
     ff8:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <daynight_evening_debounce+0x2>
     ffc:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <daynight_evening_debounce+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
    1000:	41 81       	ldd	r20, Z+1	; 0x01
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	34 2f       	mov	r19, r20
    100a:	22 27       	eor	r18, r18
    100c:	11 27       	eor	r17, r17
    100e:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
    1010:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
    1012:	42 81       	ldd	r20, Z+2	; 0x02
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	ba 01       	movw	r22, r20
    101c:	55 27       	eor	r21, r21
    101e:	44 27       	eor	r20, r20
    1020:	40 0f       	add	r20, r16
    1022:	51 1f       	adc	r21, r17
    1024:	62 1f       	adc	r22, r18
    1026:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
    1028:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
    102a:	83 81       	ldd	r24, Z+3	; 0x03
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ba 2f       	mov	r27, r26
    1034:	a9 2f       	mov	r26, r25
    1036:	98 2f       	mov	r25, r24
    1038:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
    103a:	d3 83       	std	Z+3, r29	; 0x03
    103c:	24 81       	ldd	r18, Z+4	; 0x04
    103e:	42 0f       	add	r20, r18
    1040:	51 1d       	adc	r21, r1
    1042:	61 1d       	adc	r22, r1
    1044:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
    1046:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    daynight_evening_debounce = new;
    1048:	84 0f       	add	r24, r20
    104a:	95 1f       	adc	r25, r21
    104c:	a6 1f       	adc	r26, r22
    104e:	b7 1f       	adc	r27, r23
    1050:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <daynight_evening_debounce>
    1054:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <daynight_evening_debounce+0x1>
    1058:	a0 93 9c 03 	sts	0x039C, r26	; 0x80039c <daynight_evening_debounce+0x2>
    105c:	b0 93 9d 03 	sts	0x039D, r27	; 0x80039d <daynight_evening_debounce+0x3>

    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <daynight_values_loaded>
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <fnNull>:
    i2cBuffer[4] =  ( (0x000000FFUL & now) );
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
    1070:	08 95       	ret

00001072 <fnMillis>:
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
}

// I2C command to read millis time
void fnMillis(uint8_t* i2cBuffer)
{
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    unsigned long now = millis();
    1078:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    // there are four bytes in an unsigned long
    i2cBuffer[1] = ( (0xFF000000UL & now) >>24 ); 
    107c:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  ( (0x00FF0000UL & now) >>16 ); 
    107e:	8a 83       	std	Y+2, r24	; 0x02
    i2cBuffer[3] =  ( (0x0000FF00UL & now) >>8 ); 
    1080:	7b 83       	std	Y+3, r23	; 0x03
    i2cBuffer[4] =  ( (0x000000FFUL & now) );
    1082:	6c 83       	std	Y+4, r22	; 0x04
}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <fnRdAdcAltI>:
/********* POWER MANAGER ***********
  *  for ALT_I, ALT_V, PWR_I, PWR_V reading     */

// I2C command to read analog channel 0
void fnRdAdcAltI(uint8_t* i2cBuffer)
{
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_I);
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
    1096:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; // low byte. Again Mask should optimize out
    1098:	8a 83       	std	Y+2, r24	; 0x02
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <fnRdAdcAltV>:

// I2C command to read analog channel 1
void fnRdAdcAltV(uint8_t* i2cBuffer)
{
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_V);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    10ac:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
    10ae:	8a 83       	std	Y+2, r24	; 0x02
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <fnRdAdcPwrI>:

// I2C command to read analog channel 6
void fnRdAdcPwrI(uint8_t* i2cBuffer)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_I);
    10bc:	86 e0       	ldi	r24, 0x06	; 6
    10be:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    10c2:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
    10c4:	8a 83       	std	Y+2, r24	; 0x02
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <fnRdAdcPwrV>:

// I2C command to read analog channel 7
void fnRdAdcPwrV(uint8_t* i2cBuffer)
{
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_V);
    10d2:	87 e0       	ldi	r24, 0x07	; 7
    10d4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    10d8:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; 
    10da:	8a 83       	std	Y+2, r24	; 0x02
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    if (test_mode)
    10fc:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <test_mode>
    1100:	ee 23       	and	r30, r30
    1102:	09 f4       	brne	.+2      	; 0x1106 <fnRdXcvrCntlInTestMode+0x24>
    1104:	55 c0       	rjmp	.+170    	; 0x11b0 <fnRdXcvrCntlInTestMode+0xce>
    1106:	e9 b1       	in	r30, 0x09	; 9
    1108:	b9 b1       	in	r27, 0x09	; 9
    110a:	f6 b1       	in	r31, 0x06	; 6
    110c:	79 b0       	in	r7, 0x09	; 9
    110e:	a9 b0       	in	r10, 0x09	; 9
    1110:	09 b1       	in	r16, 0x09	; 9
    1112:	b9 b0       	in	r11, 0x09	; 9
    1114:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	00 0f       	add	r16, r16
    111a:	01 2f       	mov	r16, r17
    111c:	00 1f       	adc	r16, r16
    111e:	11 0b       	sbc	r17, r17
    1120:	00 0f       	add	r16, r16
    1122:	11 1f       	adc	r17, r17
    1124:	00 0f       	add	r16, r16
    1126:	11 1f       	adc	r17, r17
    1128:	c3 fb       	bst	r28, 3
    112a:	cc 27       	eor	r28, r28
    112c:	c0 f9       	bld	r28, 0
    112e:	ac 2f       	mov	r26, r28
    1130:	a0 2b       	or	r26, r16
    1132:	e3 fb       	bst	r30, 3
    1134:	88 24       	eor	r8, r8
    1136:	80 f8       	bld	r8, 0
    1138:	91 2c       	mov	r9, r1
    113a:	e4 01       	movw	r28, r8
    113c:	d6 95       	lsr	r29
    113e:	dc 2f       	mov	r29, r28
    1140:	cc 27       	eor	r28, r28
    1142:	d7 95       	ror	r29
    1144:	c7 95       	ror	r28
    1146:	ca 2b       	or	r28, r26
    1148:	b2 fb       	bst	r27, 2
    114a:	cc 24       	eor	r12, r12
    114c:	c0 f8       	bld	r12, 0
    114e:	d1 2c       	mov	r13, r1
    1150:	d6 01       	movw	r26, r12
    1152:	56 e0       	ldi	r21, 0x06	; 6
    1154:	aa 0f       	add	r26, r26
    1156:	bb 1f       	adc	r27, r27
    1158:	5a 95       	dec	r21
    115a:	e1 f7       	brne	.-8      	; 0x1154 <fnRdXcvrCntlInTestMode+0x72>
    115c:	ac 2b       	or	r26, r28
    115e:	f2 fb       	bst	r31, 2
    1160:	ee 24       	eor	r14, r14
    1162:	e0 f8       	bld	r14, 0
    1164:	f1 2c       	mov	r15, r1
    1166:	f7 01       	movw	r30, r14
    1168:	65 e0       	ldi	r22, 0x05	; 5
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	6a 95       	dec	r22
    1170:	e1 f7       	brne	.-8      	; 0x116a <fnRdXcvrCntlInTestMode+0x88>
    1172:	ea 2b       	or	r30, r26
    1174:	75 fa       	bst	r7, 5
    1176:	66 27       	eor	r22, r22
    1178:	60 f9       	bld	r22, 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	f4 e0       	ldi	r31, 0x04	; 4
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	fa 95       	dec	r31
    1184:	e1 f7       	brne	.-8      	; 0x117e <fnRdXcvrCntlInTestMode+0x9c>
    1186:	6e 2b       	or	r22, r30
    1188:	a6 fa       	bst	r10, 6
    118a:	44 27       	eor	r20, r20
    118c:	40 f9       	bld	r20, 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	a3 e0       	ldi	r26, 0x03	; 3
    1192:	44 0f       	add	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	aa 95       	dec	r26
    1198:	e1 f7       	brne	.-8      	; 0x1192 <fnRdXcvrCntlInTestMode+0xb0>
    119a:	46 2b       	or	r20, r22
    119c:	b4 fa       	bst	r11, 4
    119e:	22 27       	eor	r18, r18
    11a0:	20 f9       	bld	r18, 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	24 2b       	or	r18, r20
    11aa:	fc 01       	movw	r30, r24
    11ac:	21 83       	std	Z+1, r18	; 0x01
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    11b0:	fc 01       	movw	r30, r24
    11b2:	11 82       	std	Z+1, r1	; 0x01
    }
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	8f 90       	pop	r8
    11cc:	7f 90       	pop	r7
    11ce:	08 95       	ret

000011d0 <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	fc 01       	movw	r30, r24
    if (test_mode)
    11d6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <fnWtXcvrCntlInTestMode+0x10>
    11de:	6e c0       	rjmp	.+220    	; 0x12bc <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	88 1f       	adc	r24, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11e8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11ea:	f8 94       	cli
    {
        if (value_for_bit) 
    11ec:	88 23       	and	r24, r24
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    11f0:	5b 9a       	sbi	0x0b, 3	; 11
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11f4:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11f6:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    11f8:	81 81       	ldd	r24, Z+1	; 0x01
    11fa:	86 fb       	bst	r24, 6
    11fc:	88 27       	eor	r24, r24
    11fe:	80 f9       	bld	r24, 0
    1200:	c8 2f       	mov	r28, r24
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1206:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1208:	f8 94       	cli
    {
        if (value_for_bit) 
    120a:	cd 2b       	or	r28, r29
    120c:	11 f0       	breq	.+4      	; 0x1212 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    120e:	5a 9a       	sbi	0x0b, 2	; 11
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1212:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1214:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    1216:	81 81       	ldd	r24, Z+1	; 0x01
    1218:	85 fb       	bst	r24, 5
    121a:	aa 27       	eor	r26, r26
    121c:	a0 f9       	bld	r26, 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1220:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1222:	f8 94       	cli
    {
        if (value_for_bit) 
    1224:	ab 2b       	or	r26, r27
    1226:	11 f0       	breq	.+4      	; 0x122c <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    1228:	42 9a       	sbi	0x08, 2	; 8
    122a:	01 c0       	rjmp	.+2      	; 0x122e <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    122c:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    122e:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    1230:	81 81       	ldd	r24, Z+1	; 0x01
    1232:	84 fb       	bst	r24, 4
    1234:	66 27       	eor	r22, r22
    1236:	60 f9       	bld	r22, 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    123a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    123c:	f8 94       	cli
    {
        if (value_for_bit) 
    123e:	67 2b       	or	r22, r23
    1240:	11 f0       	breq	.+4      	; 0x1246 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    1242:	5d 9a       	sbi	0x0b, 5	; 11
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1246:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1248:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    124a:	81 81       	ldd	r24, Z+1	; 0x01
    124c:	83 fb       	bst	r24, 3
    124e:	44 27       	eor	r20, r20
    1250:	40 f9       	bld	r20, 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1254:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1256:	f8 94       	cli
    {
        if (value_for_bit) 
    1258:	45 2b       	or	r20, r21
    125a:	11 f0       	breq	.+4      	; 0x1260 <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    125c:	5e 9a       	sbi	0x0b, 6	; 11
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1260:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1262:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    1264:	81 81       	ldd	r24, Z+1	; 0x01
    1266:	82 ff       	sbrs	r24, 2
    1268:	11 c0       	rjmp	.+34     	; 0x128c <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    126a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    126e:	87 7e       	andi	r24, 0xE7	; 231
    1270:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1274:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1276:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1278:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    127a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    127c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    127e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1280:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1282:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1284:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1286:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1288:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    128a:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	81 fb       	bst	r24, 1
    1290:	22 27       	eor	r18, r18
    1292:	20 f9       	bld	r18, 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1296:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1298:	f8 94       	cli
    {
        if (value_for_bit) 
    129a:	23 2b       	or	r18, r19
    129c:	11 f0       	breq	.+4      	; 0x12a2 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    129e:	5c 9a       	sbi	0x0b, 4	; 11
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12a2:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12a4:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    12a6:	81 81       	ldd	r24, Z+1	; 0x01
    12a8:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12aa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ac:	f8 94       	cli
    {
        if (value_for_bit) 
    12ae:	88 23       	and	r24, r24
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    12b2:	43 9a       	sbi	0x08, 3	; 8
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12b6:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12b8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    12bc:	11 82       	std	Z+1, r1	; 0x01
    }
}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    12c4:	fc 01       	movw	r30, r24
    12c6:	81 81       	ldd	r24, Z+1	; 0x01
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	f1 f4       	brne	.+60     	; 0x1308 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12cc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ce:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12d0:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12d2:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12d6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12d8:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12da:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12dc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12de:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12e0:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12e2:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12e6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12e8:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12ea:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    12ec:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    12f0:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
        shutdown_started_at = millis();
    12f4:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    12f8:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
    12fc:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
    1300:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
    1304:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
    1308:	08 95       	ret

0000130a <fnRdMgrAddr>:
  *    all managers lockout serial except the address to bootload and the host */

// I2C command to access manager address and set RPU_NORMAL_MODE
// if given a valid address (ASCII 48..122) it will save that rather than setting normal mode.
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
    130a:	cf 93       	push	r28
    130c:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
    1310:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
    1314:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
    1316:	80 ed       	ldi	r24, 0xD0	; 208
    1318:	89 0f       	add	r24, r25
    131a:	8b 34       	cpi	r24, 0x4B	; 75
    131c:	30 f4       	brcc	.+12     	; 0x132a <fnRdMgrAddr+0x20>
    {
        rpu_address = tmp_addr;
    131e:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <rpu_address>
        write_rpu_address_to_eeprom = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
        return;
    1328:	9d c0       	rjmp	.+314    	; 0x1464 <fnRdMgrAddr+0x15a>
    }
    local_mcu_is_rpu_aware =1; 
    132a:	c1 e0       	ldi	r28, 0x01	; 1
    132c:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <local_mcu_is_rpu_aware>
    // end the local mcu lockout. 
    if (localhost_active) 
    1330:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
    1334:	88 23       	and	r24, r24
    1336:	b1 f1       	breq	.+108    	; 0x13a4 <fnRdMgrAddr+0x9a>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
    1338:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    133c:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
    1340:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
    1344:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
    1348:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
    134c:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1350:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1354:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1358:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	20 95       	com	r18
    1360:	30 95       	com	r19
    1362:	2a 70       	andi	r18, 0x0A	; 10
    1364:	33 27       	eor	r19, r19
    1366:	64 e0       	ldi	r22, 0x04	; 4
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	6a 95       	dec	r22
    136e:	e1 f7       	brne	.-8      	; 0x1368 <fnRdMgrAddr+0x5e>
    1370:	89 2f       	mov	r24, r25
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	80 95       	com	r24
    1376:	90 95       	com	r25
    1378:	80 75       	andi	r24, 0x50	; 80
    137a:	99 27       	eor	r25, r25
    137c:	74 e0       	ldi	r23, 0x04	; 4
    137e:	95 95       	asr	r25
    1380:	87 95       	ror	r24
    1382:	7a 95       	dec	r23
    1384:	e1 f7       	brne	.-8      	; 0x137e <fnRdMgrAddr+0x74>
    1386:	82 2b       	or	r24, r18
    1388:	93 2b       	or	r25, r19
    138a:	9f 93       	push	r25
    138c:	8f 93       	push	r24
    138e:	1f 92       	push	r1
    1390:	4f 93       	push	r20
    1392:	86 e1       	ldi	r24, 0x16	; 22
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	9f 93       	push	r25
    1398:	8f 93       	push	r24
    139a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
    139e:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
    13a2:	39 c0       	rjmp	.+114    	; 0x1416 <fnRdMgrAddr+0x10c>
    }
    else 
        if (bootloader_started)
    13a4:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
    13a8:	88 23       	and	r24, r24
    13aa:	e1 f1       	breq	.+120    	; 0x1424 <fnRdMgrAddr+0x11a>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
    13ac:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    13b0:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
    13b4:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
    13b8:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
    13bc:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
    13c0:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    13c4:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    13c8:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    13cc:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	20 95       	com	r18
    13d4:	30 95       	com	r19
    13d6:	2a 70       	andi	r18, 0x0A	; 10
    13d8:	33 27       	eor	r19, r19
    13da:	84 e0       	ldi	r24, 0x04	; 4
    13dc:	22 0f       	add	r18, r18
    13de:	33 1f       	adc	r19, r19
    13e0:	8a 95       	dec	r24
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <fnRdMgrAddr+0xd2>
    13e4:	89 2f       	mov	r24, r25
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	80 95       	com	r24
    13ea:	90 95       	com	r25
    13ec:	80 75       	andi	r24, 0x50	; 80
    13ee:	99 27       	eor	r25, r25
    13f0:	54 e0       	ldi	r21, 0x04	; 4
    13f2:	95 95       	asr	r25
    13f4:	87 95       	ror	r24
    13f6:	5a 95       	dec	r21
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <fnRdMgrAddr+0xe8>
    13fa:	82 2b       	or	r24, r18
    13fc:	93 2b       	or	r25, r19
    13fe:	9f 93       	push	r25
    1400:	8f 93       	push	r24
    1402:	1f 92       	push	r1
    1404:	4f 93       	push	r20
    1406:	86 e1       	ldi	r24, 0x16	; 22
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	9f 93       	push	r25
    140c:	8f 93       	push	r24
    140e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
    1412:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	20 c0       	rjmp	.+64     	; 0x1464 <fnRdMgrAddr+0x15a>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
    1424:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	80 5c       	subi	r24, 0xC0	; 192
    142e:	94 4d       	sbci	r25, 0xD4	; 212
    1430:	a1 40       	sbci	r26, 0x01	; 1
    1432:	b1 09       	sbc	r27, r1
    1434:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
    1438:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
    143c:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
    1440:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
    1444:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	88 53       	subi	r24, 0x38	; 56
    144e:	91 4c       	sbci	r25, 0xC1	; 193
    1450:	a1 40       	sbci	r26, 0x01	; 1
    1452:	b1 09       	sbc	r27, r1
    1454:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
    1458:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
    145c:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
    1460:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
        }
        
}
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    1468:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    146a:	fc 01       	movw	r30, r24
    146c:	c1 81       	ldd	r28, Z+1	; 0x01
    146e:	c1 30       	cpi	r28, 0x01	; 1
    1470:	09 f0       	breq	.+2      	; 0x1474 <fnWtArduinMode+0xc>
    1472:	45 c0       	rjmp	.+138    	; 0x14fe <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    1474:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode_started>
    1478:	21 11       	cpse	r18, r1
    147a:	41 c0       	rjmp	.+130    	; 0x14fe <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    147c:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    1480:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
    1484:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
    1488:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
    148c:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1496:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    149a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    149e:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	20 95       	com	r18
    14a6:	30 95       	com	r19
    14a8:	2a 70       	andi	r18, 0x0A	; 10
    14aa:	33 27       	eor	r19, r19
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	8a 95       	dec	r24
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <fnWtArduinMode+0x46>
    14b6:	89 2f       	mov	r24, r25
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	80 95       	com	r24
    14bc:	90 95       	com	r25
    14be:	80 75       	andi	r24, 0x50	; 80
    14c0:	99 27       	eor	r25, r25
    14c2:	54 e0       	ldi	r21, 0x04	; 4
    14c4:	95 95       	asr	r25
    14c6:	87 95       	ror	r24
    14c8:	5a 95       	dec	r21
    14ca:	e1 f7       	brne	.-8      	; 0x14c4 <fnWtArduinMode+0x5c>
    14cc:	82 2b       	or	r24, r18
    14ce:	93 2b       	or	r25, r19
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	1f 92       	push	r1
    14d6:	4f 93       	push	r20
    14d8:	86 e1       	ldi	r24, 0x16	; 22
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	9f 93       	push	r25
    14de:	8f 93       	push	r24
    14e0:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    14e4:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    14e8:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    14ec:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    14fe:	fc 01       	movw	r30, r24
    1500:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    1506:	cf 93       	push	r28
    1508:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    150a:	c1 81       	ldd	r28, Z+1	; 0x01
    150c:	c1 30       	cpi	r28, 0x01	; 1
    150e:	09 f0       	breq	.+2      	; 0x1512 <fnStartTestMode+0xc>
    1510:	48 c0       	rjmp	.+144    	; 0x15a2 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    1512:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    1516:	81 11       	cpse	r24, r1
    1518:	42 c0       	rjmp	.+132    	; 0x159e <fnStartTestMode+0x98>
    151a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    151e:	81 11       	cpse	r24, r1
    1520:	3e c0       	rjmp	.+124    	; 0x159e <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    1522:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    1526:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
    152a:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
    152e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
    1532:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1536:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    153a:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    153e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1542:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	20 95       	com	r18
    154a:	30 95       	com	r19
    154c:	2a 70       	andi	r18, 0x0A	; 10
    154e:	33 27       	eor	r19, r19
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	8a 95       	dec	r24
    1558:	e1 f7       	brne	.-8      	; 0x1552 <fnStartTestMode+0x4c>
    155a:	89 2f       	mov	r24, r25
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	80 75       	andi	r24, 0x50	; 80
    1564:	99 27       	eor	r25, r25
    1566:	54 e0       	ldi	r21, 0x04	; 4
    1568:	95 95       	asr	r25
    156a:	87 95       	ror	r24
    156c:	5a 95       	dec	r21
    156e:	e1 f7       	brne	.-8      	; 0x1568 <fnStartTestMode+0x62>
    1570:	82 2b       	or	r24, r18
    1572:	93 2b       	or	r25, r19
    1574:	9f 93       	push	r25
    1576:	8f 93       	push	r24
    1578:	1f 92       	push	r1
    157a:	4f 93       	push	r20
    157c:	86 e1       	ldi	r24, 0x16	; 22
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	9f 93       	push	r25
    1582:	8f 93       	push	r24
    1584:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1588:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    158c:	c0 93 ed 02 	sts	0x02ED, r28	; 0x8002ed <test_mode_started>
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	81 83       	std	Z+1, r24	; 0x01
    }
}
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    15b2:	19 81       	ldd	r17, Y+1	; 0x01
    15b4:	11 30       	cpi	r17, 0x01	; 1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <fnEndTestMode+0x10>
    15b8:	61 c0       	rjmp	.+194    	; 0x167c <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    15ba:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    15be:	81 11       	cpse	r24, r1
    15c0:	5d c0       	rjmp	.+186    	; 0x167c <fnEndTestMode+0xd2>
    15c2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    15c6:	88 23       	and	r24, r24
    15c8:	09 f4       	brne	.+2      	; 0x15cc <fnEndTestMode+0x22>
    15ca:	58 c0       	rjmp	.+176    	; 0x167c <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    15cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15ce:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    15d0:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15d2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    15d4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15d6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    15d8:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15da:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    15dc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    15e0:	88 61       	ori	r24, 0x18	; 24
    15e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    15e6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15e8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    15ea:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15ec:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    15ee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15f0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    15f2:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    15f4:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    15f6:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    15fa:	60 93 0a 03 	sts	0x030A, r22	; 0x80030a <uart_started_at>
    15fe:	70 93 0b 03 	sts	0x030B, r23	; 0x80030b <uart_started_at+0x1>
    1602:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <uart_started_at+0x2>
    1606:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    160a:	8e ef       	ldi	r24, 0xFE	; 254
    160c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1610:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1614:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
    1618:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	20 95       	com	r18
    1620:	30 95       	com	r19
    1622:	2a 70       	andi	r18, 0x0A	; 10
    1624:	33 27       	eor	r19, r19
    1626:	a9 01       	movw	r20, r18
    1628:	24 e0       	ldi	r18, 0x04	; 4
    162a:	44 0f       	add	r20, r20
    162c:	55 1f       	adc	r21, r21
    162e:	2a 95       	dec	r18
    1630:	e1 f7       	brne	.-8      	; 0x162a <fnEndTestMode+0x80>
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	20 95       	com	r18
    1638:	30 95       	com	r19
    163a:	20 75       	andi	r18, 0x50	; 80
    163c:	33 27       	eor	r19, r19
    163e:	64 e0       	ldi	r22, 0x04	; 4
    1640:	35 95       	asr	r19
    1642:	27 95       	ror	r18
    1644:	6a 95       	dec	r22
    1646:	e1 f7       	brne	.-8      	; 0x1640 <fnEndTestMode+0x96>
    1648:	24 2b       	or	r18, r20
    164a:	35 2b       	or	r19, r21
    164c:	3f 93       	push	r19
    164e:	2f 93       	push	r18
    1650:	1f 92       	push	r1
    1652:	9f 93       	push	r25
    1654:	86 e1       	ldi	r24, 0x16	; 22
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	9f 93       	push	r25
    165a:	8f 93       	push	r24
    165c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1660:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    1664:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    1668:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	01 c0       	rjmp	.+2      	; 0x167e <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    167c:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	08 95       	ret

00001686 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    1686:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	29 2f       	mov	r18, r25
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	26 17       	cp	r18, r22
    1690:	37 07       	cpc	r19, r23
    1692:	54 f4       	brge	.+20     	; 0x16a8 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    1694:	fa 01       	movw	r30, r20
    1696:	e2 0f       	add	r30, r18
    1698:	f3 1f       	adc	r31, r19
    169a:	80 81       	ld	r24, Z
    169c:	f9 01       	movw	r30, r18
    169e:	ee 5e       	subi	r30, 0xEE	; 238
    16a0:	fc 4f       	sbci	r31, 0xFC	; 252
    16a2:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	f1 cf       	rjmp	.-30     	; 0x168a <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    16a8:	90 32       	cpi	r25, 0x20	; 32
    16aa:	20 f4       	brcc	.+8      	; 0x16b4 <receive_i2c_event+0x2e>
    16ac:	f9 01       	movw	r30, r18
    16ae:	ee 5e       	subi	r30, 0xEE	; 238
    16b0:	fc 4f       	sbci	r31, 0xFC	; 252
    16b2:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    16b4:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    16b8:	62 30       	cpi	r22, 0x02	; 2
    16ba:	10 f4       	brcc	.+4      	; 0x16c0 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	0d c0       	rjmp	.+26     	; 0x16da <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    16c0:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <i2c0Buffer>
    16c4:	e8 2f       	mov	r30, r24
    16c6:	e2 95       	swap	r30
    16c8:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    16ca:	e4 30       	cpi	r30, 0x04	; 4
    16cc:	10 f0       	brcs	.+4      	; 0x16d2 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    16ce:	8e ef       	ldi	r24, 0xFE	; 254
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    16d2:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	20 f0       	brcs	.+8      	; 0x16e0 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    16d8:	8d ef       	ldi	r24, 0xFD	; 253
    16da:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    16de:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    16e0:	98 e0       	ldi	r25, 0x08	; 8
    16e2:	e9 9f       	mul	r30, r25
    16e4:	f0 01       	movw	r30, r0
    16e6:	11 24       	eor	r1, r1
    16e8:	e8 0f       	add	r30, r24
    16ea:	f1 1d       	adc	r31, r1
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	e5 5e       	subi	r30, 0xE5	; 229
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
    16f4:	01 90       	ld	r0, Z+
    16f6:	f0 81       	ld	r31, Z
    16f8:	e0 2d       	mov	r30, r0
    16fa:	82 e1       	ldi	r24, 0x12	; 18
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	09 94       	ijmp

00001700 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    1700:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    1704:	82 e1       	ldi	r24, 0x12	; 18
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 c3 14 	call	0x2986	; 0x2986 <twi0_transmit>
    if (return_code != 0)
    170c:	88 23       	and	r24, r24
    170e:	29 f0       	breq	.+10     	; 0x171a <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    1710:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
    1714:	82 70       	andi	r24, 0x02	; 2
    1716:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
    171a:	08 95       	ret

0000171c <fnRdMgrAddrQuietly>:
    171c:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <fnWtMgrAddr>

00001720 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    1720:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <inBytes_to_handle+0x1>
    1724:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    1728:	70 93 55 03 	sts	0x0355, r23	; 0x800355 <smbus_has_numBytes_to_handle+0x1>
    172c:	60 93 54 03 	sts	0x0354, r22	; 0x800354 <smbus_has_numBytes_to_handle>
    1730:	08 95       	ret

00001732 <handle_smbus_receive>:

// twi1.c has been modified, so it has an interleaved buffer that allows  
// the event to put a copy of the pointer where I can use it outside the ISR.
void handle_smbus_receive(void)
{
    if (smbus_has_numBytes_to_handle)
    1732:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <smbus_has_numBytes_to_handle>
    1736:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <smbus_has_numBytes_to_handle+0x1>
    173a:	21 15       	cp	r18, r1
    173c:	31 05       	cpc	r19, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <handle_smbus_receive+0x10>
    1740:	6b c0       	rjmp	.+214    	; 0x1818 <handle_smbus_receive+0xe6>
            {fnRdAdcAltI, fnRdAdcAltV, fnRdAdcPwrI, fnRdAdcPwrV, fnRdTimedAccumAltI, fnRdTimedAccumPwrI, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
            {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
        };

        int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
        smbus_has_numBytes_to_handle = 0; 
    1742:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <smbus_has_numBytes_to_handle+0x1>
    1746:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <smbus_has_numBytes_to_handle>
    174a:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <inBytes_to_handle>
    174e:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <inBytes_to_handle+0x1>
        // read_i2c_block_data has a single command byte in its data set
        // it will write i2c address, the command* byte, and then cause a repeated start
        // followed by the i2c address (again) and then reading** the data
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
    1752:	21 30       	cpi	r18, 0x01	; 1
    1754:	31 05       	cpc	r19, r1
    1756:	11 f0       	breq	.+4      	; 0x175c <handle_smbus_receive+0x2a>
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	23 c0       	rjmp	.+70     	; 0x17a2 <handle_smbus_receive+0x70>
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    175c:	90 81       	ld	r25, Z
    175e:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <smbusBuffer>
    1762:	98 13       	cpse	r25, r24
    1764:	59 c0       	rjmp	.+178    	; 0x1818 <handle_smbus_receive+0xe6>
    1766:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    176a:	81 11       	cpse	r24, r1
    176c:	55 c0       	rjmp	.+170    	; 0x1818 <handle_smbus_receive+0xe6>
            {
                for(i = 0; i < smbusBufferLength; ++i)
    176e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    1772:	a2 e3       	ldi	r26, 0x32	; 50
    1774:	b3 e0       	ldi	r27, 0x03	; 3
    1776:	e6 e5       	ldi	r30, 0x56	; 86
    1778:	f3 e0       	ldi	r31, 0x03	; 3
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	98 17       	cp	r25, r24
    177e:	21 f0       	breq	.+8      	; 0x1788 <handle_smbus_receive+0x56>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
    1780:	2d 91       	ld	r18, X+
    1782:	21 93       	st	Z+, r18
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
            {
                for(i = 0; i < smbusBufferLength; ++i)
    1784:	9f 5f       	subi	r25, 0xFF	; 255
    1786:	fa cf       	rjmp	.-12     	; 0x177c <handle_smbus_receive+0x4a>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
                }
                if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    1788:	80 32       	cpi	r24, 0x20	; 32
    178a:	28 f4       	brcc	.+10     	; 0x1796 <handle_smbus_receive+0x64>
    178c:	e8 2f       	mov	r30, r24
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	ea 5a       	subi	r30, 0xAA	; 170
    1792:	fc 4f       	sbci	r31, 0xFC	; 252
    1794:	11 82       	std	Z+1, r1	; 0x01
                smbus_oldBufferLength = smbusBufferLength;
    1796:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
                transmit_data_ready = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    17a0:	08 95       	ret
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    17a2:	84 2f       	mov	r24, r20
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	82 17       	cp	r24, r18
    17a8:	93 07       	cpc	r25, r19
    17aa:	54 f4       	brge	.+20     	; 0x17c0 <handle_smbus_receive+0x8e>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    17ac:	df 01       	movw	r26, r30
    17ae:	a8 0f       	add	r26, r24
    17b0:	b9 1f       	adc	r27, r25
    17b2:	5c 91       	ld	r21, X
    17b4:	dc 01       	movw	r26, r24
    17b6:	ae 5c       	subi	r26, 0xCE	; 206
    17b8:	bc 4f       	sbci	r27, 0xFC	; 252
    17ba:	5c 93       	st	X, r21
                smbus_oldBufferLength = smbusBufferLength;
                transmit_data_ready = 1;
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    17bc:	4f 5f       	subi	r20, 0xFF	; 255
    17be:	f1 cf       	rjmp	.-30     	; 0x17a2 <handle_smbus_receive+0x70>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
        }
        if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    17c0:	40 32       	cpi	r20, 0x20	; 32
    17c2:	20 f4       	brcc	.+8      	; 0x17cc <handle_smbus_receive+0x9a>
    17c4:	fc 01       	movw	r30, r24
    17c6:	ee 5c       	subi	r30, 0xCE	; 206
    17c8:	fc 4f       	sbci	r31, 0xFC	; 252
    17ca:	11 82       	std	Z+1, r1	; 0x01
        smbusBufferLength = numBytes;
    17cc:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

        // an read_i2c_block_data has a command byte 
        if( !(smbusBufferLength > 0) ) 
    17d0:	21 11       	cpse	r18, r1
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <handle_smbus_receive+0xa6>
        {
            smbusBuffer[0] = 0xFF; // error code for small size.
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <handle_smbus_receive+0xc0>
            return; // not valid, do nothing just echo an error code.
        }

        // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
        uint8_t group;
        group = (smbusBuffer[0] & 0xF0) >> 4;
    17d8:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <smbusBuffer>
    17dc:	e8 2f       	mov	r30, r24
    17de:	e2 95       	swap	r30
    17e0:	ef 70       	andi	r30, 0x0F	; 15
        if(group >= GROUP) 
    17e2:	e4 30       	cpi	r30, 0x04	; 4
    17e4:	10 f0       	brcs	.+4      	; 0x17ea <handle_smbus_receive+0xb8>
        {
            smbusBuffer[0] = 0xFE; // error code for bad group.
    17e6:	8e ef       	ldi	r24, 0xFE	; 254
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <handle_smbus_receive+0xc0>
            return; 
        }

        // mask the command bits (0..3) so they can be used as an index.
        uint8_t command;
        command = smbusBuffer[0] & 0x0F;
    17ea:	8f 70       	andi	r24, 0x0F	; 15
        if(command >= MGR_CMDS) 
    17ec:	88 30       	cpi	r24, 0x08	; 8
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <handle_smbus_receive+0xc6>
        {
            smbusBuffer[0] = 0xFD; // error code for bad command.
    17f0:	8d ef       	ldi	r24, 0xFD	; 253
    17f2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <smbusBuffer>
            return; // not valid, do nothing but echo error code.
    17f6:	08 95       	ret
        }

        // Call the i2c command function and return
        (* pf[group][command])(smbusBuffer);
    17f8:	98 e0       	ldi	r25, 0x08	; 8
    17fa:	e9 9f       	mul	r30, r25
    17fc:	f0 01       	movw	r30, r0
    17fe:	11 24       	eor	r1, r1
    1800:	e8 0f       	add	r30, r24
    1802:	f1 1d       	adc	r31, r1
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	e5 5a       	subi	r30, 0xA5	; 165
    180a:	fe 4f       	sbci	r31, 0xFE	; 254
    180c:	01 90       	ld	r0, Z+
    180e:	f0 81       	ld	r31, Z
    1810:	e0 2d       	mov	r30, r0
    1812:	82 e3       	ldi	r24, 0x32	; 50
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	09 94       	ijmp
    1818:	08 95       	ret

0000181a <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    181a:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    181e:	86 e5       	ldi	r24, 0x56	; 86
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <twi1_transmit>
    transmit_data_ready = 0;
    1826:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    182a:	08 95       	ret

0000182c <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    182c:	cf 93       	push	r28
    if (write_rpu_address_to_eeprom && eeprom_is_ready())
    182e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1832:	88 23       	and	r24, r24
    1834:	21 f1       	breq	.+72     	; 0x187e <save_rpu_addr_state+0x52>
    1836:	f9 99       	sbic	0x1f, 1	; 31
    1838:	22 c0       	rjmp	.+68     	; 0x187e <save_rpu_addr_state+0x52>
    {
        // up to first EE_RPU_IDMAX locations may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    183a:	9f ef       	ldi	r25, 0xFF	; 255
    183c:	98 0f       	add	r25, r24
    183e:	9a 30       	cpi	r25, 0x0A	; 10
    1840:	90 f4       	brcc	.+36     	; 0x1866 <save_rpu_addr_state+0x3a>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	fc 01       	movw	r30, r24
    1846:	ed 54       	subi	r30, 0x4D	; 77
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    184c:	6c 2f       	mov	r22, r28
    184e:	87 96       	adiw	r24, 0x27	; 39
    1850:	0e 94 33 1b 	call	0x3666	; 0x3666 <eeprom_write_byte>
            
            if (value == '\0') 
    1854:	c1 11       	cpse	r28, r1
    1856:	02 c0       	rjmp	.+4      	; 0x185c <save_rpu_addr_state+0x30>
            {
                write_rpu_address_to_eeprom = 11;
    1858:	8b e0       	ldi	r24, 0x0B	; 11
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <save_rpu_addr_state+0x36>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    185c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    1866:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    186a:	8b 30       	cpi	r24, 0x0B	; 11
    186c:	41 f4       	brne	.+16     	; 0x187e <save_rpu_addr_state+0x52>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    186e:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <rpu_address>
    1872:	82 e3       	ldi	r24, 0x32	; 50
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 33 1b 	call	0x3666	; 0x3666 <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    187a:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
        }
    }
}
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	c8 e2       	ldi	r28, 0x28	; 40
    188a:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    188c:	fe 01       	movw	r30, r28
    188e:	e4 57       	subi	r30, 0x74	; 116
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 1f 1b 	call	0x363e	; 0x363e <eeprom_read_byte>
        if (id != ee_id) 
    189a:	18 13       	cpse	r17, r24
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    189e:	11 23       	and	r17, r17
    18a0:	31 f0       	breq	.+12     	; 0x18ae <check_for_eeprom_id+0x2c>
    18a2:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    18a4:	c2 33       	cpi	r28, 0x32	; 50
    18a6:	d1 05       	cpc	r29, r1
    18a8:	89 f7       	brne	.-30     	; 0x188c <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	08 95       	ret

000018b8 <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    18bc:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    18c0:	00 91 7e 03 	lds	r16, 0x037E	; 0x80037e <adc_started_at>
    18c4:	10 91 7f 03 	lds	r17, 0x037F	; 0x80037f <adc_started_at+0x1>
    18c8:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <adc_started_at+0x2>
    18cc:	30 91 81 03 	lds	r19, 0x0381	; 0x800381 <adc_started_at+0x3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	80 1b       	sub	r24, r16
    18d6:	91 0b       	sbc	r25, r17
    18d8:	a2 0b       	sbc	r26, r18
    18da:	b3 0b       	sbc	r27, r19
    18dc:	0b 97       	sbiw	r24, 0x0b	; 11
    18de:	a1 05       	cpc	r26, r1
    18e0:	b1 05       	cpc	r27, r1
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <adc_burst+0x2e>
    18e4:	4c c0       	rjmp	.+152    	; 0x197e <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    18ec:	09 2e       	mov	r0, r25
    18ee:	00 0c       	add	r0, r0
    18f0:	aa 0b       	sbc	r26, r26
    18f2:	bb 0b       	sbc	r27, r27
    18f4:	40 91 76 03 	lds	r20, 0x0376	; 0x800376 <accumulate_alt_ti>
    18f8:	50 91 77 03 	lds	r21, 0x0377	; 0x800377 <accumulate_alt_ti+0x1>
    18fc:	60 91 78 03 	lds	r22, 0x0378	; 0x800378 <accumulate_alt_ti+0x2>
    1900:	70 91 79 03 	lds	r23, 0x0379	; 0x800379 <accumulate_alt_ti+0x3>
    1904:	84 0f       	add	r24, r20
    1906:	95 1f       	adc	r25, r21
    1908:	a6 1f       	adc	r26, r22
    190a:	b7 1f       	adc	r27, r23
    190c:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <accumulate_alt_ti>
    1910:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <accumulate_alt_ti+0x1>
    1914:	a0 93 78 03 	sts	0x0378, r26	; 0x800378 <accumulate_alt_ti+0x2>
    1918:	b0 93 79 03 	sts	0x0379, r27	; 0x800379 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    191c:	86 e0       	ldi	r24, 0x06	; 6
    191e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    1922:	09 2e       	mov	r0, r25
    1924:	00 0c       	add	r0, r0
    1926:	aa 0b       	sbc	r26, r26
    1928:	bb 0b       	sbc	r27, r27
    192a:	40 91 7a 03 	lds	r20, 0x037A	; 0x80037a <accumulate_pwr_ti>
    192e:	50 91 7b 03 	lds	r21, 0x037B	; 0x80037b <accumulate_pwr_ti+0x1>
    1932:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <accumulate_pwr_ti+0x2>
    1936:	70 91 7d 03 	lds	r23, 0x037D	; 0x80037d <accumulate_pwr_ti+0x3>
    193a:	84 0f       	add	r24, r20
    193c:	95 1f       	adc	r25, r21
    193e:	a6 1f       	adc	r26, r22
    1940:	b7 1f       	adc	r27, r23
    1942:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <accumulate_pwr_ti>
    1946:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <accumulate_pwr_ti+0x1>
    194a:	a0 93 7c 03 	sts	0x037C, r26	; 0x80037c <accumulate_pwr_ti+0x2>
    194e:	b0 93 7d 03 	sts	0x037D, r27	; 0x80037d <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 b3 13 	call	0x2766	; 0x2766 <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    1958:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <adc_started_at>
    195c:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <adc_started_at+0x1>
    1960:	a0 91 80 03 	lds	r26, 0x0380	; 0x800380 <adc_started_at+0x2>
    1964:	b0 91 81 03 	lds	r27, 0x0381	; 0x800381 <adc_started_at+0x3>
    1968:	0a 96       	adiw	r24, 0x0a	; 10
    196a:	a1 1d       	adc	r26, r1
    196c:	b1 1d       	adc	r27, r1
    196e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <adc_started_at>
    1972:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <adc_started_at+0x1>
    1976:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <adc_started_at+0x2>
    197a:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <adc_started_at+0x3>
    } 
}
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <IsValidValForAvccRef>:
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

// 
uint8_t IsValidValForAvccRef() 
{
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    float tmp_avcc;
    memcpy(&tmp_avcc, &ref_extern_avcc_uV, sizeof tmp_avcc);
    198c:	c0 90 83 03 	lds	r12, 0x0383	; 0x800383 <ref_extern_avcc_uV>
    1990:	d0 90 84 03 	lds	r13, 0x0384	; 0x800384 <ref_extern_avcc_uV+0x1>
    1994:	e0 90 85 03 	lds	r14, 0x0385	; 0x800385 <ref_extern_avcc_uV+0x2>
    1998:	f0 90 86 03 	lds	r15, 0x0386	; 0x800386 <ref_extern_avcc_uV+0x3>
    if ( ((tmp_avcc > REF_EXTERN_AVCC_MIN) && (tmp_avcc < REF_EXTERN_AVCC_MAX)) )
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e9       	ldi	r20, 0x90	; 144
    19a2:	50 e4       	ldi	r21, 0x40	; 64
    19a4:	c7 01       	movw	r24, r14
    19a6:	b6 01       	movw	r22, r12
    19a8:	0e 94 35 18 	call	0x306a	; 0x306a <__gesf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	64 f4       	brge	.+24     	; 0x19c8 <IsValidValForAvccRef+0x44>
    {
        return 1;
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 eb       	ldi	r20, 0xB0	; 176
    19b6:	50 e4       	ldi	r21, 0x40	; 64
    19b8:	c7 01       	movw	r24, r14
    19ba:	b6 01       	movw	r22, r12
    19bc:	0e 94 0c 18 	call	0x3018	; 0x3018 <__cmpsf2>
    19c0:	88 1f       	adc	r24, r24
    19c2:	88 27       	eor	r24, r24
    19c4:	88 1f       	adc	r24, r24
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <IsValidValForAvccRef+0x46>
    }
    else
    {
        return 0;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref() 
{
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    float tmp_1v1;
    memcpy(&tmp_1v1, &ref_intern_1v1_uV, sizeof tmp_1v1);
    19dc:	c0 90 87 03 	lds	r12, 0x0387	; 0x800387 <ref_intern_1v1_uV>
    19e0:	d0 90 88 03 	lds	r13, 0x0388	; 0x800388 <ref_intern_1v1_uV+0x1>
    19e4:	e0 90 89 03 	lds	r14, 0x0389	; 0x800389 <ref_intern_1v1_uV+0x2>
    19e8:	f0 90 8a 03 	lds	r15, 0x038A	; 0x80038a <ref_intern_1v1_uV+0x3>
    if ( ((tmp_1v1 > REF_INTERN_1V1_MIN) && (tmp_1v1 < REF_INTERN_1V1_MAX)) )
    19ec:	26 e6       	ldi	r18, 0x66	; 102
    19ee:	36 e6       	ldi	r19, 0x66	; 102
    19f0:	46 e6       	ldi	r20, 0x66	; 102
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	c7 01       	movw	r24, r14
    19f6:	b6 01       	movw	r22, r12
    19f8:	0e 94 35 18 	call	0x306a	; 0x306a <__gesf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	64 f4       	brge	.+24     	; 0x1a18 <IsValidValFor1V1Ref+0x44>
    {
        return 1;
    1a00:	26 e6       	ldi	r18, 0x66	; 102
    1a02:	36 e6       	ldi	r19, 0x66	; 102
    1a04:	46 ea       	ldi	r20, 0xA6	; 166
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	c7 01       	movw	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 0c 18 	call	0x3018	; 0x3018 <__cmpsf2>
    1a10:	88 1f       	adc	r24, r24
    1a12:	88 27       	eor	r24, r24
    1a14:	88 1f       	adc	r24, r24
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <IsValidValFor1V1Ref+0x46>
    }
    else
    {
        return 0;
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	08 95       	ret

00001a24 <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1a24:	8e e1       	ldi	r24, 0x1E	; 30
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    if ( eeprom_is_ready() )
    1a2c:	f9 99       	sbic	0x1f, 1	; 31
    1a2e:	0a c0       	rjmp	.+20     	; 0x1a44 <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    1a30:	84 34       	cpi	r24, 0x44	; 68
    1a32:	91 44       	sbci	r25, 0x41	; 65
    1a34:	49 f0       	breq	.+18     	; 0x1a48 <WriteEeReferenceId+0x24>
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    1a36:	64 e4       	ldi	r22, 0x44	; 68
    1a38:	71 e4       	ldi	r23, 0x41	; 65
    1a3a:	8e e1       	ldi	r24, 0x1E	; 30
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_write_word>
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1a4a:	08 95       	ret

00001a4c <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    1a4c:	80 e2       	ldi	r24, 0x20	; 32
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1a58:	f9 99       	sbic	0x1f, 1	; 31
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    1a5c:	40 91 83 03 	lds	r20, 0x0383	; 0x800383 <ref_extern_avcc_uV>
    1a60:	50 91 84 03 	lds	r21, 0x0384	; 0x800384 <ref_extern_avcc_uV+0x1>
    1a64:	60 91 85 03 	lds	r22, 0x0385	; 0x800385 <ref_extern_avcc_uV+0x2>
    1a68:	70 91 86 03 	lds	r23, 0x0386	; 0x800386 <ref_extern_avcc_uV+0x3>
    1a6c:	84 17       	cp	r24, r20
    1a6e:	95 07       	cpc	r25, r21
    1a70:	a6 07       	cpc	r26, r22
    1a72:	b7 07       	cpc	r27, r23
    1a74:	39 f0       	breq	.+14     	; 0x1a84 <WriteEeReferenceAvcc+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    1a76:	80 e2       	ldi	r24, 0x20	; 32
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 41 1b 	call	0x3682	; 0x3682 <eeprom_write_dword>
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1a86:	08 95       	ret

00001a88 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    1a88:	84 e2       	ldi	r24, 0x24	; 36
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1a94:	f9 99       	sbic	0x1f, 1	; 31
    1a96:	12 c0       	rjmp	.+36     	; 0x1abc <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    1a98:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <ref_intern_1v1_uV>
    1a9c:	50 91 88 03 	lds	r21, 0x0388	; 0x800388 <ref_intern_1v1_uV+0x1>
    1aa0:	60 91 89 03 	lds	r22, 0x0389	; 0x800389 <ref_intern_1v1_uV+0x2>
    1aa4:	70 91 8a 03 	lds	r23, 0x038A	; 0x80038a <ref_intern_1v1_uV+0x3>
    1aa8:	84 17       	cp	r24, r20
    1aaa:	95 07       	cpc	r25, r21
    1aac:	a6 07       	cpc	r26, r22
    1aae:	b7 07       	cpc	r27, r23
    1ab0:	39 f0       	breq	.+14     	; 0x1ac0 <WriteEeReference1V1+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    1ab2:	84 e2       	ldi	r24, 0x24	; 36
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 41 1b 	call	0x3682	; 0x3682 <eeprom_write_dword>
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1ac2:	08 95       	ret

00001ac4 <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1ac4:	8e e1       	ldi	r24, 0x1E	; 30
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1acc:	84 34       	cpi	r24, 0x44	; 68
    1ace:	91 44       	sbci	r25, 0x41	; 65
    1ad0:	81 f5       	brne	.+96     	; 0x1b32 <LoadAnalogRefFromEEPROM+0x6e>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC));
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    1ada:	60 93 83 03 	sts	0x0383, r22	; 0x800383 <ref_extern_avcc_uV>
    1ade:	70 93 84 03 	sts	0x0384, r23	; 0x800384 <ref_extern_avcc_uV+0x1>
    1ae2:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <ref_extern_avcc_uV+0x2>
    1ae6:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <ref_extern_avcc_uV+0x3>
        if ( IsValidValForAvccRef() ) 
    1aea:	0e 94 c2 0c 	call	0x1984	; 0x1984 <IsValidValForAvccRef>
    1aee:	88 23       	and	r24, r24
    1af0:	01 f1       	breq	.+64     	; 0x1b32 <LoadAnalogRefFromEEPROM+0x6e>
        {
            ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    1af2:	84 e2       	ldi	r24, 0x24	; 36
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    1afa:	60 93 87 03 	sts	0x0387, r22	; 0x800387 <ref_intern_1v1_uV>
    1afe:	70 93 88 03 	sts	0x0388, r23	; 0x800388 <ref_intern_1v1_uV+0x1>
    1b02:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <ref_intern_1v1_uV+0x2>
    1b06:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <ref_intern_1v1_uV+0x3>
            if ( IsValidValFor1V1Ref() )
    1b0a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <IsValidValFor1V1Ref>
    1b0e:	81 11       	cpse	r24, r1
    1b10:	0c c0       	rjmp	.+24     	; 0x1b2a <LoadAnalogRefFromEEPROM+0x66>
                return 1;
            }
            else
            { // 1v1 is not used (should it be removed?)
                float tmp_1v1 = 1.08;
                memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    1b12:	81 e7       	ldi	r24, 0x71	; 113
    1b14:	9d e3       	ldi	r25, 0x3D	; 61
    1b16:	aa e8       	ldi	r26, 0x8A	; 138
    1b18:	bf e3       	ldi	r27, 0x3F	; 63
    1b1a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <ref_intern_1v1_uV>
    1b1e:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <ref_intern_1v1_uV+0x1>
    1b22:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <ref_intern_1v1_uV+0x2>
    1b26:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <ref_intern_1v1_uV+0x3>
                ref_loaded = REF_LOADED;
    1b2a:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_loaded>
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	08 95       	ret
    }

    // use defaults
    // on AVR sizeof(float) == sizeof(uint32_t)
    float tmp_avcc = 5.0;
    memcpy(&ref_extern_avcc_uV, &tmp_avcc, sizeof ref_extern_avcc_uV);
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 ea       	ldi	r26, 0xA0	; 160
    1b38:	b0 e4       	ldi	r27, 0x40	; 64
    1b3a:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <ref_extern_avcc_uV>
    1b3e:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <ref_extern_avcc_uV+0x1>
    1b42:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <ref_extern_avcc_uV+0x2>
    1b46:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <ref_extern_avcc_uV+0x3>
    float tmp_1v1 = 1.08;
    memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    1b4a:	81 e7       	ldi	r24, 0x71	; 113
    1b4c:	9d e3       	ldi	r25, 0x3D	; 61
    1b4e:	aa e8       	ldi	r26, 0x8A	; 138
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <ref_intern_1v1_uV>
    1b56:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <ref_intern_1v1_uV+0x1>
    1b5a:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <ref_intern_1v1_uV+0x2>
    1b5e:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <ref_intern_1v1_uV+0x3>
    ref_loaded = REF_DEFAULT;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_loaded>
    return 0;
    1b68:	80 e0       	ldi	r24, 0x00	; 0
}
    1b6a:	08 95       	ret

00001b6c <CalReferancesFromI2CtoEE>:

// save calibration referances from I2C to EEPROM (if valid)
void CalReferancesFromI2CtoEE(void)
{
    1b6c:	cf 93       	push	r28
    if (ref_loaded > REF_DEFAULT)
    1b6e:	c0 91 82 03 	lds	r28, 0x0382	; 0x800382 <ref_loaded>
    1b72:	c2 30       	cpi	r28, 0x02	; 2
    1b74:	38 f1       	brcs	.+78     	; 0x1bc4 <CalReferancesFromI2CtoEE+0x58>
    {
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
    1b76:	0e 94 c2 0c 	call	0x1984	; 0x1984 <IsValidValForAvccRef>
    1b7a:	88 23       	and	r24, r24
    1b7c:	01 f1       	breq	.+64     	; 0x1bbe <CalReferancesFromI2CtoEE+0x52>
    1b7e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <IsValidValFor1V1Ref>
    1b82:	88 23       	and	r24, r24
    1b84:	e1 f0       	breq	.+56     	; 0x1bbe <CalReferancesFromI2CtoEE+0x52>
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1b86:	8e e1       	ldi	r24, 0x1E	; 30
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1b8e:	84 34       	cpi	r24, 0x44	; 68
    1b90:	91 44       	sbci	r25, 0x41	; 65
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <CalReferancesFromI2CtoEE+0x2e>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1b94:	cf 91       	pop	r28
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
            {
                WriteEeReferenceId();
    1b96:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <WriteEeReferenceId>
                return; // that is enough for this loop
            }
            else 
            {
                if (ref_loaded == REF_1V1_TOSAVE)
    1b9a:	c3 30       	cpi	r28, 0x03	; 3
    1b9c:	39 f4       	brne	.+14     	; 0x1bac <CalReferancesFromI2CtoEE+0x40>
                {
                    if (WriteEeReference1V1())
    1b9e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <WriteEeReference1V1>
    1ba2:	88 23       	and	r24, r24
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <CalReferancesFromI2CtoEE+0x40>
                    {
                        ref_loaded = REF_LOADED;
    1ba6:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_loaded>
                        return; // all done
    1baa:	0c c0       	rjmp	.+24     	; 0x1bc4 <CalReferancesFromI2CtoEE+0x58>
                    }
                }
                if (ref_loaded == REF_AVCC_TOSAVE)
    1bac:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <ref_loaded>
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	41 f4       	brne	.+16     	; 0x1bc4 <CalReferancesFromI2CtoEE+0x58>
                {
                    if (WriteEeReferenceAvcc())
    1bb4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <WriteEeReferenceAvcc>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	f5 cf       	rjmp	.-22     	; 0x1ba6 <CalReferancesFromI2CtoEE+0x3a>
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <CalReferancesFromI2CtoEE+0x58>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1bbe:	cf 91       	pop	r28
                }
            }       
        }
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1bc0:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <LoadAnalogRefFromEEPROM>
        }
    }
}
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <check_if_alt_should_be_on>:


// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    if (enable_alternate_power)
    1bdc:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <enable_alternate_power>
    1be0:	88 23       	and	r24, r24
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <check_if_alt_should_be_on+0x1e>
    1be4:	d1 c0       	rjmp	.+418    	; 0x1d88 <check_if_alt_should_be_on+0x1c0>
    {
        int battery = analogRead(PWR_V);
    1be6:	87 e0       	ldi	r24, 0x07	; 7
    1be8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    1bec:	7c 01       	movw	r14, r24
        if (battery >= battery_high_limit)
    1bee:	c0 91 95 03 	lds	r28, 0x0395	; 0x800395 <battery_high_limit>
    1bf2:	d0 91 96 03 	lds	r29, 0x0396	; 0x800396 <battery_high_limit+0x1>
    1bf6:	8c 17       	cp	r24, r28
    1bf8:	9d 07       	cpc	r25, r29
    1bfa:	4c f0       	brlt	.+18     	; 0x1c0e <check_if_alt_should_be_on+0x46>
        {
            if (digitalRead(ALT_EN))
    1bfc:	1b 9b       	sbis	0x03, 3	; 3
    1bfe:	c8 c0       	rjmp	.+400    	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c00:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c02:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1c04:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c06:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                enable_alternate_power = 0; // charge is done
    1c08:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <enable_alternate_power>
    1c0c:	c1 c0       	rjmp	.+386    	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
            }
            return; // if alt_en is not on do nothing
        }
        int pwm_range = ( (battery_high_limit - battery_low_limit)>>1 ); // half the diff between high and low limit
    1c0e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <battery_low_limit>
    1c12:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <battery_low_limit+0x1>
    1c16:	c8 1b       	sub	r28, r24
    1c18:	d9 0b       	sbc	r29, r25
    1c1a:	d5 95       	asr	r29
    1c1c:	c7 95       	ror	r28
        unsigned long kRuntime = millis() - alt_pwm_started_at;
    1c1e:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    1c22:	00 91 8d 03 	lds	r16, 0x038D	; 0x80038d <alt_pwm_started_at>
    1c26:	10 91 8e 03 	lds	r17, 0x038E	; 0x80038e <alt_pwm_started_at+0x1>
    1c2a:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <alt_pwm_started_at+0x2>
    1c2e:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <alt_pwm_started_at+0x3>
    1c32:	5b 01       	movw	r10, r22
    1c34:	6c 01       	movw	r12, r24
    1c36:	a0 1a       	sub	r10, r16
    1c38:	b1 0a       	sbc	r11, r17
    1c3a:	c2 0a       	sbc	r12, r18
    1c3c:	d3 0a       	sbc	r13, r19
    1c3e:	96 01       	movw	r18, r12
    1c40:	85 01       	movw	r16, r10
        if (battery < (battery_low_limit + pwm_range ) )
    1c42:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <battery_low_limit>
    1c46:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <battery_low_limit+0x1>
    1c4a:	8c 0f       	add	r24, r28
    1c4c:	9d 1f       	adc	r25, r29
    1c4e:	e8 16       	cp	r14, r24
    1c50:	f9 06       	cpc	r15, r25
    1c52:	0c f0       	brlt	.+2      	; 0x1c56 <check_if_alt_should_be_on+0x8e>
    1c54:	5b c0       	rjmp	.+182    	; 0x1d0c <check_if_alt_should_be_on+0x144>
        { // half way between high and low limit pwm will occure at 2 sec intervals
            unsigned long offtime = ALT_PWM_PERIOD * ( (battery_high_limit - battery) / pwm_range );
            if (digitalRead(ALT_EN))
    1c56:	1b 9b       	sbis	0x03, 3	; 3
    1c58:	39 c0       	rjmp	.+114    	; 0x1ccc <check_if_alt_should_be_on+0x104>
            {
                if ( (kRuntime + offtime) > ALT_PWM_PERIOD )
    1c5a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <battery_high_limit>
    1c5e:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <battery_high_limit+0x1>
    1c62:	8e 19       	sub	r24, r14
    1c64:	9f 09       	sbc	r25, r15
    1c66:	be 01       	movw	r22, r28
    1c68:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__divmodhi4>
    1c6c:	40 ed       	ldi	r20, 0xD0	; 208
    1c6e:	57 e0       	ldi	r21, 0x07	; 7
    1c70:	64 9f       	mul	r22, r20
    1c72:	c0 01       	movw	r24, r0
    1c74:	65 9f       	mul	r22, r21
    1c76:	90 0d       	add	r25, r0
    1c78:	74 9f       	mul	r23, r20
    1c7a:	90 0d       	add	r25, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	09 2e       	mov	r0, r25
    1c80:	00 0c       	add	r0, r0
    1c82:	aa 0b       	sbc	r26, r26
    1c84:	bb 0b       	sbc	r27, r27
    1c86:	8a 0d       	add	r24, r10
    1c88:	9b 1d       	adc	r25, r11
    1c8a:	ac 1d       	adc	r26, r12
    1c8c:	bd 1d       	adc	r27, r13
    1c8e:	81 3d       	cpi	r24, 0xD1	; 209
    1c90:	97 40       	sbci	r25, 0x07	; 7
    1c92:	a1 05       	cpc	r26, r1
    1c94:	b1 05       	cpc	r27, r1
    1c96:	08 f4       	brcc	.+2      	; 0x1c9a <check_if_alt_should_be_on+0xd2>
    1c98:	7b c0       	rjmp	.+246    	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c9a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c9c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1c9e:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ca0:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,LOW);
                    alt_pwm_accum_charge_time += kRuntime;
    1ca2:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <alt_pwm_accum_charge_time>
    1ca6:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <alt_pwm_accum_charge_time+0x1>
    1caa:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <alt_pwm_accum_charge_time+0x2>
    1cae:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <alt_pwm_accum_charge_time+0x3>
    1cb2:	08 0f       	add	r16, r24
    1cb4:	19 1f       	adc	r17, r25
    1cb6:	2a 1f       	adc	r18, r26
    1cb8:	3b 1f       	adc	r19, r27
    1cba:	00 93 91 03 	sts	0x0391, r16	; 0x800391 <alt_pwm_accum_charge_time>
    1cbe:	10 93 92 03 	sts	0x0392, r17	; 0x800392 <alt_pwm_accum_charge_time+0x1>
    1cc2:	20 93 93 03 	sts	0x0393, r18	; 0x800393 <alt_pwm_accum_charge_time+0x2>
    1cc6:	30 93 94 03 	sts	0x0394, r19	; 0x800394 <alt_pwm_accum_charge_time+0x3>
    1cca:	62 c0       	rjmp	.+196    	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
                }
            }
            else 
            {
                if ( kRuntime > ALT_PWM_PERIOD )
    1ccc:	81 ed       	ldi	r24, 0xD1	; 209
    1cce:	a8 16       	cp	r10, r24
    1cd0:	87 e0       	ldi	r24, 0x07	; 7
    1cd2:	b8 06       	cpc	r11, r24
    1cd4:	c1 04       	cpc	r12, r1
    1cd6:	d1 04       	cpc	r13, r1
    1cd8:	08 f4       	brcc	.+2      	; 0x1cdc <check_if_alt_should_be_on+0x114>
    1cda:	5a c0       	rjmp	.+180    	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1cdc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cde:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1ce0:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ce2:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,HIGH);
                    if (kRuntime > (ALT_PWM_PERIOD<<1) )
    1ce4:	41 ea       	ldi	r20, 0xA1	; 161
    1ce6:	a4 16       	cp	r10, r20
    1ce8:	4f e0       	ldi	r20, 0x0F	; 15
    1cea:	b4 06       	cpc	r11, r20
    1cec:	c1 04       	cpc	r12, r1
    1cee:	d1 04       	cpc	r13, r1
    1cf0:	58 f5       	brcc	.+86     	; 0x1d48 <check_if_alt_should_be_on+0x180>
                    {
                        alt_pwm_started_at = millis();
                    }
                    else
                    {
                        alt_pwm_started_at += ALT_PWM_PERIOD;
    1cf2:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <alt_pwm_started_at>
    1cf6:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <alt_pwm_started_at+0x1>
    1cfa:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <alt_pwm_started_at+0x2>
    1cfe:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <alt_pwm_started_at+0x3>
    1d02:	80 53       	subi	r24, 0x30	; 48
    1d04:	98 4f       	sbci	r25, 0xF8	; 248
    1d06:	af 4f       	sbci	r26, 0xFF	; 255
    1d08:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0a:	35 c0       	rjmp	.+106    	; 0x1d76 <check_if_alt_should_be_on+0x1ae>
                    }
                }
            }
            return;
        }
        else if (digitalRead(ALT_EN))
    1d0c:	1b 9b       	sbis	0x03, 3	; 3
    1d0e:	0a c0       	rjmp	.+20     	; 0x1d24 <check_if_alt_should_be_on+0x15c>
        { // if pwm is not occuring we still need to rest every so often to measure the battery
            if ( (kRuntime + ALT_REST) > ALT_REST_PERIOD )
    1d10:	06 50       	subi	r16, 0x06	; 6
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	2f 4f       	sbci	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	01 31       	cpi	r16, 0x11	; 17
    1d1a:	17 42       	sbci	r17, 0x27	; 39
    1d1c:	21 05       	cpc	r18, r1
    1d1e:	31 05       	cpc	r19, r1
    1d20:	b8 f1       	brcs	.+110    	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
    1d22:	32 c0       	rjmp	.+100    	; 0x1d88 <check_if_alt_should_be_on+0x1c0>
            }
            return;
        }
        else 
        {
            if ( kRuntime > ALT_REST_PERIOD)
    1d24:	41 e1       	ldi	r20, 0x11	; 17
    1d26:	a4 16       	cp	r10, r20
    1d28:	47 e2       	ldi	r20, 0x27	; 39
    1d2a:	b4 06       	cpc	r11, r20
    1d2c:	c1 04       	cpc	r12, r1
    1d2e:	d1 04       	cpc	r13, r1
    1d30:	78 f1       	brcs	.+94     	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1d32:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d34:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1d36:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d38:	8f bf       	out	0x3f, r24	; 63
            { // end of resting time, start charging
                digitalWrite(ALT_EN,HIGH);
                if (kRuntime > (ALT_REST_PERIOD<<1) )
    1d3a:	81 e2       	ldi	r24, 0x21	; 33
    1d3c:	a8 16       	cp	r10, r24
    1d3e:	8e e4       	ldi	r24, 0x4E	; 78
    1d40:	b8 06       	cpc	r11, r24
    1d42:	c1 04       	cpc	r12, r1
    1d44:	d1 04       	cpc	r13, r1
    1d46:	58 f0       	brcs	.+22     	; 0x1d5e <check_if_alt_should_be_on+0x196>
                {
                    alt_pwm_started_at = millis();
    1d48:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    1d4c:	60 93 8d 03 	sts	0x038D, r22	; 0x80038d <alt_pwm_started_at>
    1d50:	70 93 8e 03 	sts	0x038E, r23	; 0x80038e <alt_pwm_started_at+0x1>
    1d54:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <alt_pwm_started_at+0x2>
    1d58:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <alt_pwm_started_at+0x3>
    1d5c:	19 c0       	rjmp	.+50     	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
                }
                else
                {
                    alt_pwm_started_at += ALT_REST_PERIOD;
    1d5e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <alt_pwm_started_at>
    1d62:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <alt_pwm_started_at+0x1>
    1d66:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <alt_pwm_started_at+0x2>
    1d6a:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <alt_pwm_started_at+0x3>
    1d6e:	80 5f       	subi	r24, 0xF0	; 240
    1d70:	98 4d       	sbci	r25, 0xD8	; 216
    1d72:	af 4f       	sbci	r26, 0xFF	; 255
    1d74:	bf 4f       	sbci	r27, 0xFF	; 255
    1d76:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <alt_pwm_started_at>
    1d7a:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <alt_pwm_started_at+0x1>
    1d7e:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <alt_pwm_started_at+0x2>
    1d82:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <alt_pwm_started_at+0x3>
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1d88:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d8a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1d8c:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d8e:	8f bf       	out	0x3f, r24	; 63
    }
    else 
    {
        digitalWrite(ALT_EN,LOW);
    }
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	08 95       	ret

00001da6 <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    1da6:	fc 01       	movw	r30, r24
    1da8:	20 81       	ld	r18, Z
    1daa:	31 81       	ldd	r19, Z+1	; 0x01
    1dac:	2b 54       	subi	r18, 0x4B	; 75
    1dae:	31 40       	sbci	r19, 0x01	; 1
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	27 38       	cpi	r18, 0x87	; 135
    1db4:	31 05       	cpc	r19, r1
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <IsValidBatHighLimFor12V+0x14>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dba:	08 95       	ret

00001dbc <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	20 81       	ld	r18, Z
    1dc0:	31 81       	ldd	r19, Z+1	; 0x01
    1dc2:	2e 53       	subi	r18, 0x3E	; 62
    1dc4:	31 40       	sbci	r19, 0x01	; 1
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	26 36       	cpi	r18, 0x66	; 102
    1dca:	31 05       	cpc	r19, r1
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <IsValidBatLowLimFor12V+0x14>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dd0:	08 95       	ret

00001dd2 <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 81       	ld	r18, Z
    1dd6:	31 81       	ldd	r19, Z+1	; 0x01
    1dd8:	25 59       	subi	r18, 0x95	; 149
    1dda:	32 40       	sbci	r19, 0x02	; 2
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	2f 30       	cpi	r18, 0x0F	; 15
    1de0:	31 40       	sbci	r19, 0x01	; 1
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <IsValidBatHighLimFor24V+0x14>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1de6:	08 95       	ret

00001de8 <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    1de8:	fc 01       	movw	r30, r24
    1dea:	20 81       	ld	r18, Z
    1dec:	31 81       	ldd	r19, Z+1	; 0x01
    1dee:	2c 57       	subi	r18, 0x7C	; 124
    1df0:	32 40       	sbci	r19, 0x02	; 2
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	2b 3c       	cpi	r18, 0xCB	; 203
    1df6:	31 05       	cpc	r19, r1
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <IsValidBatLowLimFor24V+0x14>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dfc:	08 95       	ret

00001dfe <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1dfe:	8c e3       	ldi	r24, 0x3C	; 60
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e06:	f9 99       	sbic	0x1f, 1	; 31
    1e08:	0c c0       	rjmp	.+24     	; 0x1e22 <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1e0a:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <battery_high_limit>
    1e0e:	70 91 96 03 	lds	r23, 0x0396	; 0x800396 <battery_high_limit+0x1>
    1e12:	86 17       	cp	r24, r22
    1e14:	97 07       	cpc	r25, r23
    1e16:	39 f0       	breq	.+14     	; 0x1e26 <WriteEEBatHighLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    1e18:	8c e3       	ldi	r24, 0x3C	; 60
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_write_word>
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e28:	08 95       	ret

00001e2a <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1e2a:	8e e3       	ldi	r24, 0x3E	; 62
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e32:	f9 99       	sbic	0x1f, 1	; 31
    1e34:	0c c0       	rjmp	.+24     	; 0x1e4e <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    1e36:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <battery_low_limit>
    1e3a:	70 91 99 03 	lds	r23, 0x0399	; 0x800399 <battery_low_limit+0x1>
    1e3e:	86 17       	cp	r24, r22
    1e40:	97 07       	cpc	r25, r23
    1e42:	39 f0       	breq	.+14     	; 0x1e52 <WriteEEBatLowLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    1e44:	8e e3       	ldi	r24, 0x3E	; 62
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_write_word>
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e54:	08 95       	ret

00001e56 <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LoadBatLimitsFromEEPROM+0xe>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LoadBatLimitsFromEEPROM+0x10>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1e6a:	8c e3       	ldi	r24, 0x3C	; 60
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    1e72:	7c 01       	movw	r14, r24
    1e74:	9c 83       	std	Y+4, r25	; 0x04
    1e76:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    1e78:	8e e3       	ldi	r24, 0x3E	; 62
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    1e80:	8c 01       	movw	r16, r24
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    1e86:	ce 01       	movw	r24, r28
    1e88:	03 96       	adiw	r24, 0x03	; 3
    1e8a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <IsValidBatHighLimFor12V>
    1e8e:	81 11       	cpse	r24, r1
    1e90:	06 c0       	rjmp	.+12     	; 0x1e9e <LoadBatLimitsFromEEPROM+0x48>
    1e92:	ce 01       	movw	r24, r28
    1e94:	03 96       	adiw	r24, 0x03	; 3
    1e96:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <IsValidBatHighLimFor24V>
    1e9a:	88 23       	and	r24, r24
    1e9c:	c1 f0       	breq	.+48     	; 0x1ece <LoadBatLimitsFromEEPROM+0x78>
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <IsValidBatLowLimFor12V>
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <LoadBatLimitsFromEEPROM+0x60>
    1eaa:	ce 01       	movw	r24, r28
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <IsValidBatLowLimFor24V>
    1eb2:	88 23       	and	r24, r24
    1eb4:	61 f0       	breq	.+24     	; 0x1ece <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    1eb6:	f0 92 96 03 	sts	0x0396, r15	; 0x800396 <battery_high_limit+0x1>
    1eba:	e0 92 95 03 	sts	0x0395, r14	; 0x800395 <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    1ebe:	10 93 99 03 	sts	0x0399, r17	; 0x800399 <battery_low_limit+0x1>
    1ec2:	00 93 98 03 	sts	0x0398, r16	; 0x800398 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    1ec6:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <bat_limit_loaded>
        return 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	10 c0       	rjmp	.+32     	; 0x1eee <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    1ece:	8d e8       	ldi	r24, 0x8D	; 141
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <battery_high_limit+0x1>
    1ed6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1eda:	86 e7       	ldi	r24, 0x76	; 118
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <battery_low_limit+0x1>
    1ee2:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <bat_limit_loaded>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	08 95       	ret

00001f04 <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if (bat_limit_loaded > BAT_LIM_DEFAULT)
    1f04:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <bat_limit_loaded>
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	58 f1       	brcs	.+86     	; 0x1f62 <BatLimitsFromI2CtoEE+0x5e>
    {
        if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	99 f4       	brne	.+38     	; 0x1f36 <BatLimitsFromI2CtoEE+0x32>
        {
            if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1f10:	85 e9       	ldi	r24, 0x95	; 149
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <IsValidBatHighLimFor12V>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <BatLimitsFromI2CtoEE+0x24>
    1f1c:	85 e9       	ldi	r24, 0x95	; 149
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <IsValidBatHighLimFor24V>
    1f24:	88 23       	and	r24, r24
    1f26:	39 f0       	breq	.+14     	; 0x1f36 <BatLimitsFromI2CtoEE+0x32>
            {
                if (WriteEEBatHighLim())
    1f28:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <WriteEEBatHighLim>
    1f2c:	88 23       	and	r24, r24
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <BatLimitsFromI2CtoEE+0x32>
                {
                    bat_limit_loaded = BAT_LIM_LOADED;
    1f30:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <bat_limit_loaded>
                    return; // all done
    1f34:	08 95       	ret
                }
            }
        }
        if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1f36:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <bat_limit_loaded>
    1f3a:	83 30       	cpi	r24, 0x03	; 3
    1f3c:	81 f4       	brne	.+32     	; 0x1f5e <BatLimitsFromI2CtoEE+0x5a>
        {    
            if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1f3e:	88 e9       	ldi	r24, 0x98	; 152
    1f40:	93 e0       	ldi	r25, 0x03	; 3
    1f42:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <IsValidBatLowLimFor12V>
    1f46:	81 11       	cpse	r24, r1
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <BatLimitsFromI2CtoEE+0x52>
    1f4a:	88 e9       	ldi	r24, 0x98	; 152
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <IsValidBatLowLimFor24V>
    1f52:	88 23       	and	r24, r24
    1f54:	21 f0       	breq	.+8      	; 0x1f5e <BatLimitsFromI2CtoEE+0x5a>
            {
                if (WriteEEBatLowLim())
    1f56:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <WriteEEBatLowLim>
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	e9 cf       	rjmp	.-46     	; 0x1f30 <BatLimitsFromI2CtoEE+0x2c>
                    bat_limit_loaded = BAT_LIM_LOADED;
                    return; // all done
                }
            }
        }
        LoadBatLimitsFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    1f5e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <LoadBatLimitsFromEEPROM>
    1f62:	08 95       	ret

00001f64 <IsValidMorningThresholdFor12V>:
int daynight_evening_threshold;
unsigned long daynight_morning_debounce;
unsigned long daynight_evening_debounce;

uint8_t IsValidMorningThresholdFor12V(int *value) 
{
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 81       	ld	r18, Z
    1f68:	31 81       	ldd	r19, Z+1	; 0x01
    1f6a:	2b 53       	subi	r18, 0x3B	; 59
    1f6c:	31 09       	sbc	r19, r1
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	25 39       	cpi	r18, 0x95	; 149
    1f72:	31 05       	cpc	r19, r1
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <IsValidMorningThresholdFor12V+0x14>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1f78:	08 95       	ret

00001f7a <IsValidEveningThresholdFor12V>:

uint8_t IsValidEveningThresholdFor12V(int *value) 
{
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	20 81       	ld	r18, Z
    1f7e:	31 81       	ldd	r19, Z+1	; 0x01
    1f80:	29 51       	subi	r18, 0x19	; 25
    1f82:	31 09       	sbc	r19, r1
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	20 35       	cpi	r18, 0x50	; 80
    1f88:	31 05       	cpc	r19, r1
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <IsValidEveningThresholdFor12V+0x14>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1f8e:	08 95       	ret

00001f90 <IsValidMorningThresholdFor24V>:

uint8_t IsValidMorningThresholdFor24V(int *value) 
{
    1f90:	fc 01       	movw	r30, r24
    1f92:	20 81       	ld	r18, Z
    1f94:	31 81       	ldd	r19, Z+1	; 0x01
    1f96:	26 57       	subi	r18, 0x76	; 118
    1f98:	31 09       	sbc	r19, r1
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	29 32       	cpi	r18, 0x29	; 41
    1f9e:	31 40       	sbci	r19, 0x01	; 1
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <IsValidMorningThresholdFor24V+0x14>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1fa4:	08 95       	ret

00001fa6 <IsValidEveningThresholdFor24V>:

uint8_t IsValidEveningThresholdFor24V(int *value) 
{
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	20 81       	ld	r18, Z
    1faa:	31 81       	ldd	r19, Z+1	; 0x01
    1fac:	22 53       	subi	r18, 0x32	; 50
    1fae:	31 09       	sbc	r19, r1
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	2e 39       	cpi	r18, 0x9E	; 158
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <IsValidEveningThresholdFor24V+0x14>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1fba:	08 95       	ret

00001fbc <IsValidEveningDebounce>:
        return 0;
    }
}

uint8_t IsValidEveningDebounce(unsigned long *value) 
{
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	40 81       	ld	r20, Z
    1fc0:	51 81       	ldd	r21, Z+1	; 0x01
    1fc2:	62 81       	ldd	r22, Z+2	; 0x02
    1fc4:	73 81       	ldd	r23, Z+3	; 0x03
    1fc6:	40 54       	subi	r20, 0x40	; 64
    1fc8:	5f 41       	sbci	r21, 0x1F	; 31
    1fca:	61 09       	sbc	r22, r1
    1fcc:	71 09       	sbc	r23, r1
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	41 34       	cpi	r20, 0x41	; 65
    1fd2:	5f 4c       	sbci	r21, 0xCF	; 207
    1fd4:	66 43       	sbci	r22, 0x36	; 54
    1fd6:	71 05       	cpc	r23, r1
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <IsValidEveningDebounce+0x20>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1fdc:	08 95       	ret

00001fde <WriteEEMorningThreshold>:

// wrtite daynight_morning_threshold (when morning debounce starts) to EEPROM
uint8_t WriteEEMorningThreshold() 
{
    uint16_t tmp_daynight_morning_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)); 
    1fde:	86 e4       	ldi	r24, 0x46	; 70
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    if ( eeprom_is_ready() )
    1fe6:	f9 99       	sbic	0x1f, 1	; 31
    1fe8:	0c c0       	rjmp	.+24     	; 0x2002 <WriteEEMorningThreshold+0x24>
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
    1fea:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <daynight_morning_threshold>
    1fee:	70 91 9f 03 	lds	r23, 0x039F	; 0x80039f <daynight_morning_threshold+0x1>
    1ff2:	86 17       	cp	r24, r22
    1ff4:	97 07       	cpc	r25, r23
    1ff6:	39 f0       	breq	.+14     	; 0x2006 <WriteEEMorningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
    1ff8:	86 e4       	ldi	r24, 0x46	; 70
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_write_word>
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <WriteEEMorningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	08 95       	ret
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
        }
        return 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    2008:	08 95       	ret

0000200a <WriteEEEveningThreshold>:

// wrtite daynight_evening_threshold (when evening debounce starts) to EEPROM
uint8_t WriteEEEveningThreshold() 
{
    uint16_t tmp_daynight_evening_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)); 
    200a:	88 e4       	ldi	r24, 0x48	; 72
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    if ( eeprom_is_ready() )
    2012:	f9 99       	sbic	0x1f, 1	; 31
    2014:	0c c0       	rjmp	.+24     	; 0x202e <WriteEEEveningThreshold+0x24>
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
    2016:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <daynight_evening_threshold>
    201a:	70 91 a2 03 	lds	r23, 0x03A2	; 0x8003a2 <daynight_evening_threshold+0x1>
    201e:	86 17       	cp	r24, r22
    2020:	97 07       	cpc	r25, r23
    2022:	39 f0       	breq	.+14     	; 0x2032 <WriteEEEveningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
    2024:	88 e4       	ldi	r24, 0x48	; 72
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_write_word>
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <WriteEEEveningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	08 95       	ret
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
        }
        return 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    2034:	08 95       	ret

00002036 <WriteEEMorningDebounce>:

// wrtite daynight_morning_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEMorningDebounce() 
{
    uint32_t tmp_daynight_morning_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)); 
    2036:	8a e4       	ldi	r24, 0x4A	; 74
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    2042:	f9 99       	sbic	0x1f, 1	; 31
    2044:	12 c0       	rjmp	.+36     	; 0x206a <WriteEEMorningDebounce+0x34>
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
    2046:	40 91 a3 03 	lds	r20, 0x03A3	; 0x8003a3 <daynight_morning_debounce>
    204a:	50 91 a4 03 	lds	r21, 0x03A4	; 0x8003a4 <daynight_morning_debounce+0x1>
    204e:	60 91 a5 03 	lds	r22, 0x03A5	; 0x8003a5 <daynight_morning_debounce+0x2>
    2052:	70 91 a6 03 	lds	r23, 0x03A6	; 0x8003a6 <daynight_morning_debounce+0x3>
    2056:	84 17       	cp	r24, r20
    2058:	95 07       	cpc	r25, r21
    205a:	a6 07       	cpc	r26, r22
    205c:	b7 07       	cpc	r27, r23
    205e:	39 f0       	breq	.+14     	; 0x206e <WriteEEMorningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
    2060:	8a e4       	ldi	r24, 0x4A	; 74
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 41 1b 	call	0x3682	; 0x3682 <eeprom_write_dword>
    2068:	02 c0       	rjmp	.+4      	; 0x206e <WriteEEMorningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
        }
        return 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    2070:	08 95       	ret

00002072 <WriteEEEveningDebounce>:

// wrtite daynight_evening_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEEveningDebounce() 
{
    uint32_t tmp_daynight_evening_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)); 
    2072:	8e e4       	ldi	r24, 0x4E	; 78
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    207e:	f9 99       	sbic	0x1f, 1	; 31
    2080:	12 c0       	rjmp	.+36     	; 0x20a6 <WriteEEEveningDebounce+0x34>
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
    2082:	40 91 9a 03 	lds	r20, 0x039A	; 0x80039a <daynight_evening_debounce>
    2086:	50 91 9b 03 	lds	r21, 0x039B	; 0x80039b <daynight_evening_debounce+0x1>
    208a:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <daynight_evening_debounce+0x2>
    208e:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <daynight_evening_debounce+0x3>
    2092:	84 17       	cp	r24, r20
    2094:	95 07       	cpc	r25, r21
    2096:	a6 07       	cpc	r26, r22
    2098:	b7 07       	cpc	r27, r23
    209a:	39 f0       	breq	.+14     	; 0x20aa <WriteEEEveningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
    209c:	8e e4       	ldi	r24, 0x4E	; 78
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 41 1b 	call	0x3682	; 0x3682 <eeprom_write_dword>
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <WriteEEEveningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	08 95       	ret
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
        }
        return 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    20ac:	08 95       	ret

000020ae <LoadDayNightValuesFromEEPROM>:

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    20ae:	cf 92       	push	r12
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	2c 97       	sbiw	r28, 0x0c	; 12
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    uint8_t use_defaults = 0;
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    20cc:	86 e4       	ldi	r24, 0x46	; 70
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    20d4:	7c 01       	movw	r14, r24
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	8b 87       	std	Y+11, r24	; 0x0b
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    20da:	ce 01       	movw	r24, r28
    20dc:	0b 96       	adiw	r24, 0x0b	; 11
    20de:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <IsValidMorningThresholdFor12V>
    20e2:	81 11       	cpse	r24, r1
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <LoadDayNightValuesFromEEPROM+0x44>
    20e6:	ce 01       	movw	r24, r28
    20e8:	0b 96       	adiw	r24, 0x0b	; 11
    20ea:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <IsValidMorningThresholdFor24V>
    20ee:	88 23       	and	r24, r24
    20f0:	31 f0       	breq	.+12     	; 0x20fe <LoadDayNightValuesFromEEPROM+0x50>
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    20f2:	f0 92 9f 03 	sts	0x039F, r15	; 0x80039f <daynight_morning_threshold+0x1>
    20f6:	e0 92 9e 03 	sts	0x039E, r14	; 0x80039e <daynight_morning_threshold>
}

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    uint8_t use_defaults = 0;
    20fa:	10 e0       	ldi	r17, 0x00	; 0
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <LoadDayNightValuesFromEEPROM+0x52>
    }
    else
    {
        use_defaults = 1;
    20fe:	11 e0       	ldi	r17, 0x01	; 1
    }
    int tmp_daynight_evening_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)));
    2100:	88 e4       	ldi	r24, 0x48	; 72
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 2d 1b 	call	0x365a	; 0x365a <eeprom_read_word>
    2108:	7c 01       	movw	r14, r24
    210a:	9a 87       	std	Y+10, r25	; 0x0a
    210c:	89 87       	std	Y+9, r24	; 0x09
    if ( (IsValidEveningThresholdFor12V(&tmp_daynight_evening_threshold) || IsValidEveningThresholdFor24V(&tmp_daynight_evening_threshold)) )
    210e:	ce 01       	movw	r24, r28
    2110:	09 96       	adiw	r24, 0x09	; 9
    2112:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <IsValidEveningThresholdFor12V>
    2116:	81 11       	cpse	r24, r1
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <LoadDayNightValuesFromEEPROM+0x78>
    211a:	ce 01       	movw	r24, r28
    211c:	09 96       	adiw	r24, 0x09	; 9
    211e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <IsValidEveningThresholdFor24V>
    2122:	88 23       	and	r24, r24
    2124:	29 f0       	breq	.+10     	; 0x2130 <LoadDayNightValuesFromEEPROM+0x82>
    {
        daynight_evening_threshold = tmp_daynight_evening_threshold;
    2126:	f0 92 a2 03 	sts	0x03A2, r15	; 0x8003a2 <daynight_evening_threshold+0x1>
    212a:	e0 92 a1 03 	sts	0x03A1, r14	; 0x8003a1 <daynight_evening_threshold>
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <LoadDayNightValuesFromEEPROM+0x84>
    }
    else
    {
        use_defaults = 1;
    2130:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_morning_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)));
    2132:	8a e4       	ldi	r24, 0x4A	; 74
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    213a:	6b 01       	movw	r12, r22
    213c:	7c 01       	movw	r14, r24
    213e:	6d 83       	std	Y+5, r22	; 0x05
    2140:	7e 83       	std	Y+6, r23	; 0x06
    2142:	8f 83       	std	Y+7, r24	; 0x07
    2144:	98 87       	std	Y+8, r25	; 0x08
    if ( IsValidMorningDebounce(&tmp_daynight_morning_debounce) )
    2146:	ce 01       	movw	r24, r28
    2148:	05 96       	adiw	r24, 0x05	; 5
    214a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <IsValidEveningDebounce>
    214e:	88 23       	and	r24, r24
    2150:	49 f0       	breq	.+18     	; 0x2164 <LoadDayNightValuesFromEEPROM+0xb6>
    {
        daynight_morning_debounce = tmp_daynight_morning_debounce;
    2152:	c0 92 a3 03 	sts	0x03A3, r12	; 0x8003a3 <daynight_morning_debounce>
    2156:	d0 92 a4 03 	sts	0x03A4, r13	; 0x8003a4 <daynight_morning_debounce+0x1>
    215a:	e0 92 a5 03 	sts	0x03A5, r14	; 0x8003a5 <daynight_morning_debounce+0x2>
    215e:	f0 92 a6 03 	sts	0x03A6, r15	; 0x8003a6 <daynight_morning_debounce+0x3>
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <LoadDayNightValuesFromEEPROM+0xb8>
    }
    else
    {
        use_defaults = 1;
    2164:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    2166:	8e e4       	ldi	r24, 0x4E	; 78
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 27 1b 	call	0x364e	; 0x364e <eeprom_read_dword>
    216e:	6b 01       	movw	r12, r22
    2170:	7c 01       	movw	r14, r24
    2172:	69 83       	std	Y+1, r22	; 0x01
    2174:	7a 83       	std	Y+2, r23	; 0x02
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	9c 83       	std	Y+4, r25	; 0x04
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <IsValidEveningDebounce>
    2182:	81 11       	cpse	r24, r1
    2184:	25 c0       	rjmp	.+74     	; 0x21d0 <LoadDayNightValuesFromEEPROM+0x122>
        use_defaults = 1;
    }
    if (use_defaults)
    {
        // default values are for 12V PV measured with ALT_V channel with 5V referance
        daynight_morning_threshold = 80; // 4.3/(((5.0)/1024.0)*(110.0/10.0))
    2186:	80 e5       	ldi	r24, 0x50	; 80
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <daynight_morning_threshold+0x1>
    218e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <daynight_morning_threshold>
        daynight_evening_threshold = 40; // 2.15/(((5.0)/1024.0)*(110.0/10.0))
    2192:	88 e2       	ldi	r24, 0x28	; 40
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <daynight_evening_threshold+0x1>
    219a:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <daynight_evening_threshold>
        daynight_morning_debounce = 1200000UL; // 20 min
    219e:	80 e8       	ldi	r24, 0x80	; 128
    21a0:	9f e4       	ldi	r25, 0x4F	; 79
    21a2:	a2 e1       	ldi	r26, 0x12	; 18
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <daynight_morning_debounce>
    21aa:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <daynight_morning_debounce+0x1>
    21ae:	a0 93 a5 03 	sts	0x03A5, r26	; 0x8003a5 <daynight_morning_debounce+0x2>
    21b2:	b0 93 a6 03 	sts	0x03A6, r27	; 0x8003a6 <daynight_morning_debounce+0x3>
        daynight_evening_debounce = 1200000UL; // 20 min
    21b6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <daynight_evening_debounce>
    21ba:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <daynight_evening_debounce+0x1>
    21be:	a0 93 9c 03 	sts	0x039C, r26	; 0x80039c <daynight_evening_debounce+0x2>
    21c2:	b0 93 9d 03 	sts	0x039D, r27	; 0x80039d <daynight_evening_debounce+0x3>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <daynight_values_loaded>
        return 0;
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <LoadDayNightValuesFromEEPROM+0x13c>
        use_defaults = 1;
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    {
        daynight_evening_debounce = tmp_daynight_evening_debounce;
    21d0:	c0 92 9a 03 	sts	0x039A, r12	; 0x80039a <daynight_evening_debounce>
    21d4:	d0 92 9b 03 	sts	0x039B, r13	; 0x80039b <daynight_evening_debounce+0x1>
    21d8:	e0 92 9c 03 	sts	0x039C, r14	; 0x80039c <daynight_evening_debounce+0x2>
    21dc:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <daynight_evening_debounce+0x3>
    }
    else
    {
        use_defaults = 1;
    }
    if (use_defaults)
    21e0:	11 11       	cpse	r17, r1
    21e2:	d1 cf       	rjmp	.-94     	; 0x2186 <LoadDayNightValuesFromEEPROM+0xd8>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
        return 0;
    }
    else
    {
        daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    21e4:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_values_loaded>
        return 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    21ea:	2c 96       	adiw	r28, 0x0c	; 12
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	ff 90       	pop	r15
    21fe:	ef 90       	pop	r14
    2200:	df 90       	pop	r13
    2202:	cf 90       	pop	r12
    2204:	08 95       	ret

00002206 <DayNightValuesFromI2CtoEE>:

// Save day-night state machine values from I2C to EEPROM (if valid), one will change per loop, and I2C will take several loop cycles to get another.
void DayNightValuesFromI2CtoEE(void)
{
    if (daynight_values_loaded > DAYNIGHT_VALUES_DEFAULT)
    2206:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_values_loaded>
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	08 f4       	brcc	.+2      	; 0x2210 <DayNightValuesFromI2CtoEE+0xa>
    220e:	47 c0       	rjmp	.+142    	; 0x229e <DayNightValuesFromI2CtoEE+0x98>
    {
        if (daynight_values_loaded == DAYNIGHT_MORNING_THRESHOLD_TOSAVE)
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	99 f4       	brne	.+38     	; 0x223a <DayNightValuesFromI2CtoEE+0x34>
        {
            if ( IsValidMorningThresholdFor12V(&daynight_morning_threshold) || IsValidMorningThresholdFor24V(&daynight_morning_threshold) )
    2214:	8e e9       	ldi	r24, 0x9E	; 158
    2216:	93 e0       	ldi	r25, 0x03	; 3
    2218:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <IsValidMorningThresholdFor12V>
    221c:	81 11       	cpse	r24, r1
    221e:	06 c0       	rjmp	.+12     	; 0x222c <DayNightValuesFromI2CtoEE+0x26>
    2220:	8e e9       	ldi	r24, 0x9E	; 158
    2222:	93 e0       	ldi	r25, 0x03	; 3
    2224:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <IsValidMorningThresholdFor24V>
    2228:	88 23       	and	r24, r24
    222a:	39 f0       	breq	.+14     	; 0x223a <DayNightValuesFromI2CtoEE+0x34>
            {
                if (WriteEEMorningThreshold())
    222c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <WriteEEMorningThreshold>
    2230:	88 23       	and	r24, r24
    2232:	19 f0       	breq	.+6      	; 0x223a <DayNightValuesFromI2CtoEE+0x34>
                {
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    2234:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_values_loaded>
                    return; // all done
    2238:	08 95       	ret
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_THRESHOLD_TOSAVE)
    223a:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_values_loaded>
    223e:	83 30       	cpi	r24, 0x03	; 3
    2240:	81 f4       	brne	.+32     	; 0x2262 <DayNightValuesFromI2CtoEE+0x5c>
        {    
            if ( IsValidEveningThresholdFor12V(&daynight_evening_threshold) || IsValidEveningThresholdFor24V(&daynight_evening_threshold) )
    2242:	81 ea       	ldi	r24, 0xA1	; 161
    2244:	93 e0       	ldi	r25, 0x03	; 3
    2246:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <IsValidEveningThresholdFor12V>
    224a:	81 11       	cpse	r24, r1
    224c:	06 c0       	rjmp	.+12     	; 0x225a <DayNightValuesFromI2CtoEE+0x54>
    224e:	81 ea       	ldi	r24, 0xA1	; 161
    2250:	93 e0       	ldi	r25, 0x03	; 3
    2252:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <IsValidEveningThresholdFor24V>
    2256:	88 23       	and	r24, r24
    2258:	21 f0       	breq	.+8      	; 0x2262 <DayNightValuesFromI2CtoEE+0x5c>
            {
                if (WriteEEEveningThreshold())
    225a:	0e 94 05 10 	call	0x200a	; 0x200a <WriteEEEveningThreshold>
    225e:	81 11       	cpse	r24, r1
    2260:	e9 cf       	rjmp	.-46     	; 0x2234 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_MORNING_DEBOUNCE_TOSAVE)
    2262:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_values_loaded>
    2266:	84 30       	cpi	r24, 0x04	; 4
    2268:	51 f4       	brne	.+20     	; 0x227e <DayNightValuesFromI2CtoEE+0x78>
        {
            if ( IsValidMorningDebounce(&daynight_morning_debounce) )
    226a:	83 ea       	ldi	r24, 0xA3	; 163
    226c:	93 e0       	ldi	r25, 0x03	; 3
    226e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <IsValidEveningDebounce>
    2272:	88 23       	and	r24, r24
    2274:	21 f0       	breq	.+8      	; 0x227e <DayNightValuesFromI2CtoEE+0x78>
            {
                if (WriteEEMorningDebounce())
    2276:	0e 94 1b 10 	call	0x2036	; 0x2036 <WriteEEMorningDebounce>
    227a:	81 11       	cpse	r24, r1
    227c:	db cf       	rjmp	.-74     	; 0x2234 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_DEBOUNCE_TOSAVE)
    227e:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_values_loaded>
    2282:	85 30       	cpi	r24, 0x05	; 5
    2284:	51 f4       	brne	.+20     	; 0x229a <DayNightValuesFromI2CtoEE+0x94>
        {
            if ( IsValidEveningDebounce(&daynight_evening_debounce) )
    2286:	8a e9       	ldi	r24, 0x9A	; 154
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <IsValidEveningDebounce>
    228e:	88 23       	and	r24, r24
    2290:	21 f0       	breq	.+8      	; 0x229a <DayNightValuesFromI2CtoEE+0x94>
            {
                if (WriteEEEveningDebounce())
    2292:	0e 94 39 10 	call	0x2072	; 0x2072 <WriteEEEveningDebounce>
    2296:	81 11       	cpse	r24, r1
    2298:	cd cf       	rjmp	.-102    	; 0x2234 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        LoadDayNightValuesFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    229a:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <LoadDayNightValuesFromEEPROM>
    229e:	08 95       	ret

000022a0 <check_daynight>:
    bit 6 is set when day_work needs done
    bit 5 is used with I2C, which if a 1 is passed then bits 7 and 6 are returned with the state
    bit 4 is used with I2C, which if set with the bytes from master/host will clear bits 7 and 6 if they are also clear on the data byte from master/host.
*/
void check_daynight()
{
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    // check light on solar pannel with ALT_V, reading are only taken when !ALT_EN.
    int sensor_val = analogRead(ALT_V);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <analogRead>
    22ae:	ec 01       	movw	r28, r24
    uint8_t low_nibble_daynight_state = daynight_state & 0x0F; 
    22b0:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
    22b4:	98 2f       	mov	r25, r24
    22b6:	9f 70       	andi	r25, 0x0F	; 15
    
    if(low_nibble_daynight_state == DAYNIGHT_START_STATE) 
    22b8:	79 f5       	brne	.+94     	; 0x2318 <check_daynight+0x78>
    { 
        unsigned long kRuntime= millis() - dayTmrStarted;
    22ba:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
        if ((kRuntime) > ((unsigned long)STARTUP_DELAY)) 
    22be:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <dayTmrStarted>
    22c2:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <dayTmrStarted+0x1>
    22c6:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <dayTmrStarted+0x2>
    22ca:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <dayTmrStarted+0x3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	80 1b       	sub	r24, r16
    22d4:	91 0b       	sbc	r25, r17
    22d6:	a2 0b       	sbc	r26, r18
    22d8:	b3 0b       	sbc	r27, r19
    22da:	89 3f       	cpi	r24, 0xF9	; 249
    22dc:	9a 42       	sbci	r25, 0x2A	; 42
    22de:	a1 05       	cpc	r26, r1
    22e0:	b1 05       	cpc	r27, r1
    22e2:	08 f4       	brcc	.+2      	; 0x22e6 <check_daynight+0x46>
    22e4:	c7 c0       	rjmp	.+398    	; 0x2474 <check_daynight+0x1d4>
        {
            if(sensor_val > daynight_evening_threshold ) 
    22e6:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <daynight_evening_threshold>
    22ea:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <daynight_evening_threshold+0x1>
    22ee:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE; 
    22f2:	80 7f       	andi	r24, 0xF0	; 240
    if(low_nibble_daynight_state == DAYNIGHT_START_STATE) 
    { 
        unsigned long kRuntime= millis() - dayTmrStarted;
        if ((kRuntime) > ((unsigned long)STARTUP_DELAY)) 
        {
            if(sensor_val > daynight_evening_threshold ) 
    22f4:	2c 17       	cp	r18, r28
    22f6:	3d 07       	cpc	r19, r29
    22f8:	0c f4       	brge	.+2      	; 0x22fc <check_daynight+0x5c>
    22fa:	48 c0       	rjmp	.+144    	; 0x238c <check_daynight+0xec>
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE; 
                dayTmrStarted = millis();
            } 
            else 
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    22fc:	8c 5f       	subi	r24, 0xFC	; 252
    22fe:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_state>
                dayTmrStarted = millis();
    2302:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    2306:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <dayTmrStarted>
    230a:	70 93 a9 03 	sts	0x03A9, r23	; 0x8003a9 <dayTmrStarted+0x1>
    230e:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <dayTmrStarted+0x2>
    2312:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <dayTmrStarted+0x3>
    2316:	ae c0       	rjmp	.+348    	; 0x2474 <check_daynight+0x1d4>
            }
        }
        return;
    } 
  
    if(low_nibble_daynight_state == DAYNIGHT_DAY_STATE) 
    2318:	91 30       	cpi	r25, 0x01	; 1
    231a:	59 f4       	brne	.+22     	; 0x2332 <check_daynight+0x92>
    { //day
        if (sensor_val < daynight_evening_threshold ) 
    231c:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <daynight_evening_threshold>
    2320:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <daynight_evening_threshold+0x1>
    2324:	c2 17       	cp	r28, r18
    2326:	d3 07       	cpc	r29, r19
    2328:	0c f0       	brlt	.+2      	; 0x232c <check_daynight+0x8c>
    232a:	4f c0       	rjmp	.+158    	; 0x23ca <check_daynight+0x12a>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_EVENING_DEBOUNCE_STATE;
    232c:	80 7f       	andi	r24, 0xF0	; 240
    232e:	8e 5f       	subi	r24, 0xFE	; 254
    2330:	40 c0       	rjmp	.+128    	; 0x23b2 <check_daynight+0x112>
            dayTmrStarted = millis();
        }
        return;
    }
  
    if(low_nibble_daynight_state == DAYNIGHT_EVENING_DEBOUNCE_STATE) 
    2332:	92 30       	cpi	r25, 0x02	; 2
    2334:	69 f5       	brne	.+90     	; 0x2390 <check_daynight+0xf0>
    { //evening_debounce
        if (sensor_val < daynight_evening_threshold ) 
    2336:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <daynight_evening_threshold>
    233a:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <daynight_evening_threshold+0x1>
    233e:	c2 17       	cp	r28, r18
    2340:	d3 07       	cpc	r29, r19
    2342:	1c f5       	brge	.+70     	; 0x238a <check_daynight+0xea>
        {
            unsigned long kRuntime= millis() - dayTmrStarted;
    2344:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
            if ((kRuntime) > (daynight_evening_debounce)) 
    2348:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <dayTmrStarted>
    234c:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <dayTmrStarted+0x1>
    2350:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <dayTmrStarted+0x2>
    2354:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <dayTmrStarted+0x3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	80 1b       	sub	r24, r16
    235e:	91 0b       	sbc	r25, r17
    2360:	a2 0b       	sbc	r26, r18
    2362:	b3 0b       	sbc	r27, r19
    2364:	00 91 9a 03 	lds	r16, 0x039A	; 0x80039a <daynight_evening_debounce>
    2368:	10 91 9b 03 	lds	r17, 0x039B	; 0x80039b <daynight_evening_debounce+0x1>
    236c:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_debounce+0x2>
    2370:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_debounce+0x3>
    2374:	08 17       	cp	r16, r24
    2376:	19 07       	cpc	r17, r25
    2378:	2a 07       	cpc	r18, r26
    237a:	3b 07       	cpc	r19, r27
    237c:	08 f0       	brcs	.+2      	; 0x2380 <check_daynight+0xe0>
    237e:	7a c0       	rjmp	.+244    	; 0x2474 <check_daynight+0x1d4>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHTWORK_STATE;
    2380:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
    2384:	80 7f       	andi	r24, 0xF0	; 240
    2386:	8d 5f       	subi	r24, 0xFD	; 253
    2388:	ba cf       	rjmp	.-140    	; 0x22fe <check_daynight+0x5e>
                dayTmrStarted = millis();
            } 
        } 
        else 
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE;
    238a:	80 7f       	andi	r24, 0xF0	; 240
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	b7 cf       	rjmp	.-146    	; 0x22fe <check_daynight+0x5e>
            dayTmrStarted = millis();
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_NIGHTWORK_STATE) 
    2390:	93 30       	cpi	r25, 0x03	; 3
    2392:	21 f4       	brne	.+8      	; 0x239c <check_daynight+0xfc>
    { 
        //set the night work bit if not set
        if (!(daynight_state & 0x80) )
    2394:	87 fd       	sbrc	r24, 7
    2396:	6e c0       	rjmp	.+220    	; 0x2474 <check_daynight+0x1d4>
        {
            daynight_state |= (1<<7); 
    2398:	80 68       	ori	r24, 0x80	; 128
    239a:	6a c0       	rjmp	.+212    	; 0x2470 <check_daynight+0x1d0>
            // should I clear the day work bit?
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_NIGHT_STATE) 
    239c:	94 30       	cpi	r25, 0x04	; 4
    239e:	81 f5       	brne	.+96     	; 0x2400 <check_daynight+0x160>
    { //night
        if (sensor_val > daynight_morning_threshold ) 
    23a0:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <daynight_morning_threshold>
    23a4:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <daynight_morning_threshold+0x1>
    23a8:	2c 17       	cp	r18, r28
    23aa:	3d 07       	cpc	r19, r29
    23ac:	74 f4       	brge	.+28     	; 0x23ca <check_daynight+0x12a>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_MORNING_DEBOUNCE_STATE;
    23ae:	80 7f       	andi	r24, 0xF0	; 240
    23b0:	8b 5f       	subi	r24, 0xFB	; 251
    23b2:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_state>
            dayTmrStarted = millis();
    23b6:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
    23ba:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <dayTmrStarted>
    23be:	70 93 a9 03 	sts	0x03A9, r23	; 0x8003a9 <dayTmrStarted+0x1>
    23c2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <dayTmrStarted+0x2>
    23c6:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <dayTmrStarted+0x3>
        }
        unsigned long kRuntime= millis() - dayTmrStarted;
    23ca:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
        if ((kRuntime) > ((unsigned long)DAYNIGHT_TO_LONG)) 
    23ce:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <dayTmrStarted>
    23d2:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <dayTmrStarted+0x1>
    23d6:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <dayTmrStarted+0x2>
    23da:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <dayTmrStarted+0x3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	80 1b       	sub	r24, r16
    23e4:	91 0b       	sbc	r25, r17
    23e6:	a2 0b       	sbc	r26, r18
    23e8:	b3 0b       	sbc	r27, r19
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	92 4a       	sbci	r25, 0xA2	; 162
    23ee:	aa 44       	sbci	r26, 0x4A	; 74
    23f0:	b4 40       	sbci	r27, 0x04	; 4
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <check_daynight+0x156>
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <check_daynight+0x1d4>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_FAIL_STATE;
    23f6:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
    23fa:	80 7f       	andi	r24, 0xF0	; 240
    23fc:	89 5f       	subi	r24, 0xF9	; 249
    23fe:	7f cf       	rjmp	.-258    	; 0x22fe <check_daynight+0x5e>
            dayTmrStarted = millis();
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_MORNING_DEBOUNCE_STATE) 
    2400:	95 30       	cpi	r25, 0x05	; 5
    2402:	61 f5       	brne	.+88     	; 0x245c <check_daynight+0x1bc>
    { //morning_debounce
        if (sensor_val > daynight_morning_threshold ) 
    2404:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <daynight_morning_threshold>
    2408:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <daynight_morning_threshold+0x1>
    240c:	2c 17       	cp	r18, r28
    240e:	3d 07       	cpc	r19, r29
    2410:	14 f5       	brge	.+68     	; 0x2456 <check_daynight+0x1b6>
        {
            unsigned long kRuntime= millis() - dayTmrStarted;
    2412:	0e 94 4f 14 	call	0x289e	; 0x289e <millis>
            if ((kRuntime) > (daynight_morning_debounce)) 
    2416:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <dayTmrStarted>
    241a:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <dayTmrStarted+0x1>
    241e:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <dayTmrStarted+0x2>
    2422:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <dayTmrStarted+0x3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	80 1b       	sub	r24, r16
    242c:	91 0b       	sbc	r25, r17
    242e:	a2 0b       	sbc	r26, r18
    2430:	b3 0b       	sbc	r27, r19
    2432:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <daynight_morning_debounce>
    2436:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <daynight_morning_debounce+0x1>
    243a:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <daynight_morning_debounce+0x2>
    243e:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <daynight_morning_debounce+0x3>
    2442:	08 17       	cp	r16, r24
    2444:	19 07       	cpc	r17, r25
    2446:	2a 07       	cpc	r18, r26
    2448:	3b 07       	cpc	r19, r27
    244a:	a0 f4       	brcc	.+40     	; 0x2474 <check_daynight+0x1d4>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAYWORK_STATE;
    244c:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_state>
    2450:	80 7f       	andi	r24, 0xF0	; 240
    2452:	8a 5f       	subi	r24, 0xFA	; 250
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <check_daynight+0x1d0>
            }
        }
        else 
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    2456:	80 7f       	andi	r24, 0xF0	; 240
    2458:	8c 5f       	subi	r24, 0xFC	; 252
    245a:	0a c0       	rjmp	.+20     	; 0x2470 <check_daynight+0x1d0>
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_DAYWORK_STATE) 
    245c:	96 30       	cpi	r25, 0x06	; 6
    245e:	21 f4       	brne	.+8      	; 0x2468 <check_daynight+0x1c8>
    { 
        //set the day work bit if not set
        if (!(daynight_state & 0x40) )
    2460:	86 fd       	sbrc	r24, 6
    2462:	08 c0       	rjmp	.+16     	; 0x2474 <check_daynight+0x1d4>
        {
            daynight_state |= (1<<6); 
    2464:	80 64       	ori	r24, 0x40	; 64
    2466:	04 c0       	rjmp	.+8      	; 0x2470 <check_daynight+0x1d0>
        }
        return;
    }

    //index out of bounds? 
    if(low_nibble_daynight_state > DAYNIGHT_FAIL_STATE) 
    2468:	97 30       	cpi	r25, 0x07	; 7
    246a:	21 f0       	breq	.+8      	; 0x2474 <check_daynight+0x1d4>
    { 
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_FAIL_STATE;
    246c:	80 7f       	andi	r24, 0xF0	; 240
    246e:	89 5f       	subi	r24, 0xF9	; 249
    2470:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_state>
        return;
    }
    return;
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	08 95       	ret

0000247e <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	2f 93       	push	r18
    248a:	3f 93       	push	r19
    248c:	4f 93       	push	r20
    248e:	5f 93       	push	r21
    2490:	8f 93       	push	r24
    2492:	9f 93       	push	r25
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2498:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    249c:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    24a0:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    24a2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	8f 71       	andi	r24, 0x1F	; 31
    24ac:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    24ae:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	84 17       	cp	r24, r20
    24b6:	95 07       	cpc	r25, r21
    24b8:	39 f0       	breq	.+14     	; 0x24c8 <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    24ba:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    24be:	fc 01       	movw	r30, r24
    24c0:	eb 55       	subi	r30, 0x5B	; 91
    24c2:	fe 4f       	sbci	r31, 0xFE	; 254
    24c4:	30 83       	st	Z, r19
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    24c8:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    24ca:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    24ce:	ff 91       	pop	r31
    24d0:	ef 91       	pop	r30
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	8f 93       	push	r24
    24f4:	9f 93       	push	r25
    24f6:	ef 93       	push	r30
    24f8:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    24fa:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    24fe:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2502:	98 17       	cp	r25, r24
    2504:	79 f0       	breq	.+30     	; 0x2524 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    2506:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	8f 71       	andi	r24, 0x1F	; 31
    2510:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    2512:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2516:	fc 01       	movw	r30, r24
    2518:	eb 53       	subi	r30, 0x3B	; 59
    251a:	fe 4f       	sbci	r31, 0xFE	; 254
    251c:	80 81       	ld	r24, Z
    251e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2522:	05 c0       	rjmp	.+10     	; 0x252e <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    2524:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2528:	8f 7d       	andi	r24, 0xDF	; 223
    252a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    252e:	ff 91       	pop	r31
    2530:	ef 91       	pop	r30
    2532:	9f 91       	pop	r25
    2534:	8f 91       	pop	r24
    2536:	0f 90       	pop	r0
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	0f 90       	pop	r0
    253c:	1f 90       	pop	r1
    253e:	18 95       	reti

00002540 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    2540:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    2544:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    2548:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    254c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    2550:	97 ff       	sbrs	r25, 7
    2552:	04 c0       	rjmp	.+8      	; 0x255c <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    2554:	22 e0       	ldi	r18, 0x02	; 2
    2556:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    255a:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    255c:	28 e9       	ldi	r18, 0x98	; 152
    255e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    2562:	26 e0       	ldi	r18, 0x06	; 6
    2564:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    2568:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    256c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    2570:	08 95       	ret

00002572 <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    2572:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    2576:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    257a:	98 17       	cp	r25, r24
    257c:	a1 f0       	breq	.+40     	; 0x25a6 <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    257e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	8f 71       	andi	r24, 0x1F	; 31
    2588:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    258a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    258e:	fc 01       	movw	r30, r24
    2590:	eb 55       	subi	r30, 0x5B	; 91
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    2596:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	98 2f       	mov	r25, r24
    259e:	88 27       	eor	r24, r24
    25a0:	82 0f       	add	r24, r18
    25a2:	91 1d       	adc	r25, r1
    25a4:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    25aa:	08 95       	ret

000025ac <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    25ac:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	2f 5f       	subi	r18, 0xFF	; 255
    25b4:	3f 4f       	sbci	r19, 0xFF	; 255
    25b6:	2f 71       	andi	r18, 0x1F	; 31
    25b8:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    25ba:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	24 17       	cp	r18, r20
    25c2:	35 07       	cpc	r19, r21
    25c4:	d1 f3       	breq	.-12     	; 0x25ba <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    25c6:	f9 01       	movw	r30, r18
    25c8:	eb 53       	subi	r30, 0x3B	; 59
    25ca:	fe 4f       	sbci	r31, 0xFE	; 254
    25cc:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    25ce:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    25d2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25d6:	80 62       	ori	r24, 0x20	; 32
    25d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25dc:	08 95       	ret

000025de <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    25de:	0e 94 d6 12 	call	0x25ac	; 0x25ac <uart0_putc>
	return 0;
}
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	08 95       	ret

000025e8 <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    25e8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    25ec:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	80 96       	adiw	r24, 0x20	; 32
    25f4:	82 1b       	sub	r24, r18
    25f6:	91 09       	sbc	r25, r1
} /* uart0_available */
    25f8:	8f 71       	andi	r24, 0x1F	; 31
    25fa:	99 27       	eor	r25, r25
    25fc:	08 95       	ret

000025fe <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    25fe:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <uart0_available>
    2602:	89 2b       	or	r24, r25
    2604:	e1 f3       	breq	.-8      	; 0x25fe <uartstream0_getchar>
    res = uart0_getc();
    2606:	0e 94 b9 12 	call	0x2572	; 0x2572 <uart0_getc>
    if(res == '\r') res = '\n';
    260a:	8d 30       	cpi	r24, 0x0D	; 13
    260c:	91 05       	cpc	r25, r1
    260e:	11 f4       	brne	.+4      	; 0x2614 <uartstream0_getchar+0x16>
    2610:	8a e0       	ldi	r24, 0x0A	; 10
    2612:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    2614:	99 27       	eor	r25, r25
    2616:	08 95       	ret

00002618 <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	8b 01       	movw	r16, r22
    261e:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	80 5a       	subi	r24, 0xA0	; 160
    2626:	9c 41       	sbci	r25, 0x1C	; 28
    2628:	a9 4e       	sbci	r26, 0xE9	; 233
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	43 e0       	ldi	r20, 0x03	; 3
    2632:	66 0f       	add	r22, r22
    2634:	77 1f       	adc	r23, r23
    2636:	88 1f       	adc	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	4a 95       	dec	r20
    263c:	d1 f7       	brne	.-12     	; 0x2632 <uartstream0_init+0x1a>
    263e:	a9 01       	movw	r20, r18
    2640:	98 01       	movw	r18, r16
    2642:	e4 e0       	ldi	r30, 0x04	; 4
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	44 1f       	adc	r20, r20
    264a:	55 1f       	adc	r21, r21
    264c:	ea 95       	dec	r30
    264e:	d1 f7       	brne	.-12     	; 0x2644 <uartstream0_init+0x2c>
    2650:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__udivmodsi4>
    2654:	c9 01       	movw	r24, r18
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	0e 94 a0 12 	call	0x2540	; 0x2540 <uart0_init>
	return &uartstream0_f;
}	
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	08 95       	ret

00002666 <__vector_21>:
volatile uint8_t analog_reference;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    2666:	1f 92       	push	r1
    2668:	0f 92       	push	r0
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	0f 92       	push	r0
    266e:	11 24       	eor	r1, r1
    2670:	2f 93       	push	r18
    2672:	8f 93       	push	r24
    2674:	9f 93       	push	r25
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
    // ADCL contain lower 8 bits, ADCH upper (two bits)
    // Must read ADCL first (news ADC is now defined for this)
    adc[adc_channel] = ADC;
    267a:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <adc_channel>
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2684:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	e2 55       	subi	r30, 0x52	; 82
    268e:	fc 4f       	sbci	r31, 0xFC	; 252
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    //adc[adc_channel] = ADCL | (ADCH << 8);
    
    ++adc_channel;
    2694:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <adc_channel>
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <adc_channel>
    
    // ch 0 is ALT_I, always read
    // ch 1 is ALT_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 1) && digitalRead(ALT_EN) )
    269e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <adc_channel>
    26a2:	81 30       	cpi	r24, 0x01	; 1
    26a4:	29 f4       	brne	.+10     	; 0x26b0 <__vector_21+0x4a>
    26a6:	1b 9b       	sbis	0x03, 3	; 3
    26a8:	03 c0       	rjmp	.+6      	; 0x26b0 <__vector_21+0x4a>
    {
        adc_channel = 6; // skip channel 1
    26aa:	86 e0       	ldi	r24, 0x06	; 6
    26ac:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <adc_channel>
    }
    // skip channels 3..5
    if (adc_channel == 2)
    26b0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <adc_channel>
    26b4:	82 30       	cpi	r24, 0x02	; 2
    26b6:	19 f4       	brne	.+6      	; 0x26be <__vector_21+0x58>
    {
        adc_channel = 6;
    26b8:	86 e0       	ldi	r24, 0x06	; 6
    26ba:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <adc_channel>
    }
    // ch 6 is PWR_I, always read
    // ch 7 is PWR_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 7) && digitalRead(ALT_EN) )
    26be:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <adc_channel>
    26c2:	87 30       	cpi	r24, 0x07	; 7
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <__vector_21+0x6a>
    26c6:	1b 9b       	sbis	0x03, 3	; 3
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <__vector_21+0x6a>
    {
        adc_channel = 8; // skip channel 7
    26ca:	88 e0       	ldi	r24, 0x08	; 8
    26cc:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <adc_channel>
    }

    if (adc_channel >= ADC_CHANNELS) 
    26d0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <adc_channel>
    26d4:	88 30       	cpi	r24, 0x08	; 8
    26d6:	b0 f4       	brcc	.+44     	; 0x2704 <__vector_21+0x9e>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    26d8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    26dc:	80 7f       	andi	r24, 0xF0	; 240
    26de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    26e2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    26e6:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <analog_reference>
    26ea:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <adc_channel>
    26ee:	8f 71       	andi	r24, 0x1F	; 31
    26f0:	82 2b       	or	r24, r18
    26f2:	89 0f       	add	r24, r25
    26f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    26f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26fc:	80 64       	ori	r24, 0x40	; 64
    26fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2702:	0c c0       	rjmp	.+24     	; 0x271c <__vector_21+0xb6>
        adc_channel = 8; // skip channel 7
    }

    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    2704:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <adc_channel>
        adc[ADC_CHANNELS] = 0x7FFF; // mark to notify that ADC burst is done
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	9f e7       	ldi	r25, 0x7F	; 127
    270c:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <adc+0x11>
    2710:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <adc+0x10>
        if (!free_running)
    2714:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <free_running>
    2718:	81 11       	cpse	r24, r1
    271a:	de cf       	rjmp	.-68     	; 0x26d8 <__vector_21+0x72>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    271c:	ff 91       	pop	r31
    271e:	ef 91       	pop	r30
    2720:	9f 91       	pop	r25
    2722:	8f 91       	pop	r24
    2724:	2f 91       	pop	r18
    2726:	0f 90       	pop	r0
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	0f 90       	pop	r0
    272c:	1f 90       	pop	r1
    272e:	18 95       	reti

00002730 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a pin.
    analog_reference = reference;
    2730:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <analog_reference>
    free_running = 0;
    2734:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2738:	ec e7       	ldi	r30, 0x7C	; 124
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    273e:	90 73       	andi	r25, 0x30	; 48
    2740:	89 2b       	or	r24, r25
    2742:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    2744:	ea e7       	ldi	r30, 0x7A	; 122
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	84 60       	ori	r24, 0x04	; 4
    274c:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    274e:	80 81       	ld	r24, Z
    2750:	82 60       	ori	r24, 0x02	; 2
    2752:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    2754:	80 81       	ld	r24, Z
    2756:	8e 7f       	andi	r24, 0xFE	; 254
    2758:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS2);
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
	// enable a2d conversions
	ADCSRA |= (1<<ADEN);
    275a:	80 81       	ld	r24, Z
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0;
    2760:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <ADC_auto_conversion>
    2764:	08 95       	ret

00002766 <enable_ADC_auto_conversion>:

/* This changes the ADC to Auto Trigger mode. It will take readings on each 
    channel and hold them in an array. The array value is accessed by reading from adc[]  */
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    2766:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <adc_channel>
    adc[ADC_CHANNELS] = 0x00;
    276a:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <adc+0x11>
    276e:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <adc+0x10>
    free_running = free_run;
    2772:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <free_running>
    //      EXTERNAL_AREF 0
    //      EXTERNAL_AVCC (1<<REFS0)
    //      INTERNAL_1V1 (1<<REFS1) | (1<<REFS0)
#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2776:	ec e7       	ldi	r30, 0x7C	; 124
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | analog_reference ;
    277c:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <analog_reference>
    2780:	80 73       	andi	r24, 0x30	; 48
    2782:	89 2b       	or	r24, r25
    2784:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    2786:	ea e7       	ldi	r30, 0x7A	; 122
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	84 60       	ori	r24, 0x04	; 4
    278e:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    2790:	80 81       	ld	r24, Z
    2792:	82 60       	ori	r24, 0x02	; 2
    2794:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    2796:	80 81       	ld	r24, Z
    2798:	8e 7f       	andi	r24, 0xFE	; 254
    279a:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
    
	// Power up the ADC and set it for a single conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    279c:	80 81       	ld	r24, Z
    279e:	87 75       	andi	r24, 0x57	; 87
    27a0:	88 68       	ori	r24, 0x88	; 136
    27a2:	80 83       	st	Z, r24

    // Start an ADC Conversion 
    ADCSRA |= (1<<ADSC);
    27a4:	80 81       	ld	r24, Z
    27a6:	80 64       	ori	r24, 0x40	; 64
    27a8:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <ADC_auto_conversion>
    27b0:	08 95       	ret

000027b2 <analogRead>:


// Use the ADC channel number only (not the pin number)
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    27b2:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <ADC_auto_conversion>
    27b6:	99 23       	and	r25, r25
    27b8:	61 f0       	breq	.+24     	; 0x27d2 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    27ba:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27bc:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    27be:	e8 2f       	mov	r30, r24
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	ee 0f       	add	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	e2 55       	subi	r30, 0x52	; 82
    27c8:	fc 4f       	sbci	r31, 0xFC	; 252
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27ce:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    27d0:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    27d2:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    27d6:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    27d8:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    27dc:	e8 2f       	mov	r30, r24
    27de:	e7 70       	andi	r30, 0x07	; 7
    27e0:	82 2f       	mov	r24, r18
    27e2:	89 2b       	or	r24, r25
    27e4:	e8 2b       	or	r30, r24
    27e6:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    27ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27ee:	80 64       	ori	r24, 0x40	; 64
    27f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    27f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27f8:	86 fd       	sbrc	r24, 6
    27fa:	fc cf       	rjmp	.-8      	; 0x27f4 <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    27fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    2800:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    2808:	08 95       	ret

0000280a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    280a:	1f 92       	push	r1
    280c:	0f 92       	push	r0
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	0f 92       	push	r0
    2812:	11 24       	eor	r1, r1
    2814:	2f 93       	push	r18
    2816:	3f 93       	push	r19
    2818:	8f 93       	push	r24
    281a:	9f 93       	push	r25
    281c:	af 93       	push	r26
    281e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2820:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
    2824:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    2828:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    282c:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2830:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2834:	2d e2       	ldi	r18, 0x2D	; 45
    2836:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2838:	2d 37       	cpi	r18, 0x7D	; 125
    283a:	20 f4       	brcc	.+8      	; 0x2844 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	a1 1d       	adc	r26, r1
    2840:	b1 1d       	adc	r27, r1
    2842:	05 c0       	rjmp	.+10     	; 0x284e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2844:	20 eb       	ldi	r18, 0xB0	; 176
    2846:	23 0f       	add	r18, r19
		m += 1;
    2848:	02 96       	adiw	r24, 0x02	; 2
    284a:	a1 1d       	adc	r26, r1
    284c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    284e:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
	timer0_millis = m;
    2852:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
    2856:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
    285a:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
    285e:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
	timer0_overflow_count++;
    2862:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
    2866:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
    286a:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
    286e:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	a1 1d       	adc	r26, r1
    2876:	b1 1d       	adc	r27, r1
    2878:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
    287c:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
    2880:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
    2884:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
}
    2888:	bf 91       	pop	r27
    288a:	af 91       	pop	r26
    288c:	9f 91       	pop	r25
    288e:	8f 91       	pop	r24
    2890:	3f 91       	pop	r19
    2892:	2f 91       	pop	r18
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	0f 90       	pop	r0
    289a:	1f 90       	pop	r1
    289c:	18 95       	reti

0000289e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    289e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    28a0:	f8 94       	cli
	m = timer0_millis;
    28a2:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
    28a6:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    28aa:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    28ae:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	SREG = oldSREG;
    28b2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    28b4:	08 95       	ret

000028b6 <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    28b6:	84 b5       	in	r24, 0x24	; 36
    28b8:	82 60       	ori	r24, 0x02	; 2
    28ba:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    28bc:	84 b5       	in	r24, 0x24	; 36
    28be:	81 60       	ori	r24, 0x01	; 1
    28c0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    28c2:	85 b5       	in	r24, 0x25	; 37
    28c4:	82 60       	ori	r24, 0x02	; 2
    28c6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    28c8:	85 b5       	in	r24, 0x25	; 37
    28ca:	81 60       	ori	r24, 0x01	; 1
    28cc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    28ce:	ee e6       	ldi	r30, 0x6E	; 110
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	81 60       	ori	r24, 0x01	; 1
    28d6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    28d8:	e1 e8       	ldi	r30, 0x81	; 129
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    28de:	80 81       	ld	r24, Z
    28e0:	82 60       	ori	r24, 0x02	; 2
    28e2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    28e4:	80 81       	ld	r24, Z
    28e6:	81 60       	ori	r24, 0x01	; 1
    28e8:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    28ea:	e0 e8       	ldi	r30, 0x80	; 128
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	81 60       	ori	r24, 0x01	; 1
    28f2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    28f4:	e1 eb       	ldi	r30, 0xB1	; 177
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	84 60       	ori	r24, 0x04	; 4
    28fc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    28fe:	e0 eb       	ldi	r30, 0xB0	; 176
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	81 60       	ori	r24, 0x01	; 1
    2906:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    2908:	e1 e9       	ldi	r30, 0x91	; 145
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	82 60       	ori	r24, 0x02	; 2
    2910:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    2912:	80 81       	ld	r24, Z
    2914:	81 60       	ori	r24, 0x01	; 1
    2916:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2918:	e0 e9       	ldi	r30, 0x90	; 144
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	81 60       	ori	r24, 0x01	; 1
    2920:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    2922:	e1 ea       	ldi	r30, 0xA1	; 161
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	82 60       	ori	r24, 0x02	; 2
    292a:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    292c:	80 81       	ld	r24, Z
    292e:	81 60       	ori	r24, 0x01	; 1
    2930:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2932:	e0 ea       	ldi	r30, 0xA0	; 160
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	81 60       	ori	r24, 0x01	; 1
    293a:	80 83       	st	Z, r24
    293c:	08 95       	ret

0000293e <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    293e:	08 95       	ret

00002940 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2940:	08 95       	ret

00002942 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    2942:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    twi0_sendStop = 1;		// default value
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi0_sendStop>
    twi0_inRepStart = 0;
    294c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2950:	88 23       	and	r24, r24
    2952:	21 f0       	breq	.+8      	; 0x295c <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    2954:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    2956:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    2958:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    295a:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    295c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2960:	8e 7f       	andi	r24, 0xFE	; 254
    2962:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    2966:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    296a:	8d 7f       	andi	r24, 0xFD	; 253
    296c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    2970:	84 e3       	ldi	r24, 0x34	; 52
    2972:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2976:	85 e4       	ldi	r24, 0x45	; 69
    2978:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    297c:	08 95       	ret

0000297e <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    297e:	88 0f       	add	r24, r24
    2980:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    2984:	08 95       	ret

00002986 <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    2986:	61 32       	cpi	r22, 0x21	; 33
    2988:	98 f4       	brcc	.+38     	; 0x29b0 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    298a:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <twi0_state>
    298e:	24 30       	cpi	r18, 0x04	; 4
    2990:	89 f4       	brne	.+34     	; 0x29b4 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    2992:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi0_txBufferLength>
    2996:	28 2f       	mov	r18, r24
    2998:	a3 e1       	ldi	r26, 0x13	; 19
    299a:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    299c:	fc 01       	movw	r30, r24
    299e:	8e 2f       	mov	r24, r30
    29a0:	82 1b       	sub	r24, r18
    29a2:	86 17       	cp	r24, r22
    29a4:	18 f4       	brcc	.+6      	; 0x29ac <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    29a6:	81 91       	ld	r24, Z+
    29a8:	8d 93       	st	X+, r24
    29aa:	f9 cf       	rjmp	.-14     	; 0x299e <twi0_transmit+0x18>
    }
  
    return 0;
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    29b6:	08 95       	ret

000029b8 <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    29b8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    29bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    29c0:	08 95       	ret

000029c2 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    29c2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    29c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    29ca:	08 95       	ret

000029cc <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    29cc:	85 ed       	ldi	r24, 0xD5	; 213
    29ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    29d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    29d6:	84 fd       	sbrc	r24, 4
    29d8:	fc cf       	rjmp	.-8      	; 0x29d2 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    29da:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    29de:	08 95       	ret

000029e0 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    29e0:	85 ec       	ldi	r24, 0xC5	; 197
    29e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    29e6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    29ea:	08 95       	ret

000029ec <__vector_24>:
}

ISR(TWI0_vect)
{
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	2f 93       	push	r18
    29f8:	3f 93       	push	r19
    29fa:	4f 93       	push	r20
    29fc:	5f 93       	push	r21
    29fe:	6f 93       	push	r22
    2a00:	7f 93       	push	r23
    2a02:	8f 93       	push	r24
    2a04:	9f 93       	push	r25
    2a06:	af 93       	push	r26
    2a08:	bf 93       	push	r27
    2a0a:	ef 93       	push	r30
    2a0c:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    2a0e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2a12:	88 7f       	andi	r24, 0xF8	; 248
    2a14:	80 36       	cpi	r24, 0x60	; 96
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <__vector_24+0x2e>
    2a18:	9e c0       	rjmp	.+316    	; 0x2b56 <__vector_24+0x16a>
    2a1a:	78 f5       	brcc	.+94     	; 0x2a7a <__vector_24+0x8e>
    2a1c:	88 32       	cpi	r24, 0x28	; 40
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__vector_24+0x36>
    2a20:	5d c0       	rjmp	.+186    	; 0x2adc <__vector_24+0xf0>
    2a22:	90 f4       	brcc	.+36     	; 0x2a48 <__vector_24+0x5c>
    2a24:	80 31       	cpi	r24, 0x10	; 16
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <__vector_24+0x3e>
    2a28:	56 c0       	rjmp	.+172    	; 0x2ad6 <__vector_24+0xea>
    2a2a:	38 f4       	brcc	.+14     	; 0x2a3a <__vector_24+0x4e>
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <__vector_24+0x46>
    2a30:	f5 c0       	rjmp	.+490    	; 0x2c1c <__vector_24+0x230>
    2a32:	88 30       	cpi	r24, 0x08	; 8
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <__vector_24+0x4c>
    2a36:	4f c0       	rjmp	.+158    	; 0x2ad6 <__vector_24+0xea>
    2a38:	f5 c0       	rjmp	.+490    	; 0x2c24 <__vector_24+0x238>
    2a3a:	88 31       	cpi	r24, 0x18	; 24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <__vector_24+0x54>
    2a3e:	4e c0       	rjmp	.+156    	; 0x2adc <__vector_24+0xf0>
    2a40:	80 32       	cpi	r24, 0x20	; 32
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <__vector_24+0x5a>
    2a44:	5f c0       	rjmp	.+190    	; 0x2b04 <__vector_24+0x118>
    2a46:	ee c0       	rjmp	.+476    	; 0x2c24 <__vector_24+0x238>
    2a48:	80 34       	cpi	r24, 0x40	; 64
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <__vector_24+0x62>
    2a4c:	6a c0       	rjmp	.+212    	; 0x2b22 <__vector_24+0x136>
    2a4e:	58 f4       	brcc	.+22     	; 0x2a66 <__vector_24+0x7a>
    2a50:	80 33       	cpi	r24, 0x30	; 48
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <__vector_24+0x6a>
    2a54:	57 c0       	rjmp	.+174    	; 0x2b04 <__vector_24+0x118>
    2a56:	88 33       	cpi	r24, 0x38	; 56
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <__vector_24+0x70>
    2a5a:	e4 c0       	rjmp	.+456    	; 0x2c24 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    2a5c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
            twi0_releaseBus();
    2a60:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <twi0_releaseBus>
            break;
    2a64:	df c0       	rjmp	.+446    	; 0x2c24 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    2a66:	80 35       	cpi	r24, 0x50	; 80
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <__vector_24+0x80>
    2a6a:	4f c0       	rjmp	.+158    	; 0x2b0a <__vector_24+0x11e>
    2a6c:	88 35       	cpi	r24, 0x58	; 88
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <__vector_24+0x86>
    2a70:	5d c0       	rjmp	.+186    	; 0x2b2c <__vector_24+0x140>
    2a72:	88 34       	cpi	r24, 0x48	; 72
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <__vector_24+0x8c>
    2a76:	d6 c0       	rjmp	.+428    	; 0x2c24 <__vector_24+0x238>
    2a78:	d3 c0       	rjmp	.+422    	; 0x2c20 <__vector_24+0x234>
    2a7a:	88 39       	cpi	r24, 0x98	; 152
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <__vector_24+0x94>
    2a7e:	c4 c0       	rjmp	.+392    	; 0x2c08 <__vector_24+0x21c>
    2a80:	a8 f4       	brcc	.+42     	; 0x2aac <__vector_24+0xc0>
    2a82:	88 37       	cpi	r24, 0x78	; 120
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <__vector_24+0x9c>
    2a86:	67 c0       	rjmp	.+206    	; 0x2b56 <__vector_24+0x16a>
    2a88:	38 f4       	brcc	.+14     	; 0x2a98 <__vector_24+0xac>
    2a8a:	88 36       	cpi	r24, 0x68	; 104
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <__vector_24+0xa4>
    2a8e:	63 c0       	rjmp	.+198    	; 0x2b56 <__vector_24+0x16a>
    2a90:	80 37       	cpi	r24, 0x70	; 112
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <__vector_24+0xaa>
    2a94:	60 c0       	rjmp	.+192    	; 0x2b56 <__vector_24+0x16a>
    2a96:	c6 c0       	rjmp	.+396    	; 0x2c24 <__vector_24+0x238>
    2a98:	88 38       	cpi	r24, 0x88	; 136
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <__vector_24+0xb2>
    2a9c:	b5 c0       	rjmp	.+362    	; 0x2c08 <__vector_24+0x21c>
    2a9e:	80 39       	cpi	r24, 0x90	; 144
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <__vector_24+0xb8>
    2aa2:	5f c0       	rjmp	.+190    	; 0x2b62 <__vector_24+0x176>
    2aa4:	80 38       	cpi	r24, 0x80	; 128
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <__vector_24+0xbe>
    2aa8:	bd c0       	rjmp	.+378    	; 0x2c24 <__vector_24+0x238>
    2aaa:	5b c0       	rjmp	.+182    	; 0x2b62 <__vector_24+0x176>
    2aac:	80 3b       	cpi	r24, 0xB0	; 176
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <__vector_24+0xc6>
    2ab0:	83 c0       	rjmp	.+262    	; 0x2bb8 <__vector_24+0x1cc>
    2ab2:	38 f4       	brcc	.+14     	; 0x2ac2 <__vector_24+0xd6>
    2ab4:	80 3a       	cpi	r24, 0xA0	; 160
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <__vector_24+0xce>
    2ab8:	66 c0       	rjmp	.+204    	; 0x2b86 <__vector_24+0x19a>
    2aba:	88 3a       	cpi	r24, 0xA8	; 168
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <__vector_24+0xd4>
    2abe:	7c c0       	rjmp	.+248    	; 0x2bb8 <__vector_24+0x1cc>
    2ac0:	b1 c0       	rjmp	.+354    	; 0x2c24 <__vector_24+0x238>
    2ac2:	80 3c       	cpi	r24, 0xC0	; 192
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <__vector_24+0xdc>
    2ac6:	a4 c0       	rjmp	.+328    	; 0x2c10 <__vector_24+0x224>
    2ac8:	88 3c       	cpi	r24, 0xC8	; 200
    2aca:	09 f4       	brne	.+2      	; 0x2ace <__vector_24+0xe2>
    2acc:	a1 c0       	rjmp	.+322    	; 0x2c10 <__vector_24+0x224>
    2ace:	88 3b       	cpi	r24, 0xB8	; 184
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <__vector_24+0xe8>
    2ad2:	87 c0       	rjmp	.+270    	; 0x2be2 <__vector_24+0x1f6>
    2ad4:	a7 c0       	rjmp	.+334    	; 0x2c24 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    2ad6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi0_slarw>
    2ada:	10 c0       	rjmp	.+32     	; 0x2afc <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2adc:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2ae0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    2ae4:	98 17       	cp	r25, r24
    2ae6:	70 f5       	brcc	.+92     	; 0x2b44 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    2ae8:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	8e 0f       	add	r24, r30
    2af0:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	eb 5c       	subi	r30, 0xCB	; 203
    2af8:	fd 4f       	sbci	r31, 0xFD	; 253
    2afa:	80 81       	ld	r24, Z
    2afc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2b00:	85 ec       	ldi	r24, 0xC5	; 197
    2b02:	83 c0       	rjmp	.+262    	; 0x2c0a <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    2b04:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
    2b08:	8b c0       	rjmp	.+278    	; 0x2c20 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2b0a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	8e 0f       	add	r24, r30
    2b12:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2b16:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	eb 5c       	subi	r30, 0xCB	; 203
    2b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b20:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2b22:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2b26:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    2b2a:	6b c0       	rjmp	.+214    	; 0x2c02 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2b2c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	8e 0f       	add	r24, r30
    2b34:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2b38:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	eb 5c       	subi	r30, 0xCB	; 203
    2b40:	fd 4f       	sbci	r31, 0xFD	; 253
    2b42:	80 83       	st	Z, r24
            if (twi0_sendStop)
    2b44:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_sendStop>
    2b48:	81 11       	cpse	r24, r1
    2b4a:	6a c0       	rjmp	.+212    	; 0x2c20 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2b52:	84 ea       	ldi	r24, 0xA4	; 164
    2b54:	5e c0       	rjmp	.+188    	; 0x2c12 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    2b5c:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
    2b60:	cf cf       	rjmp	.-98     	; 0x2b00 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2b62:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2b66:	80 32       	cpi	r24, 0x20	; 32
    2b68:	08 f0       	brcs	.+2      	; 0x2b6c <__vector_24+0x180>
    2b6a:	4e c0       	rjmp	.+156    	; 0x2c08 <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    2b6c:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	8e 0f       	add	r24, r30
    2b74:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi0_rxBufferIndex>
    2b78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	ef 50       	subi	r30, 0x0F	; 15
    2b80:	fe 4f       	sbci	r31, 0xFE	; 254
    2b82:	80 83       	st	Z, r24
    2b84:	bd cf       	rjmp	.-134    	; 0x2b00 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    2b86:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2b8a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2b8e:	80 32       	cpi	r24, 0x20	; 32
    2b90:	30 f4       	brcc	.+12     	; 0x2b9e <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    2b92:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	ef 50       	subi	r30, 0x0F	; 15
    2b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b9c:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    2b9e:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    2ba8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    2bac:	81 ef       	ldi	r24, 0xF1	; 241
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    2bb2:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
            break;
    2bb6:	36 c0       	rjmp	.+108    	; 0x2c24 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    2bb8:	84 e0       	ldi	r24, 0x04	; 4
    2bba:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    2bbe:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    2bc2:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    2bc6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    2bca:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    2bce:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    2bd0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    2bde:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    2be2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	8e 0f       	add	r24, r30
    2bea:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi0_txBufferIndex>
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	ed 5e       	subi	r30, 0xED	; 237
    2bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf4:	80 81       	ld	r24, Z
    2bf6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    2bfa:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2bfe:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2c02:	98 17       	cp	r25, r24
    2c04:	08 f4       	brcc	.+2      	; 0x2c08 <__vector_24+0x21c>
    2c06:	7c cf       	rjmp	.-264    	; 0x2b00 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2c08:	85 e8       	ldi	r24, 0x85	; 133
    2c0a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c0e:	0a c0       	rjmp	.+20     	; 0x2c24 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2c10:	85 ec       	ldi	r24, 0xC5	; 197
    2c12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    2c16:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
            break;
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    2c1c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_error>
            twi0_stop();
    2c20:	0e 94 e6 14 	call	0x29cc	; 0x29cc <twi0_stop>
            break;
    }
}
    2c24:	ff 91       	pop	r31
    2c26:	ef 91       	pop	r30
    2c28:	bf 91       	pop	r27
    2c2a:	af 91       	pop	r26
    2c2c:	9f 91       	pop	r25
    2c2e:	8f 91       	pop	r24
    2c30:	7f 91       	pop	r23
    2c32:	6f 91       	pop	r22
    2c34:	5f 91       	pop	r21
    2c36:	4f 91       	pop	r20
    2c38:	3f 91       	pop	r19
    2c3a:	2f 91       	pop	r18
    2c3c:	0f 90       	pop	r0
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	0f 90       	pop	r0
    2c42:	1f 90       	pop	r1
    2c44:	18 95       	reti

00002c46 <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    2c46:	08 95       	ret

00002c48 <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2c48:	08 95       	ret

00002c4a <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    2c4a:	2d e7       	ldi	r18, 0x7D	; 125
    2c4c:	32 e0       	ldi	r19, 0x02	; 2
    2c4e:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <twi1_rxBuffer+0x1>
    2c52:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    2c56:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    twi1_sendStop = 1;		// default value
    2c5a:	91 e0       	ldi	r25, 0x01	; 1
    2c5c:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi1_sendStop>
    twi1_inRepStart = 0;
    2c60:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2c64:	88 23       	and	r24, r24
    2c66:	21 f0       	breq	.+8      	; 0x2c70 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    2c68:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    2c6a:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    2c6c:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    2c6e:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    2c70:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2c74:	8e 7f       	andi	r24, 0xFE	; 254
    2c76:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    2c7a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2c7e:	8d 7f       	andi	r24, 0xFD	; 253
    2c80:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    2c84:	84 e3       	ldi	r24, 0x34	; 52
    2c86:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2c8a:	85 e4       	ldi	r24, 0x45	; 69
    2c8c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2c90:	08 95       	ret

00002c92 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    2c92:	88 0f       	add	r24, r24
    2c94:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    2c98:	08 95       	ret

00002c9a <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    2c9a:	61 32       	cpi	r22, 0x21	; 33
    2c9c:	98 f4       	brcc	.+38     	; 0x2cc4 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    2c9e:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <twi1_state>
    2ca2:	24 30       	cpi	r18, 0x04	; 4
    2ca4:	89 f4       	brne	.+34     	; 0x2cc8 <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    2ca6:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <twi1_txBufferLength>
    2caa:	28 2f       	mov	r18, r24
    2cac:	af e9       	ldi	r26, 0x9F	; 159
    2cae:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	8e 2f       	mov	r24, r30
    2cb4:	82 1b       	sub	r24, r18
    2cb6:	86 17       	cp	r24, r22
    2cb8:	18 f4       	brcc	.+6      	; 0x2cc0 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    2cba:	81 91       	ld	r24, Z+
    2cbc:	8d 93       	st	X+, r24
    2cbe:	f9 cf       	rjmp	.-14     	; 0x2cb2 <twi1_transmit+0x18>
    }
  
    return 0;
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    2cca:	08 95       	ret

00002ccc <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2ccc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    2cd0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    2cd4:	08 95       	ret

00002cd6 <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    2cd6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2cda:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    2cde:	08 95       	ret

00002ce0 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2ce0:	85 ed       	ldi	r24, 0xD5	; 213
    2ce2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    2ce6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2cea:	84 fd       	sbrc	r24, 4
    2cec:	fc cf       	rjmp	.-8      	; 0x2ce6 <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2cee:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2cf2:	08 95       	ret

00002cf4 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2cf4:	85 ec       	ldi	r24, 0xC5	; 197
    2cf6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    2cfa:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2cfe:	08 95       	ret

00002d00 <__vector_40>:
}

ISR(TWI1_vect)
{
    2d00:	1f 92       	push	r1
    2d02:	0f 92       	push	r0
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	0f 92       	push	r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	2f 93       	push	r18
    2d0c:	3f 93       	push	r19
    2d0e:	4f 93       	push	r20
    2d10:	5f 93       	push	r21
    2d12:	6f 93       	push	r22
    2d14:	7f 93       	push	r23
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    2d1a:	af 93       	push	r26
    2d1c:	bf 93       	push	r27
    2d1e:	ef 93       	push	r30
    2d20:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2d22:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2d26:	88 7f       	andi	r24, 0xF8	; 248
    2d28:	80 36       	cpi	r24, 0x60	; 96
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <__vector_40+0x2e>
    2d2c:	9e c0       	rjmp	.+316    	; 0x2e6a <__vector_40+0x16a>
    2d2e:	78 f5       	brcc	.+94     	; 0x2d8e <__vector_40+0x8e>
    2d30:	88 32       	cpi	r24, 0x28	; 40
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <__vector_40+0x36>
    2d34:	5d c0       	rjmp	.+186    	; 0x2df0 <__vector_40+0xf0>
    2d36:	90 f4       	brcc	.+36     	; 0x2d5c <__vector_40+0x5c>
    2d38:	80 31       	cpi	r24, 0x10	; 16
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <__vector_40+0x3e>
    2d3c:	56 c0       	rjmp	.+172    	; 0x2dea <__vector_40+0xea>
    2d3e:	38 f4       	brcc	.+14     	; 0x2d4e <__vector_40+0x4e>
    2d40:	88 23       	and	r24, r24
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <__vector_40+0x46>
    2d44:	0a c1       	rjmp	.+532    	; 0x2f5a <__vector_40+0x25a>
    2d46:	88 30       	cpi	r24, 0x08	; 8
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <__vector_40+0x4c>
    2d4a:	4f c0       	rjmp	.+158    	; 0x2dea <__vector_40+0xea>
    2d4c:	0a c1       	rjmp	.+532    	; 0x2f62 <__vector_40+0x262>
    2d4e:	88 31       	cpi	r24, 0x18	; 24
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <__vector_40+0x54>
    2d52:	4e c0       	rjmp	.+156    	; 0x2df0 <__vector_40+0xf0>
    2d54:	80 32       	cpi	r24, 0x20	; 32
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <__vector_40+0x5a>
    2d58:	5f c0       	rjmp	.+190    	; 0x2e18 <__vector_40+0x118>
    2d5a:	03 c1       	rjmp	.+518    	; 0x2f62 <__vector_40+0x262>
    2d5c:	80 34       	cpi	r24, 0x40	; 64
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <__vector_40+0x62>
    2d60:	6a c0       	rjmp	.+212    	; 0x2e36 <__vector_40+0x136>
    2d62:	58 f4       	brcc	.+22     	; 0x2d7a <__vector_40+0x7a>
    2d64:	80 33       	cpi	r24, 0x30	; 48
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <__vector_40+0x6a>
    2d68:	57 c0       	rjmp	.+174    	; 0x2e18 <__vector_40+0x118>
    2d6a:	88 33       	cpi	r24, 0x38	; 56
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <__vector_40+0x70>
    2d6e:	f9 c0       	rjmp	.+498    	; 0x2f62 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    2d70:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
            twi1_releaseBus();
    2d74:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <twi1_releaseBus>
            break;
    2d78:	f4 c0       	rjmp	.+488    	; 0x2f62 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2d7a:	80 35       	cpi	r24, 0x50	; 80
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <__vector_40+0x80>
    2d7e:	4f c0       	rjmp	.+158    	; 0x2e1e <__vector_40+0x11e>
    2d80:	88 35       	cpi	r24, 0x58	; 88
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <__vector_40+0x86>
    2d84:	5d c0       	rjmp	.+186    	; 0x2e40 <__vector_40+0x140>
    2d86:	88 34       	cpi	r24, 0x48	; 72
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <__vector_40+0x8c>
    2d8a:	eb c0       	rjmp	.+470    	; 0x2f62 <__vector_40+0x262>
    2d8c:	e8 c0       	rjmp	.+464    	; 0x2f5e <__vector_40+0x25e>
    2d8e:	88 39       	cpi	r24, 0x98	; 152
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <__vector_40+0x94>
    2d92:	d9 c0       	rjmp	.+434    	; 0x2f46 <__vector_40+0x246>
    2d94:	a8 f4       	brcc	.+42     	; 0x2dc0 <__vector_40+0xc0>
    2d96:	88 37       	cpi	r24, 0x78	; 120
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <__vector_40+0x9c>
    2d9a:	67 c0       	rjmp	.+206    	; 0x2e6a <__vector_40+0x16a>
    2d9c:	38 f4       	brcc	.+14     	; 0x2dac <__vector_40+0xac>
    2d9e:	88 36       	cpi	r24, 0x68	; 104
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_40+0xa4>
    2da2:	63 c0       	rjmp	.+198    	; 0x2e6a <__vector_40+0x16a>
    2da4:	80 37       	cpi	r24, 0x70	; 112
    2da6:	09 f4       	brne	.+2      	; 0x2daa <__vector_40+0xaa>
    2da8:	60 c0       	rjmp	.+192    	; 0x2e6a <__vector_40+0x16a>
    2daa:	db c0       	rjmp	.+438    	; 0x2f62 <__vector_40+0x262>
    2dac:	88 38       	cpi	r24, 0x88	; 136
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <__vector_40+0xb2>
    2db0:	ca c0       	rjmp	.+404    	; 0x2f46 <__vector_40+0x246>
    2db2:	80 39       	cpi	r24, 0x90	; 144
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <__vector_40+0xb8>
    2db6:	5f c0       	rjmp	.+190    	; 0x2e76 <__vector_40+0x176>
    2db8:	80 38       	cpi	r24, 0x80	; 128
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <__vector_40+0xbe>
    2dbc:	d2 c0       	rjmp	.+420    	; 0x2f62 <__vector_40+0x262>
    2dbe:	5b c0       	rjmp	.+182    	; 0x2e76 <__vector_40+0x176>
    2dc0:	80 3b       	cpi	r24, 0xB0	; 176
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <__vector_40+0xc6>
    2dc4:	98 c0       	rjmp	.+304    	; 0x2ef6 <__vector_40+0x1f6>
    2dc6:	38 f4       	brcc	.+14     	; 0x2dd6 <__vector_40+0xd6>
    2dc8:	80 3a       	cpi	r24, 0xA0	; 160
    2dca:	09 f4       	brne	.+2      	; 0x2dce <__vector_40+0xce>
    2dcc:	69 c0       	rjmp	.+210    	; 0x2ea0 <__vector_40+0x1a0>
    2dce:	88 3a       	cpi	r24, 0xA8	; 168
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <__vector_40+0xd4>
    2dd2:	91 c0       	rjmp	.+290    	; 0x2ef6 <__vector_40+0x1f6>
    2dd4:	c6 c0       	rjmp	.+396    	; 0x2f62 <__vector_40+0x262>
    2dd6:	80 3c       	cpi	r24, 0xC0	; 192
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <__vector_40+0xdc>
    2dda:	b9 c0       	rjmp	.+370    	; 0x2f4e <__vector_40+0x24e>
    2ddc:	88 3c       	cpi	r24, 0xC8	; 200
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <__vector_40+0xe2>
    2de0:	b6 c0       	rjmp	.+364    	; 0x2f4e <__vector_40+0x24e>
    2de2:	88 3b       	cpi	r24, 0xB8	; 184
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <__vector_40+0xe8>
    2de6:	9c c0       	rjmp	.+312    	; 0x2f20 <__vector_40+0x220>
    2de8:	bc c0       	rjmp	.+376    	; 0x2f62 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    2dea:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi1_slarw>
    2dee:	10 c0       	rjmp	.+32     	; 0x2e10 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2df0:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2df4:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2df8:	98 17       	cp	r25, r24
    2dfa:	70 f5       	brcc	.+92     	; 0x2e58 <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2dfc:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	8e 0f       	add	r24, r30
    2e04:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	ef 53       	subi	r30, 0x3F	; 63
    2e0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e0e:	80 81       	ld	r24, Z
    2e10:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2e14:	85 ec       	ldi	r24, 0xC5	; 197
    2e16:	98 c0       	rjmp	.+304    	; 0x2f48 <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    2e18:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
    2e1c:	a0 c0       	rjmp	.+320    	; 0x2f5e <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2e1e:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	8e 0f       	add	r24, r30
    2e26:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2e2a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	ef 53       	subi	r30, 0x3F	; 63
    2e32:	fd 4f       	sbci	r31, 0xFD	; 253
    2e34:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2e36:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2e3a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2e3e:	80 c0       	rjmp	.+256    	; 0x2f40 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2e40:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	8e 0f       	add	r24, r30
    2e48:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2e4c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	ef 53       	subi	r30, 0x3F	; 63
    2e54:	fd 4f       	sbci	r31, 0xFD	; 253
    2e56:	80 83       	st	Z, r24
            if (twi1_sendStop)
    2e58:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_sendStop>
    2e5c:	81 11       	cpse	r24, r1
    2e5e:	7f c0       	rjmp	.+254    	; 0x2f5e <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2e66:	84 ea       	ldi	r24, 0xA4	; 164
    2e68:	73 c0       	rjmp	.+230    	; 0x2f50 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2e6a:	83 e0       	ldi	r24, 0x03	; 3
    2e6c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2e70:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
    2e74:	cf cf       	rjmp	.-98     	; 0x2e14 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2e76:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2e7a:	80 32       	cpi	r24, 0x20	; 32
    2e7c:	08 f0       	brcs	.+2      	; 0x2e80 <__vector_40+0x180>
    2e7e:	63 c0       	rjmp	.+198    	; 0x2f46 <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2e80:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi1_rxBuffer>
    2e84:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2e88:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	98 0f       	add	r25, r24
    2e90:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi1_rxBufferIndex>
    2e94:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2e98:	e8 0f       	add	r30, r24
    2e9a:	f1 1d       	adc	r31, r1
    2e9c:	90 83       	st	Z, r25
    2e9e:	ba cf       	rjmp	.-140    	; 0x2e14 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2ea0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2ea4:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2ea8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2eac:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2eb0:	20 32       	cpi	r18, 0x20	; 32
    2eb2:	30 f4       	brcc	.+12     	; 0x2ec0 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2eb4:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e2 0f       	add	r30, r18
    2ebc:	f1 1d       	adc	r31, r1
    2ebe:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2ec0:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    2eca:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    2ece:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2ed0:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2ed4:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2ed8:	8d 57       	subi	r24, 0x7D	; 125
    2eda:	92 40       	sbci	r25, 0x02	; 2
    2edc:	19 f4       	brne	.+6      	; 0x2ee4 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2ede:	8d e5       	ldi	r24, 0x5D	; 93
    2ee0:	92 e0       	ldi	r25, 0x02	; 2
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2ee4:	8d e7       	ldi	r24, 0x7D	; 125
    2ee6:	92 e0       	ldi	r25, 0x02	; 2
    2ee8:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi1_rxBuffer+0x1>
    2eec:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2ef0:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
            break;
    2ef4:	36 c0       	rjmp	.+108    	; 0x2f62 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    2ef6:	84 e0       	ldi	r24, 0x04	; 4
    2ef8:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2efc:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2f00:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2f04:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    2f08:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2f0c:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2f0e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2f12:	81 11       	cpse	r24, r1
    2f14:	05 c0       	rjmp	.+10     	; 0x2f20 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2f1c:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2f20:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	8e 0f       	add	r24, r30
    2f28:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi1_txBufferIndex>
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	e1 56       	subi	r30, 0x61	; 97
    2f30:	fd 4f       	sbci	r31, 0xFD	; 253
    2f32:	80 81       	ld	r24, Z
    2f34:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    2f38:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2f3c:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2f40:	98 17       	cp	r25, r24
    2f42:	08 f4       	brcc	.+2      	; 0x2f46 <__vector_40+0x246>
    2f44:	67 cf       	rjmp	.-306    	; 0x2e14 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2f46:	85 e8       	ldi	r24, 0x85	; 133
    2f48:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2f4c:	0a c0       	rjmp	.+20     	; 0x2f62 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2f4e:	85 ec       	ldi	r24, 0xC5	; 197
    2f50:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    2f54:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
            break;
    2f58:	04 c0       	rjmp	.+8      	; 0x2f62 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2f5a:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_error>
            twi1_stop();
    2f5e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <twi1_stop>
            break;
    }
}
    2f62:	ff 91       	pop	r31
    2f64:	ef 91       	pop	r30
    2f66:	bf 91       	pop	r27
    2f68:	af 91       	pop	r26
    2f6a:	9f 91       	pop	r25
    2f6c:	8f 91       	pop	r24
    2f6e:	7f 91       	pop	r23
    2f70:	6f 91       	pop	r22
    2f72:	5f 91       	pop	r21
    2f74:	4f 91       	pop	r20
    2f76:	3f 91       	pop	r19
    2f78:	2f 91       	pop	r18
    2f7a:	0f 90       	pop	r0
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	0f 90       	pop	r0
    2f80:	1f 90       	pop	r1
    2f82:	18 95       	reti

00002f84 <__divmodhi4>:
    2f84:	97 fb       	bst	r25, 7
    2f86:	07 2e       	mov	r0, r23
    2f88:	16 f4       	brtc	.+4      	; 0x2f8e <__divmodhi4+0xa>
    2f8a:	00 94       	com	r0
    2f8c:	07 d0       	rcall	.+14     	; 0x2f9c <__divmodhi4_neg1>
    2f8e:	77 fd       	sbrc	r23, 7
    2f90:	09 d0       	rcall	.+18     	; 0x2fa4 <__divmodhi4_neg2>
    2f92:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__udivmodhi4>
    2f96:	07 fc       	sbrc	r0, 7
    2f98:	05 d0       	rcall	.+10     	; 0x2fa4 <__divmodhi4_neg2>
    2f9a:	3e f4       	brtc	.+14     	; 0x2faa <__divmodhi4_exit>

00002f9c <__divmodhi4_neg1>:
    2f9c:	90 95       	com	r25
    2f9e:	81 95       	neg	r24
    2fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa2:	08 95       	ret

00002fa4 <__divmodhi4_neg2>:
    2fa4:	70 95       	com	r23
    2fa6:	61 95       	neg	r22
    2fa8:	7f 4f       	sbci	r23, 0xFF	; 255

00002faa <__divmodhi4_exit>:
    2faa:	08 95       	ret

00002fac <__udivmodsi4>:
    2fac:	a1 e2       	ldi	r26, 0x21	; 33
    2fae:	1a 2e       	mov	r1, r26
    2fb0:	aa 1b       	sub	r26, r26
    2fb2:	bb 1b       	sub	r27, r27
    2fb4:	fd 01       	movw	r30, r26
    2fb6:	0d c0       	rjmp	.+26     	; 0x2fd2 <__udivmodsi4_ep>

00002fb8 <__udivmodsi4_loop>:
    2fb8:	aa 1f       	adc	r26, r26
    2fba:	bb 1f       	adc	r27, r27
    2fbc:	ee 1f       	adc	r30, r30
    2fbe:	ff 1f       	adc	r31, r31
    2fc0:	a2 17       	cp	r26, r18
    2fc2:	b3 07       	cpc	r27, r19
    2fc4:	e4 07       	cpc	r30, r20
    2fc6:	f5 07       	cpc	r31, r21
    2fc8:	20 f0       	brcs	.+8      	; 0x2fd2 <__udivmodsi4_ep>
    2fca:	a2 1b       	sub	r26, r18
    2fcc:	b3 0b       	sbc	r27, r19
    2fce:	e4 0b       	sbc	r30, r20
    2fd0:	f5 0b       	sbc	r31, r21

00002fd2 <__udivmodsi4_ep>:
    2fd2:	66 1f       	adc	r22, r22
    2fd4:	77 1f       	adc	r23, r23
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	1a 94       	dec	r1
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <__udivmodsi4_loop>
    2fde:	60 95       	com	r22
    2fe0:	70 95       	com	r23
    2fe2:	80 95       	com	r24
    2fe4:	90 95       	com	r25
    2fe6:	9b 01       	movw	r18, r22
    2fe8:	ac 01       	movw	r20, r24
    2fea:	bd 01       	movw	r22, r26
    2fec:	cf 01       	movw	r24, r30
    2fee:	08 95       	ret

00002ff0 <__udivmodhi4>:
    2ff0:	aa 1b       	sub	r26, r26
    2ff2:	bb 1b       	sub	r27, r27
    2ff4:	51 e1       	ldi	r21, 0x11	; 17
    2ff6:	07 c0       	rjmp	.+14     	; 0x3006 <__udivmodhi4_ep>

00002ff8 <__udivmodhi4_loop>:
    2ff8:	aa 1f       	adc	r26, r26
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	a6 17       	cp	r26, r22
    2ffe:	b7 07       	cpc	r27, r23
    3000:	10 f0       	brcs	.+4      	; 0x3006 <__udivmodhi4_ep>
    3002:	a6 1b       	sub	r26, r22
    3004:	b7 0b       	sbc	r27, r23

00003006 <__udivmodhi4_ep>:
    3006:	88 1f       	adc	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	5a 95       	dec	r21
    300c:	a9 f7       	brne	.-22     	; 0x2ff8 <__udivmodhi4_loop>
    300e:	80 95       	com	r24
    3010:	90 95       	com	r25
    3012:	bc 01       	movw	r22, r24
    3014:	cd 01       	movw	r24, r26
    3016:	08 95       	ret

00003018 <__cmpsf2>:
    3018:	0e 94 11 18 	call	0x3022	; 0x3022 <__fp_cmp>
    301c:	08 f4       	brcc	.+2      	; 0x3020 <__cmpsf2+0x8>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	08 95       	ret

00003022 <__fp_cmp>:
    3022:	99 0f       	add	r25, r25
    3024:	00 08       	sbc	r0, r0
    3026:	55 0f       	add	r21, r21
    3028:	aa 0b       	sbc	r26, r26
    302a:	e0 e8       	ldi	r30, 0x80	; 128
    302c:	fe ef       	ldi	r31, 0xFE	; 254
    302e:	16 16       	cp	r1, r22
    3030:	17 06       	cpc	r1, r23
    3032:	e8 07       	cpc	r30, r24
    3034:	f9 07       	cpc	r31, r25
    3036:	c0 f0       	brcs	.+48     	; 0x3068 <__fp_cmp+0x46>
    3038:	12 16       	cp	r1, r18
    303a:	13 06       	cpc	r1, r19
    303c:	e4 07       	cpc	r30, r20
    303e:	f5 07       	cpc	r31, r21
    3040:	98 f0       	brcs	.+38     	; 0x3068 <__fp_cmp+0x46>
    3042:	62 1b       	sub	r22, r18
    3044:	73 0b       	sbc	r23, r19
    3046:	84 0b       	sbc	r24, r20
    3048:	95 0b       	sbc	r25, r21
    304a:	39 f4       	brne	.+14     	; 0x305a <__fp_cmp+0x38>
    304c:	0a 26       	eor	r0, r26
    304e:	61 f0       	breq	.+24     	; 0x3068 <__fp_cmp+0x46>
    3050:	23 2b       	or	r18, r19
    3052:	24 2b       	or	r18, r20
    3054:	25 2b       	or	r18, r21
    3056:	21 f4       	brne	.+8      	; 0x3060 <__fp_cmp+0x3e>
    3058:	08 95       	ret
    305a:	0a 26       	eor	r0, r26
    305c:	09 f4       	brne	.+2      	; 0x3060 <__fp_cmp+0x3e>
    305e:	a1 40       	sbci	r26, 0x01	; 1
    3060:	a6 95       	lsr	r26
    3062:	8f ef       	ldi	r24, 0xFF	; 255
    3064:	81 1d       	adc	r24, r1
    3066:	81 1d       	adc	r24, r1
    3068:	08 95       	ret

0000306a <__gesf2>:
    306a:	0e 94 11 18 	call	0x3022	; 0x3022 <__fp_cmp>
    306e:	08 f4       	brcc	.+2      	; 0x3072 <__gesf2+0x8>
    3070:	8f ef       	ldi	r24, 0xFF	; 255
    3072:	08 95       	ret

00003074 <fgetc>:
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	ec 01       	movw	r28, r24
    307a:	2b 81       	ldd	r18, Y+3	; 0x03
    307c:	20 ff       	sbrs	r18, 0
    307e:	33 c0       	rjmp	.+102    	; 0x30e6 <fgetc+0x72>
    3080:	26 ff       	sbrs	r18, 6
    3082:	0a c0       	rjmp	.+20     	; 0x3098 <fgetc+0x24>
    3084:	2f 7b       	andi	r18, 0xBF	; 191
    3086:	2b 83       	std	Y+3, r18	; 0x03
    3088:	8e 81       	ldd	r24, Y+6	; 0x06
    308a:	9f 81       	ldd	r25, Y+7	; 0x07
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	9f 83       	std	Y+7, r25	; 0x07
    3090:	8e 83       	std	Y+6, r24	; 0x06
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	29 c0       	rjmp	.+82     	; 0x30ea <fgetc+0x76>
    3098:	22 ff       	sbrs	r18, 2
    309a:	0f c0       	rjmp	.+30     	; 0x30ba <fgetc+0x46>
    309c:	e8 81       	ld	r30, Y
    309e:	f9 81       	ldd	r31, Y+1	; 0x01
    30a0:	80 81       	ld	r24, Z
    30a2:	08 2e       	mov	r0, r24
    30a4:	00 0c       	add	r0, r0
    30a6:	99 0b       	sbc	r25, r25
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	19 f4       	brne	.+6      	; 0x30b2 <fgetc+0x3e>
    30ac:	20 62       	ori	r18, 0x20	; 32
    30ae:	2b 83       	std	Y+3, r18	; 0x03
    30b0:	1a c0       	rjmp	.+52     	; 0x30e6 <fgetc+0x72>
    30b2:	31 96       	adiw	r30, 0x01	; 1
    30b4:	f9 83       	std	Y+1, r31	; 0x01
    30b6:	e8 83       	st	Y, r30
    30b8:	0e c0       	rjmp	.+28     	; 0x30d6 <fgetc+0x62>
    30ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    30bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    30be:	09 95       	icall
    30c0:	97 ff       	sbrs	r25, 7
    30c2:	09 c0       	rjmp	.+18     	; 0x30d6 <fgetc+0x62>
    30c4:	2b 81       	ldd	r18, Y+3	; 0x03
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	11 f0       	breq	.+4      	; 0x30ce <fgetc+0x5a>
    30ca:	80 e2       	ldi	r24, 0x20	; 32
    30cc:	01 c0       	rjmp	.+2      	; 0x30d0 <fgetc+0x5c>
    30ce:	80 e1       	ldi	r24, 0x10	; 16
    30d0:	82 2b       	or	r24, r18
    30d2:	8b 83       	std	Y+3, r24	; 0x03
    30d4:	08 c0       	rjmp	.+16     	; 0x30e6 <fgetc+0x72>
    30d6:	2e 81       	ldd	r18, Y+6	; 0x06
    30d8:	3f 81       	ldd	r19, Y+7	; 0x07
    30da:	2f 5f       	subi	r18, 0xFF	; 255
    30dc:	3f 4f       	sbci	r19, 0xFF	; 255
    30de:	3f 83       	std	Y+7, r19	; 0x07
    30e0:	2e 83       	std	Y+6, r18	; 0x06
    30e2:	99 27       	eor	r25, r25
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <fgetc+0x76>
    30e6:	8f ef       	ldi	r24, 0xFF	; 255
    30e8:	9f ef       	ldi	r25, 0xFF	; 255
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <printf>:
    30f0:	a0 e0       	ldi	r26, 0x00	; 0
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ee e7       	ldi	r30, 0x7E	; 126
    30f6:	f8 e1       	ldi	r31, 0x18	; 24
    30f8:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x20>
    30fc:	ae 01       	movw	r20, r28
    30fe:	4b 5f       	subi	r20, 0xFB	; 251
    3100:	5f 4f       	sbci	r21, 0xFF	; 255
    3102:	fa 01       	movw	r30, r20
    3104:	61 91       	ld	r22, Z+
    3106:	71 91       	ld	r23, Z+
    3108:	af 01       	movw	r20, r30
    310a:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <__iob+0x2>
    310e:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <__iob+0x3>
    3112:	0e 94 8e 18 	call	0x311c	; 0x311c <vfprintf>
    3116:	e2 e0       	ldi	r30, 0x02	; 2
    3118:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x20>

0000311c <vfprintf>:
    311c:	ab e0       	ldi	r26, 0x0B	; 11
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e4 e9       	ldi	r30, 0x94	; 148
    3122:	f8 e1       	ldi	r31, 0x18	; 24
    3124:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__prologue_saves__>
    3128:	6c 01       	movw	r12, r24
    312a:	7b 01       	movw	r14, r22
    312c:	8a 01       	movw	r16, r20
    312e:	fc 01       	movw	r30, r24
    3130:	17 82       	std	Z+7, r1	; 0x07
    3132:	16 82       	std	Z+6, r1	; 0x06
    3134:	83 81       	ldd	r24, Z+3	; 0x03
    3136:	81 ff       	sbrs	r24, 1
    3138:	cc c1       	rjmp	.+920    	; 0x34d2 <vfprintf+0x3b6>
    313a:	ce 01       	movw	r24, r28
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	3c 01       	movw	r6, r24
    3140:	f6 01       	movw	r30, r12
    3142:	93 81       	ldd	r25, Z+3	; 0x03
    3144:	f7 01       	movw	r30, r14
    3146:	93 fd       	sbrc	r25, 3
    3148:	85 91       	lpm	r24, Z+
    314a:	93 ff       	sbrs	r25, 3
    314c:	81 91       	ld	r24, Z+
    314e:	7f 01       	movw	r14, r30
    3150:	88 23       	and	r24, r24
    3152:	09 f4       	brne	.+2      	; 0x3156 <vfprintf+0x3a>
    3154:	ba c1       	rjmp	.+884    	; 0x34ca <vfprintf+0x3ae>
    3156:	85 32       	cpi	r24, 0x25	; 37
    3158:	39 f4       	brne	.+14     	; 0x3168 <vfprintf+0x4c>
    315a:	93 fd       	sbrc	r25, 3
    315c:	85 91       	lpm	r24, Z+
    315e:	93 ff       	sbrs	r25, 3
    3160:	81 91       	ld	r24, Z+
    3162:	7f 01       	movw	r14, r30
    3164:	85 32       	cpi	r24, 0x25	; 37
    3166:	29 f4       	brne	.+10     	; 0x3172 <vfprintf+0x56>
    3168:	b6 01       	movw	r22, r12
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    3170:	e7 cf       	rjmp	.-50     	; 0x3140 <vfprintf+0x24>
    3172:	91 2c       	mov	r9, r1
    3174:	21 2c       	mov	r2, r1
    3176:	31 2c       	mov	r3, r1
    3178:	ff e1       	ldi	r31, 0x1F	; 31
    317a:	f3 15       	cp	r31, r3
    317c:	d8 f0       	brcs	.+54     	; 0x31b4 <vfprintf+0x98>
    317e:	8b 32       	cpi	r24, 0x2B	; 43
    3180:	79 f0       	breq	.+30     	; 0x31a0 <vfprintf+0x84>
    3182:	38 f4       	brcc	.+14     	; 0x3192 <vfprintf+0x76>
    3184:	80 32       	cpi	r24, 0x20	; 32
    3186:	79 f0       	breq	.+30     	; 0x31a6 <vfprintf+0x8a>
    3188:	83 32       	cpi	r24, 0x23	; 35
    318a:	a1 f4       	brne	.+40     	; 0x31b4 <vfprintf+0x98>
    318c:	23 2d       	mov	r18, r3
    318e:	20 61       	ori	r18, 0x10	; 16
    3190:	1d c0       	rjmp	.+58     	; 0x31cc <vfprintf+0xb0>
    3192:	8d 32       	cpi	r24, 0x2D	; 45
    3194:	61 f0       	breq	.+24     	; 0x31ae <vfprintf+0x92>
    3196:	80 33       	cpi	r24, 0x30	; 48
    3198:	69 f4       	brne	.+26     	; 0x31b4 <vfprintf+0x98>
    319a:	23 2d       	mov	r18, r3
    319c:	21 60       	ori	r18, 0x01	; 1
    319e:	16 c0       	rjmp	.+44     	; 0x31cc <vfprintf+0xb0>
    31a0:	83 2d       	mov	r24, r3
    31a2:	82 60       	ori	r24, 0x02	; 2
    31a4:	38 2e       	mov	r3, r24
    31a6:	e3 2d       	mov	r30, r3
    31a8:	e4 60       	ori	r30, 0x04	; 4
    31aa:	3e 2e       	mov	r3, r30
    31ac:	2a c0       	rjmp	.+84     	; 0x3202 <vfprintf+0xe6>
    31ae:	f3 2d       	mov	r31, r3
    31b0:	f8 60       	ori	r31, 0x08	; 8
    31b2:	1d c0       	rjmp	.+58     	; 0x31ee <vfprintf+0xd2>
    31b4:	37 fc       	sbrc	r3, 7
    31b6:	2d c0       	rjmp	.+90     	; 0x3212 <vfprintf+0xf6>
    31b8:	20 ed       	ldi	r18, 0xD0	; 208
    31ba:	28 0f       	add	r18, r24
    31bc:	2a 30       	cpi	r18, 0x0A	; 10
    31be:	40 f0       	brcs	.+16     	; 0x31d0 <vfprintf+0xb4>
    31c0:	8e 32       	cpi	r24, 0x2E	; 46
    31c2:	b9 f4       	brne	.+46     	; 0x31f2 <vfprintf+0xd6>
    31c4:	36 fc       	sbrc	r3, 6
    31c6:	81 c1       	rjmp	.+770    	; 0x34ca <vfprintf+0x3ae>
    31c8:	23 2d       	mov	r18, r3
    31ca:	20 64       	ori	r18, 0x40	; 64
    31cc:	32 2e       	mov	r3, r18
    31ce:	19 c0       	rjmp	.+50     	; 0x3202 <vfprintf+0xe6>
    31d0:	36 fe       	sbrs	r3, 6
    31d2:	06 c0       	rjmp	.+12     	; 0x31e0 <vfprintf+0xc4>
    31d4:	8a e0       	ldi	r24, 0x0A	; 10
    31d6:	98 9e       	mul	r9, r24
    31d8:	20 0d       	add	r18, r0
    31da:	11 24       	eor	r1, r1
    31dc:	92 2e       	mov	r9, r18
    31de:	11 c0       	rjmp	.+34     	; 0x3202 <vfprintf+0xe6>
    31e0:	ea e0       	ldi	r30, 0x0A	; 10
    31e2:	2e 9e       	mul	r2, r30
    31e4:	20 0d       	add	r18, r0
    31e6:	11 24       	eor	r1, r1
    31e8:	22 2e       	mov	r2, r18
    31ea:	f3 2d       	mov	r31, r3
    31ec:	f0 62       	ori	r31, 0x20	; 32
    31ee:	3f 2e       	mov	r3, r31
    31f0:	08 c0       	rjmp	.+16     	; 0x3202 <vfprintf+0xe6>
    31f2:	8c 36       	cpi	r24, 0x6C	; 108
    31f4:	21 f4       	brne	.+8      	; 0x31fe <vfprintf+0xe2>
    31f6:	83 2d       	mov	r24, r3
    31f8:	80 68       	ori	r24, 0x80	; 128
    31fa:	38 2e       	mov	r3, r24
    31fc:	02 c0       	rjmp	.+4      	; 0x3202 <vfprintf+0xe6>
    31fe:	88 36       	cpi	r24, 0x68	; 104
    3200:	41 f4       	brne	.+16     	; 0x3212 <vfprintf+0xf6>
    3202:	f7 01       	movw	r30, r14
    3204:	93 fd       	sbrc	r25, 3
    3206:	85 91       	lpm	r24, Z+
    3208:	93 ff       	sbrs	r25, 3
    320a:	81 91       	ld	r24, Z+
    320c:	7f 01       	movw	r14, r30
    320e:	81 11       	cpse	r24, r1
    3210:	b3 cf       	rjmp	.-154    	; 0x3178 <vfprintf+0x5c>
    3212:	98 2f       	mov	r25, r24
    3214:	9f 7d       	andi	r25, 0xDF	; 223
    3216:	95 54       	subi	r25, 0x45	; 69
    3218:	93 30       	cpi	r25, 0x03	; 3
    321a:	28 f4       	brcc	.+10     	; 0x3226 <vfprintf+0x10a>
    321c:	0c 5f       	subi	r16, 0xFC	; 252
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	9f e3       	ldi	r25, 0x3F	; 63
    3222:	99 83       	std	Y+1, r25	; 0x01
    3224:	0d c0       	rjmp	.+26     	; 0x3240 <vfprintf+0x124>
    3226:	83 36       	cpi	r24, 0x63	; 99
    3228:	31 f0       	breq	.+12     	; 0x3236 <vfprintf+0x11a>
    322a:	83 37       	cpi	r24, 0x73	; 115
    322c:	71 f0       	breq	.+28     	; 0x324a <vfprintf+0x12e>
    322e:	83 35       	cpi	r24, 0x53	; 83
    3230:	09 f0       	breq	.+2      	; 0x3234 <vfprintf+0x118>
    3232:	59 c0       	rjmp	.+178    	; 0x32e6 <vfprintf+0x1ca>
    3234:	21 c0       	rjmp	.+66     	; 0x3278 <vfprintf+0x15c>
    3236:	f8 01       	movw	r30, r16
    3238:	80 81       	ld	r24, Z
    323a:	89 83       	std	Y+1, r24	; 0x01
    323c:	0e 5f       	subi	r16, 0xFE	; 254
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	88 24       	eor	r8, r8
    3242:	83 94       	inc	r8
    3244:	91 2c       	mov	r9, r1
    3246:	53 01       	movw	r10, r6
    3248:	13 c0       	rjmp	.+38     	; 0x3270 <vfprintf+0x154>
    324a:	28 01       	movw	r4, r16
    324c:	f2 e0       	ldi	r31, 0x02	; 2
    324e:	4f 0e       	add	r4, r31
    3250:	51 1c       	adc	r5, r1
    3252:	f8 01       	movw	r30, r16
    3254:	a0 80       	ld	r10, Z
    3256:	b1 80       	ldd	r11, Z+1	; 0x01
    3258:	36 fe       	sbrs	r3, 6
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <vfprintf+0x146>
    325c:	69 2d       	mov	r22, r9
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <vfprintf+0x14a>
    3262:	6f ef       	ldi	r22, 0xFF	; 255
    3264:	7f ef       	ldi	r23, 0xFF	; 255
    3266:	c5 01       	movw	r24, r10
    3268:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <strnlen>
    326c:	4c 01       	movw	r8, r24
    326e:	82 01       	movw	r16, r4
    3270:	f3 2d       	mov	r31, r3
    3272:	ff 77       	andi	r31, 0x7F	; 127
    3274:	3f 2e       	mov	r3, r31
    3276:	16 c0       	rjmp	.+44     	; 0x32a4 <vfprintf+0x188>
    3278:	28 01       	movw	r4, r16
    327a:	22 e0       	ldi	r18, 0x02	; 2
    327c:	42 0e       	add	r4, r18
    327e:	51 1c       	adc	r5, r1
    3280:	f8 01       	movw	r30, r16
    3282:	a0 80       	ld	r10, Z
    3284:	b1 80       	ldd	r11, Z+1	; 0x01
    3286:	36 fe       	sbrs	r3, 6
    3288:	03 c0       	rjmp	.+6      	; 0x3290 <vfprintf+0x174>
    328a:	69 2d       	mov	r22, r9
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <vfprintf+0x178>
    3290:	6f ef       	ldi	r22, 0xFF	; 255
    3292:	7f ef       	ldi	r23, 0xFF	; 255
    3294:	c5 01       	movw	r24, r10
    3296:	0e 94 6f 1a 	call	0x34de	; 0x34de <strnlen_P>
    329a:	4c 01       	movw	r8, r24
    329c:	f3 2d       	mov	r31, r3
    329e:	f0 68       	ori	r31, 0x80	; 128
    32a0:	3f 2e       	mov	r3, r31
    32a2:	82 01       	movw	r16, r4
    32a4:	33 fc       	sbrc	r3, 3
    32a6:	1b c0       	rjmp	.+54     	; 0x32de <vfprintf+0x1c2>
    32a8:	82 2d       	mov	r24, r2
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	88 16       	cp	r8, r24
    32ae:	99 06       	cpc	r9, r25
    32b0:	b0 f4       	brcc	.+44     	; 0x32de <vfprintf+0x1c2>
    32b2:	b6 01       	movw	r22, r12
    32b4:	80 e2       	ldi	r24, 0x20	; 32
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    32bc:	2a 94       	dec	r2
    32be:	f4 cf       	rjmp	.-24     	; 0x32a8 <vfprintf+0x18c>
    32c0:	f5 01       	movw	r30, r10
    32c2:	37 fc       	sbrc	r3, 7
    32c4:	85 91       	lpm	r24, Z+
    32c6:	37 fe       	sbrs	r3, 7
    32c8:	81 91       	ld	r24, Z+
    32ca:	5f 01       	movw	r10, r30
    32cc:	b6 01       	movw	r22, r12
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    32d4:	21 10       	cpse	r2, r1
    32d6:	2a 94       	dec	r2
    32d8:	21 e0       	ldi	r18, 0x01	; 1
    32da:	82 1a       	sub	r8, r18
    32dc:	91 08       	sbc	r9, r1
    32de:	81 14       	cp	r8, r1
    32e0:	91 04       	cpc	r9, r1
    32e2:	71 f7       	brne	.-36     	; 0x32c0 <vfprintf+0x1a4>
    32e4:	e8 c0       	rjmp	.+464    	; 0x34b6 <vfprintf+0x39a>
    32e6:	84 36       	cpi	r24, 0x64	; 100
    32e8:	11 f0       	breq	.+4      	; 0x32ee <vfprintf+0x1d2>
    32ea:	89 36       	cpi	r24, 0x69	; 105
    32ec:	41 f5       	brne	.+80     	; 0x333e <vfprintf+0x222>
    32ee:	f8 01       	movw	r30, r16
    32f0:	37 fe       	sbrs	r3, 7
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <vfprintf+0x1e6>
    32f4:	60 81       	ld	r22, Z
    32f6:	71 81       	ldd	r23, Z+1	; 0x01
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	0c 5f       	subi	r16, 0xFC	; 252
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	08 c0       	rjmp	.+16     	; 0x3312 <vfprintf+0x1f6>
    3302:	60 81       	ld	r22, Z
    3304:	71 81       	ldd	r23, Z+1	; 0x01
    3306:	07 2e       	mov	r0, r23
    3308:	00 0c       	add	r0, r0
    330a:	88 0b       	sbc	r24, r24
    330c:	99 0b       	sbc	r25, r25
    330e:	0e 5f       	subi	r16, 0xFE	; 254
    3310:	1f 4f       	sbci	r17, 0xFF	; 255
    3312:	f3 2d       	mov	r31, r3
    3314:	ff 76       	andi	r31, 0x6F	; 111
    3316:	3f 2e       	mov	r3, r31
    3318:	97 ff       	sbrs	r25, 7
    331a:	09 c0       	rjmp	.+18     	; 0x332e <vfprintf+0x212>
    331c:	90 95       	com	r25
    331e:	80 95       	com	r24
    3320:	70 95       	com	r23
    3322:	61 95       	neg	r22
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	8f 4f       	sbci	r24, 0xFF	; 255
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	f0 68       	ori	r31, 0x80	; 128
    332c:	3f 2e       	mov	r3, r31
    332e:	2a e0       	ldi	r18, 0x0A	; 10
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	a3 01       	movw	r20, r6
    3334:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__ultoa_invert>
    3338:	88 2e       	mov	r8, r24
    333a:	86 18       	sub	r8, r6
    333c:	45 c0       	rjmp	.+138    	; 0x33c8 <vfprintf+0x2ac>
    333e:	85 37       	cpi	r24, 0x75	; 117
    3340:	31 f4       	brne	.+12     	; 0x334e <vfprintf+0x232>
    3342:	23 2d       	mov	r18, r3
    3344:	2f 7e       	andi	r18, 0xEF	; 239
    3346:	b2 2e       	mov	r11, r18
    3348:	2a e0       	ldi	r18, 0x0A	; 10
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	25 c0       	rjmp	.+74     	; 0x3398 <vfprintf+0x27c>
    334e:	93 2d       	mov	r25, r3
    3350:	99 7f       	andi	r25, 0xF9	; 249
    3352:	b9 2e       	mov	r11, r25
    3354:	8f 36       	cpi	r24, 0x6F	; 111
    3356:	c1 f0       	breq	.+48     	; 0x3388 <vfprintf+0x26c>
    3358:	18 f4       	brcc	.+6      	; 0x3360 <vfprintf+0x244>
    335a:	88 35       	cpi	r24, 0x58	; 88
    335c:	79 f0       	breq	.+30     	; 0x337c <vfprintf+0x260>
    335e:	b5 c0       	rjmp	.+362    	; 0x34ca <vfprintf+0x3ae>
    3360:	80 37       	cpi	r24, 0x70	; 112
    3362:	19 f0       	breq	.+6      	; 0x336a <vfprintf+0x24e>
    3364:	88 37       	cpi	r24, 0x78	; 120
    3366:	21 f0       	breq	.+8      	; 0x3370 <vfprintf+0x254>
    3368:	b0 c0       	rjmp	.+352    	; 0x34ca <vfprintf+0x3ae>
    336a:	e9 2f       	mov	r30, r25
    336c:	e0 61       	ori	r30, 0x10	; 16
    336e:	be 2e       	mov	r11, r30
    3370:	b4 fe       	sbrs	r11, 4
    3372:	0d c0       	rjmp	.+26     	; 0x338e <vfprintf+0x272>
    3374:	fb 2d       	mov	r31, r11
    3376:	f4 60       	ori	r31, 0x04	; 4
    3378:	bf 2e       	mov	r11, r31
    337a:	09 c0       	rjmp	.+18     	; 0x338e <vfprintf+0x272>
    337c:	34 fe       	sbrs	r3, 4
    337e:	0a c0       	rjmp	.+20     	; 0x3394 <vfprintf+0x278>
    3380:	29 2f       	mov	r18, r25
    3382:	26 60       	ori	r18, 0x06	; 6
    3384:	b2 2e       	mov	r11, r18
    3386:	06 c0       	rjmp	.+12     	; 0x3394 <vfprintf+0x278>
    3388:	28 e0       	ldi	r18, 0x08	; 8
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	05 c0       	rjmp	.+10     	; 0x3398 <vfprintf+0x27c>
    338e:	20 e1       	ldi	r18, 0x10	; 16
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <vfprintf+0x27c>
    3394:	20 e1       	ldi	r18, 0x10	; 16
    3396:	32 e0       	ldi	r19, 0x02	; 2
    3398:	f8 01       	movw	r30, r16
    339a:	b7 fe       	sbrs	r11, 7
    339c:	07 c0       	rjmp	.+14     	; 0x33ac <vfprintf+0x290>
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	0c 5f       	subi	r16, 0xFC	; 252
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	06 c0       	rjmp	.+12     	; 0x33b8 <vfprintf+0x29c>
    33ac:	60 81       	ld	r22, Z
    33ae:	71 81       	ldd	r23, Z+1	; 0x01
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 5f       	subi	r16, 0xFE	; 254
    33b6:	1f 4f       	sbci	r17, 0xFF	; 255
    33b8:	a3 01       	movw	r20, r6
    33ba:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__ultoa_invert>
    33be:	88 2e       	mov	r8, r24
    33c0:	86 18       	sub	r8, r6
    33c2:	fb 2d       	mov	r31, r11
    33c4:	ff 77       	andi	r31, 0x7F	; 127
    33c6:	3f 2e       	mov	r3, r31
    33c8:	36 fe       	sbrs	r3, 6
    33ca:	0d c0       	rjmp	.+26     	; 0x33e6 <vfprintf+0x2ca>
    33cc:	23 2d       	mov	r18, r3
    33ce:	2e 7f       	andi	r18, 0xFE	; 254
    33d0:	a2 2e       	mov	r10, r18
    33d2:	89 14       	cp	r8, r9
    33d4:	58 f4       	brcc	.+22     	; 0x33ec <vfprintf+0x2d0>
    33d6:	34 fe       	sbrs	r3, 4
    33d8:	0b c0       	rjmp	.+22     	; 0x33f0 <vfprintf+0x2d4>
    33da:	32 fc       	sbrc	r3, 2
    33dc:	09 c0       	rjmp	.+18     	; 0x33f0 <vfprintf+0x2d4>
    33de:	83 2d       	mov	r24, r3
    33e0:	8e 7e       	andi	r24, 0xEE	; 238
    33e2:	a8 2e       	mov	r10, r24
    33e4:	05 c0       	rjmp	.+10     	; 0x33f0 <vfprintf+0x2d4>
    33e6:	b8 2c       	mov	r11, r8
    33e8:	a3 2c       	mov	r10, r3
    33ea:	03 c0       	rjmp	.+6      	; 0x33f2 <vfprintf+0x2d6>
    33ec:	b8 2c       	mov	r11, r8
    33ee:	01 c0       	rjmp	.+2      	; 0x33f2 <vfprintf+0x2d6>
    33f0:	b9 2c       	mov	r11, r9
    33f2:	a4 fe       	sbrs	r10, 4
    33f4:	0f c0       	rjmp	.+30     	; 0x3414 <vfprintf+0x2f8>
    33f6:	fe 01       	movw	r30, r28
    33f8:	e8 0d       	add	r30, r8
    33fa:	f1 1d       	adc	r31, r1
    33fc:	80 81       	ld	r24, Z
    33fe:	80 33       	cpi	r24, 0x30	; 48
    3400:	21 f4       	brne	.+8      	; 0x340a <vfprintf+0x2ee>
    3402:	9a 2d       	mov	r25, r10
    3404:	99 7e       	andi	r25, 0xE9	; 233
    3406:	a9 2e       	mov	r10, r25
    3408:	09 c0       	rjmp	.+18     	; 0x341c <vfprintf+0x300>
    340a:	a2 fe       	sbrs	r10, 2
    340c:	06 c0       	rjmp	.+12     	; 0x341a <vfprintf+0x2fe>
    340e:	b3 94       	inc	r11
    3410:	b3 94       	inc	r11
    3412:	04 c0       	rjmp	.+8      	; 0x341c <vfprintf+0x300>
    3414:	8a 2d       	mov	r24, r10
    3416:	86 78       	andi	r24, 0x86	; 134
    3418:	09 f0       	breq	.+2      	; 0x341c <vfprintf+0x300>
    341a:	b3 94       	inc	r11
    341c:	a3 fc       	sbrc	r10, 3
    341e:	11 c0       	rjmp	.+34     	; 0x3442 <vfprintf+0x326>
    3420:	a0 fe       	sbrs	r10, 0
    3422:	06 c0       	rjmp	.+12     	; 0x3430 <vfprintf+0x314>
    3424:	b2 14       	cp	r11, r2
    3426:	88 f4       	brcc	.+34     	; 0x344a <vfprintf+0x32e>
    3428:	28 0c       	add	r2, r8
    342a:	92 2c       	mov	r9, r2
    342c:	9b 18       	sub	r9, r11
    342e:	0e c0       	rjmp	.+28     	; 0x344c <vfprintf+0x330>
    3430:	b2 14       	cp	r11, r2
    3432:	60 f4       	brcc	.+24     	; 0x344c <vfprintf+0x330>
    3434:	b6 01       	movw	r22, r12
    3436:	80 e2       	ldi	r24, 0x20	; 32
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    343e:	b3 94       	inc	r11
    3440:	f7 cf       	rjmp	.-18     	; 0x3430 <vfprintf+0x314>
    3442:	b2 14       	cp	r11, r2
    3444:	18 f4       	brcc	.+6      	; 0x344c <vfprintf+0x330>
    3446:	2b 18       	sub	r2, r11
    3448:	02 c0       	rjmp	.+4      	; 0x344e <vfprintf+0x332>
    344a:	98 2c       	mov	r9, r8
    344c:	21 2c       	mov	r2, r1
    344e:	a4 fe       	sbrs	r10, 4
    3450:	10 c0       	rjmp	.+32     	; 0x3472 <vfprintf+0x356>
    3452:	b6 01       	movw	r22, r12
    3454:	80 e3       	ldi	r24, 0x30	; 48
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    345c:	a2 fe       	sbrs	r10, 2
    345e:	17 c0       	rjmp	.+46     	; 0x348e <vfprintf+0x372>
    3460:	a1 fc       	sbrc	r10, 1
    3462:	03 c0       	rjmp	.+6      	; 0x346a <vfprintf+0x34e>
    3464:	88 e7       	ldi	r24, 0x78	; 120
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	02 c0       	rjmp	.+4      	; 0x346e <vfprintf+0x352>
    346a:	88 e5       	ldi	r24, 0x58	; 88
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	b6 01       	movw	r22, r12
    3470:	0c c0       	rjmp	.+24     	; 0x348a <vfprintf+0x36e>
    3472:	8a 2d       	mov	r24, r10
    3474:	86 78       	andi	r24, 0x86	; 134
    3476:	59 f0       	breq	.+22     	; 0x348e <vfprintf+0x372>
    3478:	a1 fe       	sbrs	r10, 1
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <vfprintf+0x364>
    347c:	8b e2       	ldi	r24, 0x2B	; 43
    347e:	01 c0       	rjmp	.+2      	; 0x3482 <vfprintf+0x366>
    3480:	80 e2       	ldi	r24, 0x20	; 32
    3482:	a7 fc       	sbrc	r10, 7
    3484:	8d e2       	ldi	r24, 0x2D	; 45
    3486:	b6 01       	movw	r22, r12
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    348e:	89 14       	cp	r8, r9
    3490:	38 f4       	brcc	.+14     	; 0x34a0 <vfprintf+0x384>
    3492:	b6 01       	movw	r22, r12
    3494:	80 e3       	ldi	r24, 0x30	; 48
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    349c:	9a 94       	dec	r9
    349e:	f7 cf       	rjmp	.-18     	; 0x348e <vfprintf+0x372>
    34a0:	8a 94       	dec	r8
    34a2:	f3 01       	movw	r30, r6
    34a4:	e8 0d       	add	r30, r8
    34a6:	f1 1d       	adc	r31, r1
    34a8:	80 81       	ld	r24, Z
    34aa:	b6 01       	movw	r22, r12
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    34b2:	81 10       	cpse	r8, r1
    34b4:	f5 cf       	rjmp	.-22     	; 0x34a0 <vfprintf+0x384>
    34b6:	22 20       	and	r2, r2
    34b8:	09 f4       	brne	.+2      	; 0x34bc <vfprintf+0x3a0>
    34ba:	42 ce       	rjmp	.-892    	; 0x3140 <vfprintf+0x24>
    34bc:	b6 01       	movw	r22, r12
    34be:	80 e2       	ldi	r24, 0x20	; 32
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 85 1a 	call	0x350a	; 0x350a <fputc>
    34c6:	2a 94       	dec	r2
    34c8:	f6 cf       	rjmp	.-20     	; 0x34b6 <vfprintf+0x39a>
    34ca:	f6 01       	movw	r30, r12
    34cc:	86 81       	ldd	r24, Z+6	; 0x06
    34ce:	97 81       	ldd	r25, Z+7	; 0x07
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <vfprintf+0x3ba>
    34d2:	8f ef       	ldi	r24, 0xFF	; 255
    34d4:	9f ef       	ldi	r25, 0xFF	; 255
    34d6:	2b 96       	adiw	r28, 0x0b	; 11
    34d8:	e2 e1       	ldi	r30, 0x12	; 18
    34da:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <__epilogue_restores__>

000034de <strnlen_P>:
    34de:	fc 01       	movw	r30, r24
    34e0:	05 90       	lpm	r0, Z+
    34e2:	61 50       	subi	r22, 0x01	; 1
    34e4:	70 40       	sbci	r23, 0x00	; 0
    34e6:	01 10       	cpse	r0, r1
    34e8:	d8 f7       	brcc	.-10     	; 0x34e0 <strnlen_P+0x2>
    34ea:	80 95       	com	r24
    34ec:	90 95       	com	r25
    34ee:	8e 0f       	add	r24, r30
    34f0:	9f 1f       	adc	r25, r31
    34f2:	08 95       	ret

000034f4 <strnlen>:
    34f4:	fc 01       	movw	r30, r24
    34f6:	61 50       	subi	r22, 0x01	; 1
    34f8:	70 40       	sbci	r23, 0x00	; 0
    34fa:	01 90       	ld	r0, Z+
    34fc:	01 10       	cpse	r0, r1
    34fe:	d8 f7       	brcc	.-10     	; 0x34f6 <strnlen+0x2>
    3500:	80 95       	com	r24
    3502:	90 95       	com	r25
    3504:	8e 0f       	add	r24, r30
    3506:	9f 1f       	adc	r25, r31
    3508:	08 95       	ret

0000350a <fputc>:
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	fb 01       	movw	r30, r22
    3514:	23 81       	ldd	r18, Z+3	; 0x03
    3516:	21 fd       	sbrc	r18, 1
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <fputc+0x16>
    351a:	8f ef       	ldi	r24, 0xFF	; 255
    351c:	9f ef       	ldi	r25, 0xFF	; 255
    351e:	2c c0       	rjmp	.+88     	; 0x3578 <fputc+0x6e>
    3520:	22 ff       	sbrs	r18, 2
    3522:	16 c0       	rjmp	.+44     	; 0x3550 <fputc+0x46>
    3524:	46 81       	ldd	r20, Z+6	; 0x06
    3526:	57 81       	ldd	r21, Z+7	; 0x07
    3528:	24 81       	ldd	r18, Z+4	; 0x04
    352a:	35 81       	ldd	r19, Z+5	; 0x05
    352c:	42 17       	cp	r20, r18
    352e:	53 07       	cpc	r21, r19
    3530:	44 f4       	brge	.+16     	; 0x3542 <fputc+0x38>
    3532:	a0 81       	ld	r26, Z
    3534:	b1 81       	ldd	r27, Z+1	; 0x01
    3536:	9d 01       	movw	r18, r26
    3538:	2f 5f       	subi	r18, 0xFF	; 255
    353a:	3f 4f       	sbci	r19, 0xFF	; 255
    353c:	31 83       	std	Z+1, r19	; 0x01
    353e:	20 83       	st	Z, r18
    3540:	8c 93       	st	X, r24
    3542:	26 81       	ldd	r18, Z+6	; 0x06
    3544:	37 81       	ldd	r19, Z+7	; 0x07
    3546:	2f 5f       	subi	r18, 0xFF	; 255
    3548:	3f 4f       	sbci	r19, 0xFF	; 255
    354a:	37 83       	std	Z+7, r19	; 0x07
    354c:	26 83       	std	Z+6, r18	; 0x06
    354e:	14 c0       	rjmp	.+40     	; 0x3578 <fputc+0x6e>
    3550:	8b 01       	movw	r16, r22
    3552:	ec 01       	movw	r28, r24
    3554:	fb 01       	movw	r30, r22
    3556:	00 84       	ldd	r0, Z+8	; 0x08
    3558:	f1 85       	ldd	r31, Z+9	; 0x09
    355a:	e0 2d       	mov	r30, r0
    355c:	09 95       	icall
    355e:	89 2b       	or	r24, r25
    3560:	e1 f6       	brne	.-72     	; 0x351a <fputc+0x10>
    3562:	d8 01       	movw	r26, r16
    3564:	16 96       	adiw	r26, 0x06	; 6
    3566:	8d 91       	ld	r24, X+
    3568:	9c 91       	ld	r25, X
    356a:	17 97       	sbiw	r26, 0x07	; 7
    356c:	01 96       	adiw	r24, 0x01	; 1
    356e:	17 96       	adiw	r26, 0x07	; 7
    3570:	9c 93       	st	X, r25
    3572:	8e 93       	st	-X, r24
    3574:	16 97       	sbiw	r26, 0x06	; 6
    3576:	ce 01       	movw	r24, r28
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	08 95       	ret

00003582 <__ultoa_invert>:
    3582:	fa 01       	movw	r30, r20
    3584:	aa 27       	eor	r26, r26
    3586:	28 30       	cpi	r18, 0x08	; 8
    3588:	51 f1       	breq	.+84     	; 0x35de <__ultoa_invert+0x5c>
    358a:	20 31       	cpi	r18, 0x10	; 16
    358c:	81 f1       	breq	.+96     	; 0x35ee <__ultoa_invert+0x6c>
    358e:	e8 94       	clt
    3590:	6f 93       	push	r22
    3592:	6e 7f       	andi	r22, 0xFE	; 254
    3594:	6e 5f       	subi	r22, 0xFE	; 254
    3596:	7f 4f       	sbci	r23, 0xFF	; 255
    3598:	8f 4f       	sbci	r24, 0xFF	; 255
    359a:	9f 4f       	sbci	r25, 0xFF	; 255
    359c:	af 4f       	sbci	r26, 0xFF	; 255
    359e:	b1 e0       	ldi	r27, 0x01	; 1
    35a0:	3e d0       	rcall	.+124    	; 0x361e <__ultoa_invert+0x9c>
    35a2:	b4 e0       	ldi	r27, 0x04	; 4
    35a4:	3c d0       	rcall	.+120    	; 0x361e <__ultoa_invert+0x9c>
    35a6:	67 0f       	add	r22, r23
    35a8:	78 1f       	adc	r23, r24
    35aa:	89 1f       	adc	r24, r25
    35ac:	9a 1f       	adc	r25, r26
    35ae:	a1 1d       	adc	r26, r1
    35b0:	68 0f       	add	r22, r24
    35b2:	79 1f       	adc	r23, r25
    35b4:	8a 1f       	adc	r24, r26
    35b6:	91 1d       	adc	r25, r1
    35b8:	a1 1d       	adc	r26, r1
    35ba:	6a 0f       	add	r22, r26
    35bc:	71 1d       	adc	r23, r1
    35be:	81 1d       	adc	r24, r1
    35c0:	91 1d       	adc	r25, r1
    35c2:	a1 1d       	adc	r26, r1
    35c4:	20 d0       	rcall	.+64     	; 0x3606 <__ultoa_invert+0x84>
    35c6:	09 f4       	brne	.+2      	; 0x35ca <__ultoa_invert+0x48>
    35c8:	68 94       	set
    35ca:	3f 91       	pop	r19
    35cc:	2a e0       	ldi	r18, 0x0A	; 10
    35ce:	26 9f       	mul	r18, r22
    35d0:	11 24       	eor	r1, r1
    35d2:	30 19       	sub	r19, r0
    35d4:	30 5d       	subi	r19, 0xD0	; 208
    35d6:	31 93       	st	Z+, r19
    35d8:	de f6       	brtc	.-74     	; 0x3590 <__ultoa_invert+0xe>
    35da:	cf 01       	movw	r24, r30
    35dc:	08 95       	ret
    35de:	46 2f       	mov	r20, r22
    35e0:	47 70       	andi	r20, 0x07	; 7
    35e2:	40 5d       	subi	r20, 0xD0	; 208
    35e4:	41 93       	st	Z+, r20
    35e6:	b3 e0       	ldi	r27, 0x03	; 3
    35e8:	0f d0       	rcall	.+30     	; 0x3608 <__ultoa_invert+0x86>
    35ea:	c9 f7       	brne	.-14     	; 0x35de <__ultoa_invert+0x5c>
    35ec:	f6 cf       	rjmp	.-20     	; 0x35da <__ultoa_invert+0x58>
    35ee:	46 2f       	mov	r20, r22
    35f0:	4f 70       	andi	r20, 0x0F	; 15
    35f2:	40 5d       	subi	r20, 0xD0	; 208
    35f4:	4a 33       	cpi	r20, 0x3A	; 58
    35f6:	18 f0       	brcs	.+6      	; 0x35fe <__ultoa_invert+0x7c>
    35f8:	49 5d       	subi	r20, 0xD9	; 217
    35fa:	31 fd       	sbrc	r19, 1
    35fc:	40 52       	subi	r20, 0x20	; 32
    35fe:	41 93       	st	Z+, r20
    3600:	02 d0       	rcall	.+4      	; 0x3606 <__ultoa_invert+0x84>
    3602:	a9 f7       	brne	.-22     	; 0x35ee <__ultoa_invert+0x6c>
    3604:	ea cf       	rjmp	.-44     	; 0x35da <__ultoa_invert+0x58>
    3606:	b4 e0       	ldi	r27, 0x04	; 4
    3608:	a6 95       	lsr	r26
    360a:	97 95       	ror	r25
    360c:	87 95       	ror	r24
    360e:	77 95       	ror	r23
    3610:	67 95       	ror	r22
    3612:	ba 95       	dec	r27
    3614:	c9 f7       	brne	.-14     	; 0x3608 <__ultoa_invert+0x86>
    3616:	00 97       	sbiw	r24, 0x00	; 0
    3618:	61 05       	cpc	r22, r1
    361a:	71 05       	cpc	r23, r1
    361c:	08 95       	ret
    361e:	9b 01       	movw	r18, r22
    3620:	ac 01       	movw	r20, r24
    3622:	0a 2e       	mov	r0, r26
    3624:	06 94       	lsr	r0
    3626:	57 95       	ror	r21
    3628:	47 95       	ror	r20
    362a:	37 95       	ror	r19
    362c:	27 95       	ror	r18
    362e:	ba 95       	dec	r27
    3630:	c9 f7       	brne	.-14     	; 0x3624 <__ultoa_invert+0xa2>
    3632:	62 0f       	add	r22, r18
    3634:	73 1f       	adc	r23, r19
    3636:	84 1f       	adc	r24, r20
    3638:	95 1f       	adc	r25, r21
    363a:	a0 1d       	adc	r26, r0
    363c:	08 95       	ret

0000363e <eeprom_read_byte>:
    363e:	f9 99       	sbic	0x1f, 1	; 31
    3640:	fe cf       	rjmp	.-4      	; 0x363e <eeprom_read_byte>
    3642:	92 bd       	out	0x22, r25	; 34
    3644:	81 bd       	out	0x21, r24	; 33
    3646:	f8 9a       	sbi	0x1f, 0	; 31
    3648:	99 27       	eor	r25, r25
    364a:	80 b5       	in	r24, 0x20	; 32
    364c:	08 95       	ret

0000364e <eeprom_read_dword>:
    364e:	a6 e1       	ldi	r26, 0x16	; 22
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	44 e0       	ldi	r20, 0x04	; 4
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <eeprom_read_blraw>

0000365a <eeprom_read_word>:
    365a:	a8 e1       	ldi	r26, 0x18	; 24
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	42 e0       	ldi	r20, 0x02	; 2
    3660:	50 e0       	ldi	r21, 0x00	; 0
    3662:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <eeprom_read_blraw>

00003666 <eeprom_write_byte>:
    3666:	26 2f       	mov	r18, r22

00003668 <eeprom_write_r18>:
    3668:	f9 99       	sbic	0x1f, 1	; 31
    366a:	fe cf       	rjmp	.-4      	; 0x3668 <eeprom_write_r18>
    366c:	1f ba       	out	0x1f, r1	; 31
    366e:	92 bd       	out	0x22, r25	; 34
    3670:	81 bd       	out	0x21, r24	; 33
    3672:	20 bd       	out	0x20, r18	; 32
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	fa 9a       	sbi	0x1f, 2	; 31
    367a:	f9 9a       	sbi	0x1f, 1	; 31
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	01 96       	adiw	r24, 0x01	; 1
    3680:	08 95       	ret

00003682 <eeprom_write_dword>:
    3682:	24 2f       	mov	r18, r20
    3684:	0e 94 34 1b 	call	0x3668	; 0x3668 <eeprom_write_r18>
    3688:	25 2f       	mov	r18, r21
    368a:	0e 94 34 1b 	call	0x3668	; 0x3668 <eeprom_write_r18>
    368e:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <eeprom_write_word>

00003692 <eeprom_write_word>:
    3692:	0e 94 33 1b 	call	0x3666	; 0x3666 <eeprom_write_byte>
    3696:	27 2f       	mov	r18, r23
    3698:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <eeprom_write_r18>

0000369c <eeprom_read_block>:
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22

000036a0 <eeprom_read_blraw>:
    36a0:	fc 01       	movw	r30, r24
    36a2:	f9 99       	sbic	0x1f, 1	; 31
    36a4:	fe cf       	rjmp	.-4      	; 0x36a2 <eeprom_read_blraw+0x2>
    36a6:	06 c0       	rjmp	.+12     	; 0x36b4 <eeprom_read_blraw+0x14>
    36a8:	f2 bd       	out	0x22, r31	; 34
    36aa:	e1 bd       	out	0x21, r30	; 33
    36ac:	f8 9a       	sbi	0x1f, 0	; 31
    36ae:	31 96       	adiw	r30, 0x01	; 1
    36b0:	00 b4       	in	r0, 0x20	; 32
    36b2:	0d 92       	st	X+, r0
    36b4:	41 50       	subi	r20, 0x01	; 1
    36b6:	50 40       	sbci	r21, 0x00	; 0
    36b8:	b8 f7       	brcc	.-18     	; 0x36a8 <eeprom_read_blraw+0x8>
    36ba:	08 95       	ret

000036bc <__prologue_saves__>:
    36bc:	2f 92       	push	r2
    36be:	3f 92       	push	r3
    36c0:	4f 92       	push	r4
    36c2:	5f 92       	push	r5
    36c4:	6f 92       	push	r6
    36c6:	7f 92       	push	r7
    36c8:	8f 92       	push	r8
    36ca:	9f 92       	push	r9
    36cc:	af 92       	push	r10
    36ce:	bf 92       	push	r11
    36d0:	cf 92       	push	r12
    36d2:	df 92       	push	r13
    36d4:	ef 92       	push	r14
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	ca 1b       	sub	r28, r26
    36e6:	db 0b       	sbc	r29, r27
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	09 94       	ijmp

000036f4 <__epilogue_restores__>:
    36f4:	2a 88       	ldd	r2, Y+18	; 0x12
    36f6:	39 88       	ldd	r3, Y+17	; 0x11
    36f8:	48 88       	ldd	r4, Y+16	; 0x10
    36fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    36fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    36fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3700:	8c 84       	ldd	r8, Y+12	; 0x0c
    3702:	9b 84       	ldd	r9, Y+11	; 0x0b
    3704:	aa 84       	ldd	r10, Y+10	; 0x0a
    3706:	b9 84       	ldd	r11, Y+9	; 0x09
    3708:	c8 84       	ldd	r12, Y+8	; 0x08
    370a:	df 80       	ldd	r13, Y+7	; 0x07
    370c:	ee 80       	ldd	r14, Y+6	; 0x06
    370e:	fd 80       	ldd	r15, Y+5	; 0x05
    3710:	0c 81       	ldd	r16, Y+4	; 0x04
    3712:	1b 81       	ldd	r17, Y+3	; 0x03
    3714:	aa 81       	ldd	r26, Y+2	; 0x02
    3716:	b9 81       	ldd	r27, Y+1	; 0x01
    3718:	ce 0f       	add	r28, r30
    371a:	d1 1d       	adc	r29, r1
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	ed 01       	movw	r28, r26
    3728:	08 95       	ret

0000372a <_exit>:
    372a:	f8 94       	cli

0000372c <__stop_program>:
    372c:	ff cf       	rjmp	.-2      	; 0x372c <__stop_program>
