
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00002c68  00002cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020e  0080019c  0080019c  00002d98  2**0
                  ALLOC
  3 .stab         0000a584  00000000  00000000  00002d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a22  00000000  00000000  0000d31c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000fd3e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000fd50  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  0000fd90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2a  00000000  00000000  0000fe70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  00010b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004fa  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  0001198e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__vector_18>
      4c:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e8 e6       	ldi	r30, 0x68	; 104
      ce:	fc e2       	ldi	r31, 0x2C	; 44
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	aa 3a       	cpi	r26, 0xAA	; 170
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
      f0:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
    host_active = 0;
     1ae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
    lockout_active = 0;
     1b2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    status_byt = 0;
     1b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
    test_mode = 0;
     1d2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     1e2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
    uart_output = 0;
     1e6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1ea:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
     1ee:	80 e4       	ldi	r24, 0x40	; 64
     1f0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enable_ADC_auto_conversion>
    adc_started_at = millis();
     1fa:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     1fe:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <adc_started_at>
     202:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <adc_started_at+0x1>
     206:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <adc_started_at+0x2>
     20a:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <adc_started_at+0x3>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20e:	60 e9       	ldi	r22, 0x90	; 144
     210:	70 ed       	ldi	r23, 0xD0	; 208
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <uartstream0_init>
     21a:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__iob+0x1>
     21e:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__iob>
     222:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <__iob+0x3>
     226:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     22a:	89 e2       	ldi	r24, 0x29	; 41
     22c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     230:	89 e1       	ldi	r24, 0x19	; 25
     232:	9a e0       	ldi	r25, 0x0A	; 10
     234:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     238:	8c ed       	ldi	r24, 0xDC	; 220
     23a:	99 e0       	ldi	r25, 0x09	; 9
     23c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     246:	8a e2       	ldi	r24, 0x2A	; 42
     248:	0e 94 3c 11 	call	0x2278	; 0x2278 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     24c:	85 ea       	ldi	r24, 0xA5	; 165
     24e:	9a e0       	ldi	r25, 0x0A	; 10
     250:	0e 94 5e 11 	call	0x22bc	; 0x22bc <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     254:	8c e2       	ldi	r24, 0x2C	; 44
     256:	9a e0       	ldi	r25, 0x0A	; 10
     258:	0e 94 59 11 	call	0x22b2	; 0x22b2 <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 18 11 	call	0x2230	; 0x2230 <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     262:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f eb       	ldi	r18, 0xBF	; 191
     266:	84 ed       	ldi	r24, 0xD4	; 212
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <setup+0x172>
     272:	00 c0       	rjmp	.+0      	; 0x274 <setup+0x17c>
     274:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     276:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     278:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     27a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
     27e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
     282:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <check_for_eeprom_id>
     286:	88 23       	and	r24, r24
     288:	29 f0       	breq	.+10     	; 0x294 <setup+0x19c>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <eeprom_read_byte>
     292:	01 c0       	rjmp	.+2      	; 0x296 <setup+0x19e>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     29a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
     29e:	0e 94 be 0c 	call	0x197c	; 0x197c <LoadBatLimitsFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     2a2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     2a6:	88 60       	ori	r24, 0x08	; 8
     2a8:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     2ac:	08 95       	ret

000002ae <main>:
#endif
}

int main(void)
{
    setup();
     2ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2b2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     2b6:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     2ba:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     2be:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     2c2:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>

    while (1) 
    {
        if (!test_mode) 
     2c6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
     2ca:	81 11       	cpse	r24, r1
     2cc:	0c c0       	rjmp	.+24     	; 0x2e6 <main+0x38>
        {
            blink_on_activate();
     2ce:	0e 94 10 02 	call	0x420	; 0x420 <blink_on_activate>
            check_Bootload_Time();
     2d2:	0e 94 bf 02 	call	0x57e	; 0x57e <check_Bootload_Time>
            check_DTR();
     2d6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <check_DTR>
            check_lockout();
     2da:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <check_lockout>
            check_shutdown();
     2de:	0e 94 11 03 	call	0x622	; 0x622 <check_shutdown>
            check_if_alt_should_be_on();
     2e2:	0e 94 38 0c 	call	0x1870	; 0x1870 <check_if_alt_should_be_on>
        }
        if(write_rpu_address_to_eeprom) save_rpu_addr_state();
     2e6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
     2ea:	81 11       	cpse	r24, r1
     2ec:	0e 94 ae 0a 	call	0x155c	; 0x155c <save_rpu_addr_state>
        check_uart();
     2f0:	0e 94 1c 04 	call	0x838	; 0x838 <check_uart>
        adc_burst();
     2f4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <adc_burst>
        if (ref_loaded > REF_DEFAULT) ref2ee();
     2f8:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	10 f0       	brcs	.+4      	; 0x304 <main+0x56>
     300:	0e 94 0a 0c 	call	0x1814	; 0x1814 <ref2ee>
        if (bat_limit_loaded > BAT_LIM_DEFAULT) BatLimitsFromI2CtoEE(); 
     304:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bat_limit_loaded>
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	10 f0       	brcs	.+4      	; 0x310 <main+0x62>
     30c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <BatLimitsFromI2CtoEE>
        if (smbus_has_numBytes_to_handle) handle_smbus_receive();
     310:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
     314:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     318:	89 2b       	or	r24, r25
     31a:	a9 f2       	breq	.-86     	; 0x2c6 <main+0x18>
     31c:	0e 94 35 0a 	call	0x146a	; 0x146a <handle_smbus_receive>
     320:	d2 cf       	rjmp	.-92     	; 0x2c6 <main+0x18>

00000322 <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     322:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     326:	88 23       	and	r24, r24
     328:	c1 f0       	breq	.+48     	; 0x35a <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     32a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     32c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     32e:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     330:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     332:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     334:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     336:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     338:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     33a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     33e:	88 23       	and	r24, r24
     340:	21 f0       	breq	.+8      	; 0x34a <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     342:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     344:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     346:	5d 9a       	sbi	0x0b, 5	; 11
     348:	03 c0       	rjmp	.+6      	; 0x350 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     34a:	8f b7       	in	r24, 0x3f	; 63
     34c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     34e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     350:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     352:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     354:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     356:	42 9a       	sbi	0x08, 2	; 8
     358:	17 c0       	rjmp	.+46     	; 0x388 <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35a:	8f b7       	in	r24, 0x3f	; 63
     35c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     35e:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     360:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     362:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     364:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     366:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     368:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     36a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     36e:	88 23       	and	r24, r24
     370:	21 f0       	breq	.+8      	; 0x37a <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     372:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     374:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     376:	5d 9a       	sbi	0x0b, 5	; 11
     378:	03 c0       	rjmp	.+6      	; 0x380 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     37a:	8f b7       	in	r24, 0x3f	; 63
     37c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     37e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     380:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     382:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     384:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     386:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     388:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     38a:	08 95       	ret

0000038c <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     38c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     390:	88 23       	and	r24, r24
     392:	81 f0       	breq	.+32     	; 0x3b4 <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     394:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     396:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     398:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     39a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     39c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     39e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3a0:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3a8:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3aa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ac:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ae:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3b0:	42 9a       	sbi	0x08, 2	; 8
     3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b4:	8f b7       	in	r24, 0x3f	; 63
     3b6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3b8:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ba:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3be:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3c0:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3c2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3c8:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ce:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3d0:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3d4:	08 95       	ret

000003d6 <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3d6:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3da:	88 23       	and	r24, r24
     3dc:	81 f0       	breq	.+32     	; 0x3fe <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3e2:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3ea:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ec:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3f2:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3fa:	42 9a       	sbi	0x08, 2	; 8
     3fc:	0f c0       	rjmp	.+30     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3fe:	8f b7       	in	r24, 0x3f	; 63
     400:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     402:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     404:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     406:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     408:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     40a:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     40c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     40e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     410:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     412:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     414:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     416:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     418:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     41a:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     41c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     41e:	08 95       	ret

00000420 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     424:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     428:	81 11       	cpse	r24, r1
     42a:	a6 c0       	rjmp	.+332    	; 0x578 <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     42c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     430:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <blink_started_at>
     434:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     438:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     43c:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	80 1b       	sub	r24, r16
     446:	91 0b       	sbc	r25, r17
     448:	a2 0b       	sbc	r26, r18
     44a:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     44c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     450:	27 7f       	andi	r18, 0xF7	; 247
     452:	09 f0       	breq	.+2      	; 0x456 <blink_on_activate+0x36>
     454:	6d c0       	rjmp	.+218    	; 0x530 <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     456:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <host_is_foreign>
     45a:	22 23       	and	r18, r18
     45c:	21 f0       	breq	.+8      	; 0x466 <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     45e:	b6 95       	lsr	r27
     460:	a7 95       	ror	r26
     462:	97 95       	ror	r25
     464:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     466:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started>
     46a:	22 23       	and	r18, r18
     46c:	e9 f0       	breq	.+58     	; 0x4a8 <blink_on_activate+0x88>
     46e:	8c 34       	cpi	r24, 0x4C	; 76
     470:	91 05       	cpc	r25, r1
     472:	a1 05       	cpc	r26, r1
     474:	b1 05       	cpc	r27, r1
     476:	c0 f0       	brcs	.+48     	; 0x4a8 <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     478:	25 9b       	sbis	0x04, 5	; 4
     47a:	09 c0       	rjmp	.+18     	; 0x48e <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     47c:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     47e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     480:	f8 94       	cli
    {
        if (value_for_bit) 
     482:	95 fd       	sbrc	r25, 5
     484:	02 c0       	rjmp	.+4      	; 0x48a <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     486:	2d 9a       	sbi	0x05, 5	; 5
     488:	01 c0       	rjmp	.+2      	; 0x48c <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     48a:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     48c:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     48e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     492:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     496:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     49a:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     49e:	85 5b       	subi	r24, 0xB5	; 181
     4a0:	9f 4f       	sbci	r25, 0xFF	; 255
     4a2:	af 4f       	sbci	r26, 0xFF	; 255
     4a4:	bf 4f       	sbci	r27, 0xFF	; 255
     4a6:	60 c0       	rjmp	.+192    	; 0x568 <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     4a8:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     4ac:	22 23       	and	r18, r18
     4ae:	f1 f0       	breq	.+60     	; 0x4ec <blink_on_activate+0xcc>
     4b0:	81 3d       	cpi	r24, 0xD1	; 209
     4b2:	27 e0       	ldi	r18, 0x07	; 7
     4b4:	92 07       	cpc	r25, r18
     4b6:	a1 05       	cpc	r26, r1
     4b8:	b1 05       	cpc	r27, r1
     4ba:	c0 f0       	brcs	.+48     	; 0x4ec <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4bc:	25 9b       	sbis	0x04, 5	; 4
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4c0:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4c4:	f8 94       	cli
    {
        if (value_for_bit) 
     4c6:	95 fd       	sbrc	r25, 5
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     4ca:	2d 9a       	sbi	0x05, 5	; 5
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4ce:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4d0:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4d2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4d6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4da:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4de:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4e2:	80 53       	subi	r24, 0x30	; 48
     4e4:	98 4f       	sbci	r25, 0xF8	; 248
     4e6:	af 4f       	sbci	r26, 0xFF	; 255
     4e8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ea:	3e c0       	rjmp	.+124    	; 0x568 <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4ec:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <host_active>
     4f0:	22 23       	and	r18, r18
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <blink_on_activate+0xd6>
     4f4:	41 c0       	rjmp	.+130    	; 0x578 <blink_on_activate+0x158>
     4f6:	85 3f       	cpi	r24, 0xF5	; 245
     4f8:	91 40       	sbci	r25, 0x01	; 1
     4fa:	a1 05       	cpc	r26, r1
     4fc:	b1 05       	cpc	r27, r1
     4fe:	e0 f1       	brcs	.+120    	; 0x578 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     500:	25 9b       	sbis	0x04, 5	; 4
     502:	09 c0       	rjmp	.+18     	; 0x516 <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     504:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     506:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     508:	f8 94       	cli
    {
        if (value_for_bit) 
     50a:	95 fd       	sbrc	r25, 5
     50c:	02 c0       	rjmp	.+4      	; 0x512 <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     50e:	2d 9a       	sbi	0x05, 5	; 5
     510:	01 c0       	rjmp	.+2      	; 0x514 <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     512:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     514:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     516:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     51a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     51e:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     522:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     526:	8c 50       	subi	r24, 0x0C	; 12
     528:	9e 4f       	sbci	r25, 0xFE	; 254
     52a:	af 4f       	sbci	r26, 0xFF	; 255
     52c:	bf 4f       	sbci	r27, 0xFF	; 255
     52e:	1c c0       	rjmp	.+56     	; 0x568 <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     530:	89 3c       	cpi	r24, 0xC9	; 201
     532:	91 05       	cpc	r25, r1
     534:	a1 05       	cpc	r26, r1
     536:	b1 05       	cpc	r27, r1
     538:	f8 f0       	brcs	.+62     	; 0x578 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     53a:	25 9b       	sbis	0x04, 5	; 4
     53c:	09 c0       	rjmp	.+18     	; 0x550 <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     53e:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     540:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     542:	f8 94       	cli
    {
        if (value_for_bit) 
     544:	95 fd       	sbrc	r25, 5
     546:	02 c0       	rjmp	.+4      	; 0x54c <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     548:	2d 9a       	sbi	0x05, 5	; 5
     54a:	01 c0       	rjmp	.+2      	; 0x54e <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     54c:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     54e:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     550:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     554:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     558:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     55c:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     560:	88 53       	subi	r24, 0x38	; 56
     562:	9f 4f       	sbci	r25, 0xFF	; 255
     564:	af 4f       	sbci	r26, 0xFF	; 255
     566:	bf 4f       	sbci	r27, 0xFF	; 255
     568:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <blink_started_at>
     56c:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <blink_started_at+0x1>
     570:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <blink_started_at+0x2>
     574:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <blink_started_at+0x3>
        }
    }
}
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
    if (bootloader_started)
     582:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     586:	88 23       	and	r24, r24
     588:	01 f1       	breq	.+64     	; 0x5ca <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     58a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     58e:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     592:	21 11       	cpse	r18, r1
     594:	1a c0       	rjmp	.+52     	; 0x5ca <check_Bootload_Time+0x4c>
     596:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <bootloader_started_at>
     59a:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <bootloader_started_at+0x1>
     59e:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <bootloader_started_at+0x2>
     5a2:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <bootloader_started_at+0x3>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	80 1b       	sub	r24, r16
     5ac:	91 0b       	sbc	r25, r17
     5ae:	a2 0b       	sbc	r26, r18
     5b0:	b3 0b       	sbc	r27, r19
     5b2:	89 33       	cpi	r24, 0x39	; 57
     5b4:	91 4c       	sbci	r25, 0xC1	; 193
     5b6:	a1 40       	sbci	r26, 0x01	; 1
     5b8:	b1 05       	cpc	r27, r1
     5ba:	38 f0       	brcs	.+14     	; 0x5ca <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     5bc:	0e 94 91 01 	call	0x322	; 0x322 <connect_normal_mode>
            host_active =1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
            bootloader_started = 0;
     5c6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
        }
    }
}
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5d4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5d8:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5dc:	21 11       	cpse	r18, r1
     5de:	1e c0       	rjmp	.+60     	; 0x61c <check_lockout+0x4c>
     5e0:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     5e4:	22 23       	and	r18, r18
     5e6:	d1 f0       	breq	.+52     	; 0x61c <check_lockout+0x4c>
     5e8:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <lockout_started_at>
     5ec:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <lockout_started_at+0x1>
     5f0:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <lockout_started_at+0x2>
     5f4:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <lockout_started_at+0x3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	80 1b       	sub	r24, r16
     5fe:	91 0b       	sbc	r25, r17
     600:	a2 0b       	sbc	r26, r18
     602:	b3 0b       	sbc	r27, r19
     604:	81 3c       	cpi	r24, 0xC1	; 193
     606:	94 4d       	sbci	r25, 0xD4	; 212
     608:	a1 40       	sbci	r26, 0x01	; 1
     60a:	b1 05       	cpc	r27, r1
     60c:	38 f0       	brcs	.+14     	; 0x61c <check_lockout+0x4c>
    {
        connect_normal_mode();
     60e:	0e 94 91 01 	call	0x322	; 0x322 <connect_normal_mode>

        host_active = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
        lockout_active =0;
     618:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    }
}
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	08 95       	ret

00000622 <check_shutdown>:


void check_shutdown(void)
{
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
    if (shutdown_started)
     626:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_started>
     62a:	88 23       	and	r24, r24
     62c:	19 f1       	breq	.+70     	; 0x674 <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     62e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     632:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <shutdown_started_at>
     636:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <shutdown_started_at+0x1>
     63a:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <shutdown_started_at+0x2>
     63e:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <shutdown_started_at+0x3>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	80 1b       	sub	r24, r16
     648:	91 0b       	sbc	r25, r17
     64a:	a2 0b       	sbc	r26, r18
     64c:	b3 0b       	sbc	r27, r19
     64e:	89 3e       	cpi	r24, 0xE9	; 233
     650:	93 40       	sbci	r25, 0x03	; 3
     652:	a1 05       	cpc	r26, r1
     654:	b1 05       	cpc	r27, r1
     656:	98 f1       	brcs	.+102    	; 0x6be <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     658:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     65a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     65c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     65e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     660:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     662:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     664:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     666:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     668:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <shutdown_detected>
     672:	25 c0       	rjmp	.+74     	; 0x6be <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     674:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     678:	81 11       	cpse	r24, r1
     67a:	21 c0       	rjmp	.+66     	; 0x6be <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     67c:	18 99       	sbic	0x03, 0	; 3
     67e:	1f c0       	rjmp	.+62     	; 0x6be <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     680:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     682:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     684:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     686:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     688:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     68a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     68c:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     68e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     690:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     692:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     694:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     696:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     698:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     69a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     69c:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     69e:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     6a0:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
                shutdown_started_at = millis();
     6aa:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     6ae:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
     6b2:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
     6b6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
     6ba:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
            }
        }
}
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     6c4:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     6c8:	81 11       	cpse	r24, r1
     6ca:	b5 c0       	rjmp	.+362    	; 0x836 <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     6cc:	4b 99       	sbic	0x09, 3	; 9
     6ce:	56 c0       	rjmp	.+172    	; 0x77c <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6d0:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     6d4:	83 fd       	sbrc	r24, 3
     6d6:	af c0       	rjmp	.+350    	; 0x836 <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     6d8:	4a 9b       	sbis	0x09, 2	; 9
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6de:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6e0:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6e2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6e4:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6e6:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     6ea:	81 11       	cpse	r24, r1
     6ec:	a4 c0       	rjmp	.+328    	; 0x836 <check_DTR+0x172>
     6ee:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     6f2:	81 11       	cpse	r24, r1
     6f4:	a0 c0       	rjmp	.+320    	; 0x836 <check_DTR+0x172>
     6f6:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     6fa:	81 11       	cpse	r24, r1
     6fc:	9c c0       	rjmp	.+312    	; 0x836 <check_DTR+0x172>
     6fe:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     702:	81 11       	cpse	r24, r1
     704:	98 c0       	rjmp	.+304    	; 0x836 <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     706:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     70a:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     70e:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     712:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     716:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     71a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <bootloader_address>
     71e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     722:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     726:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     72a:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	20 95       	com	r18
     732:	30 95       	com	r19
     734:	2a 70       	andi	r18, 0x0A	; 10
     736:	33 27       	eor	r19, r19
     738:	64 e0       	ldi	r22, 0x04	; 4
     73a:	22 0f       	add	r18, r18
     73c:	33 1f       	adc	r19, r19
     73e:	6a 95       	dec	r22
     740:	e1 f7       	brne	.-8      	; 0x73a <check_DTR+0x76>
     742:	89 2f       	mov	r24, r25
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	80 95       	com	r24
     748:	90 95       	com	r25
     74a:	80 75       	andi	r24, 0x50	; 80
     74c:	99 27       	eor	r25, r25
     74e:	74 e0       	ldi	r23, 0x04	; 4
     750:	95 95       	asr	r25
     752:	87 95       	ror	r24
     754:	7a 95       	dec	r23
     756:	e1 f7       	brne	.-8      	; 0x750 <check_DTR+0x8c>
     758:	82 2b       	or	r24, r18
     75a:	93 2b       	or	r25, r19
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	1f 92       	push	r1
     762:	4f 93       	push	r20
     764:	86 e1       	ldi	r24, 0x16	; 22
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
                        uart_has_TTL = 1;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
                        localhost_active = 1;
     776:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <localhost_active>
     77a:	57 c0       	rjmp	.+174    	; 0x82a <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     77c:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     780:	88 23       	and	r24, r24
     782:	09 f4       	brne	.+2      	; 0x786 <check_DTR+0xc2>
     784:	58 c0       	rjmp	.+176    	; 0x836 <check_DTR+0x172>
     786:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     78a:	88 23       	and	r24, r24
     78c:	09 f4       	brne	.+2      	; 0x790 <check_DTR+0xcc>
     78e:	53 c0       	rjmp	.+166    	; 0x836 <check_DTR+0x172>
     790:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     794:	81 11       	cpse	r24, r1
     796:	4f c0       	rjmp	.+158    	; 0x836 <check_DTR+0x172>
     798:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     79c:	81 11       	cpse	r24, r1
     79e:	4b c0       	rjmp	.+150    	; 0x836 <check_DTR+0x172>
     7a0:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     7a4:	81 11       	cpse	r24, r1
     7a6:	47 c0       	rjmp	.+142    	; 0x836 <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     7a8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     7ac:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     7b0:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     7b4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     7b8:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7bc:	8f ec       	ldi	r24, 0xCF	; 207
     7be:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7c2:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     7c6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     7ca:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	20 95       	com	r18
     7d2:	30 95       	com	r19
     7d4:	2a 70       	andi	r18, 0x0A	; 10
     7d6:	33 27       	eor	r19, r19
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	22 0f       	add	r18, r18
     7dc:	33 1f       	adc	r19, r19
     7de:	8a 95       	dec	r24
     7e0:	e1 f7       	brne	.-8      	; 0x7da <check_DTR+0x116>
     7e2:	89 2f       	mov	r24, r25
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	80 95       	com	r24
     7e8:	90 95       	com	r25
     7ea:	80 75       	andi	r24, 0x50	; 80
     7ec:	99 27       	eor	r25, r25
     7ee:	54 e0       	ldi	r21, 0x04	; 4
     7f0:	95 95       	asr	r25
     7f2:	87 95       	ror	r24
     7f4:	5a 95       	dec	r21
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <check_DTR+0x12c>
     7f8:	82 2b       	or	r24, r18
     7fa:	93 2b       	or	r25, r19
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	1f 92       	push	r1
     802:	4f 93       	push	r20
     804:	86 e1       	ldi	r24, 0x16	; 22
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
                uart_has_TTL = 1;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     816:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     818:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     81a:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     81c:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     81e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     822:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     824:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     826:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     828:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	08 95       	ret

00000838 <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     838:	4f 92       	push	r4
     83a:	5f 92       	push	r5
     83c:	6f 92       	push	r6
     83e:	7f 92       	push	r7
     840:	8f 92       	push	r8
     842:	9f 92       	push	r9
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     858:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     85c:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <uart_has_TTL>
     860:	22 23       	and	r18, r18
     862:	d9 f0       	breq	.+54     	; 0x89a <check_uart+0x62>
     864:	40 90 09 03 	lds	r4, 0x0309	; 0x800309 <uart_started_at>
     868:	50 90 0a 03 	lds	r5, 0x030A	; 0x80030a <uart_started_at+0x1>
     86c:	60 90 0b 03 	lds	r6, 0x030B	; 0x80030b <uart_started_at+0x2>
     870:	70 90 0c 03 	lds	r7, 0x030C	; 0x80030c <uart_started_at+0x3>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	84 19       	sub	r24, r4
     87a:	95 09       	sbc	r25, r5
     87c:	a6 09       	sbc	r26, r6
     87e:	b7 09       	sbc	r27, r7
     880:	85 3f       	cpi	r24, 0xF5	; 245
     882:	91 40       	sbci	r25, 0x01	; 1
     884:	a1 05       	cpc	r26, r1
     886:	b1 05       	cpc	r27, r1
     888:	40 f0       	brcs	.+16     	; 0x89a <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     88a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     88e:	81 70       	andi	r24, 0x01	; 1
     890:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
        uart_has_TTL = 0;
     894:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     898:	cd c1       	rjmp	.+922    	; 0xc34 <__stack+0x335>
    }
    else
    {
        if ( uart0_available() )
     89a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <uart0_available>
     89e:	89 2b       	or	r24, r25
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <check_uart+0x6c>
     8a2:	c8 c1       	rjmp	.+912    	; 0xc34 <__stack+0x335>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     8a4:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__iob>
     8a8:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__iob+0x1>
     8ac:	0e 94 d7 12 	call	0x25ae	; 0x25ae <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     8b0:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <uart_previous_byte>
     8b4:	26 2f       	mov	r18, r22
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	20 95       	com	r18
     8ba:	30 95       	com	r19
     8bc:	a9 01       	movw	r20, r18
     8be:	4a 70       	andi	r20, 0x0A	; 10
     8c0:	55 27       	eor	r21, r21
     8c2:	74 e0       	ldi	r23, 0x04	; 4
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	7a 95       	dec	r23
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <check_uart+0x8c>
     8cc:	20 75       	andi	r18, 0x50	; 80
     8ce:	33 27       	eor	r19, r19
     8d0:	e4 e0       	ldi	r30, 0x04	; 4
     8d2:	35 95       	asr	r19
     8d4:	27 95       	ror	r18
     8d6:	ea 95       	dec	r30
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <check_uart+0x9a>
     8da:	24 2b       	or	r18, r20
     8dc:	35 2b       	or	r19, r21
     8de:	ac 01       	movw	r20, r24
     8e0:	55 27       	eor	r21, r21
     8e2:	24 17       	cp	r18, r20
     8e4:	35 07       	cpc	r19, r21
     8e6:	39 f4       	brne	.+14     	; 0x8f6 <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8e8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8ec:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     8f0:	81 11       	cpse	r24, r1
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <check_uart+0xc4>
     8f4:	0f c0       	rjmp	.+30     	; 0x914 <__stack+0x15>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     8f6:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_previous_byte>
                return;
     8fa:	9c c1       	rjmp	.+824    	; 0xc34 <__stack+0x335>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     8fc:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
     900:	68 17       	cp	r22, r24
     902:	29 f0       	breq	.+10     	; 0x90e <__stack+0xf>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     904:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     908:	84 70       	andi	r24, 0x04	; 4
     90a:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
                }
                uart_has_TTL = 0;
     90e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     912:	04 c0       	rjmp	.+8      	; 0x91c <__stack+0x1d>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     914:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     918:	88 23       	and	r24, r24
     91a:	19 f0       	breq	.+6      	; 0x922 <__stack+0x23>
                {
                    host_is_foreign = 0; // used to connect the host
     91c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
     920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0x29>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     928:	61 11       	cpse	r22, r1
     92a:	27 c0       	rjmp	.+78     	; 0x97a <__stack+0x7b>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     92c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	80 5c       	subi	r24, 0xC0	; 192
     936:	94 4d       	sbci	r25, 0xD4	; 212
     938:	a1 40       	sbci	r26, 0x01	; 1
     93a:	b1 09       	sbc	r27, r1
     93c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     940:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     944:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     948:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     94c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	88 53       	subi	r24, 0x38	; 56
     956:	91 4c       	sbci	r25, 0xC1	; 193
     958:	a1 40       	sbci	r26, 0x01	; 1
     95a:	b1 09       	sbc	r27, r1
     95c:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     960:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     964:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     968:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     96c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     96e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     970:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     972:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     974:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
     978:	36 c1       	rjmp	.+620    	; 0xbe6 <__stack+0x2e7>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     97a:	6f 3f       	cpi	r22, 0xFF	; 255
     97c:	31 f4       	brne	.+12     	; 0x98a <__stack+0x8b>
            {
                arduino_mode_started = 0;
     97e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
                arduino_mode = 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <arduino_mode>
                return;
     988:	55 c1       	rjmp	.+682    	; 0xc34 <__stack+0x335>
            }
            if (input == RPU_START_TEST_MODE) 
     98a:	61 30       	cpi	r22, 0x01	; 1
     98c:	09 f0       	breq	.+2      	; 0x990 <__stack+0x91>
     98e:	6f c0       	rjmp	.+222    	; 0xa6e <__stack+0x16f>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     990:	f9 b1       	in	r31, 0x09	; 9
     992:	e9 b1       	in	r30, 0x09	; 9
     994:	56 b1       	in	r21, 0x06	; 6
     996:	49 b1       	in	r20, 0x09	; 9
     998:	39 b1       	in	r19, 0x09	; 9
     99a:	89 b1       	in	r24, 0x09	; 9
     99c:	29 b1       	in	r18, 0x09	; 9
     99e:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	88 0f       	add	r24, r24
     9a4:	89 2f       	mov	r24, r25
     9a6:	88 1f       	adc	r24, r24
     9a8:	99 0b       	sbc	r25, r25
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	73 fb       	bst	r23, 3
     9b4:	99 27       	eor	r25, r25
     9b6:	90 f9       	bld	r25, 0
     9b8:	89 2b       	or	r24, r25
     9ba:	f3 fb       	bst	r31, 3
     9bc:	aa 24       	eor	r10, r10
     9be:	a0 f8       	bld	r10, 0
     9c0:	b1 2c       	mov	r11, r1
     9c2:	b6 94       	lsr	r11
     9c4:	ba 2c       	mov	r11, r10
     9c6:	aa 24       	eor	r10, r10
     9c8:	b7 94       	ror	r11
     9ca:	a7 94       	ror	r10
     9cc:	a8 2a       	or	r10, r24
     9ce:	e2 fb       	bst	r30, 2
     9d0:	cc 24       	eor	r12, r12
     9d2:	c0 f8       	bld	r12, 0
     9d4:	d1 2c       	mov	r13, r1
     9d6:	d6 e0       	ldi	r29, 0x06	; 6
     9d8:	cc 0c       	add	r12, r12
     9da:	dd 1c       	adc	r13, r13
     9dc:	da 95       	dec	r29
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0xd9>
     9e0:	ca 28       	or	r12, r10
     9e2:	52 fb       	bst	r21, 2
     9e4:	ee 24       	eor	r14, r14
     9e6:	e0 f8       	bld	r14, 0
     9e8:	f1 2c       	mov	r15, r1
     9ea:	15 e0       	ldi	r17, 0x05	; 5
     9ec:	ee 0c       	add	r14, r14
     9ee:	ff 1c       	adc	r15, r15
     9f0:	1a 95       	dec	r17
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0xed>
     9f4:	ec 28       	or	r14, r12
     9f6:	45 fb       	bst	r20, 5
     9f8:	00 27       	eor	r16, r16
     9fa:	00 f9       	bld	r16, 0
     9fc:	10 e0       	ldi	r17, 0x00	; 0
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	00 0f       	add	r16, r16
     a02:	11 1f       	adc	r17, r17
     a04:	8a 95       	dec	r24
     a06:	e1 f7       	brne	.-8      	; 0xa00 <__stack+0x101>
     a08:	0e 29       	or	r16, r14
     a0a:	36 fb       	bst	r19, 6
     a0c:	33 27       	eor	r19, r19
     a0e:	30 f9       	bld	r19, 0
     a10:	c3 2f       	mov	r28, r19
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	d8 2f       	mov	r29, r24
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	cc 0f       	add	r28, r28
     a1a:	dd 1f       	adc	r29, r29
     a1c:	9a 95       	dec	r25
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <__stack+0x119>
     a20:	c0 2b       	or	r28, r16
     a22:	24 fb       	bst	r18, 4
     a24:	88 24       	eor	r8, r8
     a26:	80 f8       	bld	r8, 0
     a28:	91 2c       	mov	r9, r1
     a2a:	88 0c       	add	r8, r8
     a2c:	99 1c       	adc	r9, r9
     a2e:	8c 2a       	or	r8, r28
     a30:	80 92 f4 02 	sts	0x02F4, r8	; 0x8002f4 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a34:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a36:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a38:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a3c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a40:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a42:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a44:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a46:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a48:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a4c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a50:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a52:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a54:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a56:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a58:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a5a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a5c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a5e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a60:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a62:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a64:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 1;
     a68:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <test_mode>
                return;
     a6c:	e3 c0       	rjmp	.+454    	; 0xc34 <__stack+0x335>
            }
            if (input == RPU_END_TEST_MODE) 
     a6e:	6e 3f       	cpi	r22, 0xFE	; 254
     a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
     a72:	76 c0       	rjmp	.+236    	; 0xb60 <__stack+0x261>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a74:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a78:	88 1f       	adc	r24, r24
     a7a:	88 27       	eor	r24, r24
     a7c:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a7e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a80:	f8 94       	cli
    {
        if (value_for_bit) 
     a82:	88 23       	and	r24, r24
     a84:	11 f0       	breq	.+4      	; 0xa8a <__stack+0x18b>
        {
            *register_addr |= 1 << bit_offset;
     a86:	5b 9a       	sbi	0x0b, 3	; 11
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <__stack+0x18d>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a8a:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a8c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a8e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a92:	86 fb       	bst	r24, 6
     a94:	88 27       	eor	r24, r24
     a96:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a98:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a9a:	f8 94       	cli
    {
        if (value_for_bit) 
     a9c:	88 23       	and	r24, r24
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <__stack+0x1a5>
        {
            *register_addr |= 1 << bit_offset;
     aa0:	5a 9a       	sbi	0x0b, 2	; 11
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__stack+0x1a7>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aa4:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aa8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     aac:	85 fb       	bst	r24, 5
     aae:	88 27       	eor	r24, r24
     ab0:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ab2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ab4:	f8 94       	cli
    {
        if (value_for_bit) 
     ab6:	88 23       	and	r24, r24
     ab8:	11 f0       	breq	.+4      	; 0xabe <__stack+0x1bf>
        {
            *register_addr |= 1 << bit_offset;
     aba:	42 9a       	sbi	0x08, 2	; 8
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <__stack+0x1c1>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     abe:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ac0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ac2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ac6:	82 95       	swap	r24
     ac8:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     acc:	f8 94       	cli
    {
        if (value_for_bit) 
     ace:	88 23       	and	r24, r24
     ad0:	11 f0       	breq	.+4      	; 0xad6 <__stack+0x1d7>
        {
            *register_addr |= 1 << bit_offset;
     ad2:	5d 9a       	sbi	0x0b, 5	; 11
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <__stack+0x1d9>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ad6:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ada:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ade:	83 fb       	bst	r24, 3
     ae0:	88 27       	eor	r24, r24
     ae2:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ae4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae6:	f8 94       	cli
    {
        if (value_for_bit) 
     ae8:	88 23       	and	r24, r24
     aea:	11 f0       	breq	.+4      	; 0xaf0 <__stack+0x1f1>
        {
            *register_addr |= 1 << bit_offset;
     aec:	5e 9a       	sbi	0x0b, 6	; 11
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <__stack+0x1f3>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     af0:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     af2:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     af4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     af6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     af8:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     afa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     afc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     afe:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b00:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b02:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     b04:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b08:	88 61       	ori	r24, 0x18	; 24
     b0a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b0e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b12:	82 fb       	bst	r24, 2
     b14:	88 27       	eor	r24, r24
     b16:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b18:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b1a:	f8 94       	cli
    {
        if (value_for_bit) 
     b1c:	88 23       	and	r24, r24
     b1e:	11 f0       	breq	.+4      	; 0xb24 <__stack+0x225>
        {
            *register_addr |= 1 << bit_offset;
     b20:	5f 9a       	sbi	0x0b, 7	; 11
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <__stack+0x227>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b24:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b26:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b28:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b2c:	86 95       	lsr	r24
     b2e:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b32:	f8 94       	cli
    {
        if (value_for_bit) 
     b34:	88 23       	and	r24, r24
     b36:	11 f0       	breq	.+4      	; 0xb3c <__stack+0x23d>
        {
            *register_addr |= 1 << bit_offset;
     b38:	5c 9a       	sbi	0x0b, 4	; 11
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <__stack+0x23f>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b3c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b3e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b40:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b44:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b46:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b48:	f8 94       	cli
    {
        if (value_for_bit) 
     b4a:	88 23       	and	r24, r24
     b4c:	11 f0       	breq	.+4      	; 0xb52 <__stack+0x253>
        {
            *register_addr |= 1 << bit_offset;
     b4e:	43 9a       	sbi	0x08, 3	; 8
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <__stack+0x255>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b52:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b54:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b56:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 0;
     b5a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
                return;
     b5e:	6a c0       	rjmp	.+212    	; 0xc34 <__stack+0x335>
            }
            if (input == rpu_address) // that is my local address
     b60:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     b64:	68 13       	cpse	r22, r24
     b66:	2a c0       	rjmp	.+84     	; 0xbbc <__stack+0x2bd>
            {
                connect_bootload_mode();
     b68:	0e 94 c6 01 	call	0x38c	; 0x38c <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b72:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b74:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b76:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b78:	8f bf       	out	0x3f, r24	; 63
     b7a:	8f e5       	ldi	r24, 0x5F	; 95
     b7c:	9a ee       	ldi	r25, 0xEA	; 234
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <__stack+0x27f>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <__stack+0x285>
     b84:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b86:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b88:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b8a:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b8c:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     b8e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     b92:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     b96:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     b9a:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     b9e:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     ba2:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                bootloader_started_at = millis();
     ba6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     baa:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <bootloader_started_at>
     bae:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <bootloader_started_at+0x1>
     bb2:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <bootloader_started_at+0x2>
     bb6:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <bootloader_started_at+0x3>
                return;
     bba:	3c c0       	rjmp	.+120    	; 0xc34 <__stack+0x335>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     bbc:	67 fd       	sbrc	r22, 7
     bbe:	1e c0       	rjmp	.+60     	; 0xbfc <__stack+0x2fd>
            {  
                lockout_active =1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lockout_active>
                bootloader_started = 0;
     bc6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
                host_active =0;
     bca:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>

                connect_lockout_mode();
     bce:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <connect_lockout_mode>

                lockout_started_at = millis();
     bd2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     bd6:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <lockout_started_at>
     bda:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <lockout_started_at+0x1>
     bde:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <lockout_started_at+0x2>
     be2:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <lockout_started_at+0x3>
                blink_started_at = millis();
     be6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     bea:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     bee:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     bf2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     bf6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                return;
     bfa:	1c c0       	rjmp	.+56     	; 0xc34 <__stack+0x335>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     bfc:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
                lockout_active =0;
     c00:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
                host_active =0;
     c04:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
                bootloader_started = 0;
     c08:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c0c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c0e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c10:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c12:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c14:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c16:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c18:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c1a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c1c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c1e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c20:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c22:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c24:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c26:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c28:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c2a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c2c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c2e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c30:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c32:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	7f 90       	pop	r7
     c4e:	6f 90       	pop	r6
     c50:	5f 90       	pop	r5
     c52:	4f 90       	pop	r4
     c54:	08 95       	ret

00000c56 <fnWtMgrAddr>:
}

// I2C_COMMAND_TO_SET_RPU_ADDRESS
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
    rpu_address = i2cBuffer[1];
     c56:	fc 01       	movw	r30, r24
     c58:	81 81       	ldd	r24, Z+1	; 0x01
     c5a:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    write_rpu_address_to_eeprom = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
     c64:	08 95       	ret

00000c66 <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c66:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <bootloader_address>
     c6a:	fc 01       	movw	r30, r24
     c6c:	21 83       	std	Z+1, r18	; 0x01
     c6e:	08 95       	ret

00000c70 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c70:	fc 01       	movw	r30, r24
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
     c78:	08 95       	ret

00000c7a <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c7a:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <shutdown_detected>
     c7e:	fc 01       	movw	r30, r24
     c80:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c82:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
     c86:	08 95       	ret

00000c88 <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     c88:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     c8a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <status_byt>
     c8e:	9f 70       	andi	r25, 0x0F	; 15
     c90:	91 83       	std	Z+1, r25	; 0x01
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     c92:	83 b1       	in	r24, 0x03	; 3
    i2cBuffer[1] &= digitalRead(ALT_EN)<<4; // report if alternat power is enabled
     c94:	11 82       	std	Z+1, r1	; 0x01
     c96:	83 b1       	in	r24, 0x03	; 3
     c98:	08 95       	ret

00000c9a <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    enable_alternate_power = (i2cBuffer[1] & 0x10)>>4;
     c9a:	fc 01       	movw	r30, r24
     c9c:	81 81       	ldd	r24, Z+1	; 0x01
     c9e:	84 fb       	bst	r24, 4
     ca0:	99 27       	eor	r25, r25
     ca2:	90 f9       	bld	r25, 0
     ca4:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <enable_alternate_power>
    if ( (i2cBuffer[1] & 0x20) && !shutdown_started && !shutdown_detected ) enable_sbc_power = 1;
     ca8:	85 ff       	sbrs	r24, 5
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <fnWtStatus+0x28>
     cac:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <shutdown_started>
     cb0:	91 11       	cpse	r25, r1
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <fnWtStatus+0x28>
     cb4:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <shutdown_detected>
     cb8:	91 11       	cpse	r25, r1
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <fnWtStatus+0x28>
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <enable_sbc_power>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     cc2:	8f 70       	andi	r24, 0x0F	; 15
     cc4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     cc8:	08 95       	ret

00000cca <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     cca:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     cce:	fc 01       	movw	r30, r24
     cd0:	21 83       	std	Z+1, r18	; 0x01
     cd2:	08 95       	ret

00000cd4 <fnRdTimedAccumAltI>:
    i2cBuffer[2] =  adc_buffer & 0xFF; 
}

// I2C command to read timed accumulation of analog channel ALT_I
void fnRdTimedAccumAltI(uint8_t* i2cBuffer)
{
     cd4:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_alt_ti>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     cd6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
     cda:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_alt_ti>>16) & 0xFF;
     cdc:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
     ce0:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_alt_ti>>8) & 0xFF;
     ce2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
     ce6:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_alt_ti & 0xFF; // low byte. Again Mask should optimize out
     ce8:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <accumulate_alt_ti>
     cec:	84 83       	std	Z+4, r24	; 0x04
     cee:	08 95       	ret

00000cf0 <fnRdTimedAccumPwrI>:
}

// I2C command to read timed accumulation of analog channel PWR_I
void fnRdTimedAccumPwrI(uint8_t* i2cBuffer)
{
     cf0:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_pwr_ti>>24) & 0xFF;
     cf2:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
     cf6:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_pwr_ti>>16) & 0xFF;
     cf8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
     cfc:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_pwr_ti>>8) & 0xFF;
     cfe:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
     d02:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_pwr_ti & 0xFF;
     d04:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <accumulate_pwr_ti>
     d08:	84 83       	std	Z+4, r24	; 0x04
     d0a:	08 95       	ret

00000d0c <fnAnalogRefExternAVCC>:
/* swap the I2C buffer with the ref_extern_avcc_uV in use
    set ref_loaded so main loop will try to save it to eeprom
    the main loop will reload eeprom or default value if new is out of range
*/ 
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     d0c:	fc 01       	movw	r30, r24
    // ref_extern_avcc_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_extern_avcc_uV>>24) & 0xFF;
     d0e:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    ref_extern_avcc_uV = 0x00FFFFFF & ref_extern_avcc_uV; // mask out the old value
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_extern_avcc_uV; // stuff in the new value to save
     d12:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     d16:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     d1a:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     d1e:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[1] =  temp; // return the old value
     d22:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_extern_avcc_uV>>16) & 0xFF;
     d24:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    ref_extern_avcc_uV = 0xFF00FFFF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_extern_avcc_uV; 
     d28:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     d2c:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     d30:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     d34:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[2] =  temp;
     d38:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_extern_avcc_uV>>8) & 0xFF;
     d3a:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    ref_extern_avcc_uV = 0xFFFF00FF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_extern_avcc_uV; 
     d3e:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     d42:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     d46:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     d4a:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[3] =  temp;
     d4e:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_extern_avcc_uV & 0xFF;
     d50:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    ref_extern_avcc_uV = 0xFFFFFF00 & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[4])) & ref_extern_avcc_uV;  
     d54:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     d58:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     d5c:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     d60:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[4] =  temp;
     d64:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_AVCC_TOSAVE; // main loop will reload eeprom or default value if new value is out of range
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     d6c:	08 95       	ret

00000d6e <fnAnalogRefIntern1V1>:
}

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     d6e:	fc 01       	movw	r30, r24
    // ref_intern_1v1_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_intern_1v1_uV>>24) & 0xFF;
     d70:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    ref_intern_1v1_uV = 0x00FFFFFF & ref_intern_1v1_uV; // mask out the old value
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_intern_1v1_uV; // stuff in the new value to save
     d74:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     d78:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     d7c:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     d80:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[1] =  temp; // return the old value
     d84:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_intern_1v1_uV>>16) & 0xFF;
     d86:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    ref_intern_1v1_uV = 0xFF00FFFF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_intern_1v1_uV; 
     d8a:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     d8e:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     d92:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     d96:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[2] =  temp;
     d9a:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_intern_1v1_uV>>8) & 0xFF;
     d9c:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    ref_intern_1v1_uV = 0xFFFF00FF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_intern_1v1_uV; 
     da0:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     da4:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     da8:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     dac:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[3] =  temp;
     db0:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_intern_1v1_uV & 0xFF;
     db2:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    ref_intern_1v1_uV = 0xFFFFFF00 & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[4])) & ref_intern_1v1_uV;  
     db6:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     dba:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     dbe:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     dc2:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[4] =  temp;
     dc6:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will reload eeprom or default value if new value is out of range
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     dce:	08 95       	ret

00000dd0 <fnNull>:
    }
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     dd0:	08 95       	ret

00000dd2 <fnRdMgrAddr>:
  *    the manager broadcast the bootload address when the host serial is active (e.g., nRTS) 
  *    all managers lockout serial except the address to bootload and the host */

// I2C_COMMAND_TO_READ_RPU_ADDRESS and set RPU_NORMAL_MODE
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
     dd2:	cf 93       	push	r28
    i2cBuffer[1] = rpu_address; // '1' is 0x31
     dd4:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
     dd8:	fc 01       	movw	r30, r24
     dda:	21 83       	std	Z+1, r18	; 0x01
    local_mcu_is_rpu_aware =1; 
     ddc:	c1 e0       	ldi	r28, 0x01	; 1
     dde:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <local_mcu_is_rpu_aware>
    
    // end the local mcu lockout. 
    if (localhost_active) 
     de2:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     de6:	88 23       	and	r24, r24
     de8:	b1 f1       	breq	.+108    	; 0xe56 <fnRdMgrAddr+0x84>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
     dea:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     dee:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     df2:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     df6:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     dfa:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
     dfe:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     e02:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     e06:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     e0a:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	20 95       	com	r18
     e12:	30 95       	com	r19
     e14:	2a 70       	andi	r18, 0x0A	; 10
     e16:	33 27       	eor	r19, r19
     e18:	64 e0       	ldi	r22, 0x04	; 4
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	6a 95       	dec	r22
     e20:	e1 f7       	brne	.-8      	; 0xe1a <fnRdMgrAddr+0x48>
     e22:	89 2f       	mov	r24, r25
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	80 95       	com	r24
     e28:	90 95       	com	r25
     e2a:	80 75       	andi	r24, 0x50	; 80
     e2c:	99 27       	eor	r25, r25
     e2e:	74 e0       	ldi	r23, 0x04	; 4
     e30:	95 95       	asr	r25
     e32:	87 95       	ror	r24
     e34:	7a 95       	dec	r23
     e36:	e1 f7       	brne	.-8      	; 0xe30 <fnRdMgrAddr+0x5e>
     e38:	82 2b       	or	r24, r18
     e3a:	93 2b       	or	r25, r19
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	1f 92       	push	r1
     e42:	4f 93       	push	r20
     e44:	86 e1       	ldi	r24, 0x16	; 22
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	9f 93       	push	r25
     e4a:	8f 93       	push	r24
     e4c:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
     e50:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
     e54:	39 c0       	rjmp	.+114    	; 0xec8 <fnRdMgrAddr+0xf6>
    }
    else 
        if (bootloader_started)
     e56:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     e5a:	88 23       	and	r24, r24
     e5c:	e1 f1       	breq	.+120    	; 0xed6 <fnRdMgrAddr+0x104>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
     e5e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     e62:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     e66:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     e6a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     e6e:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
     e72:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     e76:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     e7a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     e7e:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	20 95       	com	r18
     e86:	30 95       	com	r19
     e88:	2a 70       	andi	r18, 0x0A	; 10
     e8a:	33 27       	eor	r19, r19
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	22 0f       	add	r18, r18
     e90:	33 1f       	adc	r19, r19
     e92:	8a 95       	dec	r24
     e94:	e1 f7       	brne	.-8      	; 0xe8e <fnRdMgrAddr+0xbc>
     e96:	89 2f       	mov	r24, r25
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	80 95       	com	r24
     e9c:	90 95       	com	r25
     e9e:	80 75       	andi	r24, 0x50	; 80
     ea0:	99 27       	eor	r25, r25
     ea2:	54 e0       	ldi	r21, 0x04	; 4
     ea4:	95 95       	asr	r25
     ea6:	87 95       	ror	r24
     ea8:	5a 95       	dec	r21
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <fnRdMgrAddr+0xd2>
     eac:	82 2b       	or	r24, r18
     eae:	93 2b       	or	r25, r19
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	1f 92       	push	r1
     eb6:	4f 93       	push	r20
     eb8:	86 e1       	ldi	r24, 0x16	; 22
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	9f 93       	push	r25
     ebe:	8f 93       	push	r24
     ec0:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
     ec4:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	20 c0       	rjmp	.+64     	; 0xf16 <fnRdMgrAddr+0x144>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
     ed6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	80 5c       	subi	r24, 0xC0	; 192
     ee0:	94 4d       	sbci	r25, 0xD4	; 212
     ee2:	a1 40       	sbci	r26, 0x01	; 1
     ee4:	b1 09       	sbc	r27, r1
     ee6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     eea:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     eee:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     ef2:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     ef6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	88 53       	subi	r24, 0x38	; 56
     f00:	91 4c       	sbci	r25, 0xC1	; 193
     f02:	a1 40       	sbci	r26, 0x01	; 1
     f04:	b1 09       	sbc	r27, r1
     f06:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     f0a:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     f0e:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     f12:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
        }
}
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <fnRdAdcAltI>:
/********* POWER MANAGER ***********
  *  for ALT_I, ALT_V, PWR_I, PWR_V reading     */

// I2C command to read analog channel 0
void fnRdAdcAltI(uint8_t* i2cBuffer)
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_I);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     f26:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; // low byte. Again Mask should optimize out
     f28:	8a 83       	std	Y+2, r24	; 0x02
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <fnRdAdcAltV>:

// I2C command to read analog channel 1
void fnRdAdcAltV(uint8_t* i2cBuffer)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_V);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     f3c:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
     f3e:	8a 83       	std	Y+2, r24	; 0x02
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <fnRdAdcPwrI>:

// I2C command to read analog channel 6
void fnRdAdcPwrI(uint8_t* i2cBuffer)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_I);
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     f52:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
     f54:	8a 83       	std	Y+2, r24	; 0x02
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <fnRdAdcPwrV>:

// I2C command to read analog channel 7
void fnRdAdcPwrV(uint8_t* i2cBuffer)
{
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_V);
     f62:	87 e0       	ldi	r24, 0x07	; 7
     f64:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     f68:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; 
     f6a:	8a 83       	std	Y+2, r24	; 0x02
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
    if (test_mode)
     f8c:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <test_mode>
     f90:	ee 23       	and	r30, r30
     f92:	09 f4       	brne	.+2      	; 0xf96 <fnRdXcvrCntlInTestMode+0x24>
     f94:	55 c0       	rjmp	.+170    	; 0x1040 <fnRdXcvrCntlInTestMode+0xce>
     f96:	e9 b1       	in	r30, 0x09	; 9
     f98:	b9 b1       	in	r27, 0x09	; 9
     f9a:	f6 b1       	in	r31, 0x06	; 6
     f9c:	79 b0       	in	r7, 0x09	; 9
     f9e:	a9 b0       	in	r10, 0x09	; 9
     fa0:	09 b1       	in	r16, 0x09	; 9
     fa2:	b9 b0       	in	r11, 0x09	; 9
     fa4:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
     fa6:	10 e0       	ldi	r17, 0x00	; 0
     fa8:	00 0f       	add	r16, r16
     faa:	01 2f       	mov	r16, r17
     fac:	00 1f       	adc	r16, r16
     fae:	11 0b       	sbc	r17, r17
     fb0:	00 0f       	add	r16, r16
     fb2:	11 1f       	adc	r17, r17
     fb4:	00 0f       	add	r16, r16
     fb6:	11 1f       	adc	r17, r17
     fb8:	c3 fb       	bst	r28, 3
     fba:	cc 27       	eor	r28, r28
     fbc:	c0 f9       	bld	r28, 0
     fbe:	ac 2f       	mov	r26, r28
     fc0:	a0 2b       	or	r26, r16
     fc2:	e3 fb       	bst	r30, 3
     fc4:	88 24       	eor	r8, r8
     fc6:	80 f8       	bld	r8, 0
     fc8:	91 2c       	mov	r9, r1
     fca:	e4 01       	movw	r28, r8
     fcc:	d6 95       	lsr	r29
     fce:	dc 2f       	mov	r29, r28
     fd0:	cc 27       	eor	r28, r28
     fd2:	d7 95       	ror	r29
     fd4:	c7 95       	ror	r28
     fd6:	ca 2b       	or	r28, r26
     fd8:	b2 fb       	bst	r27, 2
     fda:	cc 24       	eor	r12, r12
     fdc:	c0 f8       	bld	r12, 0
     fde:	d1 2c       	mov	r13, r1
     fe0:	d6 01       	movw	r26, r12
     fe2:	56 e0       	ldi	r21, 0x06	; 6
     fe4:	aa 0f       	add	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	5a 95       	dec	r21
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <fnRdXcvrCntlInTestMode+0x72>
     fec:	ac 2b       	or	r26, r28
     fee:	f2 fb       	bst	r31, 2
     ff0:	ee 24       	eor	r14, r14
     ff2:	e0 f8       	bld	r14, 0
     ff4:	f1 2c       	mov	r15, r1
     ff6:	f7 01       	movw	r30, r14
     ff8:	65 e0       	ldi	r22, 0x05	; 5
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	6a 95       	dec	r22
    1000:	e1 f7       	brne	.-8      	; 0xffa <fnRdXcvrCntlInTestMode+0x88>
    1002:	ea 2b       	or	r30, r26
    1004:	75 fa       	bst	r7, 5
    1006:	66 27       	eor	r22, r22
    1008:	60 f9       	bld	r22, 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	f4 e0       	ldi	r31, 0x04	; 4
    100e:	66 0f       	add	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	fa 95       	dec	r31
    1014:	e1 f7       	brne	.-8      	; 0x100e <fnRdXcvrCntlInTestMode+0x9c>
    1016:	6e 2b       	or	r22, r30
    1018:	a6 fa       	bst	r10, 6
    101a:	44 27       	eor	r20, r20
    101c:	40 f9       	bld	r20, 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	a3 e0       	ldi	r26, 0x03	; 3
    1022:	44 0f       	add	r20, r20
    1024:	55 1f       	adc	r21, r21
    1026:	aa 95       	dec	r26
    1028:	e1 f7       	brne	.-8      	; 0x1022 <fnRdXcvrCntlInTestMode+0xb0>
    102a:	46 2b       	or	r20, r22
    102c:	b4 fa       	bst	r11, 4
    102e:	22 27       	eor	r18, r18
    1030:	20 f9       	bld	r18, 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	24 2b       	or	r18, r20
    103a:	fc 01       	movw	r30, r24
    103c:	21 83       	std	Z+1, r18	; 0x01
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    1040:	fc 01       	movw	r30, r24
    1042:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	9f 90       	pop	r9
    105a:	8f 90       	pop	r8
    105c:	7f 90       	pop	r7
    105e:	08 95       	ret

00001060 <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	fc 01       	movw	r30, r24
    if (test_mode)
    1066:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    106a:	88 23       	and	r24, r24
    106c:	09 f4       	brne	.+2      	; 0x1070 <fnWtXcvrCntlInTestMode+0x10>
    106e:	6e c0       	rjmp	.+220    	; 0x114c <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	88 1f       	adc	r24, r24
    1074:	88 27       	eor	r24, r24
    1076:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1078:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    107a:	f8 94       	cli
    {
        if (value_for_bit) 
    107c:	88 23       	and	r24, r24
    107e:	11 f0       	breq	.+4      	; 0x1084 <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    1080:	5b 9a       	sbi	0x0b, 3	; 11
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1084:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1086:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    1088:	81 81       	ldd	r24, Z+1	; 0x01
    108a:	86 fb       	bst	r24, 6
    108c:	88 27       	eor	r24, r24
    108e:	80 f9       	bld	r24, 0
    1090:	c8 2f       	mov	r28, r24
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1096:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1098:	f8 94       	cli
    {
        if (value_for_bit) 
    109a:	cd 2b       	or	r28, r29
    109c:	11 f0       	breq	.+4      	; 0x10a2 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    109e:	5a 9a       	sbi	0x0b, 2	; 11
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10a2:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10a4:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    10a6:	81 81       	ldd	r24, Z+1	; 0x01
    10a8:	85 fb       	bst	r24, 5
    10aa:	aa 27       	eor	r26, r26
    10ac:	a0 f9       	bld	r26, 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10b0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10b2:	f8 94       	cli
    {
        if (value_for_bit) 
    10b4:	ab 2b       	or	r26, r27
    10b6:	11 f0       	breq	.+4      	; 0x10bc <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    10b8:	42 9a       	sbi	0x08, 2	; 8
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10bc:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10be:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	84 fb       	bst	r24, 4
    10c4:	66 27       	eor	r22, r22
    10c6:	60 f9       	bld	r22, 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10cc:	f8 94       	cli
    {
        if (value_for_bit) 
    10ce:	67 2b       	or	r22, r23
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    10d2:	5d 9a       	sbi	0x0b, 5	; 11
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10d6:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10d8:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    10da:	81 81       	ldd	r24, Z+1	; 0x01
    10dc:	83 fb       	bst	r24, 3
    10de:	44 27       	eor	r20, r20
    10e0:	40 f9       	bld	r20, 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10e4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10e6:	f8 94       	cli
    {
        if (value_for_bit) 
    10e8:	45 2b       	or	r20, r21
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    10ec:	5e 9a       	sbi	0x0b, 6	; 11
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10f0:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10f2:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    10f4:	81 81       	ldd	r24, Z+1	; 0x01
    10f6:	82 ff       	sbrs	r24, 2
    10f8:	11 c0       	rjmp	.+34     	; 0x111c <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    10fa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10fe:	87 7e       	andi	r24, 0xE7	; 231
    1100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1104:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1106:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1108:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    110a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    110c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    110e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1110:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1112:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1114:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1116:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1118:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    111a:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    111c:	81 81       	ldd	r24, Z+1	; 0x01
    111e:	81 fb       	bst	r24, 1
    1120:	22 27       	eor	r18, r18
    1122:	20 f9       	bld	r18, 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1126:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1128:	f8 94       	cli
    {
        if (value_for_bit) 
    112a:	23 2b       	or	r18, r19
    112c:	11 f0       	breq	.+4      	; 0x1132 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    112e:	5c 9a       	sbi	0x0b, 4	; 11
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1132:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1134:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    1136:	81 81       	ldd	r24, Z+1	; 0x01
    1138:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    113a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    113c:	f8 94       	cli
    {
        if (value_for_bit) 
    113e:	88 23       	and	r24, r24
    1140:	11 f0       	breq	.+4      	; 0x1146 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    1142:	43 9a       	sbi	0x08, 3	; 8
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1146:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1148:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    114a:	01 c0       	rjmp	.+2      	; 0x114e <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    114c:	11 82       	std	Z+1, r1	; 0x01
    }
}
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	08 95       	ret

00001154 <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    1154:	fc 01       	movw	r30, r24
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	f1 f4       	brne	.+60     	; 0x1198 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    115c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    115e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1160:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1162:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1164:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1166:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1168:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    116a:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    116c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    116e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1170:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1172:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1174:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1176:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1178:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    117a:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    117c:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    1180:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
        shutdown_started_at = millis();
    1184:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
    1188:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
    118c:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
    1190:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
    1194:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
    1198:	08 95       	ret

0000119a <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    119a:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    119c:	fc 01       	movw	r30, r24
    119e:	c1 81       	ldd	r28, Z+1	; 0x01
    11a0:	c1 30       	cpi	r28, 0x01	; 1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <fnWtArduinMode+0xc>
    11a4:	45 c0       	rjmp	.+138    	; 0x1230 <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    11a6:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode_started>
    11aa:	21 11       	cpse	r18, r1
    11ac:	41 c0       	rjmp	.+130    	; 0x1230 <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    11ae:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
    11b2:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    11b6:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    11ba:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    11be:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    11c8:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    11cc:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    11d0:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	20 95       	com	r18
    11d8:	30 95       	com	r19
    11da:	2a 70       	andi	r18, 0x0A	; 10
    11dc:	33 27       	eor	r19, r19
    11de:	84 e0       	ldi	r24, 0x04	; 4
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	8a 95       	dec	r24
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <fnWtArduinMode+0x46>
    11e8:	89 2f       	mov	r24, r25
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	80 95       	com	r24
    11ee:	90 95       	com	r25
    11f0:	80 75       	andi	r24, 0x50	; 80
    11f2:	99 27       	eor	r25, r25
    11f4:	54 e0       	ldi	r21, 0x04	; 4
    11f6:	95 95       	asr	r25
    11f8:	87 95       	ror	r24
    11fa:	5a 95       	dec	r21
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <fnWtArduinMode+0x5c>
    11fe:	82 2b       	or	r24, r18
    1200:	93 2b       	or	r25, r19
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	1f 92       	push	r1
    1208:	4f 93       	push	r20
    120a:	86 e1       	ldi	r24, 0x16	; 22
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1216:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    121a:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    121e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    1230:	fc 01       	movw	r30, r24
    1232:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    1238:	cf 93       	push	r28
    123a:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    123c:	c1 81       	ldd	r28, Z+1	; 0x01
    123e:	c1 30       	cpi	r28, 0x01	; 1
    1240:	09 f0       	breq	.+2      	; 0x1244 <fnStartTestMode+0xc>
    1242:	48 c0       	rjmp	.+144    	; 0x12d4 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    1244:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    1248:	81 11       	cpse	r24, r1
    124a:	42 c0       	rjmp	.+132    	; 0x12d0 <fnStartTestMode+0x98>
    124c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1250:	81 11       	cpse	r24, r1
    1252:	3e c0       	rjmp	.+124    	; 0x12d0 <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    1254:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
    1258:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    125c:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1260:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1264:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1268:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    126c:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1270:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1274:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	20 95       	com	r18
    127c:	30 95       	com	r19
    127e:	2a 70       	andi	r18, 0x0A	; 10
    1280:	33 27       	eor	r19, r19
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	8a 95       	dec	r24
    128a:	e1 f7       	brne	.-8      	; 0x1284 <fnStartTestMode+0x4c>
    128c:	89 2f       	mov	r24, r25
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	80 95       	com	r24
    1292:	90 95       	com	r25
    1294:	80 75       	andi	r24, 0x50	; 80
    1296:	99 27       	eor	r25, r25
    1298:	54 e0       	ldi	r21, 0x04	; 4
    129a:	95 95       	asr	r25
    129c:	87 95       	ror	r24
    129e:	5a 95       	dec	r21
    12a0:	e1 f7       	brne	.-8      	; 0x129a <fnStartTestMode+0x62>
    12a2:	82 2b       	or	r24, r18
    12a4:	93 2b       	or	r25, r19
    12a6:	9f 93       	push	r25
    12a8:	8f 93       	push	r24
    12aa:	1f 92       	push	r1
    12ac:	4f 93       	push	r20
    12ae:	86 e1       	ldi	r24, 0x16	; 22
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	9f 93       	push	r25
    12b4:	8f 93       	push	r24
    12b6:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    12ba:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    12be:	c0 93 ed 02 	sts	0x02ED, r28	; 0x8002ed <test_mode_started>
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    12d4:	83 e0       	ldi	r24, 0x03	; 3
    12d6:	81 83       	std	Z+1, r24	; 0x01
    }
}
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    12e4:	19 81       	ldd	r17, Y+1	; 0x01
    12e6:	11 30       	cpi	r17, 0x01	; 1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <fnEndTestMode+0x10>
    12ea:	61 c0       	rjmp	.+194    	; 0x13ae <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    12ec:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    12f0:	81 11       	cpse	r24, r1
    12f2:	5d c0       	rjmp	.+186    	; 0x13ae <fnEndTestMode+0xd2>
    12f4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    12f8:	88 23       	and	r24, r24
    12fa:	09 f4       	brne	.+2      	; 0x12fe <fnEndTestMode+0x22>
    12fc:	58 c0       	rjmp	.+176    	; 0x13ae <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12fe:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1300:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1302:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1304:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1306:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1308:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    130a:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    130c:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    130e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1312:	88 61       	ori	r24, 0x18	; 24
    1314:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1318:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    131a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    131c:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    131e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1320:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1322:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1324:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1326:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    1328:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
    132c:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1330:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1334:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1338:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    133c:	8e ef       	ldi	r24, 0xFE	; 254
    133e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1342:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1346:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
    134a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	20 95       	com	r18
    1352:	30 95       	com	r19
    1354:	2a 70       	andi	r18, 0x0A	; 10
    1356:	33 27       	eor	r19, r19
    1358:	a9 01       	movw	r20, r18
    135a:	24 e0       	ldi	r18, 0x04	; 4
    135c:	44 0f       	add	r20, r20
    135e:	55 1f       	adc	r21, r21
    1360:	2a 95       	dec	r18
    1362:	e1 f7       	brne	.-8      	; 0x135c <fnEndTestMode+0x80>
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	20 95       	com	r18
    136a:	30 95       	com	r19
    136c:	20 75       	andi	r18, 0x50	; 80
    136e:	33 27       	eor	r19, r19
    1370:	64 e0       	ldi	r22, 0x04	; 4
    1372:	35 95       	asr	r19
    1374:	27 95       	ror	r18
    1376:	6a 95       	dec	r22
    1378:	e1 f7       	brne	.-8      	; 0x1372 <fnEndTestMode+0x96>
    137a:	24 2b       	or	r18, r20
    137c:	35 2b       	or	r19, r21
    137e:	3f 93       	push	r19
    1380:	2f 93       	push	r18
    1382:	1f 92       	push	r1
    1384:	9f 93       	push	r25
    1386:	86 e1       	ldi	r24, 0x16	; 22
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	9f 93       	push	r25
    138c:	8f 93       	push	r24
    138e:	0e 94 15 13 	call	0x262a	; 0x262a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1392:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    1396:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    139a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    13ae:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	08 95       	ret

000013b8 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    13b8:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	29 2f       	mov	r18, r25
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	26 17       	cp	r18, r22
    13c2:	37 07       	cpc	r19, r23
    13c4:	54 f4       	brge	.+20     	; 0x13da <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    13c6:	fa 01       	movw	r30, r20
    13c8:	e2 0f       	add	r30, r18
    13ca:	f3 1f       	adc	r31, r19
    13cc:	80 81       	ld	r24, Z
    13ce:	f9 01       	movw	r30, r18
    13d0:	e3 5f       	subi	r30, 0xF3	; 243
    13d2:	fc 4f       	sbci	r31, 0xFC	; 252
    13d4:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    13d6:	9f 5f       	subi	r25, 0xFF	; 255
    13d8:	f1 cf       	rjmp	.-30     	; 0x13bc <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    13da:	90 32       	cpi	r25, 0x20	; 32
    13dc:	20 f4       	brcc	.+8      	; 0x13e6 <receive_i2c_event+0x2e>
    13de:	f9 01       	movw	r30, r18
    13e0:	e3 5f       	subi	r30, 0xF3	; 243
    13e2:	fc 4f       	sbci	r31, 0xFC	; 252
    13e4:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    13e6:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    13ea:	62 30       	cpi	r22, 0x02	; 2
    13ec:	10 f4       	brcc	.+4      	; 0x13f2 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    13f2:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <i2c0Buffer>
    13f6:	e8 2f       	mov	r30, r24
    13f8:	e2 95       	swap	r30
    13fa:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    13fc:	e4 30       	cpi	r30, 0x04	; 4
    13fe:	10 f0       	brcs	.+4      	; 0x1404 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    1400:	8e ef       	ldi	r24, 0xFE	; 254
    1402:	04 c0       	rjmp	.+8      	; 0x140c <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    1404:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    1406:	88 30       	cpi	r24, 0x08	; 8
    1408:	20 f0       	brcs	.+8      	; 0x1412 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    140a:	8d ef       	ldi	r24, 0xFD	; 253
    140c:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    1410:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    1412:	98 e0       	ldi	r25, 0x08	; 8
    1414:	e9 9f       	mul	r30, r25
    1416:	f0 01       	movw	r30, r0
    1418:	11 24       	eor	r1, r1
    141a:	e8 0f       	add	r30, r24
    141c:	f1 1d       	adc	r31, r1
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	e5 5e       	subi	r30, 0xE5	; 229
    1424:	fe 4f       	sbci	r31, 0xFE	; 254
    1426:	01 90       	ld	r0, Z+
    1428:	f0 81       	ld	r31, Z
    142a:	e0 2d       	mov	r30, r0
    142c:	8d e0       	ldi	r24, 0x0D	; 13
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	09 94       	ijmp

00001432 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    1432:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    1436:	8d e0       	ldi	r24, 0x0D	; 13
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <twi0_transmit>
    if (return_code != 0)
    143e:	88 23       	and	r24, r24
    1440:	29 f0       	breq	.+10     	; 0x144c <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    1442:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
    1446:	82 70       	andi	r24, 0x02	; 2
    1448:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
    144c:	08 95       	ret

0000144e <fnRdMgrAddrQuietly>:
}

// I2C_COMMAND_TO_READ_RPU_ADDRESS
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = rpu_address; // '1' is 0x31
    144e:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
    1452:	fc 01       	movw	r30, r24
    1454:	21 83       	std	Z+1, r18	; 0x01
    1456:	08 95       	ret

00001458 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    1458:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <inBytes_to_handle+0x1>
    145c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    1460:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1464:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <smbus_has_numBytes_to_handle>
    1468:	08 95       	ret

0000146a <handle_smbus_receive>:
        {fnWtArduinMode, fnRdArduinMode, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull},
        {fnRdAdcAltI, fnRdAdcAltV, fnRdAdcPwrI, fnRdAdcPwrV, fnRdTimedAccumAltI, fnRdTimedAccumPwrI, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
    146a:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
    146e:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    smbus_has_numBytes_to_handle = 0; 
    1472:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1476:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    147a:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <inBytes_to_handle>
    147e:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <inBytes_to_handle+0x1>
    // read_i2c_block_data has a single command byte in its data set
    // it will write i2c address, the command* byte, and then cause a repeated start
    // followed by the i2c address (again) and then reading** the data
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    1482:	21 30       	cpi	r18, 0x01	; 1
    1484:	31 05       	cpc	r19, r1
    1486:	11 f0       	breq	.+4      	; 0x148c <handle_smbus_receive+0x22>
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	23 c0       	rjmp	.+70     	; 0x14d2 <handle_smbus_receive+0x68>
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    148c:	90 81       	ld	r25, Z
    148e:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    1492:	98 13       	cpse	r25, r24
    1494:	59 c0       	rjmp	.+178    	; 0x1548 <handle_smbus_receive+0xde>
    1496:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    149a:	81 11       	cpse	r24, r1
    149c:	55 c0       	rjmp	.+170    	; 0x1548 <handle_smbus_receive+0xde>
        {
            for(i = 0; i < smbusBufferLength; ++i)
    149e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    14a2:	ad e2       	ldi	r26, 0x2D	; 45
    14a4:	b3 e0       	ldi	r27, 0x03	; 3
    14a6:	e1 e5       	ldi	r30, 0x51	; 81
    14a8:	f3 e0       	ldi	r31, 0x03	; 3
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 17       	cp	r25, r24
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <handle_smbus_receive+0x4e>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
    14b0:	2d 91       	ld	r18, X+
    14b2:	21 93       	st	Z+, r18
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
        {
            for(i = 0; i < smbusBufferLength; ++i)
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	fa cf       	rjmp	.-12     	; 0x14ac <handle_smbus_receive+0x42>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
            }
            if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    14b8:	80 32       	cpi	r24, 0x20	; 32
    14ba:	28 f4       	brcc	.+10     	; 0x14c6 <handle_smbus_receive+0x5c>
    14bc:	e8 2f       	mov	r30, r24
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ef 5a       	subi	r30, 0xAF	; 175
    14c2:	fc 4f       	sbci	r31, 0xFC	; 252
    14c4:	11 82       	std	Z+1, r1	; 0x01
            smbus_oldBufferLength = smbusBufferLength;
    14c6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
            transmit_data_ready = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    14d0:	08 95       	ret
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    14d2:	84 2f       	mov	r24, r20
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	82 17       	cp	r24, r18
    14d8:	93 07       	cpc	r25, r19
    14da:	54 f4       	brge	.+20     	; 0x14f0 <handle_smbus_receive+0x86>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    14dc:	df 01       	movw	r26, r30
    14de:	a8 0f       	add	r26, r24
    14e0:	b9 1f       	adc	r27, r25
    14e2:	5c 91       	ld	r21, X
    14e4:	dc 01       	movw	r26, r24
    14e6:	a3 5d       	subi	r26, 0xD3	; 211
    14e8:	bc 4f       	sbci	r27, 0xFC	; 252
    14ea:	5c 93       	st	X, r21
            smbus_oldBufferLength = smbusBufferLength;
            transmit_data_ready = 1;
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    14ec:	4f 5f       	subi	r20, 0xFF	; 255
    14ee:	f1 cf       	rjmp	.-30     	; 0x14d2 <handle_smbus_receive+0x68>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    }
    if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    14f0:	40 32       	cpi	r20, 0x20	; 32
    14f2:	20 f4       	brcc	.+8      	; 0x14fc <handle_smbus_receive+0x92>
    14f4:	fc 01       	movw	r30, r24
    14f6:	e3 5d       	subi	r30, 0xD3	; 211
    14f8:	fc 4f       	sbci	r31, 0xFC	; 252
    14fa:	11 82       	std	Z+1, r1	; 0x01
    smbusBufferLength = numBytes;
    14fc:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

    // an read_i2c_block_data has a command byte 
    if( !(smbusBufferLength > 0) ) 
    1500:	21 11       	cpse	r18, r1
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <handle_smbus_receive+0x9e>
    {
        smbusBuffer[0] = 0xFF; // error code for small size.
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <handle_smbus_receive+0xb8>
        return; // not valid, do nothing just echo an error code.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (smbusBuffer[0] & 0xF0) >> 4;
    1508:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    150c:	e8 2f       	mov	r30, r24
    150e:	e2 95       	swap	r30
    1510:	ef 70       	andi	r30, 0x0F	; 15
    if(group >= GROUP) 
    1512:	e4 30       	cpi	r30, 0x04	; 4
    1514:	10 f0       	brcs	.+4      	; 0x151a <handle_smbus_receive+0xb0>
    {
        smbusBuffer[0] = 0xFE; // error code for bad group.
    1516:	8e ef       	ldi	r24, 0xFE	; 254
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <handle_smbus_receive+0xb8>
        return; 
    }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = smbusBuffer[0] & 0x0F;
    151a:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    151c:	88 30       	cpi	r24, 0x08	; 8
    151e:	20 f0       	brcs	.+8      	; 0x1528 <handle_smbus_receive+0xbe>
    {
        smbusBuffer[0] = 0xFD; // error code for bad command.
    1520:	8d ef       	ldi	r24, 0xFD	; 253
    1522:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <smbusBuffer>
        return; // not valid, do nothing but echo error code.
    1526:	08 95       	ret
    }

    // Call the i2c command function and return
    (* pf[group][command])(smbusBuffer);
    1528:	98 e0       	ldi	r25, 0x08	; 8
    152a:	e9 9f       	mul	r30, r25
    152c:	f0 01       	movw	r30, r0
    152e:	11 24       	eor	r1, r1
    1530:	e8 0f       	add	r30, r24
    1532:	f1 1d       	adc	r31, r1
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	e5 5a       	subi	r30, 0xA5	; 165
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	01 90       	ld	r0, Z+
    153e:	f0 81       	ld	r31, Z
    1540:	e0 2d       	mov	r30, r0
    1542:	8d e2       	ldi	r24, 0x2D	; 45
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	09 94       	ijmp
    1548:	08 95       	ret

0000154a <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    154a:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    154e:	81 e5       	ldi	r24, 0x51	; 81
    1550:	93 e0       	ldi	r25, 0x03	; 3
    1552:	0e 94 40 11 	call	0x2280	; 0x2280 <twi1_transmit>
    transmit_data_ready = 0;
    1556:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    155a:	08 95       	ret

0000155c <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    155c:	cf 93       	push	r28
    if (eeprom_is_ready())
    155e:	f9 99       	sbic	0x1f, 1	; 31
    1560:	24 c0       	rjmp	.+72     	; 0x15aa <save_rpu_addr_state+0x4e>
    {
        // up to first EE_RPU_IDMAX states may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    1562:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1566:	9f ef       	ldi	r25, 0xFF	; 255
    1568:	98 0f       	add	r25, r24
    156a:	9a 30       	cpi	r25, 0x0A	; 10
    156c:	90 f4       	brcc	.+36     	; 0x1592 <save_rpu_addr_state+0x36>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	fc 01       	movw	r30, r24
    1572:	ed 54       	subi	r30, 0x4D	; 77
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    1578:	6c 2f       	mov	r22, r28
    157a:	87 96       	adiw	r24, 0x27	; 39
    157c:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <eeprom_write_byte>
            
            if (value == '\0') 
    1580:	c1 11       	cpse	r28, r1
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <save_rpu_addr_state+0x2c>
            {
                write_rpu_address_to_eeprom = 11;
    1584:	8b e0       	ldi	r24, 0x0B	; 11
    1586:	03 c0       	rjmp	.+6      	; 0x158e <save_rpu_addr_state+0x32>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    1588:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    1592:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1596:	8b 30       	cpi	r24, 0x0B	; 11
    1598:	41 f4       	brne	.+16     	; 0x15aa <save_rpu_addr_state+0x4e>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    159a:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <rpu_address>
    159e:	82 e3       	ldi	r24, 0x32	; 50
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    15a6:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
        }
    }
}
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	c8 e2       	ldi	r28, 0x28	; 40
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    15b8:	fe 01       	movw	r30, r28
    15ba:	e4 57       	subi	r30, 0x74	; 116
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <eeprom_read_byte>
        if (id != ee_id) 
    15c6:	18 13       	cpse	r17, r24
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    15ca:	11 23       	and	r17, r17
    15cc:	31 f0       	breq	.+12     	; 0x15da <check_for_eeprom_id+0x2c>
    15ce:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    15d0:	c2 33       	cpi	r28, 0x32	; 50
    15d2:	d1 05       	cpc	r29, r1
    15d4:	89 f7       	brne	.-30     	; 0x15b8 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	08 95       	ret

000015e4 <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    15e8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    15ec:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <adc_started_at>
    15f0:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <adc_started_at+0x1>
    15f4:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <adc_started_at+0x2>
    15f8:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <adc_started_at+0x3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	80 1b       	sub	r24, r16
    1602:	91 0b       	sbc	r25, r17
    1604:	a2 0b       	sbc	r26, r18
    1606:	b3 0b       	sbc	r27, r19
    1608:	0b 97       	sbiw	r24, 0x0b	; 11
    160a:	a1 05       	cpc	r26, r1
    160c:	b1 05       	cpc	r27, r1
    160e:	08 f4       	brcc	.+2      	; 0x1612 <adc_burst+0x2e>
    1610:	4c c0       	rjmp	.+152    	; 0x16aa <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
    1618:	09 2e       	mov	r0, r25
    161a:	00 0c       	add	r0, r0
    161c:	aa 0b       	sbc	r26, r26
    161e:	bb 0b       	sbc	r27, r27
    1620:	40 91 71 03 	lds	r20, 0x0371	; 0x800371 <accumulate_alt_ti>
    1624:	50 91 72 03 	lds	r21, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
    1628:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
    162c:	70 91 74 03 	lds	r23, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
    1630:	84 0f       	add	r24, r20
    1632:	95 1f       	adc	r25, r21
    1634:	a6 1f       	adc	r26, r22
    1636:	b7 1f       	adc	r27, r23
    1638:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <accumulate_alt_ti>
    163c:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <accumulate_alt_ti+0x1>
    1640:	a0 93 73 03 	sts	0x0373, r26	; 0x800373 <accumulate_alt_ti+0x2>
    1644:	b0 93 74 03 	sts	0x0374, r27	; 0x800374 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
    164e:	09 2e       	mov	r0, r25
    1650:	00 0c       	add	r0, r0
    1652:	aa 0b       	sbc	r26, r26
    1654:	bb 0b       	sbc	r27, r27
    1656:	40 91 75 03 	lds	r20, 0x0375	; 0x800375 <accumulate_pwr_ti>
    165a:	50 91 76 03 	lds	r21, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
    165e:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
    1662:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
    1666:	84 0f       	add	r24, r20
    1668:	95 1f       	adc	r25, r21
    166a:	a6 1f       	adc	r26, r22
    166c:	b7 1f       	adc	r27, r23
    166e:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <accumulate_pwr_ti>
    1672:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <accumulate_pwr_ti+0x1>
    1676:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <accumulate_pwr_ti+0x2>
    167a:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    1684:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <adc_started_at>
    1688:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <adc_started_at+0x1>
    168c:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <adc_started_at+0x2>
    1690:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <adc_started_at+0x3>
    1694:	0a 96       	adiw	r24, 0x0a	; 10
    1696:	a1 1d       	adc	r26, r1
    1698:	b1 1d       	adc	r27, r1
    169a:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <adc_started_at>
    169e:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <adc_started_at+0x1>
    16a2:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <adc_started_at+0x2>
    16a6:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <adc_started_at+0x3>
    } 
}
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <IsValidValForAvccRef>:
uint8_t ref_loaded;
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

uint8_t IsValidValForAvccRef(uint32_t *value) 
{
    16b0:	fc 01       	movw	r30, r24
    16b2:	40 81       	ld	r20, Z
    16b4:	51 81       	ldd	r21, Z+1	; 0x01
    16b6:	62 81       	ldd	r22, Z+2	; 0x02
    16b8:	73 81       	ldd	r23, Z+3	; 0x03
    16ba:	41 52       	subi	r20, 0x21	; 33
    16bc:	5a 4a       	sbci	r21, 0xAA	; 170
    16be:	64 44       	sbci	r22, 0x44	; 68
    16c0:	71 09       	sbc	r23, r1
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	4f 33       	cpi	r20, 0x3F	; 63
    16c6:	52 44       	sbci	r21, 0x42	; 66
    16c8:	6f 40       	sbci	r22, 0x0F	; 15
    16ca:	71 05       	cpc	r23, r1
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <IsValidValForAvccRef+0x20>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    16d0:	08 95       	ret

000016d2 <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref(uint32_t *value) 
{
    16d2:	fc 01       	movw	r30, r24
    16d4:	40 81       	ld	r20, Z
    16d6:	51 81       	ldd	r21, Z+1	; 0x01
    16d8:	62 81       	ldd	r22, Z+2	; 0x02
    16da:	73 81       	ldd	r23, Z+3	; 0x03
    16dc:	41 5a       	subi	r20, 0xA1	; 161
    16de:	5b 4b       	sbci	r21, 0xBB	; 187
    16e0:	6d 40       	sbci	r22, 0x0D	; 13
    16e2:	71 09       	sbc	r23, r1
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	4f 37       	cpi	r20, 0x7F	; 127
    16e8:	5a 41       	sbci	r21, 0x1A	; 26
    16ea:	66 40       	sbci	r22, 0x06	; 6
    16ec:	71 05       	cpc	r23, r1
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <IsValidValFor1V1Ref+0x20>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    16f2:	08 95       	ret

000016f4 <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    16f4:	8e e1       	ldi	r24, 0x1E	; 30
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
    if ( eeprom_is_ready() )
    16fc:	f9 99       	sbic	0x1f, 1	; 31
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    1700:	84 34       	cpi	r24, 0x44	; 68
    1702:	91 44       	sbci	r25, 0x41	; 65
    1704:	49 f0       	breq	.+18     	; 0x1718 <WriteEeReferenceId+0x24>
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    1706:	64 e4       	ldi	r22, 0x44	; 68
    1708:	71 e4       	ldi	r23, 0x41	; 65
    170a:	8e e1       	ldi	r24, 0x1E	; 30
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <eeprom_write_word>
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    171a:	08 95       	ret

0000171c <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    171c:	80 e2       	ldi	r24, 0x20	; 32
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <eeprom_read_dword>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1728:	f9 99       	sbic	0x1f, 1	; 31
    172a:	12 c0       	rjmp	.+36     	; 0x1750 <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    172c:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    1730:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    1734:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    1738:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    173c:	84 17       	cp	r24, r20
    173e:	95 07       	cpc	r25, r21
    1740:	a6 07       	cpc	r26, r22
    1742:	b7 07       	cpc	r27, r23
    1744:	39 f0       	breq	.+14     	; 0x1754 <WriteEeReferenceAvcc+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    1746:	80 e2       	ldi	r24, 0x20	; 32
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <eeprom_write_dword>
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1756:	08 95       	ret

00001758 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    1758:	84 e2       	ldi	r24, 0x24	; 36
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <eeprom_read_dword>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1764:	f9 99       	sbic	0x1f, 1	; 31
    1766:	12 c0       	rjmp	.+36     	; 0x178c <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    1768:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    176c:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    1770:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    1774:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    1778:	84 17       	cp	r24, r20
    177a:	95 07       	cpc	r25, r21
    177c:	a6 07       	cpc	r26, r22
    177e:	b7 07       	cpc	r27, r23
    1780:	39 f0       	breq	.+14     	; 0x1790 <WriteEeReference1V1+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    1782:	84 e2       	ldi	r24, 0x24	; 36
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <eeprom_write_dword>
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1792:	08 95       	ret

00001794 <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1794:	8e e1       	ldi	r24, 0x1E	; 30
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    179c:	84 34       	cpi	r24, 0x44	; 68
    179e:	91 44       	sbci	r25, 0x41	; 65
    17a0:	e1 f4       	brne	.+56     	; 0x17da <LoadAnalogRefFromEEPROM+0x46>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <eeprom_read_dword>
    17aa:	60 93 7e 03 	sts	0x037E, r22	; 0x80037e <ref_extern_avcc_uV>
    17ae:	70 93 7f 03 	sts	0x037F, r23	; 0x80037f <ref_extern_avcc_uV+0x1>
    17b2:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <ref_extern_avcc_uV+0x2>
    17b6:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    17ba:	84 e2       	ldi	r24, 0x24	; 36
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <eeprom_read_dword>
    17c2:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <ref_intern_1v1_uV>
    17c6:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <ref_intern_1v1_uV+0x1>
    17ca:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <ref_intern_1v1_uV+0x2>
    17ce:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_LOADED;
    17d2:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	08 95       	ret
        return 1;
    }
    else
    {
        ref_extern_avcc_uV = 5000000UL; // set a default value
    17da:	80 e4       	ldi	r24, 0x40	; 64
    17dc:	9b e4       	ldi	r25, 0x4B	; 75
    17de:	ac e4       	ldi	r26, 0x4C	; 76
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <ref_extern_avcc_uV>
    17e6:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <ref_extern_avcc_uV+0x1>
    17ea:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <ref_extern_avcc_uV+0x2>
    17ee:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = 1080000UL; // default
    17f2:	80 ec       	ldi	r24, 0xC0	; 192
    17f4:	9a e7       	ldi	r25, 0x7A	; 122
    17f6:	a0 e1       	ldi	r26, 0x10	; 16
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
    17fe:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
    1802:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
    1806:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_DEFAULT;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
        return 0;
    1810:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1812:	08 95       	ret

00001814 <ref2ee>:

// save calibration referances, they are uploaded from I2C which sets ref_loaded
void ref2ee(void)
{
    if ( IsValidValForAvccRef(&ref_extern_avcc_uV) && IsValidValFor1V1Ref(&ref_intern_1v1_uV) )
    1814:	8e e7       	ldi	r24, 0x7E	; 126
    1816:	93 e0       	ldi	r25, 0x03	; 3
    1818:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <IsValidValForAvccRef>
    181c:	88 23       	and	r24, r24
    181e:	29 f1       	breq	.+74     	; 0x186a <ref2ee+0x56>
    1820:	82 e8       	ldi	r24, 0x82	; 130
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <IsValidValFor1V1Ref>
    1828:	88 23       	and	r24, r24
    182a:	f9 f0       	breq	.+62     	; 0x186a <ref2ee+0x56>
    {
        uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    182c:	8e e1       	ldi	r24, 0x1E	; 30
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
        if ( (id != 0x4144) & (ref_loaded > REF_DEFAULT) ) // 'A' is 0x41 and 'D' is 0x44
    1834:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <ref_loaded>
    1838:	84 34       	cpi	r24, 0x44	; 68
    183a:	91 44       	sbci	r25, 0x41	; 65
    183c:	21 f0       	breq	.+8      	; 0x1846 <ref2ee+0x32>
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	10 f0       	brcs	.+4      	; 0x1846 <ref2ee+0x32>
        {
            WriteEeReferenceId();
    1842:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <WriteEeReferenceId>
            return; // that is enough for this loop
         }
        else 
        {
            if (ref_loaded == REF_1V1_TOSAVE)
    1846:	23 30       	cpi	r18, 0x03	; 3
    1848:	39 f4       	brne	.+14     	; 0x1858 <ref2ee+0x44>
            {
                if (WriteEeReference1V1())
    184a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <WriteEeReference1V1>
    184e:	88 23       	and	r24, r24
    1850:	19 f0       	breq	.+6      	; 0x1858 <ref2ee+0x44>
                {
                    ref_loaded = REF_LOADED;
    1852:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
                    return; // all done
    1856:	08 95       	ret
                }
            }
            if (ref_loaded == REF_AVCC_TOSAVE)
    1858:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
    185c:	82 30       	cpi	r24, 0x02	; 2
    185e:	39 f4       	brne	.+14     	; 0x186e <ref2ee+0x5a>
            {
                if (WriteEeReferenceAvcc())
    1860:	0e 94 8e 0b 	call	0x171c	; 0x171c <WriteEeReferenceAvcc>
    1864:	81 11       	cpse	r24, r1
    1866:	f5 cf       	rjmp	.-22     	; 0x1852 <ref2ee+0x3e>
    1868:	08 95       	ret
        }       

    }
    else
    {
        LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    186a:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <LoadAnalogRefFromEEPROM>
    186e:	08 95       	ret

00001870 <check_if_alt_should_be_on>:

// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    if (enable_alternate_power)
    1870:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <enable_alternate_power>
    1874:	88 23       	and	r24, r24
    1876:	29 f1       	breq	.+74     	; 0x18c2 <check_if_alt_should_be_on+0x52>
    {
        int battery = analogRead(PWR_V);
    1878:	87 e0       	ldi	r24, 0x07	; 7
    187a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <analogRead>
        if (battery >= battery_high_limit)
    187e:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <battery_high_limit>
    1882:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <battery_high_limit+0x1>
    1886:	82 17       	cp	r24, r18
    1888:	93 07       	cpc	r25, r19
    188a:	84 f0       	brlt	.+32     	; 0x18ac <check_if_alt_should_be_on+0x3c>
        {
            if (digitalRead(ALT_EN))
    188c:	1b 9b       	sbis	0x03, 3	; 3
    188e:	1d c0       	rjmp	.+58     	; 0x18ca <check_if_alt_should_be_on+0x5a>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1890:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1892:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1894:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1896:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                alt_count += 1; // count the number of times the battery is at the charge limit
    1898:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_count>
    189c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_count+0x1>
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <alt_count+0x1>
    18a6:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <alt_count>
    18aa:	08 95       	ret
            }
        }
        else if (battery < battery_low_limit)
    18ac:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <battery_low_limit>
    18b0:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <battery_low_limit+0x1>
    18b4:	82 17       	cp	r24, r18
    18b6:	93 07       	cpc	r25, r19
    18b8:	44 f4       	brge	.+16     	; 0x18ca <check_if_alt_should_be_on+0x5a>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    18ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18bc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    18be:	2b 9a       	sbi	0x05, 3	; 5
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <check_if_alt_should_be_on+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    18c2:	8f b7       	in	r24, 0x3f	; 63
    18c4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    18c6:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    18c8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    18ca:	08 95       	ret

000018cc <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    18cc:	fc 01       	movw	r30, r24
    18ce:	20 81       	ld	r18, Z
    18d0:	31 81       	ldd	r19, Z+1	; 0x01
    18d2:	2b 54       	subi	r18, 0x4B	; 75
    18d4:	31 40       	sbci	r19, 0x01	; 1
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	27 38       	cpi	r18, 0x87	; 135
    18da:	31 05       	cpc	r19, r1
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <IsValidBatHighLimFor12V+0x14>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    18e0:	08 95       	ret

000018e2 <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 81       	ld	r18, Z
    18e6:	31 81       	ldd	r19, Z+1	; 0x01
    18e8:	2e 53       	subi	r18, 0x3E	; 62
    18ea:	31 40       	sbci	r19, 0x01	; 1
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	26 36       	cpi	r18, 0x66	; 102
    18f0:	31 05       	cpc	r19, r1
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <IsValidBatLowLimFor12V+0x14>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    18f6:	08 95       	ret

000018f8 <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 81       	ld	r18, Z
    18fc:	31 81       	ldd	r19, Z+1	; 0x01
    18fe:	25 59       	subi	r18, 0x95	; 149
    1900:	32 40       	sbci	r19, 0x02	; 2
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	2f 30       	cpi	r18, 0x0F	; 15
    1906:	31 40       	sbci	r19, 0x01	; 1
    1908:	08 f0       	brcs	.+2      	; 0x190c <IsValidBatHighLimFor24V+0x14>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    190c:	08 95       	ret

0000190e <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    190e:	fc 01       	movw	r30, r24
    1910:	20 81       	ld	r18, Z
    1912:	31 81       	ldd	r19, Z+1	; 0x01
    1914:	2c 57       	subi	r18, 0x7C	; 124
    1916:	32 40       	sbci	r19, 0x02	; 2
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	2b 3c       	cpi	r18, 0xCB	; 203
    191c:	31 05       	cpc	r19, r1
    191e:	08 f0       	brcs	.+2      	; 0x1922 <IsValidBatLowLimFor24V+0x14>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1922:	08 95       	ret

00001924 <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1924:	8c e3       	ldi	r24, 0x3C	; 60
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
    if ( eeprom_is_ready() )
    192c:	f9 99       	sbic	0x1f, 1	; 31
    192e:	0c c0       	rjmp	.+24     	; 0x1948 <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1930:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <battery_high_limit>
    1934:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <battery_high_limit+0x1>
    1938:	86 17       	cp	r24, r22
    193a:	97 07       	cpc	r25, r23
    193c:	39 f0       	breq	.+14     	; 0x194c <WriteEEBatHighLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    193e:	8c e3       	ldi	r24, 0x3C	; 60
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <eeprom_write_word>
    1946:	02 c0       	rjmp	.+4      	; 0x194c <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    194e:	08 95       	ret

00001950 <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1950:	8e e3       	ldi	r24, 0x3E	; 62
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1958:	f9 99       	sbic	0x1f, 1	; 31
    195a:	0c c0       	rjmp	.+24     	; 0x1974 <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    195c:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <battery_low_limit>
    1960:	70 91 8e 03 	lds	r23, 0x038E	; 0x80038e <battery_low_limit+0x1>
    1964:	86 17       	cp	r24, r22
    1966:	97 07       	cpc	r25, r23
    1968:	39 f0       	breq	.+14     	; 0x1978 <WriteEEBatLowLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    196a:	8e e3       	ldi	r24, 0x3E	; 62
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <eeprom_write_word>
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    197a:	08 95       	ret

0000197c <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	00 d0       	rcall	.+0      	; 0x198a <LoadBatLimitsFromEEPROM+0xe>
    198a:	00 d0       	rcall	.+0      	; 0x198c <LoadBatLimitsFromEEPROM+0x10>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1990:	8c e3       	ldi	r24, 0x3C	; 60
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
    1998:	7c 01       	movw	r14, r24
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    199e:	8e e3       	ldi	r24, 0x3E	; 62
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <eeprom_read_word>
    19a6:	8c 01       	movw	r16, r24
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    19ac:	ce 01       	movw	r24, r28
    19ae:	03 96       	adiw	r24, 0x03	; 3
    19b0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <IsValidBatHighLimFor12V>
    19b4:	81 11       	cpse	r24, r1
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <LoadBatLimitsFromEEPROM+0x48>
    19b8:	ce 01       	movw	r24, r28
    19ba:	03 96       	adiw	r24, 0x03	; 3
    19bc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <IsValidBatHighLimFor24V>
    19c0:	88 23       	and	r24, r24
    19c2:	c1 f0       	breq	.+48     	; 0x19f4 <LoadBatLimitsFromEEPROM+0x78>
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <IsValidBatLowLimFor12V>
    19cc:	81 11       	cpse	r24, r1
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <LoadBatLimitsFromEEPROM+0x60>
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 87 0c 	call	0x190e	; 0x190e <IsValidBatLowLimFor24V>
    19d8:	88 23       	and	r24, r24
    19da:	61 f0       	breq	.+24     	; 0x19f4 <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    19dc:	f0 92 8b 03 	sts	0x038B, r15	; 0x80038b <battery_high_limit+0x1>
    19e0:	e0 92 8a 03 	sts	0x038A, r14	; 0x80038a <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    19e4:	10 93 8e 03 	sts	0x038E, r17	; 0x80038e <battery_low_limit+0x1>
    19e8:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    19ec:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <bat_limit_loaded>
        return 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	10 c0       	rjmp	.+32     	; 0x1a14 <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    19f4:	8d e8       	ldi	r24, 0x8D	; 141
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <battery_high_limit+0x1>
    19fc:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1a00:	86 e7       	ldi	r24, 0x76	; 118
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <battery_low_limit+0x1>
    1a08:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <bat_limit_loaded>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	08 95       	ret

00001a2a <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1a2a:	8a e8       	ldi	r24, 0x8A	; 138
    1a2c:	93 e0       	ldi	r25, 0x03	; 3
    1a2e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <IsValidBatHighLimFor12V>
    1a32:	81 11       	cpse	r24, r1
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <BatLimitsFromI2CtoEE+0x18>
    1a36:	8a e8       	ldi	r24, 0x8A	; 138
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <IsValidBatHighLimFor24V>
    1a3e:	88 23       	and	r24, r24
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <BatLimitsFromI2CtoEE+0x2e>
    {
        if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1a42:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bat_limit_loaded>
    1a46:	82 30       	cpi	r24, 0x02	; 2
    1a48:	f1 f4       	brne	.+60     	; 0x1a86 <BatLimitsFromI2CtoEE+0x5c>
        {
            if (WriteEEBatHighLim())
    1a4a:	0e 94 92 0c 	call	0x1924	; 0x1924 <WriteEEBatHighLim>
    1a4e:	88 23       	and	r24, r24
    1a50:	d1 f0       	breq	.+52     	; 0x1a86 <BatLimitsFromI2CtoEE+0x5c>
            {
                bat_limit_loaded = BAT_LIM_LOADED;
    1a52:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <bat_limit_loaded>
                return; // all done
    1a56:	08 95       	ret
            }
        }
    }
    else if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1a58:	8d e8       	ldi	r24, 0x8D	; 141
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <IsValidBatLowLimFor12V>
    1a60:	81 11       	cpse	r24, r1
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <BatLimitsFromI2CtoEE+0x46>
    1a64:	8d e8       	ldi	r24, 0x8D	; 141
    1a66:	93 e0       	ldi	r25, 0x03	; 3
    1a68:	0e 94 87 0c 	call	0x190e	; 0x190e <IsValidBatLowLimFor24V>
    1a6c:	88 23       	and	r24, r24
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <BatLimitsFromI2CtoEE+0x58>
    {
        if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1a70:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bat_limit_loaded>
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <BatLimitsFromI2CtoEE+0x5c>
        {
            if (WriteEEBatLowLim())
    1a78:	0e 94 a8 0c 	call	0x1950	; 0x1950 <WriteEEBatLowLim>
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	e9 cf       	rjmp	.-46     	; 0x1a52 <BatLimitsFromI2CtoEE+0x28>
    1a80:	08 95       	ret
            }
        }
    }
    else
    {
        LoadBatLimitsFromEEPROM(); // ignore values that are not valid
    1a82:	0c 94 be 0c 	jmp	0x197c	; 0x197c <LoadBatLimitsFromEEPROM>
    1a86:	08 95       	ret

00001a88 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    1a88:	1f 92       	push	r1
    1a8a:	0f 92       	push	r0
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	0f 92       	push	r0
    1a90:	11 24       	eor	r1, r1
    1a92:	2f 93       	push	r18
    1a94:	3f 93       	push	r19
    1a96:	4f 93       	push	r20
    1a98:	5f 93       	push	r21
    1a9a:	8f 93       	push	r24
    1a9c:	9f 93       	push	r25
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1aa2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    1aa6:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    1aaa:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    1aac:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	01 96       	adiw	r24, 0x01	; 1
    1ab4:	8f 71       	andi	r24, 0x1F	; 31
    1ab6:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    1ab8:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	84 17       	cp	r24, r20
    1ac0:	95 07       	cpc	r25, r21
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    1ac4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1ac8:	fc 01       	movw	r30, r24
    1aca:	eb 55       	subi	r30, 0x5B	; 91
    1acc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ace:	30 83       	st	Z, r19
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1ad2:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    1ad4:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    1ad8:	ff 91       	pop	r31
    1ada:	ef 91       	pop	r30
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    1b04:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    1b08:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1b0c:	98 17       	cp	r25, r24
    1b0e:	79 f0       	breq	.+30     	; 0x1b2e <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    1b10:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	8f 71       	andi	r24, 0x1F	; 31
    1b1a:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    1b1c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1b20:	fc 01       	movw	r30, r24
    1b22:	eb 53       	subi	r30, 0x3B	; 59
    1b24:	fe 4f       	sbci	r31, 0xFE	; 254
    1b26:	80 81       	ld	r24, Z
    1b28:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    1b2e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1b32:	8f 7d       	andi	r24, 0xDF	; 223
    1b34:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    1b38:	ff 91       	pop	r31
    1b3a:	ef 91       	pop	r30
    1b3c:	9f 91       	pop	r25
    1b3e:	8f 91       	pop	r24
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	0f 90       	pop	r0
    1b46:	1f 90       	pop	r1
    1b48:	18 95       	reti

00001b4a <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    1b4a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    1b4e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    1b52:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    1b56:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    1b5a:	97 ff       	sbrs	r25, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    1b5e:	22 e0       	ldi	r18, 0x02	; 2
    1b60:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    1b64:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    1b66:	28 e9       	ldi	r18, 0x98	; 152
    1b68:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    1b6c:	26 e0       	ldi	r18, 0x06	; 6
    1b6e:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    1b72:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    1b76:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b7a:	08 95       	ret

00001b7c <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    1b7c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1b80:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1b84:	98 17       	cp	r25, r24
    1b86:	a1 f0       	breq	.+40     	; 0x1bb0 <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    1b88:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	8f 71       	andi	r24, 0x1F	; 31
    1b92:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    1b94:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1b98:	fc 01       	movw	r30, r24
    1b9a:	eb 55       	subi	r30, 0x5B	; 91
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    1ba0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	88 27       	eor	r24, r24
    1baa:	82 0f       	add	r24, r18
    1bac:	91 1d       	adc	r25, r1
    1bae:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    1bb4:	08 95       	ret

00001bb6 <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1bb6:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	2f 5f       	subi	r18, 0xFF	; 255
    1bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc0:	2f 71       	andi	r18, 0x1F	; 31
    1bc2:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    1bc4:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	24 17       	cp	r18, r20
    1bcc:	35 07       	cpc	r19, r21
    1bce:	d1 f3       	breq	.-12     	; 0x1bc4 <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	eb 53       	subi	r30, 0x3B	; 59
    1bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd6:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    1bd8:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    1bdc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1be0:	80 62       	ori	r24, 0x20	; 32
    1be2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1be6:	08 95       	ret

00001be8 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    1be8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <uart0_putc>
	return 0;
}
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	08 95       	ret

00001bf2 <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    1bf2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1bf6:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	80 96       	adiw	r24, 0x20	; 32
    1bfe:	82 1b       	sub	r24, r18
    1c00:	91 09       	sbc	r25, r1
} /* uart0_available */
    1c02:	8f 71       	andi	r24, 0x1F	; 31
    1c04:	99 27       	eor	r25, r25
    1c06:	08 95       	ret

00001c08 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    1c08:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <uart0_available>
    1c0c:	89 2b       	or	r24, r25
    1c0e:	e1 f3       	breq	.-8      	; 0x1c08 <uartstream0_getchar>
    res = uart0_getc();
    1c10:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <uart0_getc>
    if(res == '\r') res = '\n';
    1c14:	8d 30       	cpi	r24, 0x0D	; 13
    1c16:	91 05       	cpc	r25, r1
    1c18:	11 f4       	brne	.+4      	; 0x1c1e <uartstream0_getchar+0x16>
    1c1a:	8a e0       	ldi	r24, 0x0A	; 10
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    1c1e:	99 27       	eor	r25, r25
    1c20:	08 95       	ret

00001c22 <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	8b 01       	movw	r16, r22
    1c28:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	80 5a       	subi	r24, 0xA0	; 160
    1c30:	9c 41       	sbci	r25, 0x1C	; 28
    1c32:	a9 4e       	sbci	r26, 0xE9	; 233
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	43 e0       	ldi	r20, 0x03	; 3
    1c3c:	66 0f       	add	r22, r22
    1c3e:	77 1f       	adc	r23, r23
    1c40:	88 1f       	adc	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	4a 95       	dec	r20
    1c46:	d1 f7       	brne	.-12     	; 0x1c3c <uartstream0_init+0x1a>
    1c48:	a9 01       	movw	r20, r18
    1c4a:	98 01       	movw	r18, r16
    1c4c:	e4 e0       	ldi	r30, 0x04	; 4
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	44 1f       	adc	r20, r20
    1c54:	55 1f       	adc	r21, r21
    1c56:	ea 95       	dec	r30
    1c58:	d1 f7       	brne	.-12     	; 0x1c4e <uartstream0_init+0x2c>
    1c5a:	0e 94 b5 12 	call	0x256a	; 0x256a <__udivmodsi4>
    1c5e:	c9 01       	movw	r24, r18
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <uart0_init>
	return &uartstream0_f;
}	
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <__vector_21>:
volatile uint8_t analog_reference;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	2f 93       	push	r18
    1c7c:	8f 93       	push	r24
    1c7e:	9f 93       	push	r25
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
    // ADCL contain lower 8 bits, ADCH upper (two bits)
    // Must read ADCL first (news ADC is now defined for this)
    adc[adc_channel] = ADC;
    1c84:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <adc_channel>
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1c8e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	ef 56       	subi	r30, 0x6F	; 111
    1c98:	fc 4f       	sbci	r31, 0xFC	; 252
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    //adc[adc_channel] = ADCL | (ADCH << 8);
    
    ++adc_channel;
    1c9e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <adc_channel>
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <adc_channel>
    
    // skip since only ch 0,1,6,7: ALT_I,ALT_V,PWR_I,PWR_V are used for analog input
    if (adc_channel == 2)
    1ca8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <adc_channel>
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	19 f4       	brne	.+6      	; 0x1cb6 <__vector_21+0x46>
    {
        adc_channel = 6;
    1cb0:	86 e0       	ldi	r24, 0x06	; 6
    1cb2:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <adc_channel>
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    1cb6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <adc_channel>
    1cba:	88 30       	cpi	r24, 0x08	; 8
    1cbc:	b0 f4       	brcc	.+44     	; 0x1cea <__vector_21+0x7a>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1cbe:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1cc2:	80 7f       	andi	r24, 0xF0	; 240
    1cc4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    1cc8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1ccc:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <analog_reference>
    1cd0:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <adc_channel>
    1cd4:	8f 71       	andi	r24, 0x1F	; 31
    1cd6:	82 2b       	or	r24, r18
    1cd8:	89 0f       	add	r24, r25
    1cda:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    1cde:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1ce2:	80 64       	ori	r24, 0x40	; 64
    1ce4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1ce8:	0c c0       	rjmp	.+24     	; 0x1d02 <__vector_21+0x92>
        adc_channel = 6;
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    1cea:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <adc_channel>
        adc[ADC_CHANNELS] = 0x7FFF; // mark to notify that burst is done
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	9f e7       	ldi	r25, 0x7F	; 127
    1cf2:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <adc+0x11>
    1cf6:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <adc+0x10>
        if (!free_running)
    1cfa:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <free_running>
    1cfe:	81 11       	cpse	r24, r1
    1d00:	de cf       	rjmp	.-68     	; 0x1cbe <__vector_21+0x4e>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	2f 91       	pop	r18
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	0f 90       	pop	r0
    1d12:	1f 90       	pop	r1
    1d14:	18 95       	reti

00001d16 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a pin.
    analog_reference = reference;
    1d16:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <analog_reference>
    free_running = 0;
    1d1a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1d1e:	ec e7       	ldi	r30, 0x7C	; 124
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    1d24:	90 73       	andi	r25, 0x30	; 48
    1d26:	89 2b       	or	r24, r25
    1d28:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    1d2a:	ea e7       	ldi	r30, 0x7A	; 122
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	84 60       	ori	r24, 0x04	; 4
    1d32:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    1d34:	80 81       	ld	r24, Z
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e 7f       	andi	r24, 0xFE	; 254
    1d3e:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS2);
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
	// enable a2d conversions
	ADCSRA |= (1<<ADEN);
    1d40:	80 81       	ld	r24, Z
    1d42:	80 68       	ori	r24, 0x80	; 128
    1d44:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0;
    1d46:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <ADC_auto_conversion>
    1d4a:	08 95       	ret

00001d4c <enable_ADC_auto_conversion>:

/* This changes the ADC to Auto Trigger mode. It will take readings on each 
    channel and hold them in an array. The array value is accessed by reading from adc[]  */
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    1d4c:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <adc_channel>
    adc[ADC_CHANNELS] = 0x00;
    1d50:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <adc+0x11>
    1d54:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <adc+0x10>
    free_running = free_run;
    1d58:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <free_running>
    //      EXTERNAL_AREF 0
    //      EXTERNAL_AVCC (1<<REFS0)
    //      INTERNAL_1V1 (1<<REFS1) | (1<<REFS0)
#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1d5c:	ec e7       	ldi	r30, 0x7C	; 124
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | analog_reference ;
    1d62:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <analog_reference>
    1d66:	80 73       	andi	r24, 0x30	; 48
    1d68:	89 2b       	or	r24, r25
    1d6a:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    1d6c:	ea e7       	ldi	r30, 0x7A	; 122
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	84 60       	ori	r24, 0x04	; 4
    1d74:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    1d76:	80 81       	ld	r24, Z
    1d78:	82 60       	ori	r24, 0x02	; 2
    1d7a:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8e 7f       	andi	r24, 0xFE	; 254
    1d80:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
    
	// Power up the ADC and set it for a single conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    1d82:	80 81       	ld	r24, Z
    1d84:	87 75       	andi	r24, 0x57	; 87
    1d86:	88 68       	ori	r24, 0x88	; 136
    1d88:	80 83       	st	Z, r24

    // Start an ADC Conversion 
    ADCSRA |= (1<<ADSC);
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 64       	ori	r24, 0x40	; 64
    1d8e:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <ADC_auto_conversion>
    1d96:	08 95       	ret

00001d98 <analogRead>:


// Use the ADC channel number only (not the pin number)
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    1d98:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <ADC_auto_conversion>
    1d9c:	99 23       	and	r25, r25
    1d9e:	61 f0       	breq	.+24     	; 0x1db8 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1da0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1da2:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    1da4:	e8 2f       	mov	r30, r24
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	ef 56       	subi	r30, 0x6F	; 111
    1dae:	fc 4f       	sbci	r31, 0xFC	; 252
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1db4:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1db6:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1db8:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    1dbc:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    1dbe:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    1dc2:	e8 2f       	mov	r30, r24
    1dc4:	e7 70       	andi	r30, 0x07	; 7
    1dc6:	82 2f       	mov	r24, r18
    1dc8:	89 2b       	or	r24, r25
    1dca:	e8 2b       	or	r30, r24
    1dcc:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    1dd0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1dd4:	80 64       	ori	r24, 0x40	; 64
    1dd6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    1dda:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1dde:	86 fd       	sbrc	r24, 6
    1de0:	fc cf       	rjmp	.-8      	; 0x1dda <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    1de2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    1de6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    1dee:	08 95       	ret

00001df0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	8f 93       	push	r24
    1e00:	9f 93       	push	r25
    1e02:	af 93       	push	r26
    1e04:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1e06:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
    1e0a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    1e0e:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    1e12:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1e16:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1e1a:	2d e2       	ldi	r18, 0x2D	; 45
    1e1c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1e1e:	2d 37       	cpi	r18, 0x7D	; 125
    1e20:	20 f4       	brcc	.+8      	; 0x1e2a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	a1 1d       	adc	r26, r1
    1e26:	b1 1d       	adc	r27, r1
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1e2a:	20 eb       	ldi	r18, 0xB0	; 176
    1e2c:	23 0f       	add	r18, r19
		m += 1;
    1e2e:	02 96       	adiw	r24, 0x02	; 2
    1e30:	a1 1d       	adc	r26, r1
    1e32:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1e34:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
	timer0_millis = m;
    1e38:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
    1e3c:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
    1e40:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
    1e44:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
	timer0_overflow_count++;
    1e48:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
    1e4c:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
    1e50:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
    1e54:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	a1 1d       	adc	r26, r1
    1e5c:	b1 1d       	adc	r27, r1
    1e5e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
    1e62:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
    1e66:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
    1e6a:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
}
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	3f 91       	pop	r19
    1e78:	2f 91       	pop	r18
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0f 90       	pop	r0
    1e80:	1f 90       	pop	r1
    1e82:	18 95       	reti

00001e84 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1e84:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1e86:	f8 94       	cli
	m = timer0_millis;
    1e88:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
    1e8c:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    1e90:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    1e94:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	SREG = oldSREG;
    1e98:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1e9a:	08 95       	ret

00001e9c <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    1e9c:	84 b5       	in	r24, 0x24	; 36
    1e9e:	82 60       	ori	r24, 0x02	; 2
    1ea0:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    1ea2:	84 b5       	in	r24, 0x24	; 36
    1ea4:	81 60       	ori	r24, 0x01	; 1
    1ea6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    1ea8:	85 b5       	in	r24, 0x25	; 37
    1eaa:	82 60       	ori	r24, 0x02	; 2
    1eac:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    1eae:	85 b5       	in	r24, 0x25	; 37
    1eb0:	81 60       	ori	r24, 0x01	; 1
    1eb2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    1eb4:	ee e6       	ldi	r30, 0x6E	; 110
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	81 60       	ori	r24, 0x01	; 1
    1ebc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1ebe:	e1 e8       	ldi	r30, 0x81	; 129
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 60       	ori	r24, 0x02	; 2
    1ec8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    1eca:	80 81       	ld	r24, Z
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    1ed0:	e0 e8       	ldi	r30, 0x80	; 128
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 60       	ori	r24, 0x01	; 1
    1ed8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    1eda:	e1 eb       	ldi	r30, 0xB1	; 177
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	84 60       	ori	r24, 0x04	; 4
    1ee2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    1ee4:	e0 eb       	ldi	r30, 0xB0	; 176
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	81 60       	ori	r24, 0x01	; 1
    1eec:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    1eee:	e1 e9       	ldi	r30, 0x91	; 145
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	82 60       	ori	r24, 0x02	; 2
    1ef6:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    1ef8:	80 81       	ld	r24, Z
    1efa:	81 60       	ori	r24, 0x01	; 1
    1efc:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1efe:	e0 e9       	ldi	r30, 0x90	; 144
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	81 60       	ori	r24, 0x01	; 1
    1f06:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    1f08:	e1 ea       	ldi	r30, 0xA1	; 161
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	82 60       	ori	r24, 0x02	; 2
    1f10:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    1f12:	80 81       	ld	r24, Z
    1f14:	81 60       	ori	r24, 0x01	; 1
    1f16:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1f18:	e0 ea       	ldi	r30, 0xA0	; 160
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 60       	ori	r24, 0x01	; 1
    1f20:	80 83       	st	Z, r24
    1f22:	08 95       	ret

00001f24 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    1f24:	08 95       	ret

00001f26 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    1f26:	08 95       	ret

00001f28 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    1f28:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    twi0_sendStop = 1;		// default value
    1f2c:	91 e0       	ldi	r25, 0x01	; 1
    1f2e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi0_sendStop>
    twi0_inRepStart = 0;
    1f32:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    1f36:	88 23       	and	r24, r24
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    1f3a:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    1f3c:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    1f3e:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    1f40:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    1f42:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1f46:	8e 7f       	andi	r24, 0xFE	; 254
    1f48:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    1f4c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1f50:	8d 7f       	andi	r24, 0xFD	; 253
    1f52:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    1f56:	84 e3       	ldi	r24, 0x34	; 52
    1f58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    1f5c:	85 e4       	ldi	r24, 0x45	; 69
    1f5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f62:	08 95       	ret

00001f64 <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    1f64:	88 0f       	add	r24, r24
    1f66:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    1f6a:	08 95       	ret

00001f6c <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    1f6c:	61 32       	cpi	r22, 0x21	; 33
    1f6e:	98 f4       	brcc	.+38     	; 0x1f96 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    1f70:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <twi0_state>
    1f74:	24 30       	cpi	r18, 0x04	; 4
    1f76:	89 f4       	brne	.+34     	; 0x1f9a <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    1f78:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi0_txBufferLength>
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	a3 e1       	ldi	r26, 0x13	; 19
    1f80:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    1f82:	fc 01       	movw	r30, r24
    1f84:	8e 2f       	mov	r24, r30
    1f86:	82 1b       	sub	r24, r18
    1f88:	86 17       	cp	r24, r22
    1f8a:	18 f4       	brcc	.+6      	; 0x1f92 <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    1f8c:	81 91       	ld	r24, Z+
    1f8e:	8d 93       	st	X+, r24
    1f90:	f9 cf       	rjmp	.-14     	; 0x1f84 <twi0_transmit+0x18>
    }
  
    return 0;
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    1f9c:	08 95       	ret

00001f9e <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    1f9e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    1fa2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    1fa6:	08 95       	ret

00001fa8 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    1fa8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    1fac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    1fb0:	08 95       	ret

00001fb2 <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1fb2:	85 ed       	ldi	r24, 0xD5	; 213
    1fb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    1fb8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fbc:	84 fd       	sbrc	r24, 4
    1fbe:	fc cf       	rjmp	.-8      	; 0x1fb8 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    1fc0:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    1fc4:	08 95       	ret

00001fc6 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    1fc6:	85 ec       	ldi	r24, 0xC5	; 197
    1fc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    1fcc:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    1fd0:	08 95       	ret

00001fd2 <__vector_24>:
}

ISR(TWI0_vect)
{
    1fd2:	1f 92       	push	r1
    1fd4:	0f 92       	push	r0
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	2f 93       	push	r18
    1fde:	3f 93       	push	r19
    1fe0:	4f 93       	push	r20
    1fe2:	5f 93       	push	r21
    1fe4:	6f 93       	push	r22
    1fe6:	7f 93       	push	r23
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	af 93       	push	r26
    1fee:	bf 93       	push	r27
    1ff0:	ef 93       	push	r30
    1ff2:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    1ff4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1ff8:	88 7f       	andi	r24, 0xF8	; 248
    1ffa:	80 36       	cpi	r24, 0x60	; 96
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <__vector_24+0x2e>
    1ffe:	9e c0       	rjmp	.+316    	; 0x213c <__vector_24+0x16a>
    2000:	78 f5       	brcc	.+94     	; 0x2060 <__vector_24+0x8e>
    2002:	88 32       	cpi	r24, 0x28	; 40
    2004:	09 f4       	brne	.+2      	; 0x2008 <__vector_24+0x36>
    2006:	5d c0       	rjmp	.+186    	; 0x20c2 <__vector_24+0xf0>
    2008:	90 f4       	brcc	.+36     	; 0x202e <__vector_24+0x5c>
    200a:	80 31       	cpi	r24, 0x10	; 16
    200c:	09 f4       	brne	.+2      	; 0x2010 <__vector_24+0x3e>
    200e:	56 c0       	rjmp	.+172    	; 0x20bc <__vector_24+0xea>
    2010:	38 f4       	brcc	.+14     	; 0x2020 <__vector_24+0x4e>
    2012:	88 23       	and	r24, r24
    2014:	09 f4       	brne	.+2      	; 0x2018 <__vector_24+0x46>
    2016:	f5 c0       	rjmp	.+490    	; 0x2202 <__vector_24+0x230>
    2018:	88 30       	cpi	r24, 0x08	; 8
    201a:	09 f4       	brne	.+2      	; 0x201e <__vector_24+0x4c>
    201c:	4f c0       	rjmp	.+158    	; 0x20bc <__vector_24+0xea>
    201e:	f5 c0       	rjmp	.+490    	; 0x220a <__vector_24+0x238>
    2020:	88 31       	cpi	r24, 0x18	; 24
    2022:	09 f4       	brne	.+2      	; 0x2026 <__vector_24+0x54>
    2024:	4e c0       	rjmp	.+156    	; 0x20c2 <__vector_24+0xf0>
    2026:	80 32       	cpi	r24, 0x20	; 32
    2028:	09 f4       	brne	.+2      	; 0x202c <__vector_24+0x5a>
    202a:	5f c0       	rjmp	.+190    	; 0x20ea <__vector_24+0x118>
    202c:	ee c0       	rjmp	.+476    	; 0x220a <__vector_24+0x238>
    202e:	80 34       	cpi	r24, 0x40	; 64
    2030:	09 f4       	brne	.+2      	; 0x2034 <__vector_24+0x62>
    2032:	6a c0       	rjmp	.+212    	; 0x2108 <__vector_24+0x136>
    2034:	58 f4       	brcc	.+22     	; 0x204c <__vector_24+0x7a>
    2036:	80 33       	cpi	r24, 0x30	; 48
    2038:	09 f4       	brne	.+2      	; 0x203c <__vector_24+0x6a>
    203a:	57 c0       	rjmp	.+174    	; 0x20ea <__vector_24+0x118>
    203c:	88 33       	cpi	r24, 0x38	; 56
    203e:	09 f0       	breq	.+2      	; 0x2042 <__vector_24+0x70>
    2040:	e4 c0       	rjmp	.+456    	; 0x220a <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    2042:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
            twi0_releaseBus();
    2046:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <twi0_releaseBus>
            break;
    204a:	df c0       	rjmp	.+446    	; 0x220a <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    204c:	80 35       	cpi	r24, 0x50	; 80
    204e:	09 f4       	brne	.+2      	; 0x2052 <__vector_24+0x80>
    2050:	4f c0       	rjmp	.+158    	; 0x20f0 <__vector_24+0x11e>
    2052:	88 35       	cpi	r24, 0x58	; 88
    2054:	09 f4       	brne	.+2      	; 0x2058 <__vector_24+0x86>
    2056:	5d c0       	rjmp	.+186    	; 0x2112 <__vector_24+0x140>
    2058:	88 34       	cpi	r24, 0x48	; 72
    205a:	09 f0       	breq	.+2      	; 0x205e <__vector_24+0x8c>
    205c:	d6 c0       	rjmp	.+428    	; 0x220a <__vector_24+0x238>
    205e:	d3 c0       	rjmp	.+422    	; 0x2206 <__vector_24+0x234>
    2060:	88 39       	cpi	r24, 0x98	; 152
    2062:	09 f4       	brne	.+2      	; 0x2066 <__vector_24+0x94>
    2064:	c4 c0       	rjmp	.+392    	; 0x21ee <__vector_24+0x21c>
    2066:	a8 f4       	brcc	.+42     	; 0x2092 <__vector_24+0xc0>
    2068:	88 37       	cpi	r24, 0x78	; 120
    206a:	09 f4       	brne	.+2      	; 0x206e <__vector_24+0x9c>
    206c:	67 c0       	rjmp	.+206    	; 0x213c <__vector_24+0x16a>
    206e:	38 f4       	brcc	.+14     	; 0x207e <__vector_24+0xac>
    2070:	88 36       	cpi	r24, 0x68	; 104
    2072:	09 f4       	brne	.+2      	; 0x2076 <__vector_24+0xa4>
    2074:	63 c0       	rjmp	.+198    	; 0x213c <__vector_24+0x16a>
    2076:	80 37       	cpi	r24, 0x70	; 112
    2078:	09 f4       	brne	.+2      	; 0x207c <__vector_24+0xaa>
    207a:	60 c0       	rjmp	.+192    	; 0x213c <__vector_24+0x16a>
    207c:	c6 c0       	rjmp	.+396    	; 0x220a <__vector_24+0x238>
    207e:	88 38       	cpi	r24, 0x88	; 136
    2080:	09 f4       	brne	.+2      	; 0x2084 <__vector_24+0xb2>
    2082:	b5 c0       	rjmp	.+362    	; 0x21ee <__vector_24+0x21c>
    2084:	80 39       	cpi	r24, 0x90	; 144
    2086:	09 f4       	brne	.+2      	; 0x208a <__vector_24+0xb8>
    2088:	5f c0       	rjmp	.+190    	; 0x2148 <__vector_24+0x176>
    208a:	80 38       	cpi	r24, 0x80	; 128
    208c:	09 f0       	breq	.+2      	; 0x2090 <__vector_24+0xbe>
    208e:	bd c0       	rjmp	.+378    	; 0x220a <__vector_24+0x238>
    2090:	5b c0       	rjmp	.+182    	; 0x2148 <__vector_24+0x176>
    2092:	80 3b       	cpi	r24, 0xB0	; 176
    2094:	09 f4       	brne	.+2      	; 0x2098 <__vector_24+0xc6>
    2096:	83 c0       	rjmp	.+262    	; 0x219e <__vector_24+0x1cc>
    2098:	38 f4       	brcc	.+14     	; 0x20a8 <__vector_24+0xd6>
    209a:	80 3a       	cpi	r24, 0xA0	; 160
    209c:	09 f4       	brne	.+2      	; 0x20a0 <__vector_24+0xce>
    209e:	66 c0       	rjmp	.+204    	; 0x216c <__vector_24+0x19a>
    20a0:	88 3a       	cpi	r24, 0xA8	; 168
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <__vector_24+0xd4>
    20a4:	7c c0       	rjmp	.+248    	; 0x219e <__vector_24+0x1cc>
    20a6:	b1 c0       	rjmp	.+354    	; 0x220a <__vector_24+0x238>
    20a8:	80 3c       	cpi	r24, 0xC0	; 192
    20aa:	09 f4       	brne	.+2      	; 0x20ae <__vector_24+0xdc>
    20ac:	a4 c0       	rjmp	.+328    	; 0x21f6 <__vector_24+0x224>
    20ae:	88 3c       	cpi	r24, 0xC8	; 200
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <__vector_24+0xe2>
    20b2:	a1 c0       	rjmp	.+322    	; 0x21f6 <__vector_24+0x224>
    20b4:	88 3b       	cpi	r24, 0xB8	; 184
    20b6:	09 f4       	brne	.+2      	; 0x20ba <__vector_24+0xe8>
    20b8:	87 c0       	rjmp	.+270    	; 0x21c8 <__vector_24+0x1f6>
    20ba:	a7 c0       	rjmp	.+334    	; 0x220a <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    20bc:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi0_slarw>
    20c0:	10 c0       	rjmp	.+32     	; 0x20e2 <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    20c2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    20c6:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    20ca:	98 17       	cp	r25, r24
    20cc:	70 f5       	brcc	.+92     	; 0x212a <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    20ce:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	8e 0f       	add	r24, r30
    20d6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	eb 5c       	subi	r30, 0xCB	; 203
    20de:	fd 4f       	sbci	r31, 0xFD	; 253
    20e0:	80 81       	ld	r24, Z
    20e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    20e6:	85 ec       	ldi	r24, 0xC5	; 197
    20e8:	83 c0       	rjmp	.+262    	; 0x21f0 <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    20ea:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
    20ee:	8b c0       	rjmp	.+278    	; 0x2206 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    20f0:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	8e 0f       	add	r24, r30
    20f8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    20fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	eb 5c       	subi	r30, 0xCB	; 203
    2104:	fd 4f       	sbci	r31, 0xFD	; 253
    2106:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2108:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    210c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    2110:	6b c0       	rjmp	.+214    	; 0x21e8 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2112:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	8e 0f       	add	r24, r30
    211a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    211e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	eb 5c       	subi	r30, 0xCB	; 203
    2126:	fd 4f       	sbci	r31, 0xFD	; 253
    2128:	80 83       	st	Z, r24
            if (twi0_sendStop)
    212a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_sendStop>
    212e:	81 11       	cpse	r24, r1
    2130:	6a c0       	rjmp	.+212    	; 0x2206 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2138:	84 ea       	ldi	r24, 0xA4	; 164
    213a:	5e c0       	rjmp	.+188    	; 0x21f8 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    213c:	83 e0       	ldi	r24, 0x03	; 3
    213e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    2142:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
    2146:	cf cf       	rjmp	.-98     	; 0x20e6 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2148:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    214c:	80 32       	cpi	r24, 0x20	; 32
    214e:	08 f0       	brcs	.+2      	; 0x2152 <__vector_24+0x180>
    2150:	4e c0       	rjmp	.+156    	; 0x21ee <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    2152:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	8e 0f       	add	r24, r30
    215a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi0_rxBufferIndex>
    215e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	ef 50       	subi	r30, 0x0F	; 15
    2166:	fe 4f       	sbci	r31, 0xFE	; 254
    2168:	80 83       	st	Z, r24
    216a:	bd cf       	rjmp	.-134    	; 0x20e6 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    216c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2170:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2174:	80 32       	cpi	r24, 0x20	; 32
    2176:	30 f4       	brcc	.+12     	; 0x2184 <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    2178:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	ef 50       	subi	r30, 0x0F	; 15
    2180:	fe 4f       	sbci	r31, 0xFE	; 254
    2182:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    2184:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    218e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    2192:	81 ef       	ldi	r24, 0xF1	; 241
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    2198:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
            break;
    219c:	36 c0       	rjmp	.+108    	; 0x220a <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    219e:	84 e0       	ldi	r24, 0x04	; 4
    21a0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    21a4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    21a8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    21ac:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    21b0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    21b4:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    21b6:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    21ba:	81 11       	cpse	r24, r1
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    21c4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    21c8:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi0_txBufferIndex>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	8e 0f       	add	r24, r30
    21d0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi0_txBufferIndex>
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ed 5e       	subi	r30, 0xED	; 237
    21d8:	fd 4f       	sbci	r31, 0xFD	; 253
    21da:	80 81       	ld	r24, Z
    21dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    21e0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <twi0_txBufferIndex>
    21e4:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    21e8:	98 17       	cp	r25, r24
    21ea:	08 f4       	brcc	.+2      	; 0x21ee <__vector_24+0x21c>
    21ec:	7c cf       	rjmp	.-264    	; 0x20e6 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    21ee:	85 e8       	ldi	r24, 0x85	; 133
    21f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21f4:	0a c0       	rjmp	.+20     	; 0x220a <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    21f6:	85 ec       	ldi	r24, 0xC5	; 197
    21f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    21fc:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
            break;
    2200:	04 c0       	rjmp	.+8      	; 0x220a <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    2202:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_error>
            twi0_stop();
    2206:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <twi0_stop>
            break;
    }
}
    220a:	ff 91       	pop	r31
    220c:	ef 91       	pop	r30
    220e:	bf 91       	pop	r27
    2210:	af 91       	pop	r26
    2212:	9f 91       	pop	r25
    2214:	8f 91       	pop	r24
    2216:	7f 91       	pop	r23
    2218:	6f 91       	pop	r22
    221a:	5f 91       	pop	r21
    221c:	4f 91       	pop	r20
    221e:	3f 91       	pop	r19
    2220:	2f 91       	pop	r18
    2222:	0f 90       	pop	r0
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	0f 90       	pop	r0
    2228:	1f 90       	pop	r1
    222a:	18 95       	reti

0000222c <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    222c:	08 95       	ret

0000222e <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    222e:	08 95       	ret

00002230 <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    2230:	2d e7       	ldi	r18, 0x7D	; 125
    2232:	32 e0       	ldi	r19, 0x02	; 2
    2234:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <twi1_rxBuffer+0x1>
    2238:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    223c:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    twi1_sendStop = 1;		// default value
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi1_sendStop>
    twi1_inRepStart = 0;
    2246:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    224a:	88 23       	and	r24, r24
    224c:	21 f0       	breq	.+8      	; 0x2256 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    224e:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    2250:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    2252:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    2254:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    2256:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    225a:	8e 7f       	andi	r24, 0xFE	; 254
    225c:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    2260:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2264:	8d 7f       	andi	r24, 0xFD	; 253
    2266:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    226a:	84 e3       	ldi	r24, 0x34	; 52
    226c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2270:	85 e4       	ldi	r24, 0x45	; 69
    2272:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2276:	08 95       	ret

00002278 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    2278:	88 0f       	add	r24, r24
    227a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    227e:	08 95       	ret

00002280 <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    2280:	61 32       	cpi	r22, 0x21	; 33
    2282:	98 f4       	brcc	.+38     	; 0x22aa <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    2284:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <twi1_state>
    2288:	24 30       	cpi	r18, 0x04	; 4
    228a:	89 f4       	brne	.+34     	; 0x22ae <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    228c:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <twi1_txBufferLength>
    2290:	28 2f       	mov	r18, r24
    2292:	af e9       	ldi	r26, 0x9F	; 159
    2294:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2296:	fc 01       	movw	r30, r24
    2298:	8e 2f       	mov	r24, r30
    229a:	82 1b       	sub	r24, r18
    229c:	86 17       	cp	r24, r22
    229e:	18 f4       	brcc	.+6      	; 0x22a6 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    22a0:	81 91       	ld	r24, Z+
    22a2:	8d 93       	st	X+, r24
    22a4:	f9 cf       	rjmp	.-14     	; 0x2298 <twi1_transmit+0x18>
    }
  
    return 0;
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    22b0:	08 95       	ret

000022b2 <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    22b2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    22b6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    22ba:	08 95       	ret

000022bc <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    22bc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    22c0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    22c4:	08 95       	ret

000022c6 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    22c6:	85 ed       	ldi	r24, 0xD5	; 213
    22c8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    22cc:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    22d0:	84 fd       	sbrc	r24, 4
    22d2:	fc cf       	rjmp	.-8      	; 0x22cc <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    22d4:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    22d8:	08 95       	ret

000022da <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    22da:	85 ec       	ldi	r24, 0xC5	; 197
    22dc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    22e0:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    22e4:	08 95       	ret

000022e6 <__vector_40>:
}

ISR(TWI1_vect)
{
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	11 24       	eor	r1, r1
    22f0:	2f 93       	push	r18
    22f2:	3f 93       	push	r19
    22f4:	4f 93       	push	r20
    22f6:	5f 93       	push	r21
    22f8:	6f 93       	push	r22
    22fa:	7f 93       	push	r23
    22fc:	8f 93       	push	r24
    22fe:	9f 93       	push	r25
    2300:	af 93       	push	r26
    2302:	bf 93       	push	r27
    2304:	ef 93       	push	r30
    2306:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2308:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    230c:	88 7f       	andi	r24, 0xF8	; 248
    230e:	80 36       	cpi	r24, 0x60	; 96
    2310:	09 f4       	brne	.+2      	; 0x2314 <__vector_40+0x2e>
    2312:	9e c0       	rjmp	.+316    	; 0x2450 <__vector_40+0x16a>
    2314:	78 f5       	brcc	.+94     	; 0x2374 <__vector_40+0x8e>
    2316:	88 32       	cpi	r24, 0x28	; 40
    2318:	09 f4       	brne	.+2      	; 0x231c <__vector_40+0x36>
    231a:	5d c0       	rjmp	.+186    	; 0x23d6 <__vector_40+0xf0>
    231c:	90 f4       	brcc	.+36     	; 0x2342 <__vector_40+0x5c>
    231e:	80 31       	cpi	r24, 0x10	; 16
    2320:	09 f4       	brne	.+2      	; 0x2324 <__vector_40+0x3e>
    2322:	56 c0       	rjmp	.+172    	; 0x23d0 <__vector_40+0xea>
    2324:	38 f4       	brcc	.+14     	; 0x2334 <__vector_40+0x4e>
    2326:	88 23       	and	r24, r24
    2328:	09 f4       	brne	.+2      	; 0x232c <__vector_40+0x46>
    232a:	0a c1       	rjmp	.+532    	; 0x2540 <__vector_40+0x25a>
    232c:	88 30       	cpi	r24, 0x08	; 8
    232e:	09 f4       	brne	.+2      	; 0x2332 <__vector_40+0x4c>
    2330:	4f c0       	rjmp	.+158    	; 0x23d0 <__vector_40+0xea>
    2332:	0a c1       	rjmp	.+532    	; 0x2548 <__vector_40+0x262>
    2334:	88 31       	cpi	r24, 0x18	; 24
    2336:	09 f4       	brne	.+2      	; 0x233a <__vector_40+0x54>
    2338:	4e c0       	rjmp	.+156    	; 0x23d6 <__vector_40+0xf0>
    233a:	80 32       	cpi	r24, 0x20	; 32
    233c:	09 f4       	brne	.+2      	; 0x2340 <__vector_40+0x5a>
    233e:	5f c0       	rjmp	.+190    	; 0x23fe <__vector_40+0x118>
    2340:	03 c1       	rjmp	.+518    	; 0x2548 <__vector_40+0x262>
    2342:	80 34       	cpi	r24, 0x40	; 64
    2344:	09 f4       	brne	.+2      	; 0x2348 <__vector_40+0x62>
    2346:	6a c0       	rjmp	.+212    	; 0x241c <__vector_40+0x136>
    2348:	58 f4       	brcc	.+22     	; 0x2360 <__vector_40+0x7a>
    234a:	80 33       	cpi	r24, 0x30	; 48
    234c:	09 f4       	brne	.+2      	; 0x2350 <__vector_40+0x6a>
    234e:	57 c0       	rjmp	.+174    	; 0x23fe <__vector_40+0x118>
    2350:	88 33       	cpi	r24, 0x38	; 56
    2352:	09 f0       	breq	.+2      	; 0x2356 <__vector_40+0x70>
    2354:	f9 c0       	rjmp	.+498    	; 0x2548 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    2356:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
            twi1_releaseBus();
    235a:	0e 94 6d 11 	call	0x22da	; 0x22da <twi1_releaseBus>
            break;
    235e:	f4 c0       	rjmp	.+488    	; 0x2548 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2360:	80 35       	cpi	r24, 0x50	; 80
    2362:	09 f4       	brne	.+2      	; 0x2366 <__vector_40+0x80>
    2364:	4f c0       	rjmp	.+158    	; 0x2404 <__vector_40+0x11e>
    2366:	88 35       	cpi	r24, 0x58	; 88
    2368:	09 f4       	brne	.+2      	; 0x236c <__vector_40+0x86>
    236a:	5d c0       	rjmp	.+186    	; 0x2426 <__vector_40+0x140>
    236c:	88 34       	cpi	r24, 0x48	; 72
    236e:	09 f0       	breq	.+2      	; 0x2372 <__vector_40+0x8c>
    2370:	eb c0       	rjmp	.+470    	; 0x2548 <__vector_40+0x262>
    2372:	e8 c0       	rjmp	.+464    	; 0x2544 <__vector_40+0x25e>
    2374:	88 39       	cpi	r24, 0x98	; 152
    2376:	09 f4       	brne	.+2      	; 0x237a <__vector_40+0x94>
    2378:	d9 c0       	rjmp	.+434    	; 0x252c <__vector_40+0x246>
    237a:	a8 f4       	brcc	.+42     	; 0x23a6 <__vector_40+0xc0>
    237c:	88 37       	cpi	r24, 0x78	; 120
    237e:	09 f4       	brne	.+2      	; 0x2382 <__vector_40+0x9c>
    2380:	67 c0       	rjmp	.+206    	; 0x2450 <__vector_40+0x16a>
    2382:	38 f4       	brcc	.+14     	; 0x2392 <__vector_40+0xac>
    2384:	88 36       	cpi	r24, 0x68	; 104
    2386:	09 f4       	brne	.+2      	; 0x238a <__vector_40+0xa4>
    2388:	63 c0       	rjmp	.+198    	; 0x2450 <__vector_40+0x16a>
    238a:	80 37       	cpi	r24, 0x70	; 112
    238c:	09 f4       	brne	.+2      	; 0x2390 <__vector_40+0xaa>
    238e:	60 c0       	rjmp	.+192    	; 0x2450 <__vector_40+0x16a>
    2390:	db c0       	rjmp	.+438    	; 0x2548 <__vector_40+0x262>
    2392:	88 38       	cpi	r24, 0x88	; 136
    2394:	09 f4       	brne	.+2      	; 0x2398 <__vector_40+0xb2>
    2396:	ca c0       	rjmp	.+404    	; 0x252c <__vector_40+0x246>
    2398:	80 39       	cpi	r24, 0x90	; 144
    239a:	09 f4       	brne	.+2      	; 0x239e <__vector_40+0xb8>
    239c:	5f c0       	rjmp	.+190    	; 0x245c <__vector_40+0x176>
    239e:	80 38       	cpi	r24, 0x80	; 128
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <__vector_40+0xbe>
    23a2:	d2 c0       	rjmp	.+420    	; 0x2548 <__vector_40+0x262>
    23a4:	5b c0       	rjmp	.+182    	; 0x245c <__vector_40+0x176>
    23a6:	80 3b       	cpi	r24, 0xB0	; 176
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__vector_40+0xc6>
    23aa:	98 c0       	rjmp	.+304    	; 0x24dc <__vector_40+0x1f6>
    23ac:	38 f4       	brcc	.+14     	; 0x23bc <__vector_40+0xd6>
    23ae:	80 3a       	cpi	r24, 0xA0	; 160
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <__vector_40+0xce>
    23b2:	69 c0       	rjmp	.+210    	; 0x2486 <__vector_40+0x1a0>
    23b4:	88 3a       	cpi	r24, 0xA8	; 168
    23b6:	09 f4       	brne	.+2      	; 0x23ba <__vector_40+0xd4>
    23b8:	91 c0       	rjmp	.+290    	; 0x24dc <__vector_40+0x1f6>
    23ba:	c6 c0       	rjmp	.+396    	; 0x2548 <__vector_40+0x262>
    23bc:	80 3c       	cpi	r24, 0xC0	; 192
    23be:	09 f4       	brne	.+2      	; 0x23c2 <__vector_40+0xdc>
    23c0:	b9 c0       	rjmp	.+370    	; 0x2534 <__vector_40+0x24e>
    23c2:	88 3c       	cpi	r24, 0xC8	; 200
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <__vector_40+0xe2>
    23c6:	b6 c0       	rjmp	.+364    	; 0x2534 <__vector_40+0x24e>
    23c8:	88 3b       	cpi	r24, 0xB8	; 184
    23ca:	09 f4       	brne	.+2      	; 0x23ce <__vector_40+0xe8>
    23cc:	9c c0       	rjmp	.+312    	; 0x2506 <__vector_40+0x220>
    23ce:	bc c0       	rjmp	.+376    	; 0x2548 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    23d0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi1_slarw>
    23d4:	10 c0       	rjmp	.+32     	; 0x23f6 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    23d6:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    23da:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    23de:	98 17       	cp	r25, r24
    23e0:	70 f5       	brcc	.+92     	; 0x243e <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    23e2:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	8e 0f       	add	r24, r30
    23ea:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	ef 53       	subi	r30, 0x3F	; 63
    23f2:	fd 4f       	sbci	r31, 0xFD	; 253
    23f4:	80 81       	ld	r24, Z
    23f6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    23fa:	85 ec       	ldi	r24, 0xC5	; 197
    23fc:	98 c0       	rjmp	.+304    	; 0x252e <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    23fe:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
    2402:	a0 c0       	rjmp	.+320    	; 0x2544 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2404:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	8e 0f       	add	r24, r30
    240c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2410:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	ef 53       	subi	r30, 0x3F	; 63
    2418:	fd 4f       	sbci	r31, 0xFD	; 253
    241a:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    241c:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2420:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2424:	80 c0       	rjmp	.+256    	; 0x2526 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2426:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	8e 0f       	add	r24, r30
    242e:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2432:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ef 53       	subi	r30, 0x3F	; 63
    243a:	fd 4f       	sbci	r31, 0xFD	; 253
    243c:	80 83       	st	Z, r24
            if (twi1_sendStop)
    243e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_sendStop>
    2442:	81 11       	cpse	r24, r1
    2444:	7f c0       	rjmp	.+254    	; 0x2544 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    244c:	84 ea       	ldi	r24, 0xA4	; 164
    244e:	73 c0       	rjmp	.+230    	; 0x2536 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2456:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
    245a:	cf cf       	rjmp	.-98     	; 0x23fa <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    245c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2460:	80 32       	cpi	r24, 0x20	; 32
    2462:	08 f0       	brcs	.+2      	; 0x2466 <__vector_40+0x180>
    2464:	63 c0       	rjmp	.+198    	; 0x252c <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2466:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi1_rxBuffer>
    246a:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    246e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	98 0f       	add	r25, r24
    2476:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi1_rxBufferIndex>
    247a:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    247e:	e8 0f       	add	r30, r24
    2480:	f1 1d       	adc	r31, r1
    2482:	90 83       	st	Z, r25
    2484:	ba cf       	rjmp	.-140    	; 0x23fa <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2486:	0e 94 6d 11 	call	0x22da	; 0x22da <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    248a:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    248e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2492:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2496:	20 32       	cpi	r18, 0x20	; 32
    2498:	30 f4       	brcc	.+12     	; 0x24a6 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    249a:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    249e:	fc 01       	movw	r30, r24
    24a0:	e2 0f       	add	r30, r18
    24a2:	f1 1d       	adc	r31, r1
    24a4:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    24a6:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    24b0:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    24b4:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    24b6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    24ba:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    24be:	8d 57       	subi	r24, 0x7D	; 125
    24c0:	92 40       	sbci	r25, 0x02	; 2
    24c2:	19 f4       	brne	.+6      	; 0x24ca <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    24c4:	8d e5       	ldi	r24, 0x5D	; 93
    24c6:	92 e0       	ldi	r25, 0x02	; 2
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    24ca:	8d e7       	ldi	r24, 0x7D	; 125
    24cc:	92 e0       	ldi	r25, 0x02	; 2
    24ce:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi1_rxBuffer+0x1>
    24d2:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    24d6:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
            break;
    24da:	36 c0       	rjmp	.+108    	; 0x2548 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    24dc:	84 e0       	ldi	r24, 0x04	; 4
    24de:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    24e2:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    24e6:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    24ea:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    24ee:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    24f2:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    24f4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    24f8:	81 11       	cpse	r24, r1
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2502:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2506:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <twi1_txBufferIndex>
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	8e 0f       	add	r24, r30
    250e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi1_txBufferIndex>
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	e1 56       	subi	r30, 0x61	; 97
    2516:	fd 4f       	sbci	r31, 0xFD	; 253
    2518:	80 81       	ld	r24, Z
    251a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    251e:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2522:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2526:	98 17       	cp	r25, r24
    2528:	08 f4       	brcc	.+2      	; 0x252c <__vector_40+0x246>
    252a:	67 cf       	rjmp	.-306    	; 0x23fa <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    252c:	85 e8       	ldi	r24, 0x85	; 133
    252e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2532:	0a c0       	rjmp	.+20     	; 0x2548 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2534:	85 ec       	ldi	r24, 0xC5	; 197
    2536:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    253a:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
            break;
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2540:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_error>
            twi1_stop();
    2544:	0e 94 63 11 	call	0x22c6	; 0x22c6 <twi1_stop>
            break;
    }
}
    2548:	ff 91       	pop	r31
    254a:	ef 91       	pop	r30
    254c:	bf 91       	pop	r27
    254e:	af 91       	pop	r26
    2550:	9f 91       	pop	r25
    2552:	8f 91       	pop	r24
    2554:	7f 91       	pop	r23
    2556:	6f 91       	pop	r22
    2558:	5f 91       	pop	r21
    255a:	4f 91       	pop	r20
    255c:	3f 91       	pop	r19
    255e:	2f 91       	pop	r18
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	0f 90       	pop	r0
    2566:	1f 90       	pop	r1
    2568:	18 95       	reti

0000256a <__udivmodsi4>:
    256a:	a1 e2       	ldi	r26, 0x21	; 33
    256c:	1a 2e       	mov	r1, r26
    256e:	aa 1b       	sub	r26, r26
    2570:	bb 1b       	sub	r27, r27
    2572:	fd 01       	movw	r30, r26
    2574:	0d c0       	rjmp	.+26     	; 0x2590 <__udivmodsi4_ep>

00002576 <__udivmodsi4_loop>:
    2576:	aa 1f       	adc	r26, r26
    2578:	bb 1f       	adc	r27, r27
    257a:	ee 1f       	adc	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	a2 17       	cp	r26, r18
    2580:	b3 07       	cpc	r27, r19
    2582:	e4 07       	cpc	r30, r20
    2584:	f5 07       	cpc	r31, r21
    2586:	20 f0       	brcs	.+8      	; 0x2590 <__udivmodsi4_ep>
    2588:	a2 1b       	sub	r26, r18
    258a:	b3 0b       	sbc	r27, r19
    258c:	e4 0b       	sbc	r30, r20
    258e:	f5 0b       	sbc	r31, r21

00002590 <__udivmodsi4_ep>:
    2590:	66 1f       	adc	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	1a 94       	dec	r1
    259a:	69 f7       	brne	.-38     	; 0x2576 <__udivmodsi4_loop>
    259c:	60 95       	com	r22
    259e:	70 95       	com	r23
    25a0:	80 95       	com	r24
    25a2:	90 95       	com	r25
    25a4:	9b 01       	movw	r18, r22
    25a6:	ac 01       	movw	r20, r24
    25a8:	bd 01       	movw	r22, r26
    25aa:	cf 01       	movw	r24, r30
    25ac:	08 95       	ret

000025ae <fgetc>:
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	ec 01       	movw	r28, r24
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	20 ff       	sbrs	r18, 0
    25b8:	33 c0       	rjmp	.+102    	; 0x2620 <fgetc+0x72>
    25ba:	26 ff       	sbrs	r18, 6
    25bc:	0a c0       	rjmp	.+20     	; 0x25d2 <fgetc+0x24>
    25be:	2f 7b       	andi	r18, 0xBF	; 191
    25c0:	2b 83       	std	Y+3, r18	; 0x03
    25c2:	8e 81       	ldd	r24, Y+6	; 0x06
    25c4:	9f 81       	ldd	r25, Y+7	; 0x07
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	9f 83       	std	Y+7, r25	; 0x07
    25ca:	8e 83       	std	Y+6, r24	; 0x06
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	29 c0       	rjmp	.+82     	; 0x2624 <fgetc+0x76>
    25d2:	22 ff       	sbrs	r18, 2
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <fgetc+0x46>
    25d6:	e8 81       	ld	r30, Y
    25d8:	f9 81       	ldd	r31, Y+1	; 0x01
    25da:	80 81       	ld	r24, Z
    25dc:	08 2e       	mov	r0, r24
    25de:	00 0c       	add	r0, r0
    25e0:	99 0b       	sbc	r25, r25
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	19 f4       	brne	.+6      	; 0x25ec <fgetc+0x3e>
    25e6:	20 62       	ori	r18, 0x20	; 32
    25e8:	2b 83       	std	Y+3, r18	; 0x03
    25ea:	1a c0       	rjmp	.+52     	; 0x2620 <fgetc+0x72>
    25ec:	31 96       	adiw	r30, 0x01	; 1
    25ee:	f9 83       	std	Y+1, r31	; 0x01
    25f0:	e8 83       	st	Y, r30
    25f2:	0e c0       	rjmp	.+28     	; 0x2610 <fgetc+0x62>
    25f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    25f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    25f8:	09 95       	icall
    25fa:	97 ff       	sbrs	r25, 7
    25fc:	09 c0       	rjmp	.+18     	; 0x2610 <fgetc+0x62>
    25fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2600:	01 96       	adiw	r24, 0x01	; 1
    2602:	11 f0       	breq	.+4      	; 0x2608 <fgetc+0x5a>
    2604:	80 e2       	ldi	r24, 0x20	; 32
    2606:	01 c0       	rjmp	.+2      	; 0x260a <fgetc+0x5c>
    2608:	80 e1       	ldi	r24, 0x10	; 16
    260a:	82 2b       	or	r24, r18
    260c:	8b 83       	std	Y+3, r24	; 0x03
    260e:	08 c0       	rjmp	.+16     	; 0x2620 <fgetc+0x72>
    2610:	2e 81       	ldd	r18, Y+6	; 0x06
    2612:	3f 81       	ldd	r19, Y+7	; 0x07
    2614:	2f 5f       	subi	r18, 0xFF	; 255
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
    2618:	3f 83       	std	Y+7, r19	; 0x07
    261a:	2e 83       	std	Y+6, r18	; 0x06
    261c:	99 27       	eor	r25, r25
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <fgetc+0x76>
    2620:	8f ef       	ldi	r24, 0xFF	; 255
    2622:	9f ef       	ldi	r25, 0xFF	; 255
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	08 95       	ret

0000262a <printf>:
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	eb e1       	ldi	r30, 0x1B	; 27
    2630:	f3 e1       	ldi	r31, 0x13	; 19
    2632:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__prologue_saves__+0x20>
    2636:	ae 01       	movw	r20, r28
    2638:	4b 5f       	subi	r20, 0xFB	; 251
    263a:	5f 4f       	sbci	r21, 0xFF	; 255
    263c:	fa 01       	movw	r30, r20
    263e:	61 91       	ld	r22, Z+
    2640:	71 91       	ld	r23, Z+
    2642:	af 01       	movw	r20, r30
    2644:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <__iob+0x2>
    2648:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <__iob+0x3>
    264c:	0e 94 2b 13 	call	0x2656	; 0x2656 <vfprintf>
    2650:	e2 e0       	ldi	r30, 0x02	; 2
    2652:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__epilogue_restores__+0x20>

00002656 <vfprintf>:
    2656:	ab e0       	ldi	r26, 0x0B	; 11
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e1 e3       	ldi	r30, 0x31	; 49
    265c:	f3 e1       	ldi	r31, 0x13	; 19
    265e:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__prologue_saves__>
    2662:	6c 01       	movw	r12, r24
    2664:	7b 01       	movw	r14, r22
    2666:	8a 01       	movw	r16, r20
    2668:	fc 01       	movw	r30, r24
    266a:	17 82       	std	Z+7, r1	; 0x07
    266c:	16 82       	std	Z+6, r1	; 0x06
    266e:	83 81       	ldd	r24, Z+3	; 0x03
    2670:	81 ff       	sbrs	r24, 1
    2672:	cc c1       	rjmp	.+920    	; 0x2a0c <vfprintf+0x3b6>
    2674:	ce 01       	movw	r24, r28
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	3c 01       	movw	r6, r24
    267a:	f6 01       	movw	r30, r12
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	f7 01       	movw	r30, r14
    2680:	93 fd       	sbrc	r25, 3
    2682:	85 91       	lpm	r24, Z+
    2684:	93 ff       	sbrs	r25, 3
    2686:	81 91       	ld	r24, Z+
    2688:	7f 01       	movw	r14, r30
    268a:	88 23       	and	r24, r24
    268c:	09 f4       	brne	.+2      	; 0x2690 <vfprintf+0x3a>
    268e:	ba c1       	rjmp	.+884    	; 0x2a04 <vfprintf+0x3ae>
    2690:	85 32       	cpi	r24, 0x25	; 37
    2692:	39 f4       	brne	.+14     	; 0x26a2 <vfprintf+0x4c>
    2694:	93 fd       	sbrc	r25, 3
    2696:	85 91       	lpm	r24, Z+
    2698:	93 ff       	sbrs	r25, 3
    269a:	81 91       	ld	r24, Z+
    269c:	7f 01       	movw	r14, r30
    269e:	85 32       	cpi	r24, 0x25	; 37
    26a0:	29 f4       	brne	.+10     	; 0x26ac <vfprintf+0x56>
    26a2:	b6 01       	movw	r22, r12
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    26aa:	e7 cf       	rjmp	.-50     	; 0x267a <vfprintf+0x24>
    26ac:	91 2c       	mov	r9, r1
    26ae:	21 2c       	mov	r2, r1
    26b0:	31 2c       	mov	r3, r1
    26b2:	ff e1       	ldi	r31, 0x1F	; 31
    26b4:	f3 15       	cp	r31, r3
    26b6:	d8 f0       	brcs	.+54     	; 0x26ee <vfprintf+0x98>
    26b8:	8b 32       	cpi	r24, 0x2B	; 43
    26ba:	79 f0       	breq	.+30     	; 0x26da <vfprintf+0x84>
    26bc:	38 f4       	brcc	.+14     	; 0x26cc <vfprintf+0x76>
    26be:	80 32       	cpi	r24, 0x20	; 32
    26c0:	79 f0       	breq	.+30     	; 0x26e0 <vfprintf+0x8a>
    26c2:	83 32       	cpi	r24, 0x23	; 35
    26c4:	a1 f4       	brne	.+40     	; 0x26ee <vfprintf+0x98>
    26c6:	23 2d       	mov	r18, r3
    26c8:	20 61       	ori	r18, 0x10	; 16
    26ca:	1d c0       	rjmp	.+58     	; 0x2706 <vfprintf+0xb0>
    26cc:	8d 32       	cpi	r24, 0x2D	; 45
    26ce:	61 f0       	breq	.+24     	; 0x26e8 <vfprintf+0x92>
    26d0:	80 33       	cpi	r24, 0x30	; 48
    26d2:	69 f4       	brne	.+26     	; 0x26ee <vfprintf+0x98>
    26d4:	23 2d       	mov	r18, r3
    26d6:	21 60       	ori	r18, 0x01	; 1
    26d8:	16 c0       	rjmp	.+44     	; 0x2706 <vfprintf+0xb0>
    26da:	83 2d       	mov	r24, r3
    26dc:	82 60       	ori	r24, 0x02	; 2
    26de:	38 2e       	mov	r3, r24
    26e0:	e3 2d       	mov	r30, r3
    26e2:	e4 60       	ori	r30, 0x04	; 4
    26e4:	3e 2e       	mov	r3, r30
    26e6:	2a c0       	rjmp	.+84     	; 0x273c <vfprintf+0xe6>
    26e8:	f3 2d       	mov	r31, r3
    26ea:	f8 60       	ori	r31, 0x08	; 8
    26ec:	1d c0       	rjmp	.+58     	; 0x2728 <vfprintf+0xd2>
    26ee:	37 fc       	sbrc	r3, 7
    26f0:	2d c0       	rjmp	.+90     	; 0x274c <vfprintf+0xf6>
    26f2:	20 ed       	ldi	r18, 0xD0	; 208
    26f4:	28 0f       	add	r18, r24
    26f6:	2a 30       	cpi	r18, 0x0A	; 10
    26f8:	40 f0       	brcs	.+16     	; 0x270a <vfprintf+0xb4>
    26fa:	8e 32       	cpi	r24, 0x2E	; 46
    26fc:	b9 f4       	brne	.+46     	; 0x272c <vfprintf+0xd6>
    26fe:	36 fc       	sbrc	r3, 6
    2700:	81 c1       	rjmp	.+770    	; 0x2a04 <vfprintf+0x3ae>
    2702:	23 2d       	mov	r18, r3
    2704:	20 64       	ori	r18, 0x40	; 64
    2706:	32 2e       	mov	r3, r18
    2708:	19 c0       	rjmp	.+50     	; 0x273c <vfprintf+0xe6>
    270a:	36 fe       	sbrs	r3, 6
    270c:	06 c0       	rjmp	.+12     	; 0x271a <vfprintf+0xc4>
    270e:	8a e0       	ldi	r24, 0x0A	; 10
    2710:	98 9e       	mul	r9, r24
    2712:	20 0d       	add	r18, r0
    2714:	11 24       	eor	r1, r1
    2716:	92 2e       	mov	r9, r18
    2718:	11 c0       	rjmp	.+34     	; 0x273c <vfprintf+0xe6>
    271a:	ea e0       	ldi	r30, 0x0A	; 10
    271c:	2e 9e       	mul	r2, r30
    271e:	20 0d       	add	r18, r0
    2720:	11 24       	eor	r1, r1
    2722:	22 2e       	mov	r2, r18
    2724:	f3 2d       	mov	r31, r3
    2726:	f0 62       	ori	r31, 0x20	; 32
    2728:	3f 2e       	mov	r3, r31
    272a:	08 c0       	rjmp	.+16     	; 0x273c <vfprintf+0xe6>
    272c:	8c 36       	cpi	r24, 0x6C	; 108
    272e:	21 f4       	brne	.+8      	; 0x2738 <vfprintf+0xe2>
    2730:	83 2d       	mov	r24, r3
    2732:	80 68       	ori	r24, 0x80	; 128
    2734:	38 2e       	mov	r3, r24
    2736:	02 c0       	rjmp	.+4      	; 0x273c <vfprintf+0xe6>
    2738:	88 36       	cpi	r24, 0x68	; 104
    273a:	41 f4       	brne	.+16     	; 0x274c <vfprintf+0xf6>
    273c:	f7 01       	movw	r30, r14
    273e:	93 fd       	sbrc	r25, 3
    2740:	85 91       	lpm	r24, Z+
    2742:	93 ff       	sbrs	r25, 3
    2744:	81 91       	ld	r24, Z+
    2746:	7f 01       	movw	r14, r30
    2748:	81 11       	cpse	r24, r1
    274a:	b3 cf       	rjmp	.-154    	; 0x26b2 <vfprintf+0x5c>
    274c:	98 2f       	mov	r25, r24
    274e:	9f 7d       	andi	r25, 0xDF	; 223
    2750:	95 54       	subi	r25, 0x45	; 69
    2752:	93 30       	cpi	r25, 0x03	; 3
    2754:	28 f4       	brcc	.+10     	; 0x2760 <vfprintf+0x10a>
    2756:	0c 5f       	subi	r16, 0xFC	; 252
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	9f e3       	ldi	r25, 0x3F	; 63
    275c:	99 83       	std	Y+1, r25	; 0x01
    275e:	0d c0       	rjmp	.+26     	; 0x277a <vfprintf+0x124>
    2760:	83 36       	cpi	r24, 0x63	; 99
    2762:	31 f0       	breq	.+12     	; 0x2770 <vfprintf+0x11a>
    2764:	83 37       	cpi	r24, 0x73	; 115
    2766:	71 f0       	breq	.+28     	; 0x2784 <vfprintf+0x12e>
    2768:	83 35       	cpi	r24, 0x53	; 83
    276a:	09 f0       	breq	.+2      	; 0x276e <vfprintf+0x118>
    276c:	59 c0       	rjmp	.+178    	; 0x2820 <vfprintf+0x1ca>
    276e:	21 c0       	rjmp	.+66     	; 0x27b2 <vfprintf+0x15c>
    2770:	f8 01       	movw	r30, r16
    2772:	80 81       	ld	r24, Z
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	0e 5f       	subi	r16, 0xFE	; 254
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	88 24       	eor	r8, r8
    277c:	83 94       	inc	r8
    277e:	91 2c       	mov	r9, r1
    2780:	53 01       	movw	r10, r6
    2782:	13 c0       	rjmp	.+38     	; 0x27aa <vfprintf+0x154>
    2784:	28 01       	movw	r4, r16
    2786:	f2 e0       	ldi	r31, 0x02	; 2
    2788:	4f 0e       	add	r4, r31
    278a:	51 1c       	adc	r5, r1
    278c:	f8 01       	movw	r30, r16
    278e:	a0 80       	ld	r10, Z
    2790:	b1 80       	ldd	r11, Z+1	; 0x01
    2792:	36 fe       	sbrs	r3, 6
    2794:	03 c0       	rjmp	.+6      	; 0x279c <vfprintf+0x146>
    2796:	69 2d       	mov	r22, r9
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <vfprintf+0x14a>
    279c:	6f ef       	ldi	r22, 0xFF	; 255
    279e:	7f ef       	ldi	r23, 0xFF	; 255
    27a0:	c5 01       	movw	r24, r10
    27a2:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <strnlen>
    27a6:	4c 01       	movw	r8, r24
    27a8:	82 01       	movw	r16, r4
    27aa:	f3 2d       	mov	r31, r3
    27ac:	ff 77       	andi	r31, 0x7F	; 127
    27ae:	3f 2e       	mov	r3, r31
    27b0:	16 c0       	rjmp	.+44     	; 0x27de <vfprintf+0x188>
    27b2:	28 01       	movw	r4, r16
    27b4:	22 e0       	ldi	r18, 0x02	; 2
    27b6:	42 0e       	add	r4, r18
    27b8:	51 1c       	adc	r5, r1
    27ba:	f8 01       	movw	r30, r16
    27bc:	a0 80       	ld	r10, Z
    27be:	b1 80       	ldd	r11, Z+1	; 0x01
    27c0:	36 fe       	sbrs	r3, 6
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x174>
    27c4:	69 2d       	mov	r22, r9
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x178>
    27ca:	6f ef       	ldi	r22, 0xFF	; 255
    27cc:	7f ef       	ldi	r23, 0xFF	; 255
    27ce:	c5 01       	movw	r24, r10
    27d0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <strnlen_P>
    27d4:	4c 01       	movw	r8, r24
    27d6:	f3 2d       	mov	r31, r3
    27d8:	f0 68       	ori	r31, 0x80	; 128
    27da:	3f 2e       	mov	r3, r31
    27dc:	82 01       	movw	r16, r4
    27de:	33 fc       	sbrc	r3, 3
    27e0:	1b c0       	rjmp	.+54     	; 0x2818 <vfprintf+0x1c2>
    27e2:	82 2d       	mov	r24, r2
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	88 16       	cp	r8, r24
    27e8:	99 06       	cpc	r9, r25
    27ea:	b0 f4       	brcc	.+44     	; 0x2818 <vfprintf+0x1c2>
    27ec:	b6 01       	movw	r22, r12
    27ee:	80 e2       	ldi	r24, 0x20	; 32
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    27f6:	2a 94       	dec	r2
    27f8:	f4 cf       	rjmp	.-24     	; 0x27e2 <vfprintf+0x18c>
    27fa:	f5 01       	movw	r30, r10
    27fc:	37 fc       	sbrc	r3, 7
    27fe:	85 91       	lpm	r24, Z+
    2800:	37 fe       	sbrs	r3, 7
    2802:	81 91       	ld	r24, Z+
    2804:	5f 01       	movw	r10, r30
    2806:	b6 01       	movw	r22, r12
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    280e:	21 10       	cpse	r2, r1
    2810:	2a 94       	dec	r2
    2812:	21 e0       	ldi	r18, 0x01	; 1
    2814:	82 1a       	sub	r8, r18
    2816:	91 08       	sbc	r9, r1
    2818:	81 14       	cp	r8, r1
    281a:	91 04       	cpc	r9, r1
    281c:	71 f7       	brne	.-36     	; 0x27fa <vfprintf+0x1a4>
    281e:	e8 c0       	rjmp	.+464    	; 0x29f0 <vfprintf+0x39a>
    2820:	84 36       	cpi	r24, 0x64	; 100
    2822:	11 f0       	breq	.+4      	; 0x2828 <vfprintf+0x1d2>
    2824:	89 36       	cpi	r24, 0x69	; 105
    2826:	41 f5       	brne	.+80     	; 0x2878 <vfprintf+0x222>
    2828:	f8 01       	movw	r30, r16
    282a:	37 fe       	sbrs	r3, 7
    282c:	07 c0       	rjmp	.+14     	; 0x283c <vfprintf+0x1e6>
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	0c 5f       	subi	r16, 0xFC	; 252
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	08 c0       	rjmp	.+16     	; 0x284c <vfprintf+0x1f6>
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	07 2e       	mov	r0, r23
    2842:	00 0c       	add	r0, r0
    2844:	88 0b       	sbc	r24, r24
    2846:	99 0b       	sbc	r25, r25
    2848:	0e 5f       	subi	r16, 0xFE	; 254
    284a:	1f 4f       	sbci	r17, 0xFF	; 255
    284c:	f3 2d       	mov	r31, r3
    284e:	ff 76       	andi	r31, 0x6F	; 111
    2850:	3f 2e       	mov	r3, r31
    2852:	97 ff       	sbrs	r25, 7
    2854:	09 c0       	rjmp	.+18     	; 0x2868 <vfprintf+0x212>
    2856:	90 95       	com	r25
    2858:	80 95       	com	r24
    285a:	70 95       	com	r23
    285c:	61 95       	neg	r22
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	f0 68       	ori	r31, 0x80	; 128
    2866:	3f 2e       	mov	r3, r31
    2868:	2a e0       	ldi	r18, 0x0A	; 10
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	a3 01       	movw	r20, r6
    286e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__ultoa_invert>
    2872:	88 2e       	mov	r8, r24
    2874:	86 18       	sub	r8, r6
    2876:	45 c0       	rjmp	.+138    	; 0x2902 <vfprintf+0x2ac>
    2878:	85 37       	cpi	r24, 0x75	; 117
    287a:	31 f4       	brne	.+12     	; 0x2888 <vfprintf+0x232>
    287c:	23 2d       	mov	r18, r3
    287e:	2f 7e       	andi	r18, 0xEF	; 239
    2880:	b2 2e       	mov	r11, r18
    2882:	2a e0       	ldi	r18, 0x0A	; 10
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	25 c0       	rjmp	.+74     	; 0x28d2 <vfprintf+0x27c>
    2888:	93 2d       	mov	r25, r3
    288a:	99 7f       	andi	r25, 0xF9	; 249
    288c:	b9 2e       	mov	r11, r25
    288e:	8f 36       	cpi	r24, 0x6F	; 111
    2890:	c1 f0       	breq	.+48     	; 0x28c2 <vfprintf+0x26c>
    2892:	18 f4       	brcc	.+6      	; 0x289a <vfprintf+0x244>
    2894:	88 35       	cpi	r24, 0x58	; 88
    2896:	79 f0       	breq	.+30     	; 0x28b6 <vfprintf+0x260>
    2898:	b5 c0       	rjmp	.+362    	; 0x2a04 <vfprintf+0x3ae>
    289a:	80 37       	cpi	r24, 0x70	; 112
    289c:	19 f0       	breq	.+6      	; 0x28a4 <vfprintf+0x24e>
    289e:	88 37       	cpi	r24, 0x78	; 120
    28a0:	21 f0       	breq	.+8      	; 0x28aa <vfprintf+0x254>
    28a2:	b0 c0       	rjmp	.+352    	; 0x2a04 <vfprintf+0x3ae>
    28a4:	e9 2f       	mov	r30, r25
    28a6:	e0 61       	ori	r30, 0x10	; 16
    28a8:	be 2e       	mov	r11, r30
    28aa:	b4 fe       	sbrs	r11, 4
    28ac:	0d c0       	rjmp	.+26     	; 0x28c8 <vfprintf+0x272>
    28ae:	fb 2d       	mov	r31, r11
    28b0:	f4 60       	ori	r31, 0x04	; 4
    28b2:	bf 2e       	mov	r11, r31
    28b4:	09 c0       	rjmp	.+18     	; 0x28c8 <vfprintf+0x272>
    28b6:	34 fe       	sbrs	r3, 4
    28b8:	0a c0       	rjmp	.+20     	; 0x28ce <vfprintf+0x278>
    28ba:	29 2f       	mov	r18, r25
    28bc:	26 60       	ori	r18, 0x06	; 6
    28be:	b2 2e       	mov	r11, r18
    28c0:	06 c0       	rjmp	.+12     	; 0x28ce <vfprintf+0x278>
    28c2:	28 e0       	ldi	r18, 0x08	; 8
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	05 c0       	rjmp	.+10     	; 0x28d2 <vfprintf+0x27c>
    28c8:	20 e1       	ldi	r18, 0x10	; 16
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <vfprintf+0x27c>
    28ce:	20 e1       	ldi	r18, 0x10	; 16
    28d0:	32 e0       	ldi	r19, 0x02	; 2
    28d2:	f8 01       	movw	r30, r16
    28d4:	b7 fe       	sbrs	r11, 7
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <vfprintf+0x290>
    28d8:	60 81       	ld	r22, Z
    28da:	71 81       	ldd	r23, Z+1	; 0x01
    28dc:	82 81       	ldd	r24, Z+2	; 0x02
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	0c 5f       	subi	r16, 0xFC	; 252
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	06 c0       	rjmp	.+12     	; 0x28f2 <vfprintf+0x29c>
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	0e 5f       	subi	r16, 0xFE	; 254
    28f0:	1f 4f       	sbci	r17, 0xFF	; 255
    28f2:	a3 01       	movw	r20, r6
    28f4:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__ultoa_invert>
    28f8:	88 2e       	mov	r8, r24
    28fa:	86 18       	sub	r8, r6
    28fc:	fb 2d       	mov	r31, r11
    28fe:	ff 77       	andi	r31, 0x7F	; 127
    2900:	3f 2e       	mov	r3, r31
    2902:	36 fe       	sbrs	r3, 6
    2904:	0d c0       	rjmp	.+26     	; 0x2920 <vfprintf+0x2ca>
    2906:	23 2d       	mov	r18, r3
    2908:	2e 7f       	andi	r18, 0xFE	; 254
    290a:	a2 2e       	mov	r10, r18
    290c:	89 14       	cp	r8, r9
    290e:	58 f4       	brcc	.+22     	; 0x2926 <vfprintf+0x2d0>
    2910:	34 fe       	sbrs	r3, 4
    2912:	0b c0       	rjmp	.+22     	; 0x292a <vfprintf+0x2d4>
    2914:	32 fc       	sbrc	r3, 2
    2916:	09 c0       	rjmp	.+18     	; 0x292a <vfprintf+0x2d4>
    2918:	83 2d       	mov	r24, r3
    291a:	8e 7e       	andi	r24, 0xEE	; 238
    291c:	a8 2e       	mov	r10, r24
    291e:	05 c0       	rjmp	.+10     	; 0x292a <vfprintf+0x2d4>
    2920:	b8 2c       	mov	r11, r8
    2922:	a3 2c       	mov	r10, r3
    2924:	03 c0       	rjmp	.+6      	; 0x292c <vfprintf+0x2d6>
    2926:	b8 2c       	mov	r11, r8
    2928:	01 c0       	rjmp	.+2      	; 0x292c <vfprintf+0x2d6>
    292a:	b9 2c       	mov	r11, r9
    292c:	a4 fe       	sbrs	r10, 4
    292e:	0f c0       	rjmp	.+30     	; 0x294e <vfprintf+0x2f8>
    2930:	fe 01       	movw	r30, r28
    2932:	e8 0d       	add	r30, r8
    2934:	f1 1d       	adc	r31, r1
    2936:	80 81       	ld	r24, Z
    2938:	80 33       	cpi	r24, 0x30	; 48
    293a:	21 f4       	brne	.+8      	; 0x2944 <vfprintf+0x2ee>
    293c:	9a 2d       	mov	r25, r10
    293e:	99 7e       	andi	r25, 0xE9	; 233
    2940:	a9 2e       	mov	r10, r25
    2942:	09 c0       	rjmp	.+18     	; 0x2956 <vfprintf+0x300>
    2944:	a2 fe       	sbrs	r10, 2
    2946:	06 c0       	rjmp	.+12     	; 0x2954 <vfprintf+0x2fe>
    2948:	b3 94       	inc	r11
    294a:	b3 94       	inc	r11
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <vfprintf+0x300>
    294e:	8a 2d       	mov	r24, r10
    2950:	86 78       	andi	r24, 0x86	; 134
    2952:	09 f0       	breq	.+2      	; 0x2956 <vfprintf+0x300>
    2954:	b3 94       	inc	r11
    2956:	a3 fc       	sbrc	r10, 3
    2958:	11 c0       	rjmp	.+34     	; 0x297c <vfprintf+0x326>
    295a:	a0 fe       	sbrs	r10, 0
    295c:	06 c0       	rjmp	.+12     	; 0x296a <vfprintf+0x314>
    295e:	b2 14       	cp	r11, r2
    2960:	88 f4       	brcc	.+34     	; 0x2984 <vfprintf+0x32e>
    2962:	28 0c       	add	r2, r8
    2964:	92 2c       	mov	r9, r2
    2966:	9b 18       	sub	r9, r11
    2968:	0e c0       	rjmp	.+28     	; 0x2986 <vfprintf+0x330>
    296a:	b2 14       	cp	r11, r2
    296c:	60 f4       	brcc	.+24     	; 0x2986 <vfprintf+0x330>
    296e:	b6 01       	movw	r22, r12
    2970:	80 e2       	ldi	r24, 0x20	; 32
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2978:	b3 94       	inc	r11
    297a:	f7 cf       	rjmp	.-18     	; 0x296a <vfprintf+0x314>
    297c:	b2 14       	cp	r11, r2
    297e:	18 f4       	brcc	.+6      	; 0x2986 <vfprintf+0x330>
    2980:	2b 18       	sub	r2, r11
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <vfprintf+0x332>
    2984:	98 2c       	mov	r9, r8
    2986:	21 2c       	mov	r2, r1
    2988:	a4 fe       	sbrs	r10, 4
    298a:	10 c0       	rjmp	.+32     	; 0x29ac <vfprintf+0x356>
    298c:	b6 01       	movw	r22, r12
    298e:	80 e3       	ldi	r24, 0x30	; 48
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2996:	a2 fe       	sbrs	r10, 2
    2998:	17 c0       	rjmp	.+46     	; 0x29c8 <vfprintf+0x372>
    299a:	a1 fc       	sbrc	r10, 1
    299c:	03 c0       	rjmp	.+6      	; 0x29a4 <vfprintf+0x34e>
    299e:	88 e7       	ldi	r24, 0x78	; 120
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <vfprintf+0x352>
    29a4:	88 e5       	ldi	r24, 0x58	; 88
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	b6 01       	movw	r22, r12
    29aa:	0c c0       	rjmp	.+24     	; 0x29c4 <vfprintf+0x36e>
    29ac:	8a 2d       	mov	r24, r10
    29ae:	86 78       	andi	r24, 0x86	; 134
    29b0:	59 f0       	breq	.+22     	; 0x29c8 <vfprintf+0x372>
    29b2:	a1 fe       	sbrs	r10, 1
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <vfprintf+0x364>
    29b6:	8b e2       	ldi	r24, 0x2B	; 43
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <vfprintf+0x366>
    29ba:	80 e2       	ldi	r24, 0x20	; 32
    29bc:	a7 fc       	sbrc	r10, 7
    29be:	8d e2       	ldi	r24, 0x2D	; 45
    29c0:	b6 01       	movw	r22, r12
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    29c8:	89 14       	cp	r8, r9
    29ca:	38 f4       	brcc	.+14     	; 0x29da <vfprintf+0x384>
    29cc:	b6 01       	movw	r22, r12
    29ce:	80 e3       	ldi	r24, 0x30	; 48
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    29d6:	9a 94       	dec	r9
    29d8:	f7 cf       	rjmp	.-18     	; 0x29c8 <vfprintf+0x372>
    29da:	8a 94       	dec	r8
    29dc:	f3 01       	movw	r30, r6
    29de:	e8 0d       	add	r30, r8
    29e0:	f1 1d       	adc	r31, r1
    29e2:	80 81       	ld	r24, Z
    29e4:	b6 01       	movw	r22, r12
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    29ec:	81 10       	cpse	r8, r1
    29ee:	f5 cf       	rjmp	.-22     	; 0x29da <vfprintf+0x384>
    29f0:	22 20       	and	r2, r2
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <vfprintf+0x3a0>
    29f4:	42 ce       	rjmp	.-892    	; 0x267a <vfprintf+0x24>
    29f6:	b6 01       	movw	r22, r12
    29f8:	80 e2       	ldi	r24, 0x20	; 32
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 22 15 	call	0x2a44	; 0x2a44 <fputc>
    2a00:	2a 94       	dec	r2
    2a02:	f6 cf       	rjmp	.-20     	; 0x29f0 <vfprintf+0x39a>
    2a04:	f6 01       	movw	r30, r12
    2a06:	86 81       	ldd	r24, Z+6	; 0x06
    2a08:	97 81       	ldd	r25, Z+7	; 0x07
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <vfprintf+0x3ba>
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	9f ef       	ldi	r25, 0xFF	; 255
    2a10:	2b 96       	adiw	r28, 0x0b	; 11
    2a12:	e2 e1       	ldi	r30, 0x12	; 18
    2a14:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__epilogue_restores__>

00002a18 <strnlen_P>:
    2a18:	fc 01       	movw	r30, r24
    2a1a:	05 90       	lpm	r0, Z+
    2a1c:	61 50       	subi	r22, 0x01	; 1
    2a1e:	70 40       	sbci	r23, 0x00	; 0
    2a20:	01 10       	cpse	r0, r1
    2a22:	d8 f7       	brcc	.-10     	; 0x2a1a <strnlen_P+0x2>
    2a24:	80 95       	com	r24
    2a26:	90 95       	com	r25
    2a28:	8e 0f       	add	r24, r30
    2a2a:	9f 1f       	adc	r25, r31
    2a2c:	08 95       	ret

00002a2e <strnlen>:
    2a2e:	fc 01       	movw	r30, r24
    2a30:	61 50       	subi	r22, 0x01	; 1
    2a32:	70 40       	sbci	r23, 0x00	; 0
    2a34:	01 90       	ld	r0, Z+
    2a36:	01 10       	cpse	r0, r1
    2a38:	d8 f7       	brcc	.-10     	; 0x2a30 <strnlen+0x2>
    2a3a:	80 95       	com	r24
    2a3c:	90 95       	com	r25
    2a3e:	8e 0f       	add	r24, r30
    2a40:	9f 1f       	adc	r25, r31
    2a42:	08 95       	ret

00002a44 <fputc>:
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	fb 01       	movw	r30, r22
    2a4e:	23 81       	ldd	r18, Z+3	; 0x03
    2a50:	21 fd       	sbrc	r18, 1
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <fputc+0x16>
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	9f ef       	ldi	r25, 0xFF	; 255
    2a58:	2c c0       	rjmp	.+88     	; 0x2ab2 <fputc+0x6e>
    2a5a:	22 ff       	sbrs	r18, 2
    2a5c:	16 c0       	rjmp	.+44     	; 0x2a8a <fputc+0x46>
    2a5e:	46 81       	ldd	r20, Z+6	; 0x06
    2a60:	57 81       	ldd	r21, Z+7	; 0x07
    2a62:	24 81       	ldd	r18, Z+4	; 0x04
    2a64:	35 81       	ldd	r19, Z+5	; 0x05
    2a66:	42 17       	cp	r20, r18
    2a68:	53 07       	cpc	r21, r19
    2a6a:	44 f4       	brge	.+16     	; 0x2a7c <fputc+0x38>
    2a6c:	a0 81       	ld	r26, Z
    2a6e:	b1 81       	ldd	r27, Z+1	; 0x01
    2a70:	9d 01       	movw	r18, r26
    2a72:	2f 5f       	subi	r18, 0xFF	; 255
    2a74:	3f 4f       	sbci	r19, 0xFF	; 255
    2a76:	31 83       	std	Z+1, r19	; 0x01
    2a78:	20 83       	st	Z, r18
    2a7a:	8c 93       	st	X, r24
    2a7c:	26 81       	ldd	r18, Z+6	; 0x06
    2a7e:	37 81       	ldd	r19, Z+7	; 0x07
    2a80:	2f 5f       	subi	r18, 0xFF	; 255
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
    2a84:	37 83       	std	Z+7, r19	; 0x07
    2a86:	26 83       	std	Z+6, r18	; 0x06
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <fputc+0x6e>
    2a8a:	8b 01       	movw	r16, r22
    2a8c:	ec 01       	movw	r28, r24
    2a8e:	fb 01       	movw	r30, r22
    2a90:	00 84       	ldd	r0, Z+8	; 0x08
    2a92:	f1 85       	ldd	r31, Z+9	; 0x09
    2a94:	e0 2d       	mov	r30, r0
    2a96:	09 95       	icall
    2a98:	89 2b       	or	r24, r25
    2a9a:	e1 f6       	brne	.-72     	; 0x2a54 <fputc+0x10>
    2a9c:	d8 01       	movw	r26, r16
    2a9e:	16 96       	adiw	r26, 0x06	; 6
    2aa0:	8d 91       	ld	r24, X+
    2aa2:	9c 91       	ld	r25, X
    2aa4:	17 97       	sbiw	r26, 0x07	; 7
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	17 96       	adiw	r26, 0x07	; 7
    2aaa:	9c 93       	st	X, r25
    2aac:	8e 93       	st	-X, r24
    2aae:	16 97       	sbiw	r26, 0x06	; 6
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	08 95       	ret

00002abc <__ultoa_invert>:
    2abc:	fa 01       	movw	r30, r20
    2abe:	aa 27       	eor	r26, r26
    2ac0:	28 30       	cpi	r18, 0x08	; 8
    2ac2:	51 f1       	breq	.+84     	; 0x2b18 <__ultoa_invert+0x5c>
    2ac4:	20 31       	cpi	r18, 0x10	; 16
    2ac6:	81 f1       	breq	.+96     	; 0x2b28 <__ultoa_invert+0x6c>
    2ac8:	e8 94       	clt
    2aca:	6f 93       	push	r22
    2acc:	6e 7f       	andi	r22, 0xFE	; 254
    2ace:	6e 5f       	subi	r22, 0xFE	; 254
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	af 4f       	sbci	r26, 0xFF	; 255
    2ad8:	b1 e0       	ldi	r27, 0x01	; 1
    2ada:	3e d0       	rcall	.+124    	; 0x2b58 <__ultoa_invert+0x9c>
    2adc:	b4 e0       	ldi	r27, 0x04	; 4
    2ade:	3c d0       	rcall	.+120    	; 0x2b58 <__ultoa_invert+0x9c>
    2ae0:	67 0f       	add	r22, r23
    2ae2:	78 1f       	adc	r23, r24
    2ae4:	89 1f       	adc	r24, r25
    2ae6:	9a 1f       	adc	r25, r26
    2ae8:	a1 1d       	adc	r26, r1
    2aea:	68 0f       	add	r22, r24
    2aec:	79 1f       	adc	r23, r25
    2aee:	8a 1f       	adc	r24, r26
    2af0:	91 1d       	adc	r25, r1
    2af2:	a1 1d       	adc	r26, r1
    2af4:	6a 0f       	add	r22, r26
    2af6:	71 1d       	adc	r23, r1
    2af8:	81 1d       	adc	r24, r1
    2afa:	91 1d       	adc	r25, r1
    2afc:	a1 1d       	adc	r26, r1
    2afe:	20 d0       	rcall	.+64     	; 0x2b40 <__ultoa_invert+0x84>
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <__ultoa_invert+0x48>
    2b02:	68 94       	set
    2b04:	3f 91       	pop	r19
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	26 9f       	mul	r18, r22
    2b0a:	11 24       	eor	r1, r1
    2b0c:	30 19       	sub	r19, r0
    2b0e:	30 5d       	subi	r19, 0xD0	; 208
    2b10:	31 93       	st	Z+, r19
    2b12:	de f6       	brtc	.-74     	; 0x2aca <__ultoa_invert+0xe>
    2b14:	cf 01       	movw	r24, r30
    2b16:	08 95       	ret
    2b18:	46 2f       	mov	r20, r22
    2b1a:	47 70       	andi	r20, 0x07	; 7
    2b1c:	40 5d       	subi	r20, 0xD0	; 208
    2b1e:	41 93       	st	Z+, r20
    2b20:	b3 e0       	ldi	r27, 0x03	; 3
    2b22:	0f d0       	rcall	.+30     	; 0x2b42 <__ultoa_invert+0x86>
    2b24:	c9 f7       	brne	.-14     	; 0x2b18 <__ultoa_invert+0x5c>
    2b26:	f6 cf       	rjmp	.-20     	; 0x2b14 <__ultoa_invert+0x58>
    2b28:	46 2f       	mov	r20, r22
    2b2a:	4f 70       	andi	r20, 0x0F	; 15
    2b2c:	40 5d       	subi	r20, 0xD0	; 208
    2b2e:	4a 33       	cpi	r20, 0x3A	; 58
    2b30:	18 f0       	brcs	.+6      	; 0x2b38 <__ultoa_invert+0x7c>
    2b32:	49 5d       	subi	r20, 0xD9	; 217
    2b34:	31 fd       	sbrc	r19, 1
    2b36:	40 52       	subi	r20, 0x20	; 32
    2b38:	41 93       	st	Z+, r20
    2b3a:	02 d0       	rcall	.+4      	; 0x2b40 <__ultoa_invert+0x84>
    2b3c:	a9 f7       	brne	.-22     	; 0x2b28 <__ultoa_invert+0x6c>
    2b3e:	ea cf       	rjmp	.-44     	; 0x2b14 <__ultoa_invert+0x58>
    2b40:	b4 e0       	ldi	r27, 0x04	; 4
    2b42:	a6 95       	lsr	r26
    2b44:	97 95       	ror	r25
    2b46:	87 95       	ror	r24
    2b48:	77 95       	ror	r23
    2b4a:	67 95       	ror	r22
    2b4c:	ba 95       	dec	r27
    2b4e:	c9 f7       	brne	.-14     	; 0x2b42 <__ultoa_invert+0x86>
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	61 05       	cpc	r22, r1
    2b54:	71 05       	cpc	r23, r1
    2b56:	08 95       	ret
    2b58:	9b 01       	movw	r18, r22
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	0a 2e       	mov	r0, r26
    2b5e:	06 94       	lsr	r0
    2b60:	57 95       	ror	r21
    2b62:	47 95       	ror	r20
    2b64:	37 95       	ror	r19
    2b66:	27 95       	ror	r18
    2b68:	ba 95       	dec	r27
    2b6a:	c9 f7       	brne	.-14     	; 0x2b5e <__ultoa_invert+0xa2>
    2b6c:	62 0f       	add	r22, r18
    2b6e:	73 1f       	adc	r23, r19
    2b70:	84 1f       	adc	r24, r20
    2b72:	95 1f       	adc	r25, r21
    2b74:	a0 1d       	adc	r26, r0
    2b76:	08 95       	ret

00002b78 <eeprom_read_byte>:
    2b78:	f9 99       	sbic	0x1f, 1	; 31
    2b7a:	fe cf       	rjmp	.-4      	; 0x2b78 <eeprom_read_byte>
    2b7c:	92 bd       	out	0x22, r25	; 34
    2b7e:	81 bd       	out	0x21, r24	; 33
    2b80:	f8 9a       	sbi	0x1f, 0	; 31
    2b82:	99 27       	eor	r25, r25
    2b84:	80 b5       	in	r24, 0x20	; 32
    2b86:	08 95       	ret

00002b88 <eeprom_read_dword>:
    2b88:	a6 e1       	ldi	r26, 0x16	; 22
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	44 e0       	ldi	r20, 0x04	; 4
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <eeprom_read_blraw>

00002b94 <eeprom_read_word>:
    2b94:	a8 e1       	ldi	r26, 0x18	; 24
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	42 e0       	ldi	r20, 0x02	; 2
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <eeprom_read_blraw>

00002ba0 <eeprom_write_byte>:
    2ba0:	26 2f       	mov	r18, r22

00002ba2 <eeprom_write_r18>:
    2ba2:	f9 99       	sbic	0x1f, 1	; 31
    2ba4:	fe cf       	rjmp	.-4      	; 0x2ba2 <eeprom_write_r18>
    2ba6:	1f ba       	out	0x1f, r1	; 31
    2ba8:	92 bd       	out	0x22, r25	; 34
    2baa:	81 bd       	out	0x21, r24	; 33
    2bac:	20 bd       	out	0x20, r18	; 32
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	fa 9a       	sbi	0x1f, 2	; 31
    2bb4:	f9 9a       	sbi	0x1f, 1	; 31
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	01 96       	adiw	r24, 0x01	; 1
    2bba:	08 95       	ret

00002bbc <eeprom_write_dword>:
    2bbc:	24 2f       	mov	r18, r20
    2bbe:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <eeprom_write_r18>
    2bc2:	25 2f       	mov	r18, r21
    2bc4:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <eeprom_write_r18>
    2bc8:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <eeprom_write_word>

00002bcc <eeprom_write_word>:
    2bcc:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <eeprom_write_byte>
    2bd0:	27 2f       	mov	r18, r23
    2bd2:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <eeprom_write_r18>

00002bd6 <eeprom_read_block>:
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22

00002bda <eeprom_read_blraw>:
    2bda:	fc 01       	movw	r30, r24
    2bdc:	f9 99       	sbic	0x1f, 1	; 31
    2bde:	fe cf       	rjmp	.-4      	; 0x2bdc <eeprom_read_blraw+0x2>
    2be0:	06 c0       	rjmp	.+12     	; 0x2bee <eeprom_read_blraw+0x14>
    2be2:	f2 bd       	out	0x22, r31	; 34
    2be4:	e1 bd       	out	0x21, r30	; 33
    2be6:	f8 9a       	sbi	0x1f, 0	; 31
    2be8:	31 96       	adiw	r30, 0x01	; 1
    2bea:	00 b4       	in	r0, 0x20	; 32
    2bec:	0d 92       	st	X+, r0
    2bee:	41 50       	subi	r20, 0x01	; 1
    2bf0:	50 40       	sbci	r21, 0x00	; 0
    2bf2:	b8 f7       	brcc	.-18     	; 0x2be2 <eeprom_read_blraw+0x8>
    2bf4:	08 95       	ret

00002bf6 <__prologue_saves__>:
    2bf6:	2f 92       	push	r2
    2bf8:	3f 92       	push	r3
    2bfa:	4f 92       	push	r4
    2bfc:	5f 92       	push	r5
    2bfe:	6f 92       	push	r6
    2c00:	7f 92       	push	r7
    2c02:	8f 92       	push	r8
    2c04:	9f 92       	push	r9
    2c06:	af 92       	push	r10
    2c08:	bf 92       	push	r11
    2c0a:	cf 92       	push	r12
    2c0c:	df 92       	push	r13
    2c0e:	ef 92       	push	r14
    2c10:	ff 92       	push	r15
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	ca 1b       	sub	r28, r26
    2c20:	db 0b       	sbc	r29, r27
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	09 94       	ijmp

00002c2e <__epilogue_restores__>:
    2c2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2c30:	39 88       	ldd	r3, Y+17	; 0x11
    2c32:	48 88       	ldd	r4, Y+16	; 0x10
    2c34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c40:	b9 84       	ldd	r11, Y+9	; 0x09
    2c42:	c8 84       	ldd	r12, Y+8	; 0x08
    2c44:	df 80       	ldd	r13, Y+7	; 0x07
    2c46:	ee 80       	ldd	r14, Y+6	; 0x06
    2c48:	fd 80       	ldd	r15, Y+5	; 0x05
    2c4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2c4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2c4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2c50:	b9 81       	ldd	r27, Y+1	; 0x01
    2c52:	ce 0f       	add	r28, r30
    2c54:	d1 1d       	adc	r29, r1
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	ed 01       	movw	r28, r26
    2c62:	08 95       	ret

00002c64 <_exit>:
    2c64:	f8 94       	cli

00002c66 <__stop_program>:
    2c66:	ff cf       	rjmp	.-2      	; 0x2c66 <__stop_program>
