
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00003524  000035b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  0080019c  0080019c  00003654  2**0
                  ALLOC
  3 .stab         0000bdb4  00000000  00000000  00003654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f3c  00000000  00000000  0000f408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012344  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012358  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  00012398  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2a  00000000  00000000  00012478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  000131a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004fa  00000000  00000000  00013a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  00013f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__vector_18>
      4c:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e4 e2       	ldi	r30, 0x24	; 36
      ce:	f5 e3       	ldi	r31, 0x35	; 53
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a2 3c       	cpi	r26, 0xC2	; 194
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
      f0:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
    host_active = 0;
     1ae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
    lockout_active = 0;
     1b2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    status_byt = 0;
     1b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
    test_mode = 0;
     1d2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     1e2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
    uart_output = 0;
     1e6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1ea:	0e 94 84 13 	call	0x2708	; 0x2708 <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
     1ee:	80 e4       	ldi	r24, 0x40	; 64
     1f0:	0e 94 c1 12 	call	0x2582	; 0x2582 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <enable_ADC_auto_conversion>
    adc_started_at = millis();
     1fa:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     1fe:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <adc_started_at>
     202:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <adc_started_at+0x1>
     206:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <adc_started_at+0x2>
     20a:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <adc_started_at+0x3>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20e:	60 e9       	ldi	r22, 0x90	; 144
     210:	70 ed       	ldi	r23, 0xD0	; 208
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 35 12 	call	0x246a	; 0x246a <uartstream0_init>
     21a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <__iob+0x1>
     21e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <__iob>
     222:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <__iob+0x3>
     226:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     22a:	89 e2       	ldi	r24, 0x29	; 41
     22c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     230:	88 ef       	ldi	r24, 0xF8	; 248
     232:	9a e0       	ldi	r25, 0x0A	; 10
     234:	0e 94 0a 14 	call	0x2814	; 0x2814 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     238:	8b eb       	ldi	r24, 0xBB	; 187
     23a:	9a e0       	ldi	r25, 0x0A	; 10
     23c:	0e 94 05 14 	call	0x280a	; 0x280a <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 ca 13 	call	0x2794	; 0x2794 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     246:	8a e2       	ldi	r24, 0x2A	; 42
     248:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     24c:	84 e8       	ldi	r24, 0x84	; 132
     24e:	9b e0       	ldi	r25, 0x0B	; 11
     250:	0e 94 94 15 	call	0x2b28	; 0x2b28 <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     254:	8b e0       	ldi	r24, 0x0B	; 11
     256:	9b e0       	ldi	r25, 0x0B	; 11
     258:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     262:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f eb       	ldi	r18, 0xBF	; 191
     266:	84 ed       	ldi	r24, 0xD4	; 212
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <setup+0x172>
     272:	00 c0       	rjmp	.+0      	; 0x274 <setup+0x17c>
     274:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     276:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     278:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     27a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
     27e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
     282:	0e 94 b6 0b 	call	0x176c	; 0x176c <check_for_eeprom_id>
     286:	88 23       	and	r24, r24
     288:	29 f0       	breq	.+10     	; 0x294 <setup+0x19c>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <eeprom_read_byte>
     292:	01 c0       	rjmp	.+2      	; 0x296 <setup+0x19e>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     29a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
     29e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LoadBatLimitsFromEEPROM>

    // load Day-Night state machien values from EEPROM (or set defaults)
    LoadDayNightValuesFromEEPROM();
     2a2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LoadDayNightValuesFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     2a6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     2aa:	88 60       	ori	r24, 0x08	; 8
     2ac:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     2b0:	08 95       	ret

000002b2 <main>:
#endif
}

int main(void)
{
    setup();
     2b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2b6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     2ba:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     2be:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     2c2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     2c6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>

    while (1) // scan time for each loop varies depending on how much of each thing needs to be done 
    {
        if (!test_mode) 
     2ca:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
     2ce:	81 11       	cpse	r24, r1
     2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <main+0x34>
        {
            blink_on_activate();
     2d2:	0e 94 1a 02 	call	0x434	; 0x434 <blink_on_activate>
            check_Bootload_Time();
     2d6:	0e 94 c9 02 	call	0x592	; 0x592 <check_Bootload_Time>
            check_DTR();
     2da:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <check_DTR>
            check_lockout();
     2de:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <check_lockout>
            check_shutdown();
     2e2:	0e 94 1b 03 	call	0x636	; 0x636 <check_shutdown>
        }
        if(write_rpu_address_to_eeprom) save_rpu_addr_state();
     2e6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
     2ea:	81 11       	cpse	r24, r1
     2ec:	0e 94 8d 0b 	call	0x171a	; 0x171a <save_rpu_addr_state>
        check_uart();
     2f0:	0e 94 26 04 	call	0x84c	; 0x84c <check_uart>
        adc_burst();
     2f4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <adc_burst>
        if (ref_loaded > REF_DEFAULT) CalReferancesFromI2CtoEE();
     2f8:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	10 f0       	brcs	.+4      	; 0x304 <main+0x52>
     300:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <CalReferancesFromI2CtoEE>
        if (bat_limit_loaded > BAT_LIM_DEFAULT) BatLimitsFromI2CtoEE();
     304:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	10 f0       	brcs	.+4      	; 0x310 <main+0x5e>
     30c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <BatLimitsFromI2CtoEE>
        check_if_alt_should_be_on();
     310:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <check_if_alt_should_be_on>
        if (daynight_values_loaded > DAYNIGHT_VALUES_DEFAULT) DayNightValuesFromI2CtoEE();
     314:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	10 f0       	brcs	.+4      	; 0x320 <main+0x6e>
     31c:	0e 94 33 10 	call	0x2066	; 0x2066 <DayNightValuesFromI2CtoEE>
        check_daynight();
     320:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <check_daynight>
        if (smbus_has_numBytes_to_handle) handle_smbus_receive();
     324:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
     328:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     32c:	89 2b       	or	r24, r25
     32e:	69 f2       	breq	.-102    	; 0x2ca <main+0x18>
     330:	0e 94 14 0b 	call	0x1628	; 0x1628 <handle_smbus_receive>
     334:	ca cf       	rjmp	.-108    	; 0x2ca <main+0x18>

00000336 <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     336:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     33a:	88 23       	and	r24, r24
     33c:	c1 f0       	breq	.+48     	; 0x36e <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     33e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     340:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     342:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     344:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     346:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     348:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     34a:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     34c:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     34e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     352:	88 23       	and	r24, r24
     354:	21 f0       	breq	.+8      	; 0x35e <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     356:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     358:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     35a:	5d 9a       	sbi	0x0b, 5	; 11
     35c:	03 c0       	rjmp	.+6      	; 0x364 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35e:	8f b7       	in	r24, 0x3f	; 63
     360:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     362:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     364:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     366:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     368:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     36a:	42 9a       	sbi	0x08, 2	; 8
     36c:	17 c0       	rjmp	.+46     	; 0x39c <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     36e:	8f b7       	in	r24, 0x3f	; 63
     370:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     372:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     374:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     376:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     378:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     37a:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     37c:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     37e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     382:	88 23       	and	r24, r24
     384:	21 f0       	breq	.+8      	; 0x38e <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     386:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     388:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     38a:	5d 9a       	sbi	0x0b, 5	; 11
     38c:	03 c0       	rjmp	.+6      	; 0x394 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     38e:	8f b7       	in	r24, 0x3f	; 63
     390:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     392:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     394:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     396:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     398:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     39a:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     39c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     39e:	08 95       	ret

000003a0 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     3a0:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3a4:	88 23       	and	r24, r24
     3a6:	81 f0       	breq	.+32     	; 0x3c8 <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3aa:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ac:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ae:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3b4:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ba:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3bc:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3be:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3c4:	42 9a       	sbi	0x08, 2	; 8
     3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c8:	8f b7       	in	r24, 0x3f	; 63
     3ca:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3cc:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ce:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3d4:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3da:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3dc:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3de:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3e4:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e6:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3e8:	08 95       	ret

000003ea <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3ea:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3ee:	88 23       	and	r24, r24
     3f0:	81 f0       	breq	.+32     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3f6:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3fa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3fc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3fe:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     400:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     402:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     404:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     406:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     408:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     40a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     40c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     40e:	42 9a       	sbi	0x08, 2	; 8
     410:	0f c0       	rjmp	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     412:	8f b7       	in	r24, 0x3f	; 63
     414:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     416:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     418:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     41a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     41c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     41e:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     420:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     422:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     424:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     426:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     428:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     42a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     42c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     42e:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     430:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     432:	08 95       	ret

00000434 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     438:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     43c:	81 11       	cpse	r24, r1
     43e:	a6 c0       	rjmp	.+332    	; 0x58c <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     440:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     444:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <blink_started_at>
     448:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     44c:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     450:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	80 1b       	sub	r24, r16
     45a:	91 0b       	sbc	r25, r17
     45c:	a2 0b       	sbc	r26, r18
     45e:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     460:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     464:	27 7f       	andi	r18, 0xF7	; 247
     466:	09 f0       	breq	.+2      	; 0x46a <blink_on_activate+0x36>
     468:	6d c0       	rjmp	.+218    	; 0x544 <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     46a:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <host_is_foreign>
     46e:	22 23       	and	r18, r18
     470:	21 f0       	breq	.+8      	; 0x47a <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     472:	b6 95       	lsr	r27
     474:	a7 95       	ror	r26
     476:	97 95       	ror	r25
     478:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     47a:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started>
     47e:	22 23       	and	r18, r18
     480:	e9 f0       	breq	.+58     	; 0x4bc <blink_on_activate+0x88>
     482:	8c 34       	cpi	r24, 0x4C	; 76
     484:	91 05       	cpc	r25, r1
     486:	a1 05       	cpc	r26, r1
     488:	b1 05       	cpc	r27, r1
     48a:	c0 f0       	brcs	.+48     	; 0x4bc <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     48c:	25 9b       	sbis	0x04, 5	; 4
     48e:	09 c0       	rjmp	.+18     	; 0x4a2 <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     490:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     492:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     494:	f8 94       	cli
    {
        if (value_for_bit) 
     496:	95 fd       	sbrc	r25, 5
     498:	02 c0       	rjmp	.+4      	; 0x49e <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     49a:	2d 9a       	sbi	0x05, 5	; 5
     49c:	01 c0       	rjmp	.+2      	; 0x4a0 <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     49e:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4a0:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     4a2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4a6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4aa:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4ae:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4b2:	85 5b       	subi	r24, 0xB5	; 181
     4b4:	9f 4f       	sbci	r25, 0xFF	; 255
     4b6:	af 4f       	sbci	r26, 0xFF	; 255
     4b8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ba:	60 c0       	rjmp	.+192    	; 0x57c <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     4bc:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     4c0:	22 23       	and	r18, r18
     4c2:	f1 f0       	breq	.+60     	; 0x500 <blink_on_activate+0xcc>
     4c4:	81 3d       	cpi	r24, 0xD1	; 209
     4c6:	27 e0       	ldi	r18, 0x07	; 7
     4c8:	92 07       	cpc	r25, r18
     4ca:	a1 05       	cpc	r26, r1
     4cc:	b1 05       	cpc	r27, r1
     4ce:	c0 f0       	brcs	.+48     	; 0x500 <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4d0:	25 9b       	sbis	0x04, 5	; 4
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4d4:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4d6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4d8:	f8 94       	cli
    {
        if (value_for_bit) 
     4da:	95 fd       	sbrc	r25, 5
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     4de:	2d 9a       	sbi	0x05, 5	; 5
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4e2:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4e4:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4e6:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4ea:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4ee:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4f2:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4f6:	80 53       	subi	r24, 0x30	; 48
     4f8:	98 4f       	sbci	r25, 0xF8	; 248
     4fa:	af 4f       	sbci	r26, 0xFF	; 255
     4fc:	bf 4f       	sbci	r27, 0xFF	; 255
     4fe:	3e c0       	rjmp	.+124    	; 0x57c <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     500:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <host_active>
     504:	22 23       	and	r18, r18
     506:	09 f4       	brne	.+2      	; 0x50a <blink_on_activate+0xd6>
     508:	41 c0       	rjmp	.+130    	; 0x58c <blink_on_activate+0x158>
     50a:	85 3f       	cpi	r24, 0xF5	; 245
     50c:	91 40       	sbci	r25, 0x01	; 1
     50e:	a1 05       	cpc	r26, r1
     510:	b1 05       	cpc	r27, r1
     512:	e0 f1       	brcs	.+120    	; 0x58c <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     514:	25 9b       	sbis	0x04, 5	; 4
     516:	09 c0       	rjmp	.+18     	; 0x52a <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     518:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     51a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     51c:	f8 94       	cli
    {
        if (value_for_bit) 
     51e:	95 fd       	sbrc	r25, 5
     520:	02 c0       	rjmp	.+4      	; 0x526 <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     522:	2d 9a       	sbi	0x05, 5	; 5
     524:	01 c0       	rjmp	.+2      	; 0x528 <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     526:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     528:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     52a:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     52e:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     532:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     536:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     53a:	8c 50       	subi	r24, 0x0C	; 12
     53c:	9e 4f       	sbci	r25, 0xFE	; 254
     53e:	af 4f       	sbci	r26, 0xFF	; 255
     540:	bf 4f       	sbci	r27, 0xFF	; 255
     542:	1c c0       	rjmp	.+56     	; 0x57c <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     544:	89 3c       	cpi	r24, 0xC9	; 201
     546:	91 05       	cpc	r25, r1
     548:	a1 05       	cpc	r26, r1
     54a:	b1 05       	cpc	r27, r1
     54c:	f8 f0       	brcs	.+62     	; 0x58c <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     54e:	25 9b       	sbis	0x04, 5	; 4
     550:	09 c0       	rjmp	.+18     	; 0x564 <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     552:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     554:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     556:	f8 94       	cli
    {
        if (value_for_bit) 
     558:	95 fd       	sbrc	r25, 5
     55a:	02 c0       	rjmp	.+4      	; 0x560 <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     55c:	2d 9a       	sbi	0x05, 5	; 5
     55e:	01 c0       	rjmp	.+2      	; 0x562 <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     560:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     562:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     564:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     568:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     56c:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     570:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     574:	88 53       	subi	r24, 0x38	; 56
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	af 4f       	sbci	r26, 0xFF	; 255
     57a:	bf 4f       	sbci	r27, 0xFF	; 255
     57c:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <blink_started_at>
     580:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <blink_started_at+0x1>
     584:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <blink_started_at+0x2>
     588:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <blink_started_at+0x3>
        }
    }
}
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
    if (bootloader_started)
     596:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     59a:	88 23       	and	r24, r24
     59c:	01 f1       	breq	.+64     	; 0x5de <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     59e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     5a2:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5a6:	21 11       	cpse	r18, r1
     5a8:	1a c0       	rjmp	.+52     	; 0x5de <check_Bootload_Time+0x4c>
     5aa:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <bootloader_started_at>
     5ae:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <bootloader_started_at+0x1>
     5b2:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <bootloader_started_at+0x2>
     5b6:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <bootloader_started_at+0x3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	80 1b       	sub	r24, r16
     5c0:	91 0b       	sbc	r25, r17
     5c2:	a2 0b       	sbc	r26, r18
     5c4:	b3 0b       	sbc	r27, r19
     5c6:	89 33       	cpi	r24, 0x39	; 57
     5c8:	91 4c       	sbci	r25, 0xC1	; 193
     5ca:	a1 40       	sbci	r26, 0x01	; 1
     5cc:	b1 05       	cpc	r27, r1
     5ce:	38 f0       	brcs	.+14     	; 0x5de <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     5d0:	0e 94 9b 01 	call	0x336	; 0x336 <connect_normal_mode>
            host_active =1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
            bootloader_started = 0;
     5da:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
        }
    }
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	08 95       	ret

000005e4 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5e8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5ec:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5f0:	21 11       	cpse	r18, r1
     5f2:	1e c0       	rjmp	.+60     	; 0x630 <check_lockout+0x4c>
     5f4:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     5f8:	22 23       	and	r18, r18
     5fa:	d1 f0       	breq	.+52     	; 0x630 <check_lockout+0x4c>
     5fc:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <lockout_started_at>
     600:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <lockout_started_at+0x1>
     604:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <lockout_started_at+0x2>
     608:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <lockout_started_at+0x3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	80 1b       	sub	r24, r16
     612:	91 0b       	sbc	r25, r17
     614:	a2 0b       	sbc	r26, r18
     616:	b3 0b       	sbc	r27, r19
     618:	81 3c       	cpi	r24, 0xC1	; 193
     61a:	94 4d       	sbci	r25, 0xD4	; 212
     61c:	a1 40       	sbci	r26, 0x01	; 1
     61e:	b1 05       	cpc	r27, r1
     620:	38 f0       	brcs	.+14     	; 0x630 <check_lockout+0x4c>
    {
        connect_normal_mode();
     622:	0e 94 9b 01 	call	0x336	; 0x336 <connect_normal_mode>

        host_active = 1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
        lockout_active =0;
     62c:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    }
}
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <check_shutdown>:


void check_shutdown(void)
{
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
    if (shutdown_started)
     63a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_started>
     63e:	88 23       	and	r24, r24
     640:	19 f1       	breq	.+70     	; 0x688 <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     642:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     646:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <shutdown_started_at>
     64a:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <shutdown_started_at+0x1>
     64e:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <shutdown_started_at+0x2>
     652:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <shutdown_started_at+0x3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	80 1b       	sub	r24, r16
     65c:	91 0b       	sbc	r25, r17
     65e:	a2 0b       	sbc	r26, r18
     660:	b3 0b       	sbc	r27, r19
     662:	89 3e       	cpi	r24, 0xE9	; 233
     664:	93 40       	sbci	r25, 0x03	; 3
     666:	a1 05       	cpc	r26, r1
     668:	b1 05       	cpc	r27, r1
     66a:	98 f1       	brcs	.+102    	; 0x6d2 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     66c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     670:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     672:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     674:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     676:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     678:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     67a:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     67c:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <shutdown_detected>
     686:	25 c0       	rjmp	.+74     	; 0x6d2 <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     688:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     68c:	81 11       	cpse	r24, r1
     68e:	21 c0       	rjmp	.+66     	; 0x6d2 <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     690:	18 99       	sbic	0x03, 0	; 3
     692:	1f c0       	rjmp	.+62     	; 0x6d2 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     694:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     696:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     698:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     69a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     69c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     69e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6a0:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6a2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6a4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6a6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     6a8:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6aa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6ac:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6ae:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     6b0:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6b2:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     6b4:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
                shutdown_started_at = millis();
     6be:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     6c2:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
     6c6:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
     6ca:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
     6ce:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
            }
        }
}
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     6d8:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     6dc:	81 11       	cpse	r24, r1
     6de:	b5 c0       	rjmp	.+362    	; 0x84a <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     6e0:	4b 99       	sbic	0x09, 3	; 9
     6e2:	56 c0       	rjmp	.+172    	; 0x790 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6e4:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     6e8:	83 fd       	sbrc	r24, 3
     6ea:	af c0       	rjmp	.+350    	; 0x84a <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     6ec:	4a 9b       	sbis	0x09, 2	; 9
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6f0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6f2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6f4:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6f6:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6f8:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6fa:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     6fe:	81 11       	cpse	r24, r1
     700:	a4 c0       	rjmp	.+328    	; 0x84a <check_DTR+0x172>
     702:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     706:	81 11       	cpse	r24, r1
     708:	a0 c0       	rjmp	.+320    	; 0x84a <check_DTR+0x172>
     70a:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     70e:	81 11       	cpse	r24, r1
     710:	9c c0       	rjmp	.+312    	; 0x84a <check_DTR+0x172>
     712:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     716:	81 11       	cpse	r24, r1
     718:	98 c0       	rjmp	.+304    	; 0x84a <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     71a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     71e:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     722:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     726:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     72a:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     72e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <bootloader_address>
     732:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     736:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     73a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     73e:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	20 95       	com	r18
     746:	30 95       	com	r19
     748:	2a 70       	andi	r18, 0x0A	; 10
     74a:	33 27       	eor	r19, r19
     74c:	64 e0       	ldi	r22, 0x04	; 4
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	6a 95       	dec	r22
     754:	e1 f7       	brne	.-8      	; 0x74e <check_DTR+0x76>
     756:	89 2f       	mov	r24, r25
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	80 95       	com	r24
     75c:	90 95       	com	r25
     75e:	80 75       	andi	r24, 0x50	; 80
     760:	99 27       	eor	r25, r25
     762:	74 e0       	ldi	r23, 0x04	; 4
     764:	95 95       	asr	r25
     766:	87 95       	ror	r24
     768:	7a 95       	dec	r23
     76a:	e1 f7       	brne	.-8      	; 0x764 <check_DTR+0x8c>
     76c:	82 2b       	or	r24, r18
     76e:	93 2b       	or	r25, r19
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	1f 92       	push	r1
     776:	4f 93       	push	r20
     778:	86 e1       	ldi	r24, 0x16	; 22
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
                        uart_has_TTL = 1;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
                        localhost_active = 1;
     78a:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <localhost_active>
     78e:	57 c0       	rjmp	.+174    	; 0x83e <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     790:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     794:	88 23       	and	r24, r24
     796:	09 f4       	brne	.+2      	; 0x79a <check_DTR+0xc2>
     798:	58 c0       	rjmp	.+176    	; 0x84a <check_DTR+0x172>
     79a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     79e:	88 23       	and	r24, r24
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <check_DTR+0xcc>
     7a2:	53 c0       	rjmp	.+166    	; 0x84a <check_DTR+0x172>
     7a4:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     7a8:	81 11       	cpse	r24, r1
     7aa:	4f c0       	rjmp	.+158    	; 0x84a <check_DTR+0x172>
     7ac:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     7b0:	81 11       	cpse	r24, r1
     7b2:	4b c0       	rjmp	.+150    	; 0x84a <check_DTR+0x172>
     7b4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     7b8:	81 11       	cpse	r24, r1
     7ba:	47 c0       	rjmp	.+142    	; 0x84a <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     7bc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     7c0:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     7c4:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     7c8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     7cc:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7d0:	8f ec       	ldi	r24, 0xCF	; 207
     7d2:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7d6:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     7da:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     7de:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	20 95       	com	r18
     7e6:	30 95       	com	r19
     7e8:	2a 70       	andi	r18, 0x0A	; 10
     7ea:	33 27       	eor	r19, r19
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	22 0f       	add	r18, r18
     7f0:	33 1f       	adc	r19, r19
     7f2:	8a 95       	dec	r24
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <check_DTR+0x116>
     7f6:	89 2f       	mov	r24, r25
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	80 95       	com	r24
     7fc:	90 95       	com	r25
     7fe:	80 75       	andi	r24, 0x50	; 80
     800:	99 27       	eor	r25, r25
     802:	54 e0       	ldi	r21, 0x04	; 4
     804:	95 95       	asr	r25
     806:	87 95       	ror	r24
     808:	5a 95       	dec	r21
     80a:	e1 f7       	brne	.-8      	; 0x804 <check_DTR+0x12c>
     80c:	82 2b       	or	r24, r18
     80e:	93 2b       	or	r25, r19
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	1f 92       	push	r1
     816:	4f 93       	push	r20
     818:	86 e1       	ldi	r24, 0x16	; 22
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
                uart_has_TTL = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     82a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     82c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     82e:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     830:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     832:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     836:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     838:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     83a:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     83c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	08 95       	ret

0000084c <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     84c:	4f 92       	push	r4
     84e:	5f 92       	push	r5
     850:	6f 92       	push	r6
     852:	7f 92       	push	r7
     854:	8f 92       	push	r8
     856:	9f 92       	push	r9
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     86c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     870:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <uart_has_TTL>
     874:	22 23       	and	r18, r18
     876:	d9 f0       	breq	.+54     	; 0x8ae <check_uart+0x62>
     878:	40 90 09 03 	lds	r4, 0x0309	; 0x800309 <uart_started_at>
     87c:	50 90 0a 03 	lds	r5, 0x030A	; 0x80030a <uart_started_at+0x1>
     880:	60 90 0b 03 	lds	r6, 0x030B	; 0x80030b <uart_started_at+0x2>
     884:	70 90 0c 03 	lds	r7, 0x030C	; 0x80030c <uart_started_at+0x3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	84 19       	sub	r24, r4
     88e:	95 09       	sbc	r25, r5
     890:	a6 09       	sbc	r26, r6
     892:	b7 09       	sbc	r27, r7
     894:	85 3f       	cpi	r24, 0xF5	; 245
     896:	91 40       	sbci	r25, 0x01	; 1
     898:	a1 05       	cpc	r26, r1
     89a:	b1 05       	cpc	r27, r1
     89c:	40 f0       	brcs	.+16     	; 0x8ae <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     89e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     8a2:	81 70       	andi	r24, 0x01	; 1
     8a4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
        uart_has_TTL = 0;
     8a8:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     8ac:	cd c1       	rjmp	.+922    	; 0xc48 <__stack+0x349>
    }
    else
    {
        if ( uart0_available() )
     8ae:	0e 94 1d 12 	call	0x243a	; 0x243a <uart0_available>
     8b2:	89 2b       	or	r24, r25
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <check_uart+0x6c>
     8b6:	c8 c1       	rjmp	.+912    	; 0xc48 <__stack+0x349>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     8b8:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__iob>
     8bc:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__iob+0x1>
     8c0:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     8c4:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <uart_previous_byte>
     8c8:	26 2f       	mov	r18, r22
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	20 95       	com	r18
     8ce:	30 95       	com	r19
     8d0:	a9 01       	movw	r20, r18
     8d2:	4a 70       	andi	r20, 0x0A	; 10
     8d4:	55 27       	eor	r21, r21
     8d6:	74 e0       	ldi	r23, 0x04	; 4
     8d8:	44 0f       	add	r20, r20
     8da:	55 1f       	adc	r21, r21
     8dc:	7a 95       	dec	r23
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <check_uart+0x8c>
     8e0:	20 75       	andi	r18, 0x50	; 80
     8e2:	33 27       	eor	r19, r19
     8e4:	e4 e0       	ldi	r30, 0x04	; 4
     8e6:	35 95       	asr	r19
     8e8:	27 95       	ror	r18
     8ea:	ea 95       	dec	r30
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <check_uart+0x9a>
     8ee:	24 2b       	or	r18, r20
     8f0:	35 2b       	or	r19, r21
     8f2:	ac 01       	movw	r20, r24
     8f4:	55 27       	eor	r21, r21
     8f6:	24 17       	cp	r18, r20
     8f8:	35 07       	cpc	r19, r21
     8fa:	39 f4       	brne	.+14     	; 0x90a <__stack+0xb>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8fc:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     900:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     904:	81 11       	cpse	r24, r1
     906:	04 c0       	rjmp	.+8      	; 0x910 <__stack+0x11>
     908:	0f c0       	rjmp	.+30     	; 0x928 <__stack+0x29>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     90a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_previous_byte>
                return;
     90e:	9c c1       	rjmp	.+824    	; 0xc48 <__stack+0x349>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     910:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
     914:	68 17       	cp	r22, r24
     916:	29 f0       	breq	.+10     	; 0x922 <__stack+0x23>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     918:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     91c:	84 70       	andi	r24, 0x04	; 4
     91e:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
                }
                uart_has_TTL = 0;
     922:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     926:	04 c0       	rjmp	.+8      	; 0x930 <__stack+0x31>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     928:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     92c:	88 23       	and	r24, r24
     92e:	19 f0       	breq	.+6      	; 0x936 <__stack+0x37>
                {
                    host_is_foreign = 0; // used to connect the host
     930:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
     934:	03 c0       	rjmp	.+6      	; 0x93c <__stack+0x3d>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     93c:	61 11       	cpse	r22, r1
     93e:	27 c0       	rjmp	.+78     	; 0x98e <__stack+0x8f>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     940:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	80 5c       	subi	r24, 0xC0	; 192
     94a:	94 4d       	sbci	r25, 0xD4	; 212
     94c:	a1 40       	sbci	r26, 0x01	; 1
     94e:	b1 09       	sbc	r27, r1
     950:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     954:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     958:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     95c:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     960:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	88 53       	subi	r24, 0x38	; 56
     96a:	91 4c       	sbci	r25, 0xC1	; 193
     96c:	a1 40       	sbci	r26, 0x01	; 1
     96e:	b1 09       	sbc	r27, r1
     970:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     974:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     978:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     97c:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     980:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     982:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     984:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     986:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     988:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
     98c:	36 c1       	rjmp	.+620    	; 0xbfa <__stack+0x2fb>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     98e:	6f 3f       	cpi	r22, 0xFF	; 255
     990:	31 f4       	brne	.+12     	; 0x99e <__stack+0x9f>
            {
                arduino_mode_started = 0;
     992:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
                arduino_mode = 1;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <arduino_mode>
                return;
     99c:	55 c1       	rjmp	.+682    	; 0xc48 <__stack+0x349>
            }
            if (input == RPU_START_TEST_MODE) 
     99e:	61 30       	cpi	r22, 0x01	; 1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	6f c0       	rjmp	.+222    	; 0xa82 <__stack+0x183>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     9a4:	f9 b1       	in	r31, 0x09	; 9
     9a6:	e9 b1       	in	r30, 0x09	; 9
     9a8:	56 b1       	in	r21, 0x06	; 6
     9aa:	49 b1       	in	r20, 0x09	; 9
     9ac:	39 b1       	in	r19, 0x09	; 9
     9ae:	89 b1       	in	r24, 0x09	; 9
     9b0:	29 b1       	in	r18, 0x09	; 9
     9b2:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	88 0f       	add	r24, r24
     9b8:	89 2f       	mov	r24, r25
     9ba:	88 1f       	adc	r24, r24
     9bc:	99 0b       	sbc	r25, r25
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	73 fb       	bst	r23, 3
     9c8:	99 27       	eor	r25, r25
     9ca:	90 f9       	bld	r25, 0
     9cc:	89 2b       	or	r24, r25
     9ce:	f3 fb       	bst	r31, 3
     9d0:	aa 24       	eor	r10, r10
     9d2:	a0 f8       	bld	r10, 0
     9d4:	b1 2c       	mov	r11, r1
     9d6:	b6 94       	lsr	r11
     9d8:	ba 2c       	mov	r11, r10
     9da:	aa 24       	eor	r10, r10
     9dc:	b7 94       	ror	r11
     9de:	a7 94       	ror	r10
     9e0:	a8 2a       	or	r10, r24
     9e2:	e2 fb       	bst	r30, 2
     9e4:	cc 24       	eor	r12, r12
     9e6:	c0 f8       	bld	r12, 0
     9e8:	d1 2c       	mov	r13, r1
     9ea:	d6 e0       	ldi	r29, 0x06	; 6
     9ec:	cc 0c       	add	r12, r12
     9ee:	dd 1c       	adc	r13, r13
     9f0:	da 95       	dec	r29
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0xed>
     9f4:	ca 28       	or	r12, r10
     9f6:	52 fb       	bst	r21, 2
     9f8:	ee 24       	eor	r14, r14
     9fa:	e0 f8       	bld	r14, 0
     9fc:	f1 2c       	mov	r15, r1
     9fe:	15 e0       	ldi	r17, 0x05	; 5
     a00:	ee 0c       	add	r14, r14
     a02:	ff 1c       	adc	r15, r15
     a04:	1a 95       	dec	r17
     a06:	e1 f7       	brne	.-8      	; 0xa00 <__stack+0x101>
     a08:	ec 28       	or	r14, r12
     a0a:	45 fb       	bst	r20, 5
     a0c:	00 27       	eor	r16, r16
     a0e:	00 f9       	bld	r16, 0
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	00 0f       	add	r16, r16
     a16:	11 1f       	adc	r17, r17
     a18:	8a 95       	dec	r24
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <__stack+0x115>
     a1c:	0e 29       	or	r16, r14
     a1e:	36 fb       	bst	r19, 6
     a20:	33 27       	eor	r19, r19
     a22:	30 f9       	bld	r19, 0
     a24:	c3 2f       	mov	r28, r19
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	d8 2f       	mov	r29, r24
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	cc 0f       	add	r28, r28
     a2e:	dd 1f       	adc	r29, r29
     a30:	9a 95       	dec	r25
     a32:	e1 f7       	brne	.-8      	; 0xa2c <__stack+0x12d>
     a34:	c0 2b       	or	r28, r16
     a36:	24 fb       	bst	r18, 4
     a38:	88 24       	eor	r8, r8
     a3a:	80 f8       	bld	r8, 0
     a3c:	91 2c       	mov	r9, r1
     a3e:	88 0c       	add	r8, r8
     a40:	99 1c       	adc	r9, r9
     a42:	8c 2a       	or	r8, r28
     a44:	80 92 f4 02 	sts	0x02F4, r8	; 0x8002f4 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a48:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a4c:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a50:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a52:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a54:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a56:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a58:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a5a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a5c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a5e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a60:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a62:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a64:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a66:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a68:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a6a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a6c:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a6e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a70:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a72:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a74:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a76:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a78:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 1;
     a7c:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <test_mode>
                return;
     a80:	e3 c0       	rjmp	.+454    	; 0xc48 <__stack+0x349>
            }
            if (input == RPU_END_TEST_MODE) 
     a82:	6e 3f       	cpi	r22, 0xFE	; 254
     a84:	09 f0       	breq	.+2      	; 0xa88 <__stack+0x189>
     a86:	76 c0       	rjmp	.+236    	; 0xb74 <__stack+0x275>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a88:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a8c:	88 1f       	adc	r24, r24
     a8e:	88 27       	eor	r24, r24
     a90:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a92:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a94:	f8 94       	cli
    {
        if (value_for_bit) 
     a96:	88 23       	and	r24, r24
     a98:	11 f0       	breq	.+4      	; 0xa9e <__stack+0x19f>
        {
            *register_addr |= 1 << bit_offset;
     a9a:	5b 9a       	sbi	0x0b, 3	; 11
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <__stack+0x1a1>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a9e:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aa2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     aa6:	86 fb       	bst	r24, 6
     aa8:	88 27       	eor	r24, r24
     aaa:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aae:	f8 94       	cli
    {
        if (value_for_bit) 
     ab0:	88 23       	and	r24, r24
     ab2:	11 f0       	breq	.+4      	; 0xab8 <__stack+0x1b9>
        {
            *register_addr |= 1 << bit_offset;
     ab4:	5a 9a       	sbi	0x0b, 2	; 11
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <__stack+0x1bb>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ab8:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aba:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     abc:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ac0:	85 fb       	bst	r24, 5
     ac2:	88 27       	eor	r24, r24
     ac4:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ac6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ac8:	f8 94       	cli
    {
        if (value_for_bit) 
     aca:	88 23       	and	r24, r24
     acc:	11 f0       	breq	.+4      	; 0xad2 <__stack+0x1d3>
        {
            *register_addr |= 1 << bit_offset;
     ace:	42 9a       	sbi	0x08, 2	; 8
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <__stack+0x1d5>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ad2:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ad6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ada:	82 95       	swap	r24
     adc:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ade:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae0:	f8 94       	cli
    {
        if (value_for_bit) 
     ae2:	88 23       	and	r24, r24
     ae4:	11 f0       	breq	.+4      	; 0xaea <__stack+0x1eb>
        {
            *register_addr |= 1 << bit_offset;
     ae6:	5d 9a       	sbi	0x0b, 5	; 11
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <__stack+0x1ed>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aea:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aec:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aee:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     af2:	83 fb       	bst	r24, 3
     af4:	88 27       	eor	r24, r24
     af6:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     af8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     afa:	f8 94       	cli
    {
        if (value_for_bit) 
     afc:	88 23       	and	r24, r24
     afe:	11 f0       	breq	.+4      	; 0xb04 <__stack+0x205>
        {
            *register_addr |= 1 << bit_offset;
     b00:	5e 9a       	sbi	0x0b, 6	; 11
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <__stack+0x207>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b04:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b06:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b08:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b0a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b0c:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b0e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b10:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b12:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b14:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b16:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     b18:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b1c:	88 61       	ori	r24, 0x18	; 24
     b1e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b22:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b26:	82 fb       	bst	r24, 2
     b28:	88 27       	eor	r24, r24
     b2a:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b2c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b2e:	f8 94       	cli
    {
        if (value_for_bit) 
     b30:	88 23       	and	r24, r24
     b32:	11 f0       	breq	.+4      	; 0xb38 <__stack+0x239>
        {
            *register_addr |= 1 << bit_offset;
     b34:	5f 9a       	sbi	0x0b, 7	; 11
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <__stack+0x23b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b38:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b3a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b3c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b40:	86 95       	lsr	r24
     b42:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b44:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b46:	f8 94       	cli
    {
        if (value_for_bit) 
     b48:	88 23       	and	r24, r24
     b4a:	11 f0       	breq	.+4      	; 0xb50 <__stack+0x251>
        {
            *register_addr |= 1 << bit_offset;
     b4c:	5c 9a       	sbi	0x0b, 4	; 11
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <__stack+0x253>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b50:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b52:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b54:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b58:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b5a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b5c:	f8 94       	cli
    {
        if (value_for_bit) 
     b5e:	88 23       	and	r24, r24
     b60:	11 f0       	breq	.+4      	; 0xb66 <__stack+0x267>
        {
            *register_addr |= 1 << bit_offset;
     b62:	43 9a       	sbi	0x08, 3	; 8
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <__stack+0x269>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b66:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b68:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b6a:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 0;
     b6e:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
                return;
     b72:	6a c0       	rjmp	.+212    	; 0xc48 <__stack+0x349>
            }
            if (input == rpu_address) // that is my local address
     b74:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     b78:	68 13       	cpse	r22, r24
     b7a:	2a c0       	rjmp	.+84     	; 0xbd0 <__stack+0x2d1>
            {
                connect_bootload_mode();
     b7c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b86:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b88:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b8a:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b8c:	8f bf       	out	0x3f, r24	; 63
     b8e:	8f e5       	ldi	r24, 0x5F	; 95
     b90:	9a ee       	ldi	r25, 0xEA	; 234
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <__stack+0x293>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <__stack+0x299>
     b98:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b9a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b9c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b9e:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ba0:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     ba2:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     ba6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     baa:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     bae:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     bb2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     bb6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                bootloader_started_at = millis();
     bba:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     bbe:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <bootloader_started_at>
     bc2:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <bootloader_started_at+0x1>
     bc6:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <bootloader_started_at+0x2>
     bca:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <bootloader_started_at+0x3>
                return;
     bce:	3c c0       	rjmp	.+120    	; 0xc48 <__stack+0x349>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     bd0:	67 fd       	sbrc	r22, 7
     bd2:	1e c0       	rjmp	.+60     	; 0xc10 <__stack+0x311>
            {  
                lockout_active =1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lockout_active>
                bootloader_started = 0;
     bda:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
                host_active =0;
     bde:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>

                connect_lockout_mode();
     be2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <connect_lockout_mode>

                lockout_started_at = millis();
     be6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     bea:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <lockout_started_at>
     bee:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <lockout_started_at+0x1>
     bf2:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <lockout_started_at+0x2>
     bf6:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <lockout_started_at+0x3>
                blink_started_at = millis();
     bfa:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     bfe:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     c02:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     c06:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     c0a:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                return;
     c0e:	1c c0       	rjmp	.+56     	; 0xc48 <__stack+0x349>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     c10:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
                lockout_active =0;
     c14:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
                host_active =0;
     c18:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
                bootloader_started = 0;
     c1c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c20:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c22:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c24:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c26:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c2a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c2c:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c2e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c30:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c32:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c34:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c36:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c3a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c3c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c3e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c42:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c44:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c46:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	8f 90       	pop	r8
     c60:	7f 90       	pop	r7
     c62:	6f 90       	pop	r6
     c64:	5f 90       	pop	r5
     c66:	4f 90       	pop	r4
     c68:	08 95       	ret

00000c6a <fnWtMgrAddr>:
}

// I2C_COMMAND_TO_SET_RPU_ADDRESS
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
    rpu_address = i2cBuffer[1];
     c6a:	fc 01       	movw	r30, r24
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    write_rpu_address_to_eeprom = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
     c78:	08 95       	ret

00000c7a <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c7a:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <bootloader_address>
     c7e:	fc 01       	movw	r30, r24
     c80:	21 83       	std	Z+1, r18	; 0x01
     c82:	08 95       	ret

00000c84 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c84:	fc 01       	movw	r30, r24
     c86:	81 81       	ldd	r24, Z+1	; 0x01
     c88:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
     c8c:	08 95       	ret

00000c8e <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c8e:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <shutdown_detected>
     c92:	fc 01       	movw	r30, r24
     c94:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c96:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
     c9a:	08 95       	ret

00000c9c <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     c9c:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     c9e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <status_byt>
     ca2:	9f 70       	andi	r25, 0x0F	; 15
     ca4:	91 83       	std	Z+1, r25	; 0x01
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     ca6:	83 b1       	in	r24, 0x03	; 3
    i2cBuffer[1] &= digitalRead(ALT_EN)<<4; // report if alternat power is enabled
     ca8:	11 82       	std	Z+1, r1	; 0x01
     caa:	83 b1       	in	r24, 0x03	; 3
     cac:	08 95       	ret

00000cae <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    if ( (i2cBuffer[1] & 0x10) ) 
     cae:	fc 01       	movw	r30, r24
     cb0:	21 81       	ldd	r18, Z+1	; 0x01
     cb2:	24 ff       	sbrs	r18, 4
     cb4:	0b c0       	rjmp	.+22     	; 0xccc <fnWtStatus+0x1e>
    {
        enable_alternate_power = 1;
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <enable_alternate_power>
        alt_pwm_accum_charge_time = 0; // clear charge time
     cbc:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <alt_pwm_accum_charge_time>
     cc0:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <alt_pwm_accum_charge_time+0x1>
     cc4:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <alt_pwm_accum_charge_time+0x2>
     cc8:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    }
    if ( (i2cBuffer[1] & 0x20) && !shutdown_started && !shutdown_detected ) enable_sbc_power = 1;
     ccc:	fc 01       	movw	r30, r24
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	85 ff       	sbrs	r24, 5
     cd2:	0b c0       	rjmp	.+22     	; 0xcea <fnWtStatus+0x3c>
     cd4:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <shutdown_started>
     cd8:	91 11       	cpse	r25, r1
     cda:	07 c0       	rjmp	.+14     	; 0xcea <fnWtStatus+0x3c>
     cdc:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <shutdown_detected>
     ce0:	91 11       	cpse	r25, r1
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <fnWtStatus+0x3c>
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <enable_sbc_power>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     cf0:	08 95       	ret

00000cf2 <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     cf2:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     cf6:	fc 01       	movw	r30, r24
     cf8:	21 83       	std	Z+1, r18	; 0x01
     cfa:	08 95       	ret

00000cfc <fnBatStartChrg>:

// I2C command for Battery charge start limit (uint16_t)
void fnBatStartChrg(uint8_t* i2cBuffer)
{
    // battery_low_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_low_limit>>8) & 0xFF;
     cfc:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <battery_low_limit+0x1>
    battery_low_limit = 0x00FF & battery_low_limit; // mask out the old value
    battery_low_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_low_limit; // place new value in high byte
     d00:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <battery_low_limit+0x1>
     d04:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <battery_low_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d08:	fc 01       	movw	r30, r24
     d0a:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_low_limit & 0xFF;
     d0c:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <battery_low_limit>
    battery_low_limit = 0xFFFFFF00 & battery_low_limit;
    battery_low_limit = ((uint32_t) (i2cBuffer[2])) & battery_low_limit;  
     d10:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <battery_low_limit+0x1>
     d14:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <battery_low_limit>
    i2cBuffer[2] = temp;
     d18:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
     d20:	08 95       	ret

00000d22 <fnBatDoneChrg>:

// I2C command for Battery charge done limit (uint16_t)
void fnBatDoneChrg(uint8_t* i2cBuffer)
{
    // battery_high_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_high_limit>>8) & 0xFF;
     d22:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <battery_high_limit+0x1>
    battery_high_limit = 0x00FF & battery_high_limit; // mask out the old value
    battery_high_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_high_limit; // place new value in high byte
     d26:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <battery_high_limit+0x1>
     d2a:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <battery_high_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d2e:	fc 01       	movw	r30, r24
     d30:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_high_limit & 0xFF;
     d32:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <battery_high_limit>
    battery_high_limit = 0xFFFFFF00 & battery_high_limit;
    battery_high_limit = ((uint32_t) (i2cBuffer[2])) & battery_high_limit;  
     d36:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <battery_high_limit+0x1>
     d3a:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <battery_high_limit>
    i2cBuffer[2] = temp;
     d3e:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
     d46:	08 95       	ret

00000d48 <fnRdBatChrgTime>:
}

// I2C command to read battery charging time while doing pwm e.g., absorption time
void fnRdBatChrgTime(uint8_t* i2cBuffer)
{
     d48:	fc 01       	movw	r30, r24
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (alt_pwm_accum_charge_time>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     d4a:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <alt_pwm_accum_charge_time+0x3>
     d4e:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (alt_pwm_accum_charge_time>>16) & 0xFF;
     d50:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <alt_pwm_accum_charge_time+0x2>
     d54:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (alt_pwm_accum_charge_time>>8) & 0xFF;
     d56:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <alt_pwm_accum_charge_time+0x1>
     d5a:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  alt_pwm_accum_charge_time & 0xFF; // low byte. Again Mask should optimize out
     d5c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <alt_pwm_accum_charge_time>
     d60:	84 83       	std	Z+4, r24	; 0x04
     d62:	08 95       	ret

00000d64 <fnMorningThreshold>:

// I2C command for day-night Morning Threshold (uint16_t)
void fnMorningThreshold(uint8_t* i2cBuffer)
{
    // daynight_morning_threshold is a uint16_t e.g., two bytes
    uint8_t temp = (daynight_morning_threshold>>8) & 0xFF;
     d64:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    daynight_morning_threshold = 0x00FF & daynight_morning_threshold; // mask out the old value
    daynight_morning_threshold = ((uint32_t) (i2cBuffer[1])<<8) & daynight_morning_threshold; // place new value in high byte
     d68:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <daynight_morning_threshold+0x1>
     d6c:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <daynight_morning_threshold>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d70:	fc 01       	movw	r30, r24
     d72:	21 83       	std	Z+1, r18	; 0x01

    temp = daynight_morning_threshold & 0xFF;
     d74:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    daynight_morning_threshold = 0xFFFFFF00 & daynight_morning_threshold;
    daynight_morning_threshold = ((uint32_t) (i2cBuffer[2])) & daynight_morning_threshold;  
     d78:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <daynight_morning_threshold+0x1>
     d7c:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <daynight_morning_threshold>
    i2cBuffer[2] = temp;
     d80:	22 83       	std	Z+2, r18	; 0x02
    
    daynight_values_loaded = DAYNIGHT_MORNING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     d88:	08 95       	ret

00000d8a <fnEveningThreshold>:

// I2C command for day-night Evening Threshold (uint16_t)
void fnEveningThreshold(uint8_t* i2cBuffer)
{
    // daynight_evening_threshold is a uint16_t e.g., two bytes
    uint8_t temp = (daynight_evening_threshold>>8) & 0xFF;
     d8a:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    daynight_evening_threshold = 0x00FF & daynight_evening_threshold; // mask out the old value
    daynight_evening_threshold = ((uint32_t) (i2cBuffer[1])<<8) & daynight_evening_threshold; // place new value in high byte
     d8e:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <daynight_evening_threshold+0x1>
     d92:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <daynight_evening_threshold>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d96:	fc 01       	movw	r30, r24
     d98:	21 83       	std	Z+1, r18	; 0x01

    temp = daynight_evening_threshold & 0xFF;
     d9a:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    daynight_evening_threshold = 0xFFFFFF00 & daynight_evening_threshold;
    daynight_evening_threshold = ((uint32_t) (i2cBuffer[2])) & daynight_evening_threshold;  
     d9e:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <daynight_evening_threshold+0x1>
     da2:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <daynight_evening_threshold>
    i2cBuffer[2] = temp;
     da6:	22 83       	std	Z+2, r18	; 0x02
    
    daynight_values_loaded = DAYNIGHT_EVENING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     dae:	08 95       	ret

00000db0 <fnDayNightState>:

// I2C command to read Day-Night state
void fnDayNightState(uint8_t* i2cBuffer)
{
    // there is one byte in an uint8_t
    i2cBuffer[1] = 0; // dayState;
     db0:	fc 01       	movw	r30, r24
     db2:	11 82       	std	Z+1, r1	; 0x01
     db4:	08 95       	ret

00000db6 <fnRdTimedAccumAltI>:
    i2cBuffer[2] =  adc_buffer & 0xFF; 
}

// I2C command to read timed accumulation of analog channel ALT_I
void fnRdTimedAccumAltI(uint8_t* i2cBuffer)
{
     db6:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_alt_ti>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     db8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
     dbc:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_alt_ti>>16) & 0xFF;
     dbe:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
     dc2:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_alt_ti>>8) & 0xFF;
     dc4:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
     dc8:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_alt_ti & 0xFF; // low byte. Again Mask should optimize out
     dca:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <accumulate_alt_ti>
     dce:	84 83       	std	Z+4, r24	; 0x04
     dd0:	08 95       	ret

00000dd2 <fnRdTimedAccumPwrI>:
}

// I2C command to read timed accumulation of analog channel PWR_I
void fnRdTimedAccumPwrI(uint8_t* i2cBuffer)
{
     dd2:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_pwr_ti>>24) & 0xFF;
     dd4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
     dd8:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_pwr_ti>>16) & 0xFF;
     dda:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
     dde:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_pwr_ti>>8) & 0xFF;
     de0:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
     de4:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_pwr_ti & 0xFF;
     de6:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <accumulate_pwr_ti>
     dea:	84 83       	std	Z+4, r24	; 0x04
     dec:	08 95       	ret

00000dee <fnAnalogRefExternAVCC>:
/* swap the I2C buffer with the ref_extern_avcc_uV in use
    set ref_loaded so main loop will try to save it to eeprom
    the main loop will reload eeprom or default value if new is out of range
*/ 
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     dee:	fc 01       	movw	r30, r24
    // ref_extern_avcc_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_extern_avcc_uV>>24) & 0xFF;
     df0:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    ref_extern_avcc_uV = 0x00FFFFFF & ref_extern_avcc_uV; // mask out the old high byte
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_extern_avcc_uV; // place new value in high byte
     df4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     df8:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     dfc:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e00:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     e04:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_extern_avcc_uV>>16) & 0xFF;
     e06:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    ref_extern_avcc_uV = 0xFF00FFFF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_extern_avcc_uV; 
     e0a:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     e0e:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     e12:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e16:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[2] =  temp;
     e1a:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_extern_avcc_uV>>8) & 0xFF;
     e1c:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    ref_extern_avcc_uV = 0xFFFF00FF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_extern_avcc_uV; 
     e20:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     e24:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     e28:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e2c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[3] =  temp;
     e30:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_extern_avcc_uV & 0xFF;
     e32:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    ref_extern_avcc_uV = 0xFFFFFF00 & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[4])) & ref_extern_avcc_uV;  
     e36:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     e3a:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     e3e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e42:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[4] =  temp;
     e46:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_AVCC_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     e4e:	08 95       	ret

00000e50 <fnAnalogRefIntern1V1>:
}

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     e50:	fc 01       	movw	r30, r24
    // ref_intern_1v1_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_intern_1v1_uV>>24) & 0xFF;
     e52:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    ref_intern_1v1_uV = 0x00FFFFFF & ref_intern_1v1_uV; // mask out the old high value
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_intern_1v1_uV; // place new value in high byte
     e56:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e5a:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e5e:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     e62:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     e66:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_intern_1v1_uV>>16) & 0xFF;
     e68:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    ref_intern_1v1_uV = 0xFF00FFFF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_intern_1v1_uV; 
     e6c:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e70:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e74:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     e78:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[2] =  temp;
     e7c:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_intern_1v1_uV>>8) & 0xFF;
     e7e:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    ref_intern_1v1_uV = 0xFFFF00FF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_intern_1v1_uV; 
     e82:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e86:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e8a:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     e8e:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[3] =  temp;
     e92:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_intern_1v1_uV & 0xFF;
     e94:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    ref_intern_1v1_uV = 0xFFFFFF00 & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[4])) & ref_intern_1v1_uV;  
     e98:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e9c:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     ea0:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     ea4:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[4] =  temp;
     ea8:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     eb0:	08 95       	ret

00000eb2 <fnMorningDebounce>:
    }
}

// I2C command for day-night morning debounce time (unsigned long)
void fnMorningDebounce(uint8_t* i2cBuffer)
{
     eb2:	fc 01       	movw	r30, r24
    // daynight_morning_debounce is a unsigned long and has four bytes
    uint8_t temp = (daynight_morning_debounce>>24) & 0xFF;
     eb4:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    daynight_morning_debounce = 0x00FFFFFF & daynight_morning_debounce; // mask out the old high value
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[1])<<24) & daynight_morning_debounce; // place new value in high byte
     eb8:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     ebc:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     ec0:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     ec4:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     ec8:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (daynight_morning_debounce>>16) & 0xFF;
     eca:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    daynight_morning_debounce = 0xFF00FFFF & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[2])<<16) & daynight_morning_debounce; 
     ece:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     ed2:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     ed6:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     eda:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[2] =  temp;
     ede:	82 83       	std	Z+2, r24	; 0x02

    temp = (daynight_morning_debounce>>8) & 0xFF;
     ee0:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    daynight_morning_debounce = 0xFFFF00FF & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[3])<<8) & daynight_morning_debounce; 
     ee4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     ee8:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     eec:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     ef0:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[3] =  temp;
     ef4:	83 83       	std	Z+3, r24	; 0x03

    temp = daynight_morning_debounce & 0xFF;
     ef6:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <daynight_morning_debounce>
    daynight_morning_debounce = 0xFFFFFF00 & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[4])) & daynight_morning_debounce;  
     efa:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     efe:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     f02:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     f06:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[4] =  temp;
     f0a:	84 83       	std	Z+4, r24	; 0x04
    
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     f12:	08 95       	ret

00000f14 <fnEveningDebounce>:
}

// I2C command for day-night evening debounce time (unsigned long)
void fnEveningDebounce(uint8_t* i2cBuffer)
{
     f14:	fc 01       	movw	r30, r24
    // daynight_evening_debounce is a unsigned long and has four bytes
    uint8_t temp = (daynight_evening_debounce>>24) & 0xFF;
     f16:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    daynight_evening_debounce = 0x00FFFFFF & daynight_evening_debounce; // mask out the old high value
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[1])<<24) & daynight_evening_debounce; // place new value in high byte
     f1a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f1e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f22:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f26:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     f2a:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (daynight_evening_debounce>>16) & 0xFF;
     f2c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    daynight_evening_debounce = 0xFF00FFFF & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[2])<<16) & daynight_evening_debounce; 
     f30:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f34:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f38:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f3c:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[2] =  temp;
     f40:	82 83       	std	Z+2, r24	; 0x02

    temp = (daynight_evening_debounce>>8) & 0xFF;
     f42:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    daynight_evening_debounce = 0xFFFF00FF & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[3])<<8) & daynight_evening_debounce; 
     f46:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f4a:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f4e:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f52:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[3] =  temp;
     f56:	83 83       	std	Z+3, r24	; 0x03

    temp = daynight_evening_debounce & 0xFF;
     f58:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <daynight_evening_debounce>
    daynight_evening_debounce = 0xFFFFFF00 & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[4])) & daynight_evening_debounce;  
     f5c:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f60:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f64:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f68:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[4] =  temp;
     f6c:	84 83       	std	Z+4, r24	; 0x04
    
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     f74:	08 95       	ret

00000f76 <fnNull>:
    i2cBuffer[4] =  now & 0xFF; // low byte. Again Mask should optimize out
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     f76:	08 95       	ret

00000f78 <fnMillis>:
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
}

// I2C command to read millis time
void fnMillis(uint8_t* i2cBuffer)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ec 01       	movw	r28, r24
    unsigned long now = millis();
     f7e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (now>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     f82:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  (now>>16) & 0xFF;
     f84:	8a 83       	std	Y+2, r24	; 0x02
    i2cBuffer[3] =  (now>>8) & 0xFF;
     f86:	7b 83       	std	Y+3, r23	; 0x03
    i2cBuffer[4] =  now & 0xFF; // low byte. Again Mask should optimize out
     f88:	6c 83       	std	Y+4, r22	; 0x04
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <fnRdMgrAddr>:
  *    the manager broadcast the bootload address when the host serial is active (e.g., nRTS) 
  *    all managers lockout serial except the address to bootload and the host */

// I2C_COMMAND_TO_READ_RPU_ADDRESS and set RPU_NORMAL_MODE
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
     f90:	cf 93       	push	r28
    i2cBuffer[1] = rpu_address; // '1' is 0x31
     f92:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
     f96:	fc 01       	movw	r30, r24
     f98:	21 83       	std	Z+1, r18	; 0x01
    local_mcu_is_rpu_aware =1; 
     f9a:	c1 e0       	ldi	r28, 0x01	; 1
     f9c:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <local_mcu_is_rpu_aware>
    
    // end the local mcu lockout. 
    if (localhost_active) 
     fa0:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     fa4:	88 23       	and	r24, r24
     fa6:	b1 f1       	breq	.+108    	; 0x1014 <fnRdMgrAddr+0x84>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
     fa8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
     fac:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     fb0:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     fb4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     fb8:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
     fbc:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     fc0:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     fc4:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     fc8:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	20 95       	com	r18
     fd0:	30 95       	com	r19
     fd2:	2a 70       	andi	r18, 0x0A	; 10
     fd4:	33 27       	eor	r19, r19
     fd6:	64 e0       	ldi	r22, 0x04	; 4
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	6a 95       	dec	r22
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <fnRdMgrAddr+0x48>
     fe0:	89 2f       	mov	r24, r25
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	80 95       	com	r24
     fe6:	90 95       	com	r25
     fe8:	80 75       	andi	r24, 0x50	; 80
     fea:	99 27       	eor	r25, r25
     fec:	74 e0       	ldi	r23, 0x04	; 4
     fee:	95 95       	asr	r25
     ff0:	87 95       	ror	r24
     ff2:	7a 95       	dec	r23
     ff4:	e1 f7       	brne	.-8      	; 0xfee <fnRdMgrAddr+0x5e>
     ff6:	82 2b       	or	r24, r18
     ff8:	93 2b       	or	r25, r19
     ffa:	9f 93       	push	r25
     ffc:	8f 93       	push	r24
     ffe:	1f 92       	push	r1
    1000:	4f 93       	push	r20
    1002:	86 e1       	ldi	r24, 0x16	; 22
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	9f 93       	push	r25
    1008:	8f 93       	push	r24
    100a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
    100e:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
    1012:	39 c0       	rjmp	.+114    	; 0x1086 <fnRdMgrAddr+0xf6>
    }
    else 
        if (bootloader_started)
    1014:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
    1018:	88 23       	and	r24, r24
    101a:	e1 f1       	breq	.+120    	; 0x1094 <fnRdMgrAddr+0x104>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
    101c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1020:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1024:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1028:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    102c:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
    1030:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1034:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1038:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    103c:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	20 95       	com	r18
    1044:	30 95       	com	r19
    1046:	2a 70       	andi	r18, 0x0A	; 10
    1048:	33 27       	eor	r19, r19
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	22 0f       	add	r18, r18
    104e:	33 1f       	adc	r19, r19
    1050:	8a 95       	dec	r24
    1052:	e1 f7       	brne	.-8      	; 0x104c <fnRdMgrAddr+0xbc>
    1054:	89 2f       	mov	r24, r25
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	80 75       	andi	r24, 0x50	; 80
    105e:	99 27       	eor	r25, r25
    1060:	54 e0       	ldi	r21, 0x04	; 4
    1062:	95 95       	asr	r25
    1064:	87 95       	ror	r24
    1066:	5a 95       	dec	r21
    1068:	e1 f7       	brne	.-8      	; 0x1062 <fnRdMgrAddr+0xd2>
    106a:	82 2b       	or	r24, r18
    106c:	93 2b       	or	r25, r19
    106e:	9f 93       	push	r25
    1070:	8f 93       	push	r24
    1072:	1f 92       	push	r1
    1074:	4f 93       	push	r20
    1076:	86 e1       	ldi	r24, 0x16	; 22
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	9f 93       	push	r25
    107c:	8f 93       	push	r24
    107e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
    1082:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	20 c0       	rjmp	.+64     	; 0x10d4 <fnRdMgrAddr+0x144>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
    1094:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	80 5c       	subi	r24, 0xC0	; 192
    109e:	94 4d       	sbci	r25, 0xD4	; 212
    10a0:	a1 40       	sbci	r26, 0x01	; 1
    10a2:	b1 09       	sbc	r27, r1
    10a4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
    10a8:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
    10ac:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
    10b0:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
    10b4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	88 53       	subi	r24, 0x38	; 56
    10be:	91 4c       	sbci	r25, 0xC1	; 193
    10c0:	a1 40       	sbci	r26, 0x01	; 1
    10c2:	b1 09       	sbc	r27, r1
    10c4:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
    10c8:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
    10cc:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
    10d0:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
        }
}
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <fnRdAdcAltI>:
/********* POWER MANAGER ***********
  *  for ALT_I, ALT_V, PWR_I, PWR_V reading     */

// I2C command to read analog channel 0
void fnRdAdcAltI(uint8_t* i2cBuffer)
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_I);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
    10e4:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; // low byte. Again Mask should optimize out
    10e6:	8a 83       	std	Y+2, r24	; 0x02
}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	08 95       	ret

000010ee <fnRdAdcAltV>:

// I2C command to read analog channel 1
void fnRdAdcAltV(uint8_t* i2cBuffer)
{
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_V);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    10fa:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
    10fc:	8a 83       	std	Y+2, r24	; 0x02
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <fnRdAdcPwrI>:

// I2C command to read analog channel 6
void fnRdAdcPwrI(uint8_t* i2cBuffer)
{
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_I);
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    1110:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
    1112:	8a 83       	std	Y+2, r24	; 0x02
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <fnRdAdcPwrV>:

// I2C command to read analog channel 7
void fnRdAdcPwrV(uint8_t* i2cBuffer)
{
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_V);
    1120:	87 e0       	ldi	r24, 0x07	; 7
    1122:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    1126:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; 
    1128:	8a 83       	std	Y+2, r24	; 0x02
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    1130:	7f 92       	push	r7
    1132:	8f 92       	push	r8
    1134:	9f 92       	push	r9
    1136:	af 92       	push	r10
    1138:	bf 92       	push	r11
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    if (test_mode)
    114a:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <test_mode>
    114e:	ee 23       	and	r30, r30
    1150:	09 f4       	brne	.+2      	; 0x1154 <fnRdXcvrCntlInTestMode+0x24>
    1152:	55 c0       	rjmp	.+170    	; 0x11fe <fnRdXcvrCntlInTestMode+0xce>
    1154:	e9 b1       	in	r30, 0x09	; 9
    1156:	b9 b1       	in	r27, 0x09	; 9
    1158:	f6 b1       	in	r31, 0x06	; 6
    115a:	79 b0       	in	r7, 0x09	; 9
    115c:	a9 b0       	in	r10, 0x09	; 9
    115e:	09 b1       	in	r16, 0x09	; 9
    1160:	b9 b0       	in	r11, 0x09	; 9
    1162:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	00 0f       	add	r16, r16
    1168:	01 2f       	mov	r16, r17
    116a:	00 1f       	adc	r16, r16
    116c:	11 0b       	sbc	r17, r17
    116e:	00 0f       	add	r16, r16
    1170:	11 1f       	adc	r17, r17
    1172:	00 0f       	add	r16, r16
    1174:	11 1f       	adc	r17, r17
    1176:	c3 fb       	bst	r28, 3
    1178:	cc 27       	eor	r28, r28
    117a:	c0 f9       	bld	r28, 0
    117c:	ac 2f       	mov	r26, r28
    117e:	a0 2b       	or	r26, r16
    1180:	e3 fb       	bst	r30, 3
    1182:	88 24       	eor	r8, r8
    1184:	80 f8       	bld	r8, 0
    1186:	91 2c       	mov	r9, r1
    1188:	e4 01       	movw	r28, r8
    118a:	d6 95       	lsr	r29
    118c:	dc 2f       	mov	r29, r28
    118e:	cc 27       	eor	r28, r28
    1190:	d7 95       	ror	r29
    1192:	c7 95       	ror	r28
    1194:	ca 2b       	or	r28, r26
    1196:	b2 fb       	bst	r27, 2
    1198:	cc 24       	eor	r12, r12
    119a:	c0 f8       	bld	r12, 0
    119c:	d1 2c       	mov	r13, r1
    119e:	d6 01       	movw	r26, r12
    11a0:	56 e0       	ldi	r21, 0x06	; 6
    11a2:	aa 0f       	add	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	5a 95       	dec	r21
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <fnRdXcvrCntlInTestMode+0x72>
    11aa:	ac 2b       	or	r26, r28
    11ac:	f2 fb       	bst	r31, 2
    11ae:	ee 24       	eor	r14, r14
    11b0:	e0 f8       	bld	r14, 0
    11b2:	f1 2c       	mov	r15, r1
    11b4:	f7 01       	movw	r30, r14
    11b6:	65 e0       	ldi	r22, 0x05	; 5
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	6a 95       	dec	r22
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <fnRdXcvrCntlInTestMode+0x88>
    11c0:	ea 2b       	or	r30, r26
    11c2:	75 fa       	bst	r7, 5
    11c4:	66 27       	eor	r22, r22
    11c6:	60 f9       	bld	r22, 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	f4 e0       	ldi	r31, 0x04	; 4
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	fa 95       	dec	r31
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <fnRdXcvrCntlInTestMode+0x9c>
    11d4:	6e 2b       	or	r22, r30
    11d6:	a6 fa       	bst	r10, 6
    11d8:	44 27       	eor	r20, r20
    11da:	40 f9       	bld	r20, 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	a3 e0       	ldi	r26, 0x03	; 3
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	aa 95       	dec	r26
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <fnRdXcvrCntlInTestMode+0xb0>
    11e8:	46 2b       	or	r20, r22
    11ea:	b4 fa       	bst	r11, 4
    11ec:	22 27       	eor	r18, r18
    11ee:	20 f9       	bld	r18, 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	24 2b       	or	r18, r20
    11f8:	fc 01       	movw	r30, r24
    11fa:	21 83       	std	Z+1, r18	; 0x01
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    11fe:	fc 01       	movw	r30, r24
    1200:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	bf 90       	pop	r11
    1214:	af 90       	pop	r10
    1216:	9f 90       	pop	r9
    1218:	8f 90       	pop	r8
    121a:	7f 90       	pop	r7
    121c:	08 95       	ret

0000121e <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	fc 01       	movw	r30, r24
    if (test_mode)
    1224:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1228:	88 23       	and	r24, r24
    122a:	09 f4       	brne	.+2      	; 0x122e <fnWtXcvrCntlInTestMode+0x10>
    122c:	6e c0       	rjmp	.+220    	; 0x130a <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    122e:	81 81       	ldd	r24, Z+1	; 0x01
    1230:	88 1f       	adc	r24, r24
    1232:	88 27       	eor	r24, r24
    1234:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1236:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1238:	f8 94       	cli
    {
        if (value_for_bit) 
    123a:	88 23       	and	r24, r24
    123c:	11 f0       	breq	.+4      	; 0x1242 <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    123e:	5b 9a       	sbi	0x0b, 3	; 11
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1242:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1244:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    1246:	81 81       	ldd	r24, Z+1	; 0x01
    1248:	86 fb       	bst	r24, 6
    124a:	88 27       	eor	r24, r24
    124c:	80 f9       	bld	r24, 0
    124e:	c8 2f       	mov	r28, r24
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1254:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1256:	f8 94       	cli
    {
        if (value_for_bit) 
    1258:	cd 2b       	or	r28, r29
    125a:	11 f0       	breq	.+4      	; 0x1260 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    125c:	5a 9a       	sbi	0x0b, 2	; 11
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1260:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1262:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    1264:	81 81       	ldd	r24, Z+1	; 0x01
    1266:	85 fb       	bst	r24, 5
    1268:	aa 27       	eor	r26, r26
    126a:	a0 f9       	bld	r26, 0
    126c:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    126e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1270:	f8 94       	cli
    {
        if (value_for_bit) 
    1272:	ab 2b       	or	r26, r27
    1274:	11 f0       	breq	.+4      	; 0x127a <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    1276:	42 9a       	sbi	0x08, 2	; 8
    1278:	01 c0       	rjmp	.+2      	; 0x127c <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    127a:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    127c:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    127e:	81 81       	ldd	r24, Z+1	; 0x01
    1280:	84 fb       	bst	r24, 4
    1282:	66 27       	eor	r22, r22
    1284:	60 f9       	bld	r22, 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1288:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    128a:	f8 94       	cli
    {
        if (value_for_bit) 
    128c:	67 2b       	or	r22, r23
    128e:	11 f0       	breq	.+4      	; 0x1294 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    1290:	5d 9a       	sbi	0x0b, 5	; 11
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1294:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1296:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    1298:	81 81       	ldd	r24, Z+1	; 0x01
    129a:	83 fb       	bst	r24, 3
    129c:	44 27       	eor	r20, r20
    129e:	40 f9       	bld	r20, 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12a4:	f8 94       	cli
    {
        if (value_for_bit) 
    12a6:	45 2b       	or	r20, r21
    12a8:	11 f0       	breq	.+4      	; 0x12ae <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    12aa:	5e 9a       	sbi	0x0b, 6	; 11
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12ae:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12b0:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    12b2:	81 81       	ldd	r24, Z+1	; 0x01
    12b4:	82 ff       	sbrs	r24, 2
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    12b8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12bc:	87 7e       	andi	r24, 0xE7	; 231
    12be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12c4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12c6:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12c8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12cc:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12ce:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12d0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12d4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12d6:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12d8:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    12da:	81 81       	ldd	r24, Z+1	; 0x01
    12dc:	81 fb       	bst	r24, 1
    12de:	22 27       	eor	r18, r18
    12e0:	20 f9       	bld	r18, 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12e4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12e6:	f8 94       	cli
    {
        if (value_for_bit) 
    12e8:	23 2b       	or	r18, r19
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    12ec:	5c 9a       	sbi	0x0b, 4	; 11
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12f0:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12f2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    12f4:	81 81       	ldd	r24, Z+1	; 0x01
    12f6:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12f8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12fa:	f8 94       	cli
    {
        if (value_for_bit) 
    12fc:	88 23       	and	r24, r24
    12fe:	11 f0       	breq	.+4      	; 0x1304 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    1300:	43 9a       	sbi	0x08, 3	; 8
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1304:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1306:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1308:	01 c0       	rjmp	.+2      	; 0x130c <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    130a:	11 82       	std	Z+1, r1	; 0x01
    }
}
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    1312:	fc 01       	movw	r30, r24
    1314:	81 81       	ldd	r24, Z+1	; 0x01
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	f1 f4       	brne	.+60     	; 0x1356 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    131a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    131c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    131e:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1320:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1322:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1324:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1326:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1328:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    132a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    132c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    132e:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1330:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1332:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1334:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1336:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1338:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    133a:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    133e:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
        shutdown_started_at = millis();
    1342:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1346:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
    134a:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
    134e:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
    1352:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
    1356:	08 95       	ret

00001358 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    1358:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    135a:	fc 01       	movw	r30, r24
    135c:	c1 81       	ldd	r28, Z+1	; 0x01
    135e:	c1 30       	cpi	r28, 0x01	; 1
    1360:	09 f0       	breq	.+2      	; 0x1364 <fnWtArduinMode+0xc>
    1362:	45 c0       	rjmp	.+138    	; 0x13ee <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    1364:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode_started>
    1368:	21 11       	cpse	r18, r1
    136a:	41 c0       	rjmp	.+130    	; 0x13ee <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    136c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1370:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1374:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1378:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    137c:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1386:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    138a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    138e:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	20 95       	com	r18
    1396:	30 95       	com	r19
    1398:	2a 70       	andi	r18, 0x0A	; 10
    139a:	33 27       	eor	r19, r19
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	22 0f       	add	r18, r18
    13a0:	33 1f       	adc	r19, r19
    13a2:	8a 95       	dec	r24
    13a4:	e1 f7       	brne	.-8      	; 0x139e <fnWtArduinMode+0x46>
    13a6:	89 2f       	mov	r24, r25
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	80 95       	com	r24
    13ac:	90 95       	com	r25
    13ae:	80 75       	andi	r24, 0x50	; 80
    13b0:	99 27       	eor	r25, r25
    13b2:	54 e0       	ldi	r21, 0x04	; 4
    13b4:	95 95       	asr	r25
    13b6:	87 95       	ror	r24
    13b8:	5a 95       	dec	r21
    13ba:	e1 f7       	brne	.-8      	; 0x13b4 <fnWtArduinMode+0x5c>
    13bc:	82 2b       	or	r24, r18
    13be:	93 2b       	or	r25, r19
    13c0:	9f 93       	push	r25
    13c2:	8f 93       	push	r24
    13c4:	1f 92       	push	r1
    13c6:	4f 93       	push	r20
    13c8:	86 e1       	ldi	r24, 0x16	; 22
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	9f 93       	push	r25
    13ce:	8f 93       	push	r24
    13d0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    13d4:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    13d8:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    13dc:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    13ee:	fc 01       	movw	r30, r24
    13f0:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    13f6:	cf 93       	push	r28
    13f8:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    13fa:	c1 81       	ldd	r28, Z+1	; 0x01
    13fc:	c1 30       	cpi	r28, 0x01	; 1
    13fe:	09 f0       	breq	.+2      	; 0x1402 <fnStartTestMode+0xc>
    1400:	48 c0       	rjmp	.+144    	; 0x1492 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    1402:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    1406:	81 11       	cpse	r24, r1
    1408:	42 c0       	rjmp	.+132    	; 0x148e <fnStartTestMode+0x98>
    140a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    140e:	81 11       	cpse	r24, r1
    1410:	3e c0       	rjmp	.+124    	; 0x148e <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    1412:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1416:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    141a:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    141e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1422:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1426:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    142a:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    142e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1432:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	20 95       	com	r18
    143a:	30 95       	com	r19
    143c:	2a 70       	andi	r18, 0x0A	; 10
    143e:	33 27       	eor	r19, r19
    1440:	84 e0       	ldi	r24, 0x04	; 4
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	8a 95       	dec	r24
    1448:	e1 f7       	brne	.-8      	; 0x1442 <fnStartTestMode+0x4c>
    144a:	89 2f       	mov	r24, r25
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	80 95       	com	r24
    1450:	90 95       	com	r25
    1452:	80 75       	andi	r24, 0x50	; 80
    1454:	99 27       	eor	r25, r25
    1456:	54 e0       	ldi	r21, 0x04	; 4
    1458:	95 95       	asr	r25
    145a:	87 95       	ror	r24
    145c:	5a 95       	dec	r21
    145e:	e1 f7       	brne	.-8      	; 0x1458 <fnStartTestMode+0x62>
    1460:	82 2b       	or	r24, r18
    1462:	93 2b       	or	r25, r19
    1464:	9f 93       	push	r25
    1466:	8f 93       	push	r24
    1468:	1f 92       	push	r1
    146a:	4f 93       	push	r20
    146c:	86 e1       	ldi	r24, 0x16	; 22
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	9f 93       	push	r25
    1472:	8f 93       	push	r24
    1474:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1478:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    147c:	c0 93 ed 02 	sts	0x02ED, r28	; 0x8002ed <test_mode_started>
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	81 83       	std	Z+1, r24	; 0x01
    }
}
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    14a2:	19 81       	ldd	r17, Y+1	; 0x01
    14a4:	11 30       	cpi	r17, 0x01	; 1
    14a6:	09 f0       	breq	.+2      	; 0x14aa <fnEndTestMode+0x10>
    14a8:	61 c0       	rjmp	.+194    	; 0x156c <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    14aa:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    14ae:	81 11       	cpse	r24, r1
    14b0:	5d c0       	rjmp	.+186    	; 0x156c <fnEndTestMode+0xd2>
    14b2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <fnEndTestMode+0x22>
    14ba:	58 c0       	rjmp	.+176    	; 0x156c <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14be:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    14c0:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14c4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14c6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    14c8:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14ca:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    14cc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14d0:	88 61       	ori	r24, 0x18	; 24
    14d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14d6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14d8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    14da:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14dc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14e0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    14e2:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14e4:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    14e6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    14ea:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    14ee:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    14f2:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    14f6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    14fa:	8e ef       	ldi	r24, 0xFE	; 254
    14fc:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1500:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1504:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
    1508:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	20 95       	com	r18
    1510:	30 95       	com	r19
    1512:	2a 70       	andi	r18, 0x0A	; 10
    1514:	33 27       	eor	r19, r19
    1516:	a9 01       	movw	r20, r18
    1518:	24 e0       	ldi	r18, 0x04	; 4
    151a:	44 0f       	add	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	2a 95       	dec	r18
    1520:	e1 f7       	brne	.-8      	; 0x151a <fnEndTestMode+0x80>
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	20 95       	com	r18
    1528:	30 95       	com	r19
    152a:	20 75       	andi	r18, 0x50	; 80
    152c:	33 27       	eor	r19, r19
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	35 95       	asr	r19
    1532:	27 95       	ror	r18
    1534:	6a 95       	dec	r22
    1536:	e1 f7       	brne	.-8      	; 0x1530 <fnEndTestMode+0x96>
    1538:	24 2b       	or	r18, r20
    153a:	35 2b       	or	r19, r21
    153c:	3f 93       	push	r19
    153e:	2f 93       	push	r18
    1540:	1f 92       	push	r1
    1542:	9f 93       	push	r25
    1544:	86 e1       	ldi	r24, 0x16	; 22
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	9f 93       	push	r25
    154a:	8f 93       	push	r24
    154c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1550:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    1554:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    1558:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	01 c0       	rjmp	.+2      	; 0x156e <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    156c:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	08 95       	ret

00001576 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    1576:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	29 2f       	mov	r18, r25
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	26 17       	cp	r18, r22
    1580:	37 07       	cpc	r19, r23
    1582:	54 f4       	brge	.+20     	; 0x1598 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    1584:	fa 01       	movw	r30, r20
    1586:	e2 0f       	add	r30, r18
    1588:	f3 1f       	adc	r31, r19
    158a:	80 81       	ld	r24, Z
    158c:	f9 01       	movw	r30, r18
    158e:	e3 5f       	subi	r30, 0xF3	; 243
    1590:	fc 4f       	sbci	r31, 0xFC	; 252
    1592:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1594:	9f 5f       	subi	r25, 0xFF	; 255
    1596:	f1 cf       	rjmp	.-30     	; 0x157a <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    1598:	90 32       	cpi	r25, 0x20	; 32
    159a:	20 f4       	brcc	.+8      	; 0x15a4 <receive_i2c_event+0x2e>
    159c:	f9 01       	movw	r30, r18
    159e:	e3 5f       	subi	r30, 0xF3	; 243
    15a0:	fc 4f       	sbci	r31, 0xFC	; 252
    15a2:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    15a4:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    15a8:	62 30       	cpi	r22, 0x02	; 2
    15aa:	10 f4       	brcc	.+4      	; 0x15b0 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	0d c0       	rjmp	.+26     	; 0x15ca <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    15b0:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <i2c0Buffer>
    15b4:	e8 2f       	mov	r30, r24
    15b6:	e2 95       	swap	r30
    15b8:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    15ba:	e4 30       	cpi	r30, 0x04	; 4
    15bc:	10 f0       	brcs	.+4      	; 0x15c2 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    15be:	8e ef       	ldi	r24, 0xFE	; 254
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    15c2:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    15c4:	88 30       	cpi	r24, 0x08	; 8
    15c6:	20 f0       	brcs	.+8      	; 0x15d0 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    15c8:	8d ef       	ldi	r24, 0xFD	; 253
    15ca:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    15ce:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    15d0:	98 e0       	ldi	r25, 0x08	; 8
    15d2:	e9 9f       	mul	r30, r25
    15d4:	f0 01       	movw	r30, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	e8 0f       	add	r30, r24
    15da:	f1 1d       	adc	r31, r1
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	e5 5e       	subi	r30, 0xE5	; 229
    15e2:	fe 4f       	sbci	r31, 0xFE	; 254
    15e4:	01 90       	ld	r0, Z+
    15e6:	f0 81       	ld	r31, Z
    15e8:	e0 2d       	mov	r30, r0
    15ea:	8d e0       	ldi	r24, 0x0D	; 13
    15ec:	93 e0       	ldi	r25, 0x03	; 3
    15ee:	09 94       	ijmp

000015f0 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    15f0:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    15f4:	8d e0       	ldi	r24, 0x0D	; 13
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <twi0_transmit>
    if (return_code != 0)
    15fc:	88 23       	and	r24, r24
    15fe:	29 f0       	breq	.+10     	; 0x160a <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    1600:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
    1604:	82 70       	andi	r24, 0x02	; 2
    1606:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
    160a:	08 95       	ret

0000160c <fnRdMgrAddrQuietly>:
}

// I2C_COMMAND_TO_READ_RPU_ADDRESS
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = rpu_address; // '1' is 0x31
    160c:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
    1610:	fc 01       	movw	r30, r24
    1612:	21 83       	std	Z+1, r18	; 0x01
    1614:	08 95       	ret

00001616 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    1616:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <inBytes_to_handle+0x1>
    161a:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    161e:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1622:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <smbus_has_numBytes_to_handle>
    1626:	08 95       	ret

00001628 <handle_smbus_receive>:
        {fnWtArduinMode, fnRdArduinMode, fnBatStartChrg, fnBatDoneChrg, fnRdBatChrgTime, fnMorningThreshold, fnEveningThreshold, fnDayNightState},
        {fnRdAdcAltI, fnRdAdcAltV, fnRdAdcPwrI, fnRdAdcPwrV, fnRdTimedAccumAltI, fnRdTimedAccumPwrI, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
    1628:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
    162c:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    smbus_has_numBytes_to_handle = 0; 
    1630:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1634:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    1638:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <inBytes_to_handle>
    163c:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <inBytes_to_handle+0x1>
    // read_i2c_block_data has a single command byte in its data set
    // it will write i2c address, the command* byte, and then cause a repeated start
    // followed by the i2c address (again) and then reading** the data
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	31 05       	cpc	r19, r1
    1644:	11 f0       	breq	.+4      	; 0x164a <handle_smbus_receive+0x22>
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	23 c0       	rjmp	.+70     	; 0x1690 <handle_smbus_receive+0x68>
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    164a:	90 81       	ld	r25, Z
    164c:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    1650:	98 13       	cpse	r25, r24
    1652:	59 c0       	rjmp	.+178    	; 0x1706 <handle_smbus_receive+0xde>
    1654:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    1658:	81 11       	cpse	r24, r1
    165a:	55 c0       	rjmp	.+170    	; 0x1706 <handle_smbus_receive+0xde>
        {
            for(i = 0; i < smbusBufferLength; ++i)
    165c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    1660:	ad e2       	ldi	r26, 0x2D	; 45
    1662:	b3 e0       	ldi	r27, 0x03	; 3
    1664:	e1 e5       	ldi	r30, 0x51	; 81
    1666:	f3 e0       	ldi	r31, 0x03	; 3
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	98 17       	cp	r25, r24
    166c:	21 f0       	breq	.+8      	; 0x1676 <handle_smbus_receive+0x4e>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
    166e:	2d 91       	ld	r18, X+
    1670:	21 93       	st	Z+, r18
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
        {
            for(i = 0; i < smbusBufferLength; ++i)
    1672:	9f 5f       	subi	r25, 0xFF	; 255
    1674:	fa cf       	rjmp	.-12     	; 0x166a <handle_smbus_receive+0x42>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
            }
            if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    1676:	80 32       	cpi	r24, 0x20	; 32
    1678:	28 f4       	brcc	.+10     	; 0x1684 <handle_smbus_receive+0x5c>
    167a:	e8 2f       	mov	r30, r24
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ef 5a       	subi	r30, 0xAF	; 175
    1680:	fc 4f       	sbci	r31, 0xFC	; 252
    1682:	11 82       	std	Z+1, r1	; 0x01
            smbus_oldBufferLength = smbusBufferLength;
    1684:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
            transmit_data_ready = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    168e:	08 95       	ret
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    1690:	84 2f       	mov	r24, r20
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	82 17       	cp	r24, r18
    1696:	93 07       	cpc	r25, r19
    1698:	54 f4       	brge	.+20     	; 0x16ae <handle_smbus_receive+0x86>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    169a:	df 01       	movw	r26, r30
    169c:	a8 0f       	add	r26, r24
    169e:	b9 1f       	adc	r27, r25
    16a0:	5c 91       	ld	r21, X
    16a2:	dc 01       	movw	r26, r24
    16a4:	a3 5d       	subi	r26, 0xD3	; 211
    16a6:	bc 4f       	sbci	r27, 0xFC	; 252
    16a8:	5c 93       	st	X, r21
            smbus_oldBufferLength = smbusBufferLength;
            transmit_data_ready = 1;
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    16aa:	4f 5f       	subi	r20, 0xFF	; 255
    16ac:	f1 cf       	rjmp	.-30     	; 0x1690 <handle_smbus_receive+0x68>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    }
    if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    16ae:	40 32       	cpi	r20, 0x20	; 32
    16b0:	20 f4       	brcc	.+8      	; 0x16ba <handle_smbus_receive+0x92>
    16b2:	fc 01       	movw	r30, r24
    16b4:	e3 5d       	subi	r30, 0xD3	; 211
    16b6:	fc 4f       	sbci	r31, 0xFC	; 252
    16b8:	11 82       	std	Z+1, r1	; 0x01
    smbusBufferLength = numBytes;
    16ba:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

    // an read_i2c_block_data has a command byte 
    if( !(smbusBufferLength > 0) ) 
    16be:	21 11       	cpse	r18, r1
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <handle_smbus_receive+0x9e>
    {
        smbusBuffer[0] = 0xFF; // error code for small size.
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <handle_smbus_receive+0xb8>
        return; // not valid, do nothing just echo an error code.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (smbusBuffer[0] & 0xF0) >> 4;
    16c6:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    16ca:	e8 2f       	mov	r30, r24
    16cc:	e2 95       	swap	r30
    16ce:	ef 70       	andi	r30, 0x0F	; 15
    if(group >= GROUP) 
    16d0:	e4 30       	cpi	r30, 0x04	; 4
    16d2:	10 f0       	brcs	.+4      	; 0x16d8 <handle_smbus_receive+0xb0>
    {
        smbusBuffer[0] = 0xFE; // error code for bad group.
    16d4:	8e ef       	ldi	r24, 0xFE	; 254
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <handle_smbus_receive+0xb8>
        return; 
    }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = smbusBuffer[0] & 0x0F;
    16d8:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <handle_smbus_receive+0xbe>
    {
        smbusBuffer[0] = 0xFD; // error code for bad command.
    16de:	8d ef       	ldi	r24, 0xFD	; 253
    16e0:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <smbusBuffer>
        return; // not valid, do nothing but echo error code.
    16e4:	08 95       	ret
    }

    // Call the i2c command function and return
    (* pf[group][command])(smbusBuffer);
    16e6:	98 e0       	ldi	r25, 0x08	; 8
    16e8:	e9 9f       	mul	r30, r25
    16ea:	f0 01       	movw	r30, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	e8 0f       	add	r30, r24
    16f0:	f1 1d       	adc	r31, r1
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	e5 5a       	subi	r30, 0xA5	; 165
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	01 90       	ld	r0, Z+
    16fc:	f0 81       	ld	r31, Z
    16fe:	e0 2d       	mov	r30, r0
    1700:	8d e2       	ldi	r24, 0x2D	; 45
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	09 94       	ijmp
    1706:	08 95       	ret

00001708 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    1708:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    170c:	81 e5       	ldi	r24, 0x51	; 81
    170e:	93 e0       	ldi	r25, 0x03	; 3
    1710:	0e 94 76 15 	call	0x2aec	; 0x2aec <twi1_transmit>
    transmit_data_ready = 0;
    1714:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    1718:	08 95       	ret

0000171a <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    171a:	cf 93       	push	r28
    if (eeprom_is_ready())
    171c:	f9 99       	sbic	0x1f, 1	; 31
    171e:	24 c0       	rjmp	.+72     	; 0x1768 <save_rpu_addr_state+0x4e>
    {
        // up to first EE_RPU_IDMAX states may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    1720:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1724:	9f ef       	ldi	r25, 0xFF	; 255
    1726:	98 0f       	add	r25, r24
    1728:	9a 30       	cpi	r25, 0x0A	; 10
    172a:	90 f4       	brcc	.+36     	; 0x1750 <save_rpu_addr_state+0x36>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	fc 01       	movw	r30, r24
    1730:	ed 54       	subi	r30, 0x4D	; 77
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    1736:	6c 2f       	mov	r22, r28
    1738:	87 96       	adiw	r24, 0x27	; 39
    173a:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_write_byte>
            
            if (value == '\0') 
    173e:	c1 11       	cpse	r28, r1
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <save_rpu_addr_state+0x2c>
            {
                write_rpu_address_to_eeprom = 11;
    1742:	8b e0       	ldi	r24, 0x0B	; 11
    1744:	03 c0       	rjmp	.+6      	; 0x174c <save_rpu_addr_state+0x32>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    1746:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    174a:	8f 5f       	subi	r24, 0xFF	; 255
    174c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    1750:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1754:	8b 30       	cpi	r24, 0x0B	; 11
    1756:	41 f4       	brne	.+16     	; 0x1768 <save_rpu_addr_state+0x4e>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    1758:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <rpu_address>
    175c:	82 e3       	ldi	r24, 0x32	; 50
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    1764:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
        }
    }
}
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	c8 e2       	ldi	r28, 0x28	; 40
    1774:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    1776:	fe 01       	movw	r30, r28
    1778:	e4 57       	subi	r30, 0x74	; 116
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 1a 1a 	call	0x3434	; 0x3434 <eeprom_read_byte>
        if (id != ee_id) 
    1784:	18 13       	cpse	r17, r24
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    1788:	11 23       	and	r17, r17
    178a:	31 f0       	breq	.+12     	; 0x1798 <check_for_eeprom_id+0x2c>
    178c:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    178e:	c2 33       	cpi	r28, 0x32	; 50
    1790:	d1 05       	cpc	r29, r1
    1792:	89 f7       	brne	.-30     	; 0x1776 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	01 c0       	rjmp	.+2      	; 0x179a <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	08 95       	ret

000017a2 <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    17a6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    17aa:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <adc_started_at>
    17ae:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <adc_started_at+0x1>
    17b2:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <adc_started_at+0x2>
    17b6:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <adc_started_at+0x3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	80 1b       	sub	r24, r16
    17c0:	91 0b       	sbc	r25, r17
    17c2:	a2 0b       	sbc	r26, r18
    17c4:	b3 0b       	sbc	r27, r19
    17c6:	0b 97       	sbiw	r24, 0x0b	; 11
    17c8:	a1 05       	cpc	r26, r1
    17ca:	b1 05       	cpc	r27, r1
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <adc_burst+0x2e>
    17ce:	4c c0       	rjmp	.+152    	; 0x1868 <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    17d6:	09 2e       	mov	r0, r25
    17d8:	00 0c       	add	r0, r0
    17da:	aa 0b       	sbc	r26, r26
    17dc:	bb 0b       	sbc	r27, r27
    17de:	40 91 71 03 	lds	r20, 0x0371	; 0x800371 <accumulate_alt_ti>
    17e2:	50 91 72 03 	lds	r21, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
    17e6:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
    17ea:	70 91 74 03 	lds	r23, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
    17ee:	84 0f       	add	r24, r20
    17f0:	95 1f       	adc	r25, r21
    17f2:	a6 1f       	adc	r26, r22
    17f4:	b7 1f       	adc	r27, r23
    17f6:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <accumulate_alt_ti>
    17fa:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <accumulate_alt_ti+0x1>
    17fe:	a0 93 73 03 	sts	0x0373, r26	; 0x800373 <accumulate_alt_ti+0x2>
    1802:	b0 93 74 03 	sts	0x0374, r27	; 0x800374 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    1806:	86 e0       	ldi	r24, 0x06	; 6
    1808:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    180c:	09 2e       	mov	r0, r25
    180e:	00 0c       	add	r0, r0
    1810:	aa 0b       	sbc	r26, r26
    1812:	bb 0b       	sbc	r27, r27
    1814:	40 91 75 03 	lds	r20, 0x0375	; 0x800375 <accumulate_pwr_ti>
    1818:	50 91 76 03 	lds	r21, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
    181c:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
    1820:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
    1824:	84 0f       	add	r24, r20
    1826:	95 1f       	adc	r25, r21
    1828:	a6 1f       	adc	r26, r22
    182a:	b7 1f       	adc	r27, r23
    182c:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <accumulate_pwr_ti>
    1830:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <accumulate_pwr_ti+0x1>
    1834:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <accumulate_pwr_ti+0x2>
    1838:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    1842:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <adc_started_at>
    1846:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <adc_started_at+0x1>
    184a:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <adc_started_at+0x2>
    184e:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <adc_started_at+0x3>
    1852:	0a 96       	adiw	r24, 0x0a	; 10
    1854:	a1 1d       	adc	r26, r1
    1856:	b1 1d       	adc	r27, r1
    1858:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <adc_started_at>
    185c:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <adc_started_at+0x1>
    1860:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <adc_started_at+0x2>
    1864:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <adc_started_at+0x3>
    } 
}
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <IsValidValForAvccRef>:
uint8_t ref_loaded;
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

uint8_t IsValidValForAvccRef(uint32_t *value) 
{
    186e:	fc 01       	movw	r30, r24
    1870:	40 81       	ld	r20, Z
    1872:	51 81       	ldd	r21, Z+1	; 0x01
    1874:	62 81       	ldd	r22, Z+2	; 0x02
    1876:	73 81       	ldd	r23, Z+3	; 0x03
    1878:	41 52       	subi	r20, 0x21	; 33
    187a:	5a 4a       	sbci	r21, 0xAA	; 170
    187c:	64 44       	sbci	r22, 0x44	; 68
    187e:	71 09       	sbc	r23, r1
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	4f 33       	cpi	r20, 0x3F	; 63
    1884:	52 44       	sbci	r21, 0x42	; 66
    1886:	6f 40       	sbci	r22, 0x0F	; 15
    1888:	71 05       	cpc	r23, r1
    188a:	08 f0       	brcs	.+2      	; 0x188e <IsValidValForAvccRef+0x20>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    188e:	08 95       	ret

00001890 <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref(uint32_t *value) 
{
    1890:	fc 01       	movw	r30, r24
    1892:	40 81       	ld	r20, Z
    1894:	51 81       	ldd	r21, Z+1	; 0x01
    1896:	62 81       	ldd	r22, Z+2	; 0x02
    1898:	73 81       	ldd	r23, Z+3	; 0x03
    189a:	41 5a       	subi	r20, 0xA1	; 161
    189c:	5b 4b       	sbci	r21, 0xBB	; 187
    189e:	6d 40       	sbci	r22, 0x0D	; 13
    18a0:	71 09       	sbc	r23, r1
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	4f 37       	cpi	r20, 0x7F	; 127
    18a6:	5a 41       	sbci	r21, 0x1A	; 26
    18a8:	66 40       	sbci	r22, 0x06	; 6
    18aa:	71 05       	cpc	r23, r1
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <IsValidValFor1V1Ref+0x20>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    18b0:	08 95       	ret

000018b2 <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    18b2:	8e e1       	ldi	r24, 0x1E	; 30
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    if ( eeprom_is_ready() )
    18ba:	f9 99       	sbic	0x1f, 1	; 31
    18bc:	0a c0       	rjmp	.+20     	; 0x18d2 <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    18be:	84 34       	cpi	r24, 0x44	; 68
    18c0:	91 44       	sbci	r25, 0x41	; 65
    18c2:	49 f0       	breq	.+18     	; 0x18d6 <WriteEeReferenceId+0x24>
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    18c4:	64 e4       	ldi	r22, 0x44	; 68
    18c6:	71 e4       	ldi	r23, 0x41	; 65
    18c8:	8e e1       	ldi	r24, 0x1E	; 30
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 44 1a 	call	0x3488	; 0x3488 <eeprom_write_word>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    18d8:	08 95       	ret

000018da <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    18e6:	f9 99       	sbic	0x1f, 1	; 31
    18e8:	12 c0       	rjmp	.+36     	; 0x190e <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    18ea:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    18ee:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    18f2:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    18f6:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    18fa:	84 17       	cp	r24, r20
    18fc:	95 07       	cpc	r25, r21
    18fe:	a6 07       	cpc	r26, r22
    1900:	b7 07       	cpc	r27, r23
    1902:	39 f0       	breq	.+14     	; 0x1912 <WriteEeReferenceAvcc+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 3c 1a 	call	0x3478	; 0x3478 <eeprom_write_dword>
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1914:	08 95       	ret

00001916 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    1916:	84 e2       	ldi	r24, 0x24	; 36
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1922:	f9 99       	sbic	0x1f, 1	; 31
    1924:	12 c0       	rjmp	.+36     	; 0x194a <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    1926:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    192a:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    192e:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    1932:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    1936:	84 17       	cp	r24, r20
    1938:	95 07       	cpc	r25, r21
    193a:	a6 07       	cpc	r26, r22
    193c:	b7 07       	cpc	r27, r23
    193e:	39 f0       	breq	.+14     	; 0x194e <WriteEeReference1V1+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    1940:	84 e2       	ldi	r24, 0x24	; 36
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 3c 1a 	call	0x3478	; 0x3478 <eeprom_write_dword>
    1948:	02 c0       	rjmp	.+4      	; 0x194e <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1950:	08 95       	ret

00001952 <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1952:	8e e1       	ldi	r24, 0x1E	; 30
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    195a:	84 34       	cpi	r24, 0x44	; 68
    195c:	91 44       	sbci	r25, 0x41	; 65
    195e:	e1 f4       	brne	.+56     	; 0x1998 <LoadAnalogRefFromEEPROM+0x46>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    1960:	80 e2       	ldi	r24, 0x20	; 32
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    1968:	60 93 7e 03 	sts	0x037E, r22	; 0x80037e <ref_extern_avcc_uV>
    196c:	70 93 7f 03 	sts	0x037F, r23	; 0x80037f <ref_extern_avcc_uV+0x1>
    1970:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <ref_extern_avcc_uV+0x2>
    1974:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    1978:	84 e2       	ldi	r24, 0x24	; 36
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    1980:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <ref_intern_1v1_uV>
    1984:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <ref_intern_1v1_uV+0x1>
    1988:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <ref_intern_1v1_uV+0x2>
    198c:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_LOADED;
    1990:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	08 95       	ret
        return 1;
    }
    else
    {
        ref_extern_avcc_uV = 5000000UL; // set a default value
    1998:	80 e4       	ldi	r24, 0x40	; 64
    199a:	9b e4       	ldi	r25, 0x4B	; 75
    199c:	ac e4       	ldi	r26, 0x4C	; 76
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <ref_extern_avcc_uV>
    19a4:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <ref_extern_avcc_uV+0x1>
    19a8:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <ref_extern_avcc_uV+0x2>
    19ac:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = 1080000UL; // default
    19b0:	80 ec       	ldi	r24, 0xC0	; 192
    19b2:	9a e7       	ldi	r25, 0x7A	; 122
    19b4:	a0 e1       	ldi	r26, 0x10	; 16
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
    19bc:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
    19c0:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
    19c4:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_DEFAULT;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
        return 0;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    19d0:	08 95       	ret

000019d2 <CalReferancesFromI2CtoEE>:

// save calibration referances from I2C to EEPROM (if valid)
void CalReferancesFromI2CtoEE(void)
{
    if ( IsValidValForAvccRef(&ref_extern_avcc_uV) && IsValidValFor1V1Ref(&ref_intern_1v1_uV) )
    19d2:	8e e7       	ldi	r24, 0x7E	; 126
    19d4:	93 e0       	ldi	r25, 0x03	; 3
    19d6:	0e 94 37 0c 	call	0x186e	; 0x186e <IsValidValForAvccRef>
    19da:	88 23       	and	r24, r24
    19dc:	29 f1       	breq	.+74     	; 0x1a28 <CalReferancesFromI2CtoEE+0x56>
    19de:	82 e8       	ldi	r24, 0x82	; 130
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	0e 94 48 0c 	call	0x1890	; 0x1890 <IsValidValFor1V1Ref>
    19e6:	88 23       	and	r24, r24
    19e8:	f9 f0       	breq	.+62     	; 0x1a28 <CalReferancesFromI2CtoEE+0x56>
    {
        uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    19ea:	8e e1       	ldi	r24, 0x1E	; 30
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
        if ( (id != 0x4144) & (ref_loaded > REF_DEFAULT) ) // 'A' is 0x41 and 'D' is 0x44
    19f2:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <ref_loaded>
    19f6:	84 34       	cpi	r24, 0x44	; 68
    19f8:	91 44       	sbci	r25, 0x41	; 65
    19fa:	21 f0       	breq	.+8      	; 0x1a04 <CalReferancesFromI2CtoEE+0x32>
    19fc:	22 30       	cpi	r18, 0x02	; 2
    19fe:	10 f0       	brcs	.+4      	; 0x1a04 <CalReferancesFromI2CtoEE+0x32>
        {
            WriteEeReferenceId();
    1a00:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <WriteEeReferenceId>
            return; // that is enough for this loop
         }
        else 
        {
            if (ref_loaded == REF_1V1_TOSAVE)
    1a04:	23 30       	cpi	r18, 0x03	; 3
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <CalReferancesFromI2CtoEE+0x44>
            {
                if (WriteEeReference1V1())
    1a08:	0e 94 8b 0c 	call	0x1916	; 0x1916 <WriteEeReference1V1>
    1a0c:	88 23       	and	r24, r24
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <CalReferancesFromI2CtoEE+0x44>
                {
                    ref_loaded = REF_LOADED;
    1a10:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
                    return; // all done
    1a14:	08 95       	ret
                }
            }
            if (ref_loaded == REF_AVCC_TOSAVE)
    1a16:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	39 f4       	brne	.+14     	; 0x1a2c <CalReferancesFromI2CtoEE+0x5a>
            {
                if (WriteEeReferenceAvcc())
    1a1e:	0e 94 6d 0c 	call	0x18da	; 0x18da <WriteEeReferenceAvcc>
    1a22:	81 11       	cpse	r24, r1
    1a24:	f5 cf       	rjmp	.-22     	; 0x1a10 <CalReferancesFromI2CtoEE+0x3e>
    1a26:	08 95       	ret
        }       

    }
    else
    {
        LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1a28:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <LoadAnalogRefFromEEPROM>
    1a2c:	08 95       	ret

00001a2e <check_if_alt_should_be_on>:


// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    1a2e:	af 92       	push	r10
    1a30:	bf 92       	push	r11
    1a32:	cf 92       	push	r12
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    if (enable_alternate_power)
    1a42:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <enable_alternate_power>
    1a46:	88 23       	and	r24, r24
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <check_if_alt_should_be_on+0x1e>
    1a4a:	d1 c0       	rjmp	.+418    	; 0x1bee <check_if_alt_should_be_on+0x1c0>
    {
        int battery = analogRead(PWR_V);
    1a4c:	87 e0       	ldi	r24, 0x07	; 7
    1a4e:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    1a52:	7c 01       	movw	r14, r24
        if (battery >= battery_high_limit)
    1a54:	c0 91 90 03 	lds	r28, 0x0390	; 0x800390 <battery_high_limit>
    1a58:	d0 91 91 03 	lds	r29, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1a5c:	8c 17       	cp	r24, r28
    1a5e:	9d 07       	cpc	r25, r29
    1a60:	4c f0       	brlt	.+18     	; 0x1a74 <check_if_alt_should_be_on+0x46>
        {
            if (digitalRead(ALT_EN))
    1a62:	1b 9b       	sbis	0x03, 3	; 3
    1a64:	c8 c0       	rjmp	.+400    	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1a66:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a68:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1a6a:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a6c:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                enable_alternate_power = 0; // charge is done
    1a6e:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <enable_alternate_power>
    1a72:	c1 c0       	rjmp	.+386    	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
            }
            return; // if alt_en is not on do nothing
        }
        int pwm_range = ( (battery_high_limit - battery_low_limit)>>1 ); // half the diff between high and low limit
    1a74:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <battery_low_limit>
    1a78:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1a7c:	c8 1b       	sub	r28, r24
    1a7e:	d9 0b       	sbc	r29, r25
    1a80:	d5 95       	asr	r29
    1a82:	c7 95       	ror	r28
        unsigned long kRuntime = millis() - alt_pwm_started_at;
    1a84:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1a88:	00 91 88 03 	lds	r16, 0x0388	; 0x800388 <alt_pwm_started_at>
    1a8c:	10 91 89 03 	lds	r17, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1a90:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1a94:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1a98:	5b 01       	movw	r10, r22
    1a9a:	6c 01       	movw	r12, r24
    1a9c:	a0 1a       	sub	r10, r16
    1a9e:	b1 0a       	sbc	r11, r17
    1aa0:	c2 0a       	sbc	r12, r18
    1aa2:	d3 0a       	sbc	r13, r19
    1aa4:	96 01       	movw	r18, r12
    1aa6:	85 01       	movw	r16, r10
        if (battery < (battery_low_limit + pwm_range ) )
    1aa8:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <battery_low_limit>
    1aac:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1ab0:	8c 0f       	add	r24, r28
    1ab2:	9d 1f       	adc	r25, r29
    1ab4:	e8 16       	cp	r14, r24
    1ab6:	f9 06       	cpc	r15, r25
    1ab8:	0c f0       	brlt	.+2      	; 0x1abc <check_if_alt_should_be_on+0x8e>
    1aba:	5b c0       	rjmp	.+182    	; 0x1b72 <check_if_alt_should_be_on+0x144>
        { // half way between high and low limit pwm will occure at 2 sec intervals
            unsigned long offtime = ALT_PWM_PERIOD * ( (battery_high_limit - battery) / pwm_range );
            if (digitalRead(ALT_EN))
    1abc:	1b 9b       	sbis	0x03, 3	; 3
    1abe:	39 c0       	rjmp	.+114    	; 0x1b32 <check_if_alt_should_be_on+0x104>
            {
                if ( (kRuntime + offtime) > ALT_PWM_PERIOD )
    1ac0:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <battery_high_limit>
    1ac4:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1ac8:	8e 19       	sub	r24, r14
    1aca:	9f 09       	sbc	r25, r15
    1acc:	be 01       	movw	r22, r28
    1ace:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__divmodhi4>
    1ad2:	40 ed       	ldi	r20, 0xD0	; 208
    1ad4:	57 e0       	ldi	r21, 0x07	; 7
    1ad6:	64 9f       	mul	r22, r20
    1ad8:	c0 01       	movw	r24, r0
    1ada:	65 9f       	mul	r22, r21
    1adc:	90 0d       	add	r25, r0
    1ade:	74 9f       	mul	r23, r20
    1ae0:	90 0d       	add	r25, r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	09 2e       	mov	r0, r25
    1ae6:	00 0c       	add	r0, r0
    1ae8:	aa 0b       	sbc	r26, r26
    1aea:	bb 0b       	sbc	r27, r27
    1aec:	8a 0d       	add	r24, r10
    1aee:	9b 1d       	adc	r25, r11
    1af0:	ac 1d       	adc	r26, r12
    1af2:	bd 1d       	adc	r27, r13
    1af4:	81 3d       	cpi	r24, 0xD1	; 209
    1af6:	97 40       	sbci	r25, 0x07	; 7
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <check_if_alt_should_be_on+0xd2>
    1afe:	7b c0       	rjmp	.+246    	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b00:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b02:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1b04:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b06:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,LOW);
                    alt_pwm_accum_charge_time += kRuntime;
    1b08:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <alt_pwm_accum_charge_time>
    1b0c:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <alt_pwm_accum_charge_time+0x1>
    1b10:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <alt_pwm_accum_charge_time+0x2>
    1b14:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    1b18:	08 0f       	add	r16, r24
    1b1a:	19 1f       	adc	r17, r25
    1b1c:	2a 1f       	adc	r18, r26
    1b1e:	3b 1f       	adc	r19, r27
    1b20:	00 93 8c 03 	sts	0x038C, r16	; 0x80038c <alt_pwm_accum_charge_time>
    1b24:	10 93 8d 03 	sts	0x038D, r17	; 0x80038d <alt_pwm_accum_charge_time+0x1>
    1b28:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <alt_pwm_accum_charge_time+0x2>
    1b2c:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    1b30:	62 c0       	rjmp	.+196    	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
                }
            }
            else 
            {
                if ( kRuntime > ALT_PWM_PERIOD )
    1b32:	81 ed       	ldi	r24, 0xD1	; 209
    1b34:	a8 16       	cp	r10, r24
    1b36:	87 e0       	ldi	r24, 0x07	; 7
    1b38:	b8 06       	cpc	r11, r24
    1b3a:	c1 04       	cpc	r12, r1
    1b3c:	d1 04       	cpc	r13, r1
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <check_if_alt_should_be_on+0x114>
    1b40:	5a c0       	rjmp	.+180    	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b42:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b44:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1b46:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b48:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,HIGH);
                    if (kRuntime > (ALT_PWM_PERIOD<<1) )
    1b4a:	41 ea       	ldi	r20, 0xA1	; 161
    1b4c:	a4 16       	cp	r10, r20
    1b4e:	4f e0       	ldi	r20, 0x0F	; 15
    1b50:	b4 06       	cpc	r11, r20
    1b52:	c1 04       	cpc	r12, r1
    1b54:	d1 04       	cpc	r13, r1
    1b56:	58 f5       	brcc	.+86     	; 0x1bae <check_if_alt_should_be_on+0x180>
                    {
                        alt_pwm_started_at = millis();
                    }
                    else
                    {
                        alt_pwm_started_at += ALT_PWM_PERIOD;
    1b58:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_pwm_started_at>
    1b5c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1b60:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1b64:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1b68:	80 53       	subi	r24, 0x30	; 48
    1b6a:	98 4f       	sbci	r25, 0xF8	; 248
    1b6c:	af 4f       	sbci	r26, 0xFF	; 255
    1b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b70:	35 c0       	rjmp	.+106    	; 0x1bdc <check_if_alt_should_be_on+0x1ae>
                    }
                }
            }
            return;
        }
        else if (digitalRead(ALT_EN))
    1b72:	1b 9b       	sbis	0x03, 3	; 3
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <check_if_alt_should_be_on+0x15c>
        { // if pwm is not occuring we still need to rest every so often to measure the battery
            if ( (kRuntime + ALT_REST) > ALT_REST_PERIOD )
    1b76:	06 50       	subi	r16, 0x06	; 6
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	2f 4f       	sbci	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	01 31       	cpi	r16, 0x11	; 17
    1b80:	17 42       	sbci	r17, 0x27	; 39
    1b82:	21 05       	cpc	r18, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	b8 f1       	brcs	.+110    	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
    1b88:	32 c0       	rjmp	.+100    	; 0x1bee <check_if_alt_should_be_on+0x1c0>
            }
            return;
        }
        else 
        {
            if ( kRuntime > ALT_REST_PERIOD)
    1b8a:	41 e1       	ldi	r20, 0x11	; 17
    1b8c:	a4 16       	cp	r10, r20
    1b8e:	47 e2       	ldi	r20, 0x27	; 39
    1b90:	b4 06       	cpc	r11, r20
    1b92:	c1 04       	cpc	r12, r1
    1b94:	d1 04       	cpc	r13, r1
    1b96:	78 f1       	brcs	.+94     	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b98:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b9a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1b9c:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b9e:	8f bf       	out	0x3f, r24	; 63
            { // end of resting time, start charging
                digitalWrite(ALT_EN,HIGH);
                if (kRuntime > (ALT_REST_PERIOD<<1) )
    1ba0:	81 e2       	ldi	r24, 0x21	; 33
    1ba2:	a8 16       	cp	r10, r24
    1ba4:	8e e4       	ldi	r24, 0x4E	; 78
    1ba6:	b8 06       	cpc	r11, r24
    1ba8:	c1 04       	cpc	r12, r1
    1baa:	d1 04       	cpc	r13, r1
    1bac:	58 f0       	brcs	.+22     	; 0x1bc4 <check_if_alt_should_be_on+0x196>
                {
                    alt_pwm_started_at = millis();
    1bae:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    1bb2:	60 93 88 03 	sts	0x0388, r22	; 0x800388 <alt_pwm_started_at>
    1bb6:	70 93 89 03 	sts	0x0389, r23	; 0x800389 <alt_pwm_started_at+0x1>
    1bba:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <alt_pwm_started_at+0x2>
    1bbe:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <alt_pwm_started_at+0x3>
    1bc2:	19 c0       	rjmp	.+50     	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
                }
                else
                {
                    alt_pwm_started_at += ALT_REST_PERIOD;
    1bc4:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_pwm_started_at>
    1bc8:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1bcc:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1bd0:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1bd4:	80 5f       	subi	r24, 0xF0	; 240
    1bd6:	98 4d       	sbci	r25, 0xD8	; 216
    1bd8:	af 4f       	sbci	r26, 0xFF	; 255
    1bda:	bf 4f       	sbci	r27, 0xFF	; 255
    1bdc:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <alt_pwm_started_at>
    1be0:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <alt_pwm_started_at+0x1>
    1be4:	a0 93 8a 03 	sts	0x038A, r26	; 0x80038a <alt_pwm_started_at+0x2>
    1be8:	b0 93 8b 03 	sts	0x038B, r27	; 0x80038b <alt_pwm_started_at+0x3>
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1bee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bf0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1bf2:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bf4:	8f bf       	out	0x3f, r24	; 63
    }
    else 
    {
        digitalWrite(ALT_EN,LOW);
    }
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	af 90       	pop	r10
    1c0a:	08 95       	ret

00001c0c <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 81       	ld	r18, Z
    1c10:	31 81       	ldd	r19, Z+1	; 0x01
    1c12:	2b 54       	subi	r18, 0x4B	; 75
    1c14:	31 40       	sbci	r19, 0x01	; 1
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	27 38       	cpi	r18, 0x87	; 135
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <IsValidBatHighLimFor12V+0x14>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c20:	08 95       	ret

00001c22 <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 81       	ld	r18, Z
    1c26:	31 81       	ldd	r19, Z+1	; 0x01
    1c28:	2e 53       	subi	r18, 0x3E	; 62
    1c2a:	31 40       	sbci	r19, 0x01	; 1
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	26 36       	cpi	r18, 0x66	; 102
    1c30:	31 05       	cpc	r19, r1
    1c32:	08 f0       	brcs	.+2      	; 0x1c36 <IsValidBatLowLimFor12V+0x14>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c36:	08 95       	ret

00001c38 <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 81       	ld	r18, Z
    1c3c:	31 81       	ldd	r19, Z+1	; 0x01
    1c3e:	25 59       	subi	r18, 0x95	; 149
    1c40:	32 40       	sbci	r19, 0x02	; 2
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	2f 30       	cpi	r18, 0x0F	; 15
    1c46:	31 40       	sbci	r19, 0x01	; 1
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <IsValidBatHighLimFor24V+0x14>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c4c:	08 95       	ret

00001c4e <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 81       	ld	r18, Z
    1c52:	31 81       	ldd	r19, Z+1	; 0x01
    1c54:	2c 57       	subi	r18, 0x7C	; 124
    1c56:	32 40       	sbci	r19, 0x02	; 2
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	2b 3c       	cpi	r18, 0xCB	; 203
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <IsValidBatLowLimFor24V+0x14>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c62:	08 95       	ret

00001c64 <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1c64:	8c e3       	ldi	r24, 0x3C	; 60
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1c6c:	f9 99       	sbic	0x1f, 1	; 31
    1c6e:	0c c0       	rjmp	.+24     	; 0x1c88 <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1c70:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <battery_high_limit>
    1c74:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1c78:	86 17       	cp	r24, r22
    1c7a:	97 07       	cpc	r25, r23
    1c7c:	39 f0       	breq	.+14     	; 0x1c8c <WriteEEBatHighLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    1c7e:	8c e3       	ldi	r24, 0x3C	; 60
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 44 1a 	call	0x3488	; 0x3488 <eeprom_write_word>
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1c8e:	08 95       	ret

00001c90 <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1c90:	8e e3       	ldi	r24, 0x3E	; 62
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1c98:	f9 99       	sbic	0x1f, 1	; 31
    1c9a:	0c c0       	rjmp	.+24     	; 0x1cb4 <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    1c9c:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <battery_low_limit>
    1ca0:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1ca4:	86 17       	cp	r24, r22
    1ca6:	97 07       	cpc	r25, r23
    1ca8:	39 f0       	breq	.+14     	; 0x1cb8 <WriteEEBatLowLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    1caa:	8e e3       	ldi	r24, 0x3E	; 62
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 44 1a 	call	0x3488	; 0x3488 <eeprom_write_word>
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1cba:	08 95       	ret

00001cbc <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <LoadBatLimitsFromEEPROM+0xe>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <LoadBatLimitsFromEEPROM+0x10>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1cd0:	8c e3       	ldi	r24, 0x3C	; 60
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    1cd8:	7c 01       	movw	r14, r24
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    1cde:	8e e3       	ldi	r24, 0x3E	; 62
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    1ce6:	8c 01       	movw	r16, r24
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    1cec:	ce 01       	movw	r24, r28
    1cee:	03 96       	adiw	r24, 0x03	; 3
    1cf0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <IsValidBatHighLimFor12V>
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	06 c0       	rjmp	.+12     	; 0x1d04 <LoadBatLimitsFromEEPROM+0x48>
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	03 96       	adiw	r24, 0x03	; 3
    1cfc:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <IsValidBatHighLimFor24V>
    1d00:	88 23       	and	r24, r24
    1d02:	c1 f0       	breq	.+48     	; 0x1d34 <LoadBatLimitsFromEEPROM+0x78>
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <IsValidBatLowLimFor12V>
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	06 c0       	rjmp	.+12     	; 0x1d1c <LoadBatLimitsFromEEPROM+0x60>
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <IsValidBatLowLimFor24V>
    1d18:	88 23       	and	r24, r24
    1d1a:	61 f0       	breq	.+24     	; 0x1d34 <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    1d1c:	f0 92 91 03 	sts	0x0391, r15	; 0x800391 <battery_high_limit+0x1>
    1d20:	e0 92 90 03 	sts	0x0390, r14	; 0x800390 <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    1d24:	10 93 94 03 	sts	0x0394, r17	; 0x800394 <battery_low_limit+0x1>
    1d28:	00 93 93 03 	sts	0x0393, r16	; 0x800393 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    1d2c:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bat_limit_loaded>
        return 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	10 c0       	rjmp	.+32     	; 0x1d54 <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    1d34:	8d e8       	ldi	r24, 0x8D	; 141
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <battery_high_limit+0x1>
    1d3c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1d40:	86 e7       	ldi	r24, 0x76	; 118
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <battery_low_limit+0x1>
    1d48:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	08 95       	ret

00001d6a <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1d6a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	99 f4       	brne	.+38     	; 0x1d98 <BatLimitsFromI2CtoEE+0x2e>
    {
        if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1d72:	80 e9       	ldi	r24, 0x90	; 144
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <IsValidBatHighLimFor12V>
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	06 c0       	rjmp	.+12     	; 0x1d8a <BatLimitsFromI2CtoEE+0x20>
    1d7e:	80 e9       	ldi	r24, 0x90	; 144
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <IsValidBatHighLimFor24V>
    1d86:	88 23       	and	r24, r24
    1d88:	39 f0       	breq	.+14     	; 0x1d98 <BatLimitsFromI2CtoEE+0x2e>
        {
            if (WriteEEBatHighLim())
    1d8a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <WriteEEBatHighLim>
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <BatLimitsFromI2CtoEE+0x2e>
            {
                bat_limit_loaded = BAT_LIM_LOADED;
    1d92:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bat_limit_loaded>
                return; // all done
    1d96:	08 95       	ret
            }
        }
    }
    if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1d98:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	81 f4       	brne	.+32     	; 0x1dc0 <BatLimitsFromI2CtoEE+0x56>
    {    
        if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1da0:	83 e9       	ldi	r24, 0x93	; 147
    1da2:	93 e0       	ldi	r25, 0x03	; 3
    1da4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <IsValidBatLowLimFor12V>
    1da8:	81 11       	cpse	r24, r1
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <BatLimitsFromI2CtoEE+0x4e>
    1dac:	83 e9       	ldi	r24, 0x93	; 147
    1dae:	93 e0       	ldi	r25, 0x03	; 3
    1db0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <IsValidBatLowLimFor24V>
    1db4:	88 23       	and	r24, r24
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <BatLimitsFromI2CtoEE+0x56>
        {
            if (WriteEEBatLowLim())
    1db8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <WriteEEBatLowLim>
    1dbc:	81 11       	cpse	r24, r1
    1dbe:	e9 cf       	rjmp	.-46     	; 0x1d92 <BatLimitsFromI2CtoEE+0x28>
                bat_limit_loaded = BAT_LIM_LOADED;
                return; // all done
            }
        }
    }
    LoadBatLimitsFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    1dc0:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <LoadBatLimitsFromEEPROM>

00001dc4 <IsValidMorningThresholdFor12V>:
int daynight_evening_threshold;
unsigned long daynight_morning_debounce;
unsigned long daynight_evening_debounce;

uint8_t IsValidMorningThresholdFor12V(int *value) 
{
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	20 81       	ld	r18, Z
    1dc8:	31 81       	ldd	r19, Z+1	; 0x01
    1dca:	2c 53       	subi	r18, 0x3C	; 60
    1dcc:	31 09       	sbc	r19, r1
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	23 39       	cpi	r18, 0x93	; 147
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <IsValidMorningThresholdFor12V+0x14>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dd8:	08 95       	ret

00001dda <IsValidEveningThresholdFor12V>:

uint8_t IsValidEveningThresholdFor12V(int *value) 
{
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 81       	ld	r18, Z
    1dde:	31 81       	ldd	r19, Z+1	; 0x01
    1de0:	2a 51       	subi	r18, 0x1A	; 26
    1de2:	31 09       	sbc	r19, r1
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	2e 34       	cpi	r18, 0x4E	; 78
    1de8:	31 05       	cpc	r19, r1
    1dea:	08 f0       	brcs	.+2      	; 0x1dee <IsValidEveningThresholdFor12V+0x14>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dee:	08 95       	ret

00001df0 <IsValidMorningThresholdFor24V>:

uint8_t IsValidMorningThresholdFor24V(int *value) 
{
    1df0:	fc 01       	movw	r30, r24
    1df2:	20 81       	ld	r18, Z
    1df4:	31 81       	ldd	r19, Z+1	; 0x01
    1df6:	27 57       	subi	r18, 0x77	; 119
    1df8:	31 09       	sbc	r19, r1
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	27 32       	cpi	r18, 0x27	; 39
    1dfe:	31 40       	sbci	r19, 0x01	; 1
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <IsValidMorningThresholdFor24V+0x14>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e04:	08 95       	ret

00001e06 <IsValidEveningThresholdFor24V>:

uint8_t IsValidEveningThresholdFor24V(int *value) 
{
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 81       	ld	r18, Z
    1e0a:	31 81       	ldd	r19, Z+1	; 0x01
    1e0c:	23 53       	subi	r18, 0x33	; 51
    1e0e:	31 09       	sbc	r19, r1
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	2c 39       	cpi	r18, 0x9C	; 156
    1e14:	31 05       	cpc	r19, r1
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <IsValidEveningThresholdFor24V+0x14>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e1a:	08 95       	ret

00001e1c <IsValidEveningDebounce>:
        return 0;
    }
}

uint8_t IsValidEveningDebounce(unsigned long *value) 
{
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	40 81       	ld	r20, Z
    1e20:	51 81       	ldd	r21, Z+1	; 0x01
    1e22:	62 81       	ldd	r22, Z+2	; 0x02
    1e24:	73 81       	ldd	r23, Z+3	; 0x03
    1e26:	41 54       	subi	r20, 0x41	; 65
    1e28:	5f 41       	sbci	r21, 0x1F	; 31
    1e2a:	61 09       	sbc	r22, r1
    1e2c:	71 09       	sbc	r23, r1
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	4f 33       	cpi	r20, 0x3F	; 63
    1e32:	5f 4c       	sbci	r21, 0xCF	; 207
    1e34:	66 43       	sbci	r22, 0x36	; 54
    1e36:	71 05       	cpc	r23, r1
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <IsValidEveningDebounce+0x20>
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e3c:	08 95       	ret

00001e3e <WriteEEMorningThreshold>:

// wrtite daynight_morning_threshold (when morning debounce starts) to EEPROM
uint8_t WriteEEMorningThreshold() 
{
    uint16_t tmp_daynight_morning_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)); 
    1e3e:	86 e4       	ldi	r24, 0x46	; 70
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e46:	f9 99       	sbic	0x1f, 1	; 31
    1e48:	0c c0       	rjmp	.+24     	; 0x1e62 <WriteEEMorningThreshold+0x24>
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
    1e4a:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <daynight_morning_threshold>
    1e4e:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    1e52:	86 17       	cp	r24, r22
    1e54:	97 07       	cpc	r25, r23
    1e56:	39 f0       	breq	.+14     	; 0x1e66 <WriteEEMorningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
    1e58:	86 e4       	ldi	r24, 0x46	; 70
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 44 1a 	call	0x3488	; 0x3488 <eeprom_write_word>
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <WriteEEMorningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	08 95       	ret
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
        }
        return 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e68:	08 95       	ret

00001e6a <WriteEEEveningThreshold>:

// wrtite daynight_evening_threshold (when evening debounce starts) to EEPROM
uint8_t WriteEEEveningThreshold() 
{
    uint16_t tmp_daynight_evening_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)); 
    1e6a:	88 e4       	ldi	r24, 0x48	; 72
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e72:	f9 99       	sbic	0x1f, 1	; 31
    1e74:	0c c0       	rjmp	.+24     	; 0x1e8e <WriteEEEveningThreshold+0x24>
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
    1e76:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <daynight_evening_threshold>
    1e7a:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    1e7e:	86 17       	cp	r24, r22
    1e80:	97 07       	cpc	r25, r23
    1e82:	39 f0       	breq	.+14     	; 0x1e92 <WriteEEEveningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
    1e84:	88 e4       	ldi	r24, 0x48	; 72
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 44 1a 	call	0x3488	; 0x3488 <eeprom_write_word>
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <WriteEEEveningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	08 95       	ret
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
        }
        return 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e94:	08 95       	ret

00001e96 <WriteEEMorningDebounce>:

// wrtite daynight_morning_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEMorningDebounce() 
{
    uint32_t tmp_daynight_morning_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)); 
    1e96:	8a e4       	ldi	r24, 0x4A	; 74
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1ea2:	f9 99       	sbic	0x1f, 1	; 31
    1ea4:	12 c0       	rjmp	.+36     	; 0x1eca <WriteEEMorningDebounce+0x34>
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
    1ea6:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <daynight_morning_debounce>
    1eaa:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    1eae:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    1eb2:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    1eb6:	84 17       	cp	r24, r20
    1eb8:	95 07       	cpc	r25, r21
    1eba:	a6 07       	cpc	r26, r22
    1ebc:	b7 07       	cpc	r27, r23
    1ebe:	39 f0       	breq	.+14     	; 0x1ece <WriteEEMorningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
    1ec0:	8a e4       	ldi	r24, 0x4A	; 74
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <eeprom_write_dword>
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <WriteEEMorningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	08 95       	ret
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
        }
        return 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1ed0:	08 95       	ret

00001ed2 <WriteEEEveningDebounce>:

// wrtite daynight_evening_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEEveningDebounce() 
{
    uint32_t tmp_daynight_evening_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)); 
    1ed2:	8e e4       	ldi	r24, 0x4E	; 78
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1ede:	f9 99       	sbic	0x1f, 1	; 31
    1ee0:	12 c0       	rjmp	.+36     	; 0x1f06 <WriteEEEveningDebounce+0x34>
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
    1ee2:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <daynight_evening_debounce>
    1ee6:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    1eea:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    1eee:	70 91 98 03 	lds	r23, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    1ef2:	84 17       	cp	r24, r20
    1ef4:	95 07       	cpc	r25, r21
    1ef6:	a6 07       	cpc	r26, r22
    1ef8:	b7 07       	cpc	r27, r23
    1efa:	39 f0       	breq	.+14     	; 0x1f0a <WriteEEEveningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
    1efc:	8e e4       	ldi	r24, 0x4E	; 78
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 3c 1a 	call	0x3478	; 0x3478 <eeprom_write_dword>
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <WriteEEEveningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	08 95       	ret
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
        }
        return 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f0c:	08 95       	ret

00001f0e <LoadDayNightValuesFromEEPROM>:

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	2c 97       	sbiw	r28, 0x0c	; 12
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    uint8_t use_defaults = 0;
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    1f2c:	86 e4       	ldi	r24, 0x46	; 70
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    1f34:	7c 01       	movw	r14, r24
    1f36:	9c 87       	std	Y+12, r25	; 0x0c
    1f38:	8b 87       	std	Y+11, r24	; 0x0b
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	0b 96       	adiw	r24, 0x0b	; 11
    1f3e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <IsValidMorningThresholdFor12V>
    1f42:	81 11       	cpse	r24, r1
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <LoadDayNightValuesFromEEPROM+0x44>
    1f46:	ce 01       	movw	r24, r28
    1f48:	0b 96       	adiw	r24, 0x0b	; 11
    1f4a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <IsValidMorningThresholdFor24V>
    1f4e:	88 23       	and	r24, r24
    1f50:	31 f0       	breq	.+12     	; 0x1f5e <LoadDayNightValuesFromEEPROM+0x50>
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    1f52:	f0 92 9a 03 	sts	0x039A, r15	; 0x80039a <daynight_morning_threshold+0x1>
    1f56:	e0 92 99 03 	sts	0x0399, r14	; 0x800399 <daynight_morning_threshold>
}

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    uint8_t use_defaults = 0;
    1f5a:	10 e0       	ldi	r17, 0x00	; 0
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <LoadDayNightValuesFromEEPROM+0x52>
    }
    else
    {
        use_defaults = 1;
    1f5e:	11 e0       	ldi	r17, 0x01	; 1
    }
    int tmp_daynight_evening_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)));
    1f60:	88 e4       	ldi	r24, 0x48	; 72
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 28 1a 	call	0x3450	; 0x3450 <eeprom_read_word>
    1f68:	7c 01       	movw	r14, r24
    1f6a:	9a 87       	std	Y+10, r25	; 0x0a
    1f6c:	89 87       	std	Y+9, r24	; 0x09
    if ( (IsValidEveningThresholdFor12V(&tmp_daynight_evening_threshold) || IsValidEveningThresholdFor24V(&tmp_daynight_evening_threshold)) )
    1f6e:	ce 01       	movw	r24, r28
    1f70:	09 96       	adiw	r24, 0x09	; 9
    1f72:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <IsValidEveningThresholdFor12V>
    1f76:	81 11       	cpse	r24, r1
    1f78:	06 c0       	rjmp	.+12     	; 0x1f86 <LoadDayNightValuesFromEEPROM+0x78>
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	09 96       	adiw	r24, 0x09	; 9
    1f7e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <IsValidEveningThresholdFor24V>
    1f82:	88 23       	and	r24, r24
    1f84:	29 f0       	breq	.+10     	; 0x1f90 <LoadDayNightValuesFromEEPROM+0x82>
    {
        daynight_evening_threshold = tmp_daynight_evening_threshold;
    1f86:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <daynight_evening_threshold+0x1>
    1f8a:	e0 92 9c 03 	sts	0x039C, r14	; 0x80039c <daynight_evening_threshold>
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <LoadDayNightValuesFromEEPROM+0x84>
    }
    else
    {
        use_defaults = 1;
    1f90:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_morning_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)));
    1f92:	8a e4       	ldi	r24, 0x4A	; 74
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    1f9a:	6b 01       	movw	r12, r22
    1f9c:	7c 01       	movw	r14, r24
    1f9e:	6d 83       	std	Y+5, r22	; 0x05
    1fa0:	7e 83       	std	Y+6, r23	; 0x06
    1fa2:	8f 83       	std	Y+7, r24	; 0x07
    1fa4:	98 87       	std	Y+8, r25	; 0x08
    if ( IsValidMorningDebounce(&tmp_daynight_morning_debounce) )
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	05 96       	adiw	r24, 0x05	; 5
    1faa:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <IsValidEveningDebounce>
    1fae:	88 23       	and	r24, r24
    1fb0:	49 f0       	breq	.+18     	; 0x1fc4 <LoadDayNightValuesFromEEPROM+0xb6>
    {
        daynight_morning_debounce = tmp_daynight_morning_debounce;
    1fb2:	c0 92 9e 03 	sts	0x039E, r12	; 0x80039e <daynight_morning_debounce>
    1fb6:	d0 92 9f 03 	sts	0x039F, r13	; 0x80039f <daynight_morning_debounce+0x1>
    1fba:	e0 92 a0 03 	sts	0x03A0, r14	; 0x8003a0 <daynight_morning_debounce+0x2>
    1fbe:	f0 92 a1 03 	sts	0x03A1, r15	; 0x8003a1 <daynight_morning_debounce+0x3>
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <LoadDayNightValuesFromEEPROM+0xb8>
    }
    else
    {
        use_defaults = 1;
    1fc4:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    1fc6:	8e e4       	ldi	r24, 0x4E	; 78
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 22 1a 	call	0x3444	; 0x3444 <eeprom_read_dword>
    1fce:	6b 01       	movw	r12, r22
    1fd0:	7c 01       	movw	r14, r24
    1fd2:	69 83       	std	Y+1, r22	; 0x01
    1fd4:	7a 83       	std	Y+2, r23	; 0x02
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    1fda:	ce 01       	movw	r24, r28
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <IsValidEveningDebounce>
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	25 c0       	rjmp	.+74     	; 0x2030 <LoadDayNightValuesFromEEPROM+0x122>
        use_defaults = 1;
    }
    if (use_defaults)
    {
        // default values are for 12V PV measured with ALT_V channel with 5V referance
        daynight_morning_threshold = 80; // 4.3/(((5.0)/1024.0)*(110.0/10.0))
    1fe6:	80 e5       	ldi	r24, 0x50	; 80
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <daynight_morning_threshold+0x1>
    1fee:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <daynight_morning_threshold>
        daynight_evening_threshold = 40; // 2.15/(((5.0)/1024.0)*(110.0/10.0))
    1ff2:	88 e2       	ldi	r24, 0x28	; 40
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <daynight_evening_threshold+0x1>
    1ffa:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <daynight_evening_threshold>
        daynight_morning_debounce = 1200000UL; // 20 min
    1ffe:	80 e8       	ldi	r24, 0x80	; 128
    2000:	9f e4       	ldi	r25, 0x4F	; 79
    2002:	a2 e1       	ldi	r26, 0x12	; 18
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <daynight_morning_debounce>
    200a:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <daynight_morning_debounce+0x1>
    200e:	a0 93 a0 03 	sts	0x03A0, r26	; 0x8003a0 <daynight_morning_debounce+0x2>
    2012:	b0 93 a1 03 	sts	0x03A1, r27	; 0x8003a1 <daynight_morning_debounce+0x3>
        daynight_evening_debounce = 1200000UL; // 20 min
    2016:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <daynight_evening_debounce>
    201a:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <daynight_evening_debounce+0x1>
    201e:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <daynight_evening_debounce+0x2>
    2022:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <daynight_evening_debounce+0x3>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
        return 0;
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	0d c0       	rjmp	.+26     	; 0x204a <LoadDayNightValuesFromEEPROM+0x13c>
        use_defaults = 1;
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    {
        daynight_evening_debounce = tmp_daynight_evening_debounce;
    2030:	c0 92 95 03 	sts	0x0395, r12	; 0x800395 <daynight_evening_debounce>
    2034:	d0 92 96 03 	sts	0x0396, r13	; 0x800396 <daynight_evening_debounce+0x1>
    2038:	e0 92 97 03 	sts	0x0397, r14	; 0x800397 <daynight_evening_debounce+0x2>
    203c:	f0 92 98 03 	sts	0x0398, r15	; 0x800398 <daynight_evening_debounce+0x3>
    }
    else
    {
        use_defaults = 1;
    }
    if (use_defaults)
    2040:	11 11       	cpse	r17, r1
    2042:	d1 cf       	rjmp	.-94     	; 0x1fe6 <LoadDayNightValuesFromEEPROM+0xd8>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
        return 0;
    }
    else
    {
        daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    2044:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <daynight_values_loaded>
        return 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    204a:	2c 96       	adiw	r28, 0x0c	; 12
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
    2060:	df 90       	pop	r13
    2062:	cf 90       	pop	r12
    2064:	08 95       	ret

00002066 <DayNightValuesFromI2CtoEE>:

// Save day-night state machine values from I2C to EEPROM (if valid), one will change per loop, and I2C will take several loop cycles to get another.
void DayNightValuesFromI2CtoEE(void)
{
    if (daynight_values_loaded == DAYNIGHT_MORNING_THRESHOLD_TOSAVE)
    2066:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	99 f4       	brne	.+38     	; 0x2094 <DayNightValuesFromI2CtoEE+0x2e>
    {
        if ( IsValidMorningThresholdFor12V(&daynight_morning_threshold) || IsValidMorningThresholdFor24V(&daynight_morning_threshold) )
    206e:	89 e9       	ldi	r24, 0x99	; 153
    2070:	93 e0       	ldi	r25, 0x03	; 3
    2072:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <IsValidMorningThresholdFor12V>
    2076:	81 11       	cpse	r24, r1
    2078:	06 c0       	rjmp	.+12     	; 0x2086 <DayNightValuesFromI2CtoEE+0x20>
    207a:	89 e9       	ldi	r24, 0x99	; 153
    207c:	93 e0       	ldi	r25, 0x03	; 3
    207e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <IsValidMorningThresholdFor24V>
    2082:	88 23       	and	r24, r24
    2084:	39 f0       	breq	.+14     	; 0x2094 <DayNightValuesFromI2CtoEE+0x2e>
        {
            if (WriteEEMorningThreshold())
    2086:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <WriteEEMorningThreshold>
    208a:	88 23       	and	r24, r24
    208c:	19 f0       	breq	.+6      	; 0x2094 <DayNightValuesFromI2CtoEE+0x2e>
            {
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    208e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <daynight_values_loaded>
                return; // all done
    2092:	08 95       	ret
            }
        }
    }
    if (daynight_values_loaded == DAYNIGHT_EVENING_THRESHOLD_TOSAVE)
    2094:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	81 f4       	brne	.+32     	; 0x20bc <DayNightValuesFromI2CtoEE+0x56>
    {    
        if ( IsValidEveningThresholdFor12V(&daynight_evening_threshold) || IsValidEveningThresholdFor24V(&daynight_evening_threshold) )
    209c:	8c e9       	ldi	r24, 0x9C	; 156
    209e:	93 e0       	ldi	r25, 0x03	; 3
    20a0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <IsValidEveningThresholdFor12V>
    20a4:	81 11       	cpse	r24, r1
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <DayNightValuesFromI2CtoEE+0x4e>
    20a8:	8c e9       	ldi	r24, 0x9C	; 156
    20aa:	93 e0       	ldi	r25, 0x03	; 3
    20ac:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <IsValidEveningThresholdFor24V>
    20b0:	88 23       	and	r24, r24
    20b2:	21 f0       	breq	.+8      	; 0x20bc <DayNightValuesFromI2CtoEE+0x56>
        {
            if (WriteEEEveningThreshold())
    20b4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <WriteEEEveningThreshold>
    20b8:	81 11       	cpse	r24, r1
    20ba:	e9 cf       	rjmp	.-46     	; 0x208e <DayNightValuesFromI2CtoEE+0x28>
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                return; // all done
            }
        }
    }
    if (daynight_values_loaded == DAYNIGHT_MORNING_DEBOUNCE_TOSAVE)
    20bc:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    20c0:	84 30       	cpi	r24, 0x04	; 4
    20c2:	51 f4       	brne	.+20     	; 0x20d8 <DayNightValuesFromI2CtoEE+0x72>
    {
        if ( IsValidMorningDebounce(&daynight_morning_debounce) )
    20c4:	8e e9       	ldi	r24, 0x9E	; 158
    20c6:	93 e0       	ldi	r25, 0x03	; 3
    20c8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <IsValidEveningDebounce>
    20cc:	88 23       	and	r24, r24
    20ce:	21 f0       	breq	.+8      	; 0x20d8 <DayNightValuesFromI2CtoEE+0x72>
        {
            if (WriteEEMorningDebounce())
    20d0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <WriteEEMorningDebounce>
    20d4:	81 11       	cpse	r24, r1
    20d6:	db cf       	rjmp	.-74     	; 0x208e <DayNightValuesFromI2CtoEE+0x28>
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                return; // all done
            }
        }
    }
    if (daynight_values_loaded == DAYNIGHT_EVENING_DEBOUNCE_TOSAVE)
    20d8:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    20dc:	85 30       	cpi	r24, 0x05	; 5
    20de:	51 f4       	brne	.+20     	; 0x20f4 <DayNightValuesFromI2CtoEE+0x8e>
    {
        if ( IsValidEveningDebounce(&daynight_evening_debounce) )
    20e0:	85 e9       	ldi	r24, 0x95	; 149
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <IsValidEveningDebounce>
    20e8:	88 23       	and	r24, r24
    20ea:	21 f0       	breq	.+8      	; 0x20f4 <DayNightValuesFromI2CtoEE+0x8e>
        {
            if (WriteEEEveningDebounce())
    20ec:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <WriteEEEveningDebounce>
    20f0:	81 11       	cpse	r24, r1
    20f2:	cd cf       	rjmp	.-102    	; 0x208e <DayNightValuesFromI2CtoEE+0x28>
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                return; // all done
            }
        }
    }
    LoadDayNightValuesFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    20f4:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <LoadDayNightValuesFromEEPROM>

000020f8 <check_daynight>:
    bit 6 is set when day_work needs done
    bit 5 is used with I2C, which if a 1 is passed then bits 7 and 6 are returned with the state
    bit 4 is used with I2C, which if set with the bytes from master/host will clear bits 7 and 6 if they are also clear on the data byte from master/host.
*/
void check_daynight() 
{ 
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29

    // check light on solar pannel with ALT_V, reading are only taken when !ALT_EN.
    int sensor_val = analogRead(ALT_V);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	0e 94 02 13 	call	0x2604	; 0x2604 <analogRead>
    2106:	ec 01       	movw	r28, r24
    uint8_t low_nibble_daynight_state = daynight_state & 0x0F; 
    2108:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    210c:	98 2f       	mov	r25, r24
    210e:	9f 70       	andi	r25, 0x0F	; 15
    
    if(low_nibble_daynight_state == DAYNIGHT_START_STATE) 
    2110:	79 f5       	brne	.+94     	; 0x2170 <check_daynight+0x78>
    { 
        unsigned long kRuntime= millis() - dayTmrStarted;
    2112:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
        if ((kRuntime) > ((unsigned long)STARTUP_DELAY)) 
    2116:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    211a:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    211e:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    2122:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	80 1b       	sub	r24, r16
    212c:	91 0b       	sbc	r25, r17
    212e:	a2 0b       	sbc	r26, r18
    2130:	b3 0b       	sbc	r27, r19
    2132:	89 3f       	cpi	r24, 0xF9	; 249
    2134:	9a 42       	sbci	r25, 0x2A	; 42
    2136:	a1 05       	cpc	r26, r1
    2138:	b1 05       	cpc	r27, r1
    213a:	08 f4       	brcc	.+2      	; 0x213e <check_daynight+0x46>
    213c:	c4 c0       	rjmp	.+392    	; 0x22c6 <check_daynight+0x1ce>
        {
            if(sensor_val > daynight_evening_threshold ) 
    213e:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    2142:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    2146:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE; 
    214a:	80 7f       	andi	r24, 0xF0	; 240
    if(low_nibble_daynight_state == DAYNIGHT_START_STATE) 
    { 
        unsigned long kRuntime= millis() - dayTmrStarted;
        if ((kRuntime) > ((unsigned long)STARTUP_DELAY)) 
        {
            if(sensor_val > daynight_evening_threshold ) 
    214c:	2c 17       	cp	r18, r28
    214e:	3d 07       	cpc	r19, r29
    2150:	0c f4       	brge	.+2      	; 0x2154 <check_daynight+0x5c>
    2152:	48 c0       	rjmp	.+144    	; 0x21e4 <check_daynight+0xec>
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE; 
                dayTmrStarted = millis();
            } 
            else 
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    2154:	8c 5f       	subi	r24, 0xFC	; 252
    2156:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <daynight_state>
                dayTmrStarted = millis();
    215a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    215e:	60 93 a3 03 	sts	0x03A3, r22	; 0x8003a3 <dayTmrStarted>
    2162:	70 93 a4 03 	sts	0x03A4, r23	; 0x8003a4 <dayTmrStarted+0x1>
    2166:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <dayTmrStarted+0x2>
    216a:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <dayTmrStarted+0x3>
    216e:	ab c0       	rjmp	.+342    	; 0x22c6 <check_daynight+0x1ce>
            }
        }
        return;
    } 
  
    if(low_nibble_daynight_state == DAYNIGHT_DAY_STATE) 
    2170:	91 30       	cpi	r25, 0x01	; 1
    2172:	59 f4       	brne	.+22     	; 0x218a <check_daynight+0x92>
    { //day
        if (sensor_val < daynight_evening_threshold ) 
    2174:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    2178:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    217c:	c2 17       	cp	r28, r18
    217e:	d3 07       	cpc	r29, r19
    2180:	0c f0       	brlt	.+2      	; 0x2184 <check_daynight+0x8c>
    2182:	4e c0       	rjmp	.+156    	; 0x2220 <check_daynight+0x128>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_EVENING_DEBOUNCE_STATE;
    2184:	80 7f       	andi	r24, 0xF0	; 240
    2186:	8e 5f       	subi	r24, 0xFE	; 254
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <check_daynight+0x110>
            dayTmrStarted = millis();
        }
        return;
    }
  
    if(low_nibble_daynight_state == DAYNIGHT_EVENING_DEBOUNCE_STATE) 
    218a:	92 30       	cpi	r25, 0x02	; 2
    218c:	69 f5       	brne	.+90     	; 0x21e8 <check_daynight+0xf0>
    { //evening_debounce
        if (sensor_val < daynight_evening_threshold ) 
    218e:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    2192:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    2196:	c2 17       	cp	r28, r18
    2198:	d3 07       	cpc	r29, r19
    219a:	1c f5       	brge	.+70     	; 0x21e2 <check_daynight+0xea>
        {
            unsigned long kRuntime= millis() - dayTmrStarted;
    219c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
            if ((kRuntime) > (daynight_evening_debounce)) 
    21a0:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    21a4:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    21a8:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    21ac:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	80 1b       	sub	r24, r16
    21b6:	91 0b       	sbc	r25, r17
    21b8:	a2 0b       	sbc	r26, r18
    21ba:	b3 0b       	sbc	r27, r19
    21bc:	00 91 95 03 	lds	r16, 0x0395	; 0x800395 <daynight_evening_debounce>
    21c0:	10 91 96 03 	lds	r17, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    21c4:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    21c8:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    21cc:	08 17       	cp	r16, r24
    21ce:	19 07       	cpc	r17, r25
    21d0:	2a 07       	cpc	r18, r26
    21d2:	3b 07       	cpc	r19, r27
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <check_daynight+0xe0>
    21d6:	77 c0       	rjmp	.+238    	; 0x22c6 <check_daynight+0x1ce>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHTWORK_STATE;
    21d8:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    21dc:	80 7f       	andi	r24, 0xF0	; 240
    21de:	8d 5f       	subi	r24, 0xFD	; 253
    21e0:	ba cf       	rjmp	.-140    	; 0x2156 <check_daynight+0x5e>
                dayTmrStarted = millis();
            } 
        } 
        else 
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE;
    21e2:	80 7f       	andi	r24, 0xF0	; 240
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	b7 cf       	rjmp	.-146    	; 0x2156 <check_daynight+0x5e>
            dayTmrStarted = millis();
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_NIGHTWORK_STATE) 
    21e8:	93 30       	cpi	r25, 0x03	; 3
    21ea:	19 f4       	brne	.+6      	; 0x21f2 <check_daynight+0xfa>
    { 
        //do the night work callback, e.g. load night light settings at the start of a night
        daynight_state = (daynight_state & 0x7F) + 0x80; //clear bit 7 so I can set it and keep the other bits
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    21ec:	80 77       	andi	r24, 0x70	; 112
    21ee:	84 68       	ori	r24, 0x84	; 132
    21f0:	68 c0       	rjmp	.+208    	; 0x22c2 <check_daynight+0x1ca>
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_NIGHT_STATE) 
    21f2:	94 30       	cpi	r25, 0x04	; 4
    21f4:	79 f5       	brne	.+94     	; 0x2254 <check_daynight+0x15c>
    { //night
        if (sensor_val > daynight_morning_threshold ) 
    21f6:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    21fa:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    21fe:	2c 17       	cp	r18, r28
    2200:	3d 07       	cpc	r19, r29
    2202:	74 f4       	brge	.+28     	; 0x2220 <check_daynight+0x128>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_MORNING_DEBOUNCE_STATE;
    2204:	80 7f       	andi	r24, 0xF0	; 240
    2206:	8b 5f       	subi	r24, 0xFB	; 251
    2208:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <daynight_state>
            dayTmrStarted = millis();
    220c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
    2210:	60 93 a3 03 	sts	0x03A3, r22	; 0x8003a3 <dayTmrStarted>
    2214:	70 93 a4 03 	sts	0x03A4, r23	; 0x8003a4 <dayTmrStarted+0x1>
    2218:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <dayTmrStarted+0x2>
    221c:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <dayTmrStarted+0x3>
        }
        unsigned long kRuntime= millis() - dayTmrStarted;
    2220:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
        if ((kRuntime) > ((unsigned long)DAYNIGHT_TO_LONG)) 
    2224:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    2228:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    222c:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    2230:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	80 1b       	sub	r24, r16
    223a:	91 0b       	sbc	r25, r17
    223c:	a2 0b       	sbc	r26, r18
    223e:	b3 0b       	sbc	r27, r19
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	92 4a       	sbci	r25, 0xA2	; 162
    2244:	aa 44       	sbci	r26, 0x4A	; 74
    2246:	b4 40       	sbci	r27, 0x04	; 4
    2248:	f0 f1       	brcs	.+124    	; 0x22c6 <check_daynight+0x1ce>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_FAIL_STATE;
    224a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    224e:	80 7f       	andi	r24, 0xF0	; 240
    2250:	89 5f       	subi	r24, 0xF9	; 249
    2252:	81 cf       	rjmp	.-254    	; 0x2156 <check_daynight+0x5e>
            dayTmrStarted = millis();
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_MORNING_DEBOUNCE_STATE) 
    2254:	95 30       	cpi	r25, 0x05	; 5
    2256:	61 f5       	brne	.+88     	; 0x22b0 <check_daynight+0x1b8>
    { //morning_debounce
        if (sensor_val > daynight_morning_threshold ) 
    2258:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    225c:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    2260:	2c 17       	cp	r18, r28
    2262:	3d 07       	cpc	r19, r29
    2264:	14 f5       	brge	.+68     	; 0x22aa <check_daynight+0x1b2>
        {
            unsigned long kRuntime= millis() - dayTmrStarted;
    2266:	0e 94 78 13 	call	0x26f0	; 0x26f0 <millis>
            if ((kRuntime) > (daynight_morning_debounce)) 
    226a:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    226e:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    2272:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    2276:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	80 1b       	sub	r24, r16
    2280:	91 0b       	sbc	r25, r17
    2282:	a2 0b       	sbc	r26, r18
    2284:	b3 0b       	sbc	r27, r19
    2286:	00 91 9e 03 	lds	r16, 0x039E	; 0x80039e <daynight_morning_debounce>
    228a:	10 91 9f 03 	lds	r17, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    228e:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    2292:	30 91 a1 03 	lds	r19, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    2296:	08 17       	cp	r16, r24
    2298:	19 07       	cpc	r17, r25
    229a:	2a 07       	cpc	r18, r26
    229c:	3b 07       	cpc	r19, r27
    229e:	98 f4       	brcc	.+38     	; 0x22c6 <check_daynight+0x1ce>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAYWORK_STATE;
    22a0:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    22a4:	80 7f       	andi	r24, 0xF0	; 240
    22a6:	8a 5f       	subi	r24, 0xFA	; 250
    22a8:	0c c0       	rjmp	.+24     	; 0x22c2 <check_daynight+0x1ca>
            }
        }
        else 
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    22aa:	80 7f       	andi	r24, 0xF0	; 240
    22ac:	8c 5f       	subi	r24, 0xFC	; 252
    22ae:	09 c0       	rjmp	.+18     	; 0x22c2 <check_daynight+0x1ca>
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_DAYWORK_STATE) 
    22b0:	96 30       	cpi	r25, 0x06	; 6
    22b2:	19 f4       	brne	.+6      	; 0x22ba <check_daynight+0x1c2>
    { 
        //do the day work callback, e.g. load irrigation settings at the start of a day
        daynight_state = (daynight_state & 0xBF) + 0x40; //clear bit 6 so I can set it and keep the other bits
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE;
    22b4:	80 7b       	andi	r24, 0xB0	; 176
    22b6:	81 64       	ori	r24, 0x41	; 65
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <check_daynight+0x1ca>
        return;
    }

    //index out of bounds? 
    if(low_nibble_daynight_state > DAYNIGHT_FAIL_STATE) 
    22ba:	97 30       	cpi	r25, 0x07	; 7
    22bc:	21 f0       	breq	.+8      	; 0x22c6 <check_daynight+0x1ce>
    { 
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_FAIL_STATE;
    22be:	80 7f       	andi	r24, 0xF0	; 240
    22c0:	89 5f       	subi	r24, 0xF9	; 249
    22c2:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <daynight_state>
        return;
    }
    return;
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	08 95       	ret

000022d0 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    22d0:	1f 92       	push	r1
    22d2:	0f 92       	push	r0
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	0f 92       	push	r0
    22d8:	11 24       	eor	r1, r1
    22da:	2f 93       	push	r18
    22dc:	3f 93       	push	r19
    22de:	4f 93       	push	r20
    22e0:	5f 93       	push	r21
    22e2:	8f 93       	push	r24
    22e4:	9f 93       	push	r25
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    22ea:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    22ee:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    22f2:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    22f4:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	8f 71       	andi	r24, 0x1F	; 31
    22fe:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    2300:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	84 17       	cp	r24, r20
    2308:	95 07       	cpc	r25, r21
    230a:	39 f0       	breq	.+14     	; 0x231a <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    230c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2310:	fc 01       	movw	r30, r24
    2312:	eb 55       	subi	r30, 0x5B	; 91
    2314:	fe 4f       	sbci	r31, 0xFE	; 254
    2316:	30 83       	st	Z, r19
    2318:	01 c0       	rjmp	.+2      	; 0x231c <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    231a:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    231c:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    2320:	ff 91       	pop	r31
    2322:	ef 91       	pop	r30
    2324:	9f 91       	pop	r25
    2326:	8f 91       	pop	r24
    2328:	5f 91       	pop	r21
    232a:	4f 91       	pop	r20
    232c:	3f 91       	pop	r19
    232e:	2f 91       	pop	r18
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	8f 93       	push	r24
    2346:	9f 93       	push	r25
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    234c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    2350:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2354:	98 17       	cp	r25, r24
    2356:	79 f0       	breq	.+30     	; 0x2376 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    2358:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	8f 71       	andi	r24, 0x1F	; 31
    2362:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    2364:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2368:	fc 01       	movw	r30, r24
    236a:	eb 53       	subi	r30, 0x3B	; 59
    236c:	fe 4f       	sbci	r31, 0xFE	; 254
    236e:	80 81       	ld	r24, Z
    2370:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    2376:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    237a:	8f 7d       	andi	r24, 0xDF	; 223
    237c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    2380:	ff 91       	pop	r31
    2382:	ef 91       	pop	r30
    2384:	9f 91       	pop	r25
    2386:	8f 91       	pop	r24
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    2392:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    2396:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    239a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    239e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    23a2:	97 ff       	sbrs	r25, 7
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    23a6:	22 e0       	ldi	r18, 0x02	; 2
    23a8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    23ac:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    23ae:	28 e9       	ldi	r18, 0x98	; 152
    23b0:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    23b4:	26 e0       	ldi	r18, 0x06	; 6
    23b6:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    23ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    23be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    23c2:	08 95       	ret

000023c4 <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    23c4:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    23c8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    23cc:	98 17       	cp	r25, r24
    23ce:	a1 f0       	breq	.+40     	; 0x23f8 <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    23d0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	8f 71       	andi	r24, 0x1F	; 31
    23da:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    23dc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    23e0:	fc 01       	movw	r30, r24
    23e2:	eb 55       	subi	r30, 0x5B	; 91
    23e4:	fe 4f       	sbci	r31, 0xFE	; 254
    23e6:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    23e8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	98 2f       	mov	r25, r24
    23f0:	88 27       	eor	r24, r24
    23f2:	82 0f       	add	r24, r18
    23f4:	91 1d       	adc	r25, r1
    23f6:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    23fc:	08 95       	ret

000023fe <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    23fe:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	2f 5f       	subi	r18, 0xFF	; 255
    2406:	3f 4f       	sbci	r19, 0xFF	; 255
    2408:	2f 71       	andi	r18, 0x1F	; 31
    240a:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    240c:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	24 17       	cp	r18, r20
    2414:	35 07       	cpc	r19, r21
    2416:	d1 f3       	breq	.-12     	; 0x240c <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    2418:	f9 01       	movw	r30, r18
    241a:	eb 53       	subi	r30, 0x3B	; 59
    241c:	fe 4f       	sbci	r31, 0xFE	; 254
    241e:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    2420:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    2424:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2428:	80 62       	ori	r24, 0x20	; 32
    242a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    242e:	08 95       	ret

00002430 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    2430:	0e 94 ff 11 	call	0x23fe	; 0x23fe <uart0_putc>
	return 0;
}
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	08 95       	ret

0000243a <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    243a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    243e:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	80 96       	adiw	r24, 0x20	; 32
    2446:	82 1b       	sub	r24, r18
    2448:	91 09       	sbc	r25, r1
} /* uart0_available */
    244a:	8f 71       	andi	r24, 0x1F	; 31
    244c:	99 27       	eor	r25, r25
    244e:	08 95       	ret

00002450 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    2450:	0e 94 1d 12 	call	0x243a	; 0x243a <uart0_available>
    2454:	89 2b       	or	r24, r25
    2456:	e1 f3       	breq	.-8      	; 0x2450 <uartstream0_getchar>
    res = uart0_getc();
    2458:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <uart0_getc>
    if(res == '\r') res = '\n';
    245c:	8d 30       	cpi	r24, 0x0D	; 13
    245e:	91 05       	cpc	r25, r1
    2460:	11 f4       	brne	.+4      	; 0x2466 <uartstream0_getchar+0x16>
    2462:	8a e0       	ldi	r24, 0x0A	; 10
    2464:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    2466:	99 27       	eor	r25, r25
    2468:	08 95       	ret

0000246a <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	8b 01       	movw	r16, r22
    2470:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	80 5a       	subi	r24, 0xA0	; 160
    2478:	9c 41       	sbci	r25, 0x1C	; 28
    247a:	a9 4e       	sbci	r26, 0xE9	; 233
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	43 e0       	ldi	r20, 0x03	; 3
    2484:	66 0f       	add	r22, r22
    2486:	77 1f       	adc	r23, r23
    2488:	88 1f       	adc	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	4a 95       	dec	r20
    248e:	d1 f7       	brne	.-12     	; 0x2484 <uartstream0_init+0x1a>
    2490:	a9 01       	movw	r20, r18
    2492:	98 01       	movw	r18, r16
    2494:	e4 e0       	ldi	r30, 0x04	; 4
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	44 1f       	adc	r20, r20
    249c:	55 1f       	adc	r21, r21
    249e:	ea 95       	dec	r30
    24a0:	d1 f7       	brne	.-12     	; 0x2496 <uartstream0_init+0x2c>
    24a2:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__udivmodsi4>
    24a6:	c9 01       	movw	r24, r18
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	0e 94 c9 11 	call	0x2392	; 0x2392 <uart0_init>
	return &uartstream0_f;
}	
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <__vector_21>:
volatile uint8_t analog_reference;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    24b8:	1f 92       	push	r1
    24ba:	0f 92       	push	r0
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	0f 92       	push	r0
    24c0:	11 24       	eor	r1, r1
    24c2:	2f 93       	push	r18
    24c4:	8f 93       	push	r24
    24c6:	9f 93       	push	r25
    24c8:	ef 93       	push	r30
    24ca:	ff 93       	push	r31
    // ADCL contain lower 8 bits, ADCH upper (two bits)
    // Must read ADCL first (news ADC is now defined for this)
    adc[adc_channel] = ADC;
    24cc:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <adc_channel>
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    24d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	e7 55       	subi	r30, 0x57	; 87
    24e0:	fc 4f       	sbci	r31, 0xFC	; 252
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    //adc[adc_channel] = ADCL | (ADCH << 8);
    
    ++adc_channel;
    24e6:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    24ea:	8f 5f       	subi	r24, 0xFF	; 255
    24ec:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    
    // ch 0 is ALT_I, always read
    // ch 1 is ALT_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 1) && digitalRead(ALT_EN) )
    24f0:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	29 f4       	brne	.+10     	; 0x2502 <__vector_21+0x4a>
    24f8:	1b 9b       	sbis	0x03, 3	; 3
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <__vector_21+0x4a>
    {
        adc_channel = 6; // skip channel 1
    24fc:	86 e0       	ldi	r24, 0x06	; 6
    24fe:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    }
    // skip channels 3..5
    if (adc_channel == 2)
    2502:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    2506:	82 30       	cpi	r24, 0x02	; 2
    2508:	19 f4       	brne	.+6      	; 0x2510 <__vector_21+0x58>
    {
        adc_channel = 6;
    250a:	86 e0       	ldi	r24, 0x06	; 6
    250c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    }
    // ch 6 is PWR_I, always read
    // ch 7 is PWR_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 7) && digitalRead(ALT_EN) )
    2510:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    2514:	87 30       	cpi	r24, 0x07	; 7
    2516:	29 f4       	brne	.+10     	; 0x2522 <__vector_21+0x6a>
    2518:	1b 9b       	sbis	0x03, 3	; 3
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <__vector_21+0x6a>
    {
        adc_channel = 8; // skip channel 7
    251c:	88 e0       	ldi	r24, 0x08	; 8
    251e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    }

    if (adc_channel >= ADC_CHANNELS) 
    2522:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    2526:	88 30       	cpi	r24, 0x08	; 8
    2528:	b0 f4       	brcc	.+44     	; 0x2556 <__vector_21+0x9e>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    252a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    252e:	80 7f       	andi	r24, 0xF0	; 240
    2530:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    2534:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2538:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <analog_reference>
    253c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <adc_channel>
    2540:	8f 71       	andi	r24, 0x1F	; 31
    2542:	82 2b       	or	r24, r18
    2544:	89 0f       	add	r24, r25
    2546:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    254a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    254e:	80 64       	ori	r24, 0x40	; 64
    2550:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2554:	0c c0       	rjmp	.+24     	; 0x256e <__vector_21+0xb6>
        adc_channel = 8; // skip channel 7
    }

    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    2556:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <adc_channel>
        adc[ADC_CHANNELS] = 0x7FFF; // mark to notify that ADC burst is done
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	9f e7       	ldi	r25, 0x7F	; 127
    255e:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <adc+0x11>
    2562:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <adc+0x10>
        if (!free_running)
    2566:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <free_running>
    256a:	81 11       	cpse	r24, r1
    256c:	de cf       	rjmp	.-68     	; 0x252a <__vector_21+0x72>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    256e:	ff 91       	pop	r31
    2570:	ef 91       	pop	r30
    2572:	9f 91       	pop	r25
    2574:	8f 91       	pop	r24
    2576:	2f 91       	pop	r18
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	0f 90       	pop	r0
    257e:	1f 90       	pop	r1
    2580:	18 95       	reti

00002582 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a pin.
    analog_reference = reference;
    2582:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <analog_reference>
    free_running = 0;
    2586:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    258a:	ec e7       	ldi	r30, 0x7C	; 124
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    2590:	90 73       	andi	r25, 0x30	; 48
    2592:	89 2b       	or	r24, r25
    2594:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    2596:	ea e7       	ldi	r30, 0x7A	; 122
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	84 60       	ori	r24, 0x04	; 4
    259e:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    25a0:	80 81       	ld	r24, Z
    25a2:	82 60       	ori	r24, 0x02	; 2
    25a4:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    25a6:	80 81       	ld	r24, Z
    25a8:	8e 7f       	andi	r24, 0xFE	; 254
    25aa:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS2);
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
	// enable a2d conversions
	ADCSRA |= (1<<ADEN);
    25ac:	80 81       	ld	r24, Z
    25ae:	80 68       	ori	r24, 0x80	; 128
    25b0:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0;
    25b2:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <ADC_auto_conversion>
    25b6:	08 95       	ret

000025b8 <enable_ADC_auto_conversion>:

/* This changes the ADC to Auto Trigger mode. It will take readings on each 
    channel and hold them in an array. The array value is accessed by reading from adc[]  */
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    25b8:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <adc_channel>
    adc[ADC_CHANNELS] = 0x00;
    25bc:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <adc+0x11>
    25c0:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <adc+0x10>
    free_running = free_run;
    25c4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <free_running>
    //      EXTERNAL_AREF 0
    //      EXTERNAL_AVCC (1<<REFS0)
    //      INTERNAL_1V1 (1<<REFS1) | (1<<REFS0)
#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    25c8:	ec e7       	ldi	r30, 0x7C	; 124
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | analog_reference ;
    25ce:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <analog_reference>
    25d2:	80 73       	andi	r24, 0x30	; 48
    25d4:	89 2b       	or	r24, r25
    25d6:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    25d8:	ea e7       	ldi	r30, 0x7A	; 122
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	84 60       	ori	r24, 0x04	; 4
    25e0:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    25e2:	80 81       	ld	r24, Z
    25e4:	82 60       	ori	r24, 0x02	; 2
    25e6:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    25e8:	80 81       	ld	r24, Z
    25ea:	8e 7f       	andi	r24, 0xFE	; 254
    25ec:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
    
	// Power up the ADC and set it for a single conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    25ee:	80 81       	ld	r24, Z
    25f0:	87 75       	andi	r24, 0x57	; 87
    25f2:	88 68       	ori	r24, 0x88	; 136
    25f4:	80 83       	st	Z, r24

    // Start an ADC Conversion 
    ADCSRA |= (1<<ADSC);
    25f6:	80 81       	ld	r24, Z
    25f8:	80 64       	ori	r24, 0x40	; 64
    25fa:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <ADC_auto_conversion>
    2602:	08 95       	ret

00002604 <analogRead>:


// Use the ADC channel number only (not the pin number)
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    2604:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <ADC_auto_conversion>
    2608:	99 23       	and	r25, r25
    260a:	61 f0       	breq	.+24     	; 0x2624 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    260c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    260e:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    2610:	e8 2f       	mov	r30, r24
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	ee 0f       	add	r30, r30
    2616:	ff 1f       	adc	r31, r31
    2618:	e7 55       	subi	r30, 0x57	; 87
    261a:	fc 4f       	sbci	r31, 0xFC	; 252
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2620:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2622:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2624:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    2628:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    262a:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    262e:	e8 2f       	mov	r30, r24
    2630:	e7 70       	andi	r30, 0x07	; 7
    2632:	82 2f       	mov	r24, r18
    2634:	89 2b       	or	r24, r25
    2636:	e8 2b       	or	r30, r24
    2638:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    263c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2640:	80 64       	ori	r24, 0x40	; 64
    2642:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    2646:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    264a:	86 fd       	sbrc	r24, 6
    264c:	fc cf       	rjmp	.-8      	; 0x2646 <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    264e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    2652:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    265a:	08 95       	ret

0000265c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	2f 93       	push	r18
    2668:	3f 93       	push	r19
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2672:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
    2676:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    267a:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    267e:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2682:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2686:	2d e2       	ldi	r18, 0x2D	; 45
    2688:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    268a:	2d 37       	cpi	r18, 0x7D	; 125
    268c:	20 f4       	brcc	.+8      	; 0x2696 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	a1 1d       	adc	r26, r1
    2692:	b1 1d       	adc	r27, r1
    2694:	05 c0       	rjmp	.+10     	; 0x26a0 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2696:	20 eb       	ldi	r18, 0xB0	; 176
    2698:	23 0f       	add	r18, r19
		m += 1;
    269a:	02 96       	adiw	r24, 0x02	; 2
    269c:	a1 1d       	adc	r26, r1
    269e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    26a0:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
	timer0_millis = m;
    26a4:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
    26a8:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
    26ac:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
    26b0:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
	timer0_overflow_count++;
    26b4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
    26b8:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
    26bc:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
    26c0:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	a1 1d       	adc	r26, r1
    26c8:	b1 1d       	adc	r27, r1
    26ca:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
    26ce:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
    26d2:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
    26d6:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
}
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	3f 91       	pop	r19
    26e4:	2f 91       	pop	r18
    26e6:	0f 90       	pop	r0
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	0f 90       	pop	r0
    26ec:	1f 90       	pop	r1
    26ee:	18 95       	reti

000026f0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    26f0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    26f2:	f8 94       	cli
	m = timer0_millis;
    26f4:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
    26f8:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    26fc:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    2700:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	SREG = oldSREG;
    2704:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2706:	08 95       	ret

00002708 <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    2708:	84 b5       	in	r24, 0x24	; 36
    270a:	82 60       	ori	r24, 0x02	; 2
    270c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    270e:	84 b5       	in	r24, 0x24	; 36
    2710:	81 60       	ori	r24, 0x01	; 1
    2712:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    2714:	85 b5       	in	r24, 0x25	; 37
    2716:	82 60       	ori	r24, 0x02	; 2
    2718:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    271a:	85 b5       	in	r24, 0x25	; 37
    271c:	81 60       	ori	r24, 0x01	; 1
    271e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    2720:	ee e6       	ldi	r30, 0x6E	; 110
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	81 60       	ori	r24, 0x01	; 1
    2728:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    272a:	e1 e8       	ldi	r30, 0x81	; 129
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    2730:	80 81       	ld	r24, Z
    2732:	82 60       	ori	r24, 0x02	; 2
    2734:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    2736:	80 81       	ld	r24, Z
    2738:	81 60       	ori	r24, 0x01	; 1
    273a:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    273c:	e0 e8       	ldi	r30, 0x80	; 128
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	81 60       	ori	r24, 0x01	; 1
    2744:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    2746:	e1 eb       	ldi	r30, 0xB1	; 177
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	84 60       	ori	r24, 0x04	; 4
    274e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    2750:	e0 eb       	ldi	r30, 0xB0	; 176
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	81 60       	ori	r24, 0x01	; 1
    2758:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    275a:	e1 e9       	ldi	r30, 0x91	; 145
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	82 60       	ori	r24, 0x02	; 2
    2762:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    2764:	80 81       	ld	r24, Z
    2766:	81 60       	ori	r24, 0x01	; 1
    2768:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    276a:	e0 e9       	ldi	r30, 0x90	; 144
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	81 60       	ori	r24, 0x01	; 1
    2772:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    2774:	e1 ea       	ldi	r30, 0xA1	; 161
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	82 60       	ori	r24, 0x02	; 2
    277c:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    277e:	80 81       	ld	r24, Z
    2780:	81 60       	ori	r24, 0x01	; 1
    2782:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2784:	e0 ea       	ldi	r30, 0xA0	; 160
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	81 60       	ori	r24, 0x01	; 1
    278c:	80 83       	st	Z, r24
    278e:	08 95       	ret

00002790 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    2790:	08 95       	ret

00002792 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2792:	08 95       	ret

00002794 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    2794:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    twi0_sendStop = 1;		// default value
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi0_sendStop>
    twi0_inRepStart = 0;
    279e:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    27a2:	88 23       	and	r24, r24
    27a4:	21 f0       	breq	.+8      	; 0x27ae <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    27a6:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    27a8:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    27aa:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    27ac:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    27ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    27b2:	8e 7f       	andi	r24, 0xFE	; 254
    27b4:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    27b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    27bc:	8d 7f       	andi	r24, 0xFD	; 253
    27be:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    27c2:	84 e3       	ldi	r24, 0x34	; 52
    27c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    27c8:	85 e4       	ldi	r24, 0x45	; 69
    27ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    27ce:	08 95       	ret

000027d0 <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    27d0:	88 0f       	add	r24, r24
    27d2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    27d6:	08 95       	ret

000027d8 <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    27d8:	61 32       	cpi	r22, 0x21	; 33
    27da:	98 f4       	brcc	.+38     	; 0x2802 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    27dc:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <twi0_state>
    27e0:	24 30       	cpi	r18, 0x04	; 4
    27e2:	89 f4       	brne	.+34     	; 0x2806 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    27e4:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi0_txBufferLength>
    27e8:	28 2f       	mov	r18, r24
    27ea:	a3 e1       	ldi	r26, 0x13	; 19
    27ec:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    27ee:	fc 01       	movw	r30, r24
    27f0:	8e 2f       	mov	r24, r30
    27f2:	82 1b       	sub	r24, r18
    27f4:	86 17       	cp	r24, r22
    27f6:	18 f4       	brcc	.+6      	; 0x27fe <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    27f8:	81 91       	ld	r24, Z+
    27fa:	8d 93       	st	X+, r24
    27fc:	f9 cf       	rjmp	.-14     	; 0x27f0 <twi0_transmit+0x18>
    }
  
    return 0;
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    2806:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    2808:	08 95       	ret

0000280a <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    280a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    280e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    2812:	08 95       	ret

00002814 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    2814:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    2818:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    281c:	08 95       	ret

0000281e <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    281e:	85 ed       	ldi	r24, 0xD5	; 213
    2820:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    2824:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2828:	84 fd       	sbrc	r24, 4
    282a:	fc cf       	rjmp	.-8      	; 0x2824 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    282c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    2830:	08 95       	ret

00002832 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2832:	85 ec       	ldi	r24, 0xC5	; 197
    2834:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    2838:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    283c:	08 95       	ret

0000283e <__vector_24>:
}

ISR(TWI0_vect)
{
    283e:	1f 92       	push	r1
    2840:	0f 92       	push	r0
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	0f 92       	push	r0
    2846:	11 24       	eor	r1, r1
    2848:	2f 93       	push	r18
    284a:	3f 93       	push	r19
    284c:	4f 93       	push	r20
    284e:	5f 93       	push	r21
    2850:	6f 93       	push	r22
    2852:	7f 93       	push	r23
    2854:	8f 93       	push	r24
    2856:	9f 93       	push	r25
    2858:	af 93       	push	r26
    285a:	bf 93       	push	r27
    285c:	ef 93       	push	r30
    285e:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    2860:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2864:	88 7f       	andi	r24, 0xF8	; 248
    2866:	80 36       	cpi	r24, 0x60	; 96
    2868:	09 f4       	brne	.+2      	; 0x286c <__vector_24+0x2e>
    286a:	9e c0       	rjmp	.+316    	; 0x29a8 <__vector_24+0x16a>
    286c:	78 f5       	brcc	.+94     	; 0x28cc <__vector_24+0x8e>
    286e:	88 32       	cpi	r24, 0x28	; 40
    2870:	09 f4       	brne	.+2      	; 0x2874 <__vector_24+0x36>
    2872:	5d c0       	rjmp	.+186    	; 0x292e <__vector_24+0xf0>
    2874:	90 f4       	brcc	.+36     	; 0x289a <__vector_24+0x5c>
    2876:	80 31       	cpi	r24, 0x10	; 16
    2878:	09 f4       	brne	.+2      	; 0x287c <__vector_24+0x3e>
    287a:	56 c0       	rjmp	.+172    	; 0x2928 <__vector_24+0xea>
    287c:	38 f4       	brcc	.+14     	; 0x288c <__vector_24+0x4e>
    287e:	88 23       	and	r24, r24
    2880:	09 f4       	brne	.+2      	; 0x2884 <__vector_24+0x46>
    2882:	f5 c0       	rjmp	.+490    	; 0x2a6e <__vector_24+0x230>
    2884:	88 30       	cpi	r24, 0x08	; 8
    2886:	09 f4       	brne	.+2      	; 0x288a <__vector_24+0x4c>
    2888:	4f c0       	rjmp	.+158    	; 0x2928 <__vector_24+0xea>
    288a:	f5 c0       	rjmp	.+490    	; 0x2a76 <__vector_24+0x238>
    288c:	88 31       	cpi	r24, 0x18	; 24
    288e:	09 f4       	brne	.+2      	; 0x2892 <__vector_24+0x54>
    2890:	4e c0       	rjmp	.+156    	; 0x292e <__vector_24+0xf0>
    2892:	80 32       	cpi	r24, 0x20	; 32
    2894:	09 f4       	brne	.+2      	; 0x2898 <__vector_24+0x5a>
    2896:	5f c0       	rjmp	.+190    	; 0x2956 <__vector_24+0x118>
    2898:	ee c0       	rjmp	.+476    	; 0x2a76 <__vector_24+0x238>
    289a:	80 34       	cpi	r24, 0x40	; 64
    289c:	09 f4       	brne	.+2      	; 0x28a0 <__vector_24+0x62>
    289e:	6a c0       	rjmp	.+212    	; 0x2974 <__vector_24+0x136>
    28a0:	58 f4       	brcc	.+22     	; 0x28b8 <__vector_24+0x7a>
    28a2:	80 33       	cpi	r24, 0x30	; 48
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <__vector_24+0x6a>
    28a6:	57 c0       	rjmp	.+174    	; 0x2956 <__vector_24+0x118>
    28a8:	88 33       	cpi	r24, 0x38	; 56
    28aa:	09 f0       	breq	.+2      	; 0x28ae <__vector_24+0x70>
    28ac:	e4 c0       	rjmp	.+456    	; 0x2a76 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    28ae:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
            twi0_releaseBus();
    28b2:	0e 94 19 14 	call	0x2832	; 0x2832 <twi0_releaseBus>
            break;
    28b6:	df c0       	rjmp	.+446    	; 0x2a76 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    28b8:	80 35       	cpi	r24, 0x50	; 80
    28ba:	09 f4       	brne	.+2      	; 0x28be <__vector_24+0x80>
    28bc:	4f c0       	rjmp	.+158    	; 0x295c <__vector_24+0x11e>
    28be:	88 35       	cpi	r24, 0x58	; 88
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <__vector_24+0x86>
    28c2:	5d c0       	rjmp	.+186    	; 0x297e <__vector_24+0x140>
    28c4:	88 34       	cpi	r24, 0x48	; 72
    28c6:	09 f0       	breq	.+2      	; 0x28ca <__vector_24+0x8c>
    28c8:	d6 c0       	rjmp	.+428    	; 0x2a76 <__vector_24+0x238>
    28ca:	d3 c0       	rjmp	.+422    	; 0x2a72 <__vector_24+0x234>
    28cc:	88 39       	cpi	r24, 0x98	; 152
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <__vector_24+0x94>
    28d0:	c4 c0       	rjmp	.+392    	; 0x2a5a <__vector_24+0x21c>
    28d2:	a8 f4       	brcc	.+42     	; 0x28fe <__vector_24+0xc0>
    28d4:	88 37       	cpi	r24, 0x78	; 120
    28d6:	09 f4       	brne	.+2      	; 0x28da <__vector_24+0x9c>
    28d8:	67 c0       	rjmp	.+206    	; 0x29a8 <__vector_24+0x16a>
    28da:	38 f4       	brcc	.+14     	; 0x28ea <__vector_24+0xac>
    28dc:	88 36       	cpi	r24, 0x68	; 104
    28de:	09 f4       	brne	.+2      	; 0x28e2 <__vector_24+0xa4>
    28e0:	63 c0       	rjmp	.+198    	; 0x29a8 <__vector_24+0x16a>
    28e2:	80 37       	cpi	r24, 0x70	; 112
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <__vector_24+0xaa>
    28e6:	60 c0       	rjmp	.+192    	; 0x29a8 <__vector_24+0x16a>
    28e8:	c6 c0       	rjmp	.+396    	; 0x2a76 <__vector_24+0x238>
    28ea:	88 38       	cpi	r24, 0x88	; 136
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <__vector_24+0xb2>
    28ee:	b5 c0       	rjmp	.+362    	; 0x2a5a <__vector_24+0x21c>
    28f0:	80 39       	cpi	r24, 0x90	; 144
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <__vector_24+0xb8>
    28f4:	5f c0       	rjmp	.+190    	; 0x29b4 <__vector_24+0x176>
    28f6:	80 38       	cpi	r24, 0x80	; 128
    28f8:	09 f0       	breq	.+2      	; 0x28fc <__vector_24+0xbe>
    28fa:	bd c0       	rjmp	.+378    	; 0x2a76 <__vector_24+0x238>
    28fc:	5b c0       	rjmp	.+182    	; 0x29b4 <__vector_24+0x176>
    28fe:	80 3b       	cpi	r24, 0xB0	; 176
    2900:	09 f4       	brne	.+2      	; 0x2904 <__vector_24+0xc6>
    2902:	83 c0       	rjmp	.+262    	; 0x2a0a <__vector_24+0x1cc>
    2904:	38 f4       	brcc	.+14     	; 0x2914 <__vector_24+0xd6>
    2906:	80 3a       	cpi	r24, 0xA0	; 160
    2908:	09 f4       	brne	.+2      	; 0x290c <__vector_24+0xce>
    290a:	66 c0       	rjmp	.+204    	; 0x29d8 <__vector_24+0x19a>
    290c:	88 3a       	cpi	r24, 0xA8	; 168
    290e:	09 f4       	brne	.+2      	; 0x2912 <__vector_24+0xd4>
    2910:	7c c0       	rjmp	.+248    	; 0x2a0a <__vector_24+0x1cc>
    2912:	b1 c0       	rjmp	.+354    	; 0x2a76 <__vector_24+0x238>
    2914:	80 3c       	cpi	r24, 0xC0	; 192
    2916:	09 f4       	brne	.+2      	; 0x291a <__vector_24+0xdc>
    2918:	a4 c0       	rjmp	.+328    	; 0x2a62 <__vector_24+0x224>
    291a:	88 3c       	cpi	r24, 0xC8	; 200
    291c:	09 f4       	brne	.+2      	; 0x2920 <__vector_24+0xe2>
    291e:	a1 c0       	rjmp	.+322    	; 0x2a62 <__vector_24+0x224>
    2920:	88 3b       	cpi	r24, 0xB8	; 184
    2922:	09 f4       	brne	.+2      	; 0x2926 <__vector_24+0xe8>
    2924:	87 c0       	rjmp	.+270    	; 0x2a34 <__vector_24+0x1f6>
    2926:	a7 c0       	rjmp	.+334    	; 0x2a76 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    2928:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi0_slarw>
    292c:	10 c0       	rjmp	.+32     	; 0x294e <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    292e:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2932:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    2936:	98 17       	cp	r25, r24
    2938:	70 f5       	brcc	.+92     	; 0x2996 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    293a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	8e 0f       	add	r24, r30
    2942:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	eb 5c       	subi	r30, 0xCB	; 203
    294a:	fd 4f       	sbci	r31, 0xFD	; 253
    294c:	80 81       	ld	r24, Z
    294e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2952:	85 ec       	ldi	r24, 0xC5	; 197
    2954:	83 c0       	rjmp	.+262    	; 0x2a5c <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    2956:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
    295a:	8b c0       	rjmp	.+278    	; 0x2a72 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    295c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	8e 0f       	add	r24, r30
    2964:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	eb 5c       	subi	r30, 0xCB	; 203
    2970:	fd 4f       	sbci	r31, 0xFD	; 253
    2972:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2974:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2978:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    297c:	6b c0       	rjmp	.+214    	; 0x2a54 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    297e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	8e 0f       	add	r24, r30
    2986:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    298a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	eb 5c       	subi	r30, 0xCB	; 203
    2992:	fd 4f       	sbci	r31, 0xFD	; 253
    2994:	80 83       	st	Z, r24
            if (twi0_sendStop)
    2996:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_sendStop>
    299a:	81 11       	cpse	r24, r1
    299c:	6a c0       	rjmp	.+212    	; 0x2a72 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    29a4:	84 ea       	ldi	r24, 0xA4	; 164
    29a6:	5e c0       	rjmp	.+188    	; 0x2a64 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    29a8:	83 e0       	ldi	r24, 0x03	; 3
    29aa:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    29ae:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
    29b2:	cf cf       	rjmp	.-98     	; 0x2952 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    29b4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    29b8:	80 32       	cpi	r24, 0x20	; 32
    29ba:	08 f0       	brcs	.+2      	; 0x29be <__vector_24+0x180>
    29bc:	4e c0       	rjmp	.+156    	; 0x2a5a <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    29be:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	8e 0f       	add	r24, r30
    29c6:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi0_rxBufferIndex>
    29ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	ef 50       	subi	r30, 0x0F	; 15
    29d2:	fe 4f       	sbci	r31, 0xFE	; 254
    29d4:	80 83       	st	Z, r24
    29d6:	bd cf       	rjmp	.-134    	; 0x2952 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    29d8:	0e 94 19 14 	call	0x2832	; 0x2832 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    29dc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    29e0:	80 32       	cpi	r24, 0x20	; 32
    29e2:	30 f4       	brcc	.+12     	; 0x29f0 <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    29e4:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	ef 50       	subi	r30, 0x0F	; 15
    29ec:	fe 4f       	sbci	r31, 0xFE	; 254
    29ee:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    29f0:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    29fa:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    29fe:	81 ef       	ldi	r24, 0xF1	; 241
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    2a04:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
            break;
    2a08:	36 c0       	rjmp	.+108    	; 0x2a76 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    2a0a:	84 e0       	ldi	r24, 0x04	; 4
    2a0c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    2a10:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    2a14:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    2a18:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    2a1c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    2a20:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    2a22:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2a26:	81 11       	cpse	r24, r1
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    2a30:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    2a34:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	8e 0f       	add	r24, r30
    2a3c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi0_txBufferIndex>
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	ed 5e       	subi	r30, 0xED	; 237
    2a44:	fd 4f       	sbci	r31, 0xFD	; 253
    2a46:	80 81       	ld	r24, Z
    2a48:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    2a4c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2a50:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2a54:	98 17       	cp	r25, r24
    2a56:	08 f4       	brcc	.+2      	; 0x2a5a <__vector_24+0x21c>
    2a58:	7c cf       	rjmp	.-264    	; 0x2952 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2a5a:	85 e8       	ldi	r24, 0x85	; 133
    2a5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a60:	0a c0       	rjmp	.+20     	; 0x2a76 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2a62:	85 ec       	ldi	r24, 0xC5	; 197
    2a64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    2a68:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
            break;
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    2a6e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_error>
            twi0_stop();
    2a72:	0e 94 0f 14 	call	0x281e	; 0x281e <twi0_stop>
            break;
    }
}
    2a76:	ff 91       	pop	r31
    2a78:	ef 91       	pop	r30
    2a7a:	bf 91       	pop	r27
    2a7c:	af 91       	pop	r26
    2a7e:	9f 91       	pop	r25
    2a80:	8f 91       	pop	r24
    2a82:	7f 91       	pop	r23
    2a84:	6f 91       	pop	r22
    2a86:	5f 91       	pop	r21
    2a88:	4f 91       	pop	r20
    2a8a:	3f 91       	pop	r19
    2a8c:	2f 91       	pop	r18
    2a8e:	0f 90       	pop	r0
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	0f 90       	pop	r0
    2a94:	1f 90       	pop	r1
    2a96:	18 95       	reti

00002a98 <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    2a98:	08 95       	ret

00002a9a <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2a9a:	08 95       	ret

00002a9c <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    2a9c:	2d e7       	ldi	r18, 0x7D	; 125
    2a9e:	32 e0       	ldi	r19, 0x02	; 2
    2aa0:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <twi1_rxBuffer+0x1>
    2aa4:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    2aa8:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    twi1_sendStop = 1;		// default value
    2aac:	91 e0       	ldi	r25, 0x01	; 1
    2aae:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi1_sendStop>
    twi1_inRepStart = 0;
    2ab2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2ab6:	88 23       	and	r24, r24
    2ab8:	21 f0       	breq	.+8      	; 0x2ac2 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    2aba:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    2abc:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    2abe:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    2ac0:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    2ac2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2ac6:	8e 7f       	andi	r24, 0xFE	; 254
    2ac8:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    2acc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2ad0:	8d 7f       	andi	r24, 0xFD	; 253
    2ad2:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    2ad6:	84 e3       	ldi	r24, 0x34	; 52
    2ad8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2adc:	85 e4       	ldi	r24, 0x45	; 69
    2ade:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2ae2:	08 95       	ret

00002ae4 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    2ae4:	88 0f       	add	r24, r24
    2ae6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    2aea:	08 95       	ret

00002aec <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    2aec:	61 32       	cpi	r22, 0x21	; 33
    2aee:	98 f4       	brcc	.+38     	; 0x2b16 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    2af0:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <twi1_state>
    2af4:	24 30       	cpi	r18, 0x04	; 4
    2af6:	89 f4       	brne	.+34     	; 0x2b1a <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    2af8:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <twi1_txBufferLength>
    2afc:	28 2f       	mov	r18, r24
    2afe:	af e9       	ldi	r26, 0x9F	; 159
    2b00:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2b02:	fc 01       	movw	r30, r24
    2b04:	8e 2f       	mov	r24, r30
    2b06:	82 1b       	sub	r24, r18
    2b08:	86 17       	cp	r24, r22
    2b0a:	18 f4       	brcc	.+6      	; 0x2b12 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    2b0c:	81 91       	ld	r24, Z+
    2b0e:	8d 93       	st	X+, r24
    2b10:	f9 cf       	rjmp	.-14     	; 0x2b04 <twi1_transmit+0x18>
    }
  
    return 0;
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    2b1c:	08 95       	ret

00002b1e <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2b1e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    2b22:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    2b26:	08 95       	ret

00002b28 <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    2b28:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2b2c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    2b30:	08 95       	ret

00002b32 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2b32:	85 ed       	ldi	r24, 0xD5	; 213
    2b34:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    2b38:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2b3c:	84 fd       	sbrc	r24, 4
    2b3e:	fc cf       	rjmp	.-8      	; 0x2b38 <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2b40:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2b44:	08 95       	ret

00002b46 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2b46:	85 ec       	ldi	r24, 0xC5	; 197
    2b48:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    2b4c:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2b50:	08 95       	ret

00002b52 <__vector_40>:
}

ISR(TWI1_vect)
{
    2b52:	1f 92       	push	r1
    2b54:	0f 92       	push	r0
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	0f 92       	push	r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	2f 93       	push	r18
    2b5e:	3f 93       	push	r19
    2b60:	4f 93       	push	r20
    2b62:	5f 93       	push	r21
    2b64:	6f 93       	push	r22
    2b66:	7f 93       	push	r23
    2b68:	8f 93       	push	r24
    2b6a:	9f 93       	push	r25
    2b6c:	af 93       	push	r26
    2b6e:	bf 93       	push	r27
    2b70:	ef 93       	push	r30
    2b72:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2b74:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2b78:	88 7f       	andi	r24, 0xF8	; 248
    2b7a:	80 36       	cpi	r24, 0x60	; 96
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <__vector_40+0x2e>
    2b7e:	9e c0       	rjmp	.+316    	; 0x2cbc <__vector_40+0x16a>
    2b80:	78 f5       	brcc	.+94     	; 0x2be0 <__vector_40+0x8e>
    2b82:	88 32       	cpi	r24, 0x28	; 40
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <__vector_40+0x36>
    2b86:	5d c0       	rjmp	.+186    	; 0x2c42 <__vector_40+0xf0>
    2b88:	90 f4       	brcc	.+36     	; 0x2bae <__vector_40+0x5c>
    2b8a:	80 31       	cpi	r24, 0x10	; 16
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <__vector_40+0x3e>
    2b8e:	56 c0       	rjmp	.+172    	; 0x2c3c <__vector_40+0xea>
    2b90:	38 f4       	brcc	.+14     	; 0x2ba0 <__vector_40+0x4e>
    2b92:	88 23       	and	r24, r24
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <__vector_40+0x46>
    2b96:	0a c1       	rjmp	.+532    	; 0x2dac <__vector_40+0x25a>
    2b98:	88 30       	cpi	r24, 0x08	; 8
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <__vector_40+0x4c>
    2b9c:	4f c0       	rjmp	.+158    	; 0x2c3c <__vector_40+0xea>
    2b9e:	0a c1       	rjmp	.+532    	; 0x2db4 <__vector_40+0x262>
    2ba0:	88 31       	cpi	r24, 0x18	; 24
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <__vector_40+0x54>
    2ba4:	4e c0       	rjmp	.+156    	; 0x2c42 <__vector_40+0xf0>
    2ba6:	80 32       	cpi	r24, 0x20	; 32
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <__vector_40+0x5a>
    2baa:	5f c0       	rjmp	.+190    	; 0x2c6a <__vector_40+0x118>
    2bac:	03 c1       	rjmp	.+518    	; 0x2db4 <__vector_40+0x262>
    2bae:	80 34       	cpi	r24, 0x40	; 64
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <__vector_40+0x62>
    2bb2:	6a c0       	rjmp	.+212    	; 0x2c88 <__vector_40+0x136>
    2bb4:	58 f4       	brcc	.+22     	; 0x2bcc <__vector_40+0x7a>
    2bb6:	80 33       	cpi	r24, 0x30	; 48
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <__vector_40+0x6a>
    2bba:	57 c0       	rjmp	.+174    	; 0x2c6a <__vector_40+0x118>
    2bbc:	88 33       	cpi	r24, 0x38	; 56
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <__vector_40+0x70>
    2bc0:	f9 c0       	rjmp	.+498    	; 0x2db4 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    2bc2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
            twi1_releaseBus();
    2bc6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <twi1_releaseBus>
            break;
    2bca:	f4 c0       	rjmp	.+488    	; 0x2db4 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2bcc:	80 35       	cpi	r24, 0x50	; 80
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <__vector_40+0x80>
    2bd0:	4f c0       	rjmp	.+158    	; 0x2c70 <__vector_40+0x11e>
    2bd2:	88 35       	cpi	r24, 0x58	; 88
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <__vector_40+0x86>
    2bd6:	5d c0       	rjmp	.+186    	; 0x2c92 <__vector_40+0x140>
    2bd8:	88 34       	cpi	r24, 0x48	; 72
    2bda:	09 f0       	breq	.+2      	; 0x2bde <__vector_40+0x8c>
    2bdc:	eb c0       	rjmp	.+470    	; 0x2db4 <__vector_40+0x262>
    2bde:	e8 c0       	rjmp	.+464    	; 0x2db0 <__vector_40+0x25e>
    2be0:	88 39       	cpi	r24, 0x98	; 152
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <__vector_40+0x94>
    2be4:	d9 c0       	rjmp	.+434    	; 0x2d98 <__vector_40+0x246>
    2be6:	a8 f4       	brcc	.+42     	; 0x2c12 <__vector_40+0xc0>
    2be8:	88 37       	cpi	r24, 0x78	; 120
    2bea:	09 f4       	brne	.+2      	; 0x2bee <__vector_40+0x9c>
    2bec:	67 c0       	rjmp	.+206    	; 0x2cbc <__vector_40+0x16a>
    2bee:	38 f4       	brcc	.+14     	; 0x2bfe <__vector_40+0xac>
    2bf0:	88 36       	cpi	r24, 0x68	; 104
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <__vector_40+0xa4>
    2bf4:	63 c0       	rjmp	.+198    	; 0x2cbc <__vector_40+0x16a>
    2bf6:	80 37       	cpi	r24, 0x70	; 112
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <__vector_40+0xaa>
    2bfa:	60 c0       	rjmp	.+192    	; 0x2cbc <__vector_40+0x16a>
    2bfc:	db c0       	rjmp	.+438    	; 0x2db4 <__vector_40+0x262>
    2bfe:	88 38       	cpi	r24, 0x88	; 136
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <__vector_40+0xb2>
    2c02:	ca c0       	rjmp	.+404    	; 0x2d98 <__vector_40+0x246>
    2c04:	80 39       	cpi	r24, 0x90	; 144
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <__vector_40+0xb8>
    2c08:	5f c0       	rjmp	.+190    	; 0x2cc8 <__vector_40+0x176>
    2c0a:	80 38       	cpi	r24, 0x80	; 128
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <__vector_40+0xbe>
    2c0e:	d2 c0       	rjmp	.+420    	; 0x2db4 <__vector_40+0x262>
    2c10:	5b c0       	rjmp	.+182    	; 0x2cc8 <__vector_40+0x176>
    2c12:	80 3b       	cpi	r24, 0xB0	; 176
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <__vector_40+0xc6>
    2c16:	98 c0       	rjmp	.+304    	; 0x2d48 <__vector_40+0x1f6>
    2c18:	38 f4       	brcc	.+14     	; 0x2c28 <__vector_40+0xd6>
    2c1a:	80 3a       	cpi	r24, 0xA0	; 160
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <__vector_40+0xce>
    2c1e:	69 c0       	rjmp	.+210    	; 0x2cf2 <__vector_40+0x1a0>
    2c20:	88 3a       	cpi	r24, 0xA8	; 168
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <__vector_40+0xd4>
    2c24:	91 c0       	rjmp	.+290    	; 0x2d48 <__vector_40+0x1f6>
    2c26:	c6 c0       	rjmp	.+396    	; 0x2db4 <__vector_40+0x262>
    2c28:	80 3c       	cpi	r24, 0xC0	; 192
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <__vector_40+0xdc>
    2c2c:	b9 c0       	rjmp	.+370    	; 0x2da0 <__vector_40+0x24e>
    2c2e:	88 3c       	cpi	r24, 0xC8	; 200
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <__vector_40+0xe2>
    2c32:	b6 c0       	rjmp	.+364    	; 0x2da0 <__vector_40+0x24e>
    2c34:	88 3b       	cpi	r24, 0xB8	; 184
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <__vector_40+0xe8>
    2c38:	9c c0       	rjmp	.+312    	; 0x2d72 <__vector_40+0x220>
    2c3a:	bc c0       	rjmp	.+376    	; 0x2db4 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    2c3c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi1_slarw>
    2c40:	10 c0       	rjmp	.+32     	; 0x2c62 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2c42:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2c46:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2c4a:	98 17       	cp	r25, r24
    2c4c:	70 f5       	brcc	.+92     	; 0x2caa <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2c4e:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	8e 0f       	add	r24, r30
    2c56:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	ef 53       	subi	r30, 0x3F	; 63
    2c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c60:	80 81       	ld	r24, Z
    2c62:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2c66:	85 ec       	ldi	r24, 0xC5	; 197
    2c68:	98 c0       	rjmp	.+304    	; 0x2d9a <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    2c6a:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
    2c6e:	a0 c0       	rjmp	.+320    	; 0x2db0 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2c70:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	8e 0f       	add	r24, r30
    2c78:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2c7c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	ef 53       	subi	r30, 0x3F	; 63
    2c84:	fd 4f       	sbci	r31, 0xFD	; 253
    2c86:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2c88:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2c8c:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2c90:	80 c0       	rjmp	.+256    	; 0x2d92 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2c92:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	8e 0f       	add	r24, r30
    2c9a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2c9e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	ef 53       	subi	r30, 0x3F	; 63
    2ca6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ca8:	80 83       	st	Z, r24
            if (twi1_sendStop)
    2caa:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_sendStop>
    2cae:	81 11       	cpse	r24, r1
    2cb0:	7f c0       	rjmp	.+254    	; 0x2db0 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2cb8:	84 ea       	ldi	r24, 0xA4	; 164
    2cba:	73 c0       	rjmp	.+230    	; 0x2da2 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2cbc:	83 e0       	ldi	r24, 0x03	; 3
    2cbe:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2cc2:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
    2cc6:	cf cf       	rjmp	.-98     	; 0x2c66 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2cc8:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2ccc:	80 32       	cpi	r24, 0x20	; 32
    2cce:	08 f0       	brcs	.+2      	; 0x2cd2 <__vector_40+0x180>
    2cd0:	63 c0       	rjmp	.+198    	; 0x2d98 <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2cd2:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi1_rxBuffer>
    2cd6:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2cda:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	98 0f       	add	r25, r24
    2ce2:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi1_rxBufferIndex>
    2ce6:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2cea:	e8 0f       	add	r30, r24
    2cec:	f1 1d       	adc	r31, r1
    2cee:	90 83       	st	Z, r25
    2cf0:	ba cf       	rjmp	.-140    	; 0x2c66 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2cf2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2cf6:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2cfa:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2cfe:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2d02:	20 32       	cpi	r18, 0x20	; 32
    2d04:	30 f4       	brcc	.+12     	; 0x2d12 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2d06:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e2 0f       	add	r30, r18
    2d0e:	f1 1d       	adc	r31, r1
    2d10:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2d12:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    2d1c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    2d20:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2d22:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2d26:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2d2a:	8d 57       	subi	r24, 0x7D	; 125
    2d2c:	92 40       	sbci	r25, 0x02	; 2
    2d2e:	19 f4       	brne	.+6      	; 0x2d36 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2d30:	8d e5       	ldi	r24, 0x5D	; 93
    2d32:	92 e0       	ldi	r25, 0x02	; 2
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2d36:	8d e7       	ldi	r24, 0x7D	; 125
    2d38:	92 e0       	ldi	r25, 0x02	; 2
    2d3a:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi1_rxBuffer+0x1>
    2d3e:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2d42:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
            break;
    2d46:	36 c0       	rjmp	.+108    	; 0x2db4 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    2d48:	84 e0       	ldi	r24, 0x04	; 4
    2d4a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2d4e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2d52:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2d56:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    2d5a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2d5e:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2d60:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2d64:	81 11       	cpse	r24, r1
    2d66:	05 c0       	rjmp	.+10     	; 0x2d72 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2d6e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2d72:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	8e 0f       	add	r24, r30
    2d7a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi1_txBufferIndex>
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	e1 56       	subi	r30, 0x61	; 97
    2d82:	fd 4f       	sbci	r31, 0xFD	; 253
    2d84:	80 81       	ld	r24, Z
    2d86:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    2d8a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2d8e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2d92:	98 17       	cp	r25, r24
    2d94:	08 f4       	brcc	.+2      	; 0x2d98 <__vector_40+0x246>
    2d96:	67 cf       	rjmp	.-306    	; 0x2c66 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2d98:	85 e8       	ldi	r24, 0x85	; 133
    2d9a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2d9e:	0a c0       	rjmp	.+20     	; 0x2db4 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2da0:	85 ec       	ldi	r24, 0xC5	; 197
    2da2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    2da6:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
            break;
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2dac:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_error>
            twi1_stop();
    2db0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <twi1_stop>
            break;
    }
}
    2db4:	ff 91       	pop	r31
    2db6:	ef 91       	pop	r30
    2db8:	bf 91       	pop	r27
    2dba:	af 91       	pop	r26
    2dbc:	9f 91       	pop	r25
    2dbe:	8f 91       	pop	r24
    2dc0:	7f 91       	pop	r23
    2dc2:	6f 91       	pop	r22
    2dc4:	5f 91       	pop	r21
    2dc6:	4f 91       	pop	r20
    2dc8:	3f 91       	pop	r19
    2dca:	2f 91       	pop	r18
    2dcc:	0f 90       	pop	r0
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	0f 90       	pop	r0
    2dd2:	1f 90       	pop	r1
    2dd4:	18 95       	reti

00002dd6 <__divmodhi4>:
    2dd6:	97 fb       	bst	r25, 7
    2dd8:	07 2e       	mov	r0, r23
    2dda:	16 f4       	brtc	.+4      	; 0x2de0 <__divmodhi4+0xa>
    2ddc:	00 94       	com	r0
    2dde:	07 d0       	rcall	.+14     	; 0x2dee <__divmodhi4_neg1>
    2de0:	77 fd       	sbrc	r23, 7
    2de2:	09 d0       	rcall	.+18     	; 0x2df6 <__divmodhi4_neg2>
    2de4:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__udivmodhi4>
    2de8:	07 fc       	sbrc	r0, 7
    2dea:	05 d0       	rcall	.+10     	; 0x2df6 <__divmodhi4_neg2>
    2dec:	3e f4       	brtc	.+14     	; 0x2dfc <__divmodhi4_exit>

00002dee <__divmodhi4_neg1>:
    2dee:	90 95       	com	r25
    2df0:	81 95       	neg	r24
    2df2:	9f 4f       	sbci	r25, 0xFF	; 255
    2df4:	08 95       	ret

00002df6 <__divmodhi4_neg2>:
    2df6:	70 95       	com	r23
    2df8:	61 95       	neg	r22
    2dfa:	7f 4f       	sbci	r23, 0xFF	; 255

00002dfc <__divmodhi4_exit>:
    2dfc:	08 95       	ret

00002dfe <__udivmodsi4>:
    2dfe:	a1 e2       	ldi	r26, 0x21	; 33
    2e00:	1a 2e       	mov	r1, r26
    2e02:	aa 1b       	sub	r26, r26
    2e04:	bb 1b       	sub	r27, r27
    2e06:	fd 01       	movw	r30, r26
    2e08:	0d c0       	rjmp	.+26     	; 0x2e24 <__udivmodsi4_ep>

00002e0a <__udivmodsi4_loop>:
    2e0a:	aa 1f       	adc	r26, r26
    2e0c:	bb 1f       	adc	r27, r27
    2e0e:	ee 1f       	adc	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	a2 17       	cp	r26, r18
    2e14:	b3 07       	cpc	r27, r19
    2e16:	e4 07       	cpc	r30, r20
    2e18:	f5 07       	cpc	r31, r21
    2e1a:	20 f0       	brcs	.+8      	; 0x2e24 <__udivmodsi4_ep>
    2e1c:	a2 1b       	sub	r26, r18
    2e1e:	b3 0b       	sbc	r27, r19
    2e20:	e4 0b       	sbc	r30, r20
    2e22:	f5 0b       	sbc	r31, r21

00002e24 <__udivmodsi4_ep>:
    2e24:	66 1f       	adc	r22, r22
    2e26:	77 1f       	adc	r23, r23
    2e28:	88 1f       	adc	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	1a 94       	dec	r1
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <__udivmodsi4_loop>
    2e30:	60 95       	com	r22
    2e32:	70 95       	com	r23
    2e34:	80 95       	com	r24
    2e36:	90 95       	com	r25
    2e38:	9b 01       	movw	r18, r22
    2e3a:	ac 01       	movw	r20, r24
    2e3c:	bd 01       	movw	r22, r26
    2e3e:	cf 01       	movw	r24, r30
    2e40:	08 95       	ret

00002e42 <__udivmodhi4>:
    2e42:	aa 1b       	sub	r26, r26
    2e44:	bb 1b       	sub	r27, r27
    2e46:	51 e1       	ldi	r21, 0x11	; 17
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <__udivmodhi4_ep>

00002e4a <__udivmodhi4_loop>:
    2e4a:	aa 1f       	adc	r26, r26
    2e4c:	bb 1f       	adc	r27, r27
    2e4e:	a6 17       	cp	r26, r22
    2e50:	b7 07       	cpc	r27, r23
    2e52:	10 f0       	brcs	.+4      	; 0x2e58 <__udivmodhi4_ep>
    2e54:	a6 1b       	sub	r26, r22
    2e56:	b7 0b       	sbc	r27, r23

00002e58 <__udivmodhi4_ep>:
    2e58:	88 1f       	adc	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	5a 95       	dec	r21
    2e5e:	a9 f7       	brne	.-22     	; 0x2e4a <__udivmodhi4_loop>
    2e60:	80 95       	com	r24
    2e62:	90 95       	com	r25
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	08 95       	ret

00002e6a <fgetc>:
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	ec 01       	movw	r28, r24
    2e70:	2b 81       	ldd	r18, Y+3	; 0x03
    2e72:	20 ff       	sbrs	r18, 0
    2e74:	33 c0       	rjmp	.+102    	; 0x2edc <fgetc+0x72>
    2e76:	26 ff       	sbrs	r18, 6
    2e78:	0a c0       	rjmp	.+20     	; 0x2e8e <fgetc+0x24>
    2e7a:	2f 7b       	andi	r18, 0xBF	; 191
    2e7c:	2b 83       	std	Y+3, r18	; 0x03
    2e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e80:	9f 81       	ldd	r25, Y+7	; 0x07
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	9f 83       	std	Y+7, r25	; 0x07
    2e86:	8e 83       	std	Y+6, r24	; 0x06
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	29 c0       	rjmp	.+82     	; 0x2ee0 <fgetc+0x76>
    2e8e:	22 ff       	sbrs	r18, 2
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <fgetc+0x46>
    2e92:	e8 81       	ld	r30, Y
    2e94:	f9 81       	ldd	r31, Y+1	; 0x01
    2e96:	80 81       	ld	r24, Z
    2e98:	08 2e       	mov	r0, r24
    2e9a:	00 0c       	add	r0, r0
    2e9c:	99 0b       	sbc	r25, r25
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	19 f4       	brne	.+6      	; 0x2ea8 <fgetc+0x3e>
    2ea2:	20 62       	ori	r18, 0x20	; 32
    2ea4:	2b 83       	std	Y+3, r18	; 0x03
    2ea6:	1a c0       	rjmp	.+52     	; 0x2edc <fgetc+0x72>
    2ea8:	31 96       	adiw	r30, 0x01	; 1
    2eaa:	f9 83       	std	Y+1, r31	; 0x01
    2eac:	e8 83       	st	Y, r30
    2eae:	0e c0       	rjmp	.+28     	; 0x2ecc <fgetc+0x62>
    2eb0:	ea 85       	ldd	r30, Y+10	; 0x0a
    2eb2:	fb 85       	ldd	r31, Y+11	; 0x0b
    2eb4:	09 95       	icall
    2eb6:	97 ff       	sbrs	r25, 7
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <fgetc+0x62>
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	11 f0       	breq	.+4      	; 0x2ec4 <fgetc+0x5a>
    2ec0:	80 e2       	ldi	r24, 0x20	; 32
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <fgetc+0x5c>
    2ec4:	80 e1       	ldi	r24, 0x10	; 16
    2ec6:	82 2b       	or	r24, r18
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
    2eca:	08 c0       	rjmp	.+16     	; 0x2edc <fgetc+0x72>
    2ecc:	2e 81       	ldd	r18, Y+6	; 0x06
    2ece:	3f 81       	ldd	r19, Y+7	; 0x07
    2ed0:	2f 5f       	subi	r18, 0xFF	; 255
    2ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed4:	3f 83       	std	Y+7, r19	; 0x07
    2ed6:	2e 83       	std	Y+6, r18	; 0x06
    2ed8:	99 27       	eor	r25, r25
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <fgetc+0x76>
    2edc:	8f ef       	ldi	r24, 0xFF	; 255
    2ede:	9f ef       	ldi	r25, 0xFF	; 255
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	08 95       	ret

00002ee6 <printf>:
    2ee6:	a0 e0       	ldi	r26, 0x00	; 0
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e9 e7       	ldi	r30, 0x79	; 121
    2eec:	f7 e1       	ldi	r31, 0x17	; 23
    2eee:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x20>
    2ef2:	ae 01       	movw	r20, r28
    2ef4:	4b 5f       	subi	r20, 0xFB	; 251
    2ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef8:	fa 01       	movw	r30, r20
    2efa:	61 91       	ld	r22, Z+
    2efc:	71 91       	ld	r23, Z+
    2efe:	af 01       	movw	r20, r30
    2f00:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <__iob+0x2>
    2f04:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <__iob+0x3>
    2f08:	0e 94 89 17 	call	0x2f12	; 0x2f12 <vfprintf>
    2f0c:	e2 e0       	ldi	r30, 0x02	; 2
    2f0e:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x20>

00002f12 <vfprintf>:
    2f12:	ab e0       	ldi	r26, 0x0B	; 11
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	ef e8       	ldi	r30, 0x8F	; 143
    2f18:	f7 e1       	ldi	r31, 0x17	; 23
    2f1a:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__prologue_saves__>
    2f1e:	6c 01       	movw	r12, r24
    2f20:	7b 01       	movw	r14, r22
    2f22:	8a 01       	movw	r16, r20
    2f24:	fc 01       	movw	r30, r24
    2f26:	17 82       	std	Z+7, r1	; 0x07
    2f28:	16 82       	std	Z+6, r1	; 0x06
    2f2a:	83 81       	ldd	r24, Z+3	; 0x03
    2f2c:	81 ff       	sbrs	r24, 1
    2f2e:	cc c1       	rjmp	.+920    	; 0x32c8 <vfprintf+0x3b6>
    2f30:	ce 01       	movw	r24, r28
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	3c 01       	movw	r6, r24
    2f36:	f6 01       	movw	r30, r12
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	f7 01       	movw	r30, r14
    2f3c:	93 fd       	sbrc	r25, 3
    2f3e:	85 91       	lpm	r24, Z+
    2f40:	93 ff       	sbrs	r25, 3
    2f42:	81 91       	ld	r24, Z+
    2f44:	7f 01       	movw	r14, r30
    2f46:	88 23       	and	r24, r24
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <vfprintf+0x3a>
    2f4a:	ba c1       	rjmp	.+884    	; 0x32c0 <vfprintf+0x3ae>
    2f4c:	85 32       	cpi	r24, 0x25	; 37
    2f4e:	39 f4       	brne	.+14     	; 0x2f5e <vfprintf+0x4c>
    2f50:	93 fd       	sbrc	r25, 3
    2f52:	85 91       	lpm	r24, Z+
    2f54:	93 ff       	sbrs	r25, 3
    2f56:	81 91       	ld	r24, Z+
    2f58:	7f 01       	movw	r14, r30
    2f5a:	85 32       	cpi	r24, 0x25	; 37
    2f5c:	29 f4       	brne	.+10     	; 0x2f68 <vfprintf+0x56>
    2f5e:	b6 01       	movw	r22, r12
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    2f66:	e7 cf       	rjmp	.-50     	; 0x2f36 <vfprintf+0x24>
    2f68:	91 2c       	mov	r9, r1
    2f6a:	21 2c       	mov	r2, r1
    2f6c:	31 2c       	mov	r3, r1
    2f6e:	ff e1       	ldi	r31, 0x1F	; 31
    2f70:	f3 15       	cp	r31, r3
    2f72:	d8 f0       	brcs	.+54     	; 0x2faa <vfprintf+0x98>
    2f74:	8b 32       	cpi	r24, 0x2B	; 43
    2f76:	79 f0       	breq	.+30     	; 0x2f96 <vfprintf+0x84>
    2f78:	38 f4       	brcc	.+14     	; 0x2f88 <vfprintf+0x76>
    2f7a:	80 32       	cpi	r24, 0x20	; 32
    2f7c:	79 f0       	breq	.+30     	; 0x2f9c <vfprintf+0x8a>
    2f7e:	83 32       	cpi	r24, 0x23	; 35
    2f80:	a1 f4       	brne	.+40     	; 0x2faa <vfprintf+0x98>
    2f82:	23 2d       	mov	r18, r3
    2f84:	20 61       	ori	r18, 0x10	; 16
    2f86:	1d c0       	rjmp	.+58     	; 0x2fc2 <vfprintf+0xb0>
    2f88:	8d 32       	cpi	r24, 0x2D	; 45
    2f8a:	61 f0       	breq	.+24     	; 0x2fa4 <vfprintf+0x92>
    2f8c:	80 33       	cpi	r24, 0x30	; 48
    2f8e:	69 f4       	brne	.+26     	; 0x2faa <vfprintf+0x98>
    2f90:	23 2d       	mov	r18, r3
    2f92:	21 60       	ori	r18, 0x01	; 1
    2f94:	16 c0       	rjmp	.+44     	; 0x2fc2 <vfprintf+0xb0>
    2f96:	83 2d       	mov	r24, r3
    2f98:	82 60       	ori	r24, 0x02	; 2
    2f9a:	38 2e       	mov	r3, r24
    2f9c:	e3 2d       	mov	r30, r3
    2f9e:	e4 60       	ori	r30, 0x04	; 4
    2fa0:	3e 2e       	mov	r3, r30
    2fa2:	2a c0       	rjmp	.+84     	; 0x2ff8 <vfprintf+0xe6>
    2fa4:	f3 2d       	mov	r31, r3
    2fa6:	f8 60       	ori	r31, 0x08	; 8
    2fa8:	1d c0       	rjmp	.+58     	; 0x2fe4 <vfprintf+0xd2>
    2faa:	37 fc       	sbrc	r3, 7
    2fac:	2d c0       	rjmp	.+90     	; 0x3008 <vfprintf+0xf6>
    2fae:	20 ed       	ldi	r18, 0xD0	; 208
    2fb0:	28 0f       	add	r18, r24
    2fb2:	2a 30       	cpi	r18, 0x0A	; 10
    2fb4:	40 f0       	brcs	.+16     	; 0x2fc6 <vfprintf+0xb4>
    2fb6:	8e 32       	cpi	r24, 0x2E	; 46
    2fb8:	b9 f4       	brne	.+46     	; 0x2fe8 <vfprintf+0xd6>
    2fba:	36 fc       	sbrc	r3, 6
    2fbc:	81 c1       	rjmp	.+770    	; 0x32c0 <vfprintf+0x3ae>
    2fbe:	23 2d       	mov	r18, r3
    2fc0:	20 64       	ori	r18, 0x40	; 64
    2fc2:	32 2e       	mov	r3, r18
    2fc4:	19 c0       	rjmp	.+50     	; 0x2ff8 <vfprintf+0xe6>
    2fc6:	36 fe       	sbrs	r3, 6
    2fc8:	06 c0       	rjmp	.+12     	; 0x2fd6 <vfprintf+0xc4>
    2fca:	8a e0       	ldi	r24, 0x0A	; 10
    2fcc:	98 9e       	mul	r9, r24
    2fce:	20 0d       	add	r18, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	92 2e       	mov	r9, r18
    2fd4:	11 c0       	rjmp	.+34     	; 0x2ff8 <vfprintf+0xe6>
    2fd6:	ea e0       	ldi	r30, 0x0A	; 10
    2fd8:	2e 9e       	mul	r2, r30
    2fda:	20 0d       	add	r18, r0
    2fdc:	11 24       	eor	r1, r1
    2fde:	22 2e       	mov	r2, r18
    2fe0:	f3 2d       	mov	r31, r3
    2fe2:	f0 62       	ori	r31, 0x20	; 32
    2fe4:	3f 2e       	mov	r3, r31
    2fe6:	08 c0       	rjmp	.+16     	; 0x2ff8 <vfprintf+0xe6>
    2fe8:	8c 36       	cpi	r24, 0x6C	; 108
    2fea:	21 f4       	brne	.+8      	; 0x2ff4 <vfprintf+0xe2>
    2fec:	83 2d       	mov	r24, r3
    2fee:	80 68       	ori	r24, 0x80	; 128
    2ff0:	38 2e       	mov	r3, r24
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <vfprintf+0xe6>
    2ff4:	88 36       	cpi	r24, 0x68	; 104
    2ff6:	41 f4       	brne	.+16     	; 0x3008 <vfprintf+0xf6>
    2ff8:	f7 01       	movw	r30, r14
    2ffa:	93 fd       	sbrc	r25, 3
    2ffc:	85 91       	lpm	r24, Z+
    2ffe:	93 ff       	sbrs	r25, 3
    3000:	81 91       	ld	r24, Z+
    3002:	7f 01       	movw	r14, r30
    3004:	81 11       	cpse	r24, r1
    3006:	b3 cf       	rjmp	.-154    	; 0x2f6e <vfprintf+0x5c>
    3008:	98 2f       	mov	r25, r24
    300a:	9f 7d       	andi	r25, 0xDF	; 223
    300c:	95 54       	subi	r25, 0x45	; 69
    300e:	93 30       	cpi	r25, 0x03	; 3
    3010:	28 f4       	brcc	.+10     	; 0x301c <vfprintf+0x10a>
    3012:	0c 5f       	subi	r16, 0xFC	; 252
    3014:	1f 4f       	sbci	r17, 0xFF	; 255
    3016:	9f e3       	ldi	r25, 0x3F	; 63
    3018:	99 83       	std	Y+1, r25	; 0x01
    301a:	0d c0       	rjmp	.+26     	; 0x3036 <vfprintf+0x124>
    301c:	83 36       	cpi	r24, 0x63	; 99
    301e:	31 f0       	breq	.+12     	; 0x302c <vfprintf+0x11a>
    3020:	83 37       	cpi	r24, 0x73	; 115
    3022:	71 f0       	breq	.+28     	; 0x3040 <vfprintf+0x12e>
    3024:	83 35       	cpi	r24, 0x53	; 83
    3026:	09 f0       	breq	.+2      	; 0x302a <vfprintf+0x118>
    3028:	59 c0       	rjmp	.+178    	; 0x30dc <vfprintf+0x1ca>
    302a:	21 c0       	rjmp	.+66     	; 0x306e <vfprintf+0x15c>
    302c:	f8 01       	movw	r30, r16
    302e:	80 81       	ld	r24, Z
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	0e 5f       	subi	r16, 0xFE	; 254
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	88 24       	eor	r8, r8
    3038:	83 94       	inc	r8
    303a:	91 2c       	mov	r9, r1
    303c:	53 01       	movw	r10, r6
    303e:	13 c0       	rjmp	.+38     	; 0x3066 <vfprintf+0x154>
    3040:	28 01       	movw	r4, r16
    3042:	f2 e0       	ldi	r31, 0x02	; 2
    3044:	4f 0e       	add	r4, r31
    3046:	51 1c       	adc	r5, r1
    3048:	f8 01       	movw	r30, r16
    304a:	a0 80       	ld	r10, Z
    304c:	b1 80       	ldd	r11, Z+1	; 0x01
    304e:	36 fe       	sbrs	r3, 6
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <vfprintf+0x146>
    3052:	69 2d       	mov	r22, r9
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	02 c0       	rjmp	.+4      	; 0x305c <vfprintf+0x14a>
    3058:	6f ef       	ldi	r22, 0xFF	; 255
    305a:	7f ef       	ldi	r23, 0xFF	; 255
    305c:	c5 01       	movw	r24, r10
    305e:	0e 94 75 19 	call	0x32ea	; 0x32ea <strnlen>
    3062:	4c 01       	movw	r8, r24
    3064:	82 01       	movw	r16, r4
    3066:	f3 2d       	mov	r31, r3
    3068:	ff 77       	andi	r31, 0x7F	; 127
    306a:	3f 2e       	mov	r3, r31
    306c:	16 c0       	rjmp	.+44     	; 0x309a <vfprintf+0x188>
    306e:	28 01       	movw	r4, r16
    3070:	22 e0       	ldi	r18, 0x02	; 2
    3072:	42 0e       	add	r4, r18
    3074:	51 1c       	adc	r5, r1
    3076:	f8 01       	movw	r30, r16
    3078:	a0 80       	ld	r10, Z
    307a:	b1 80       	ldd	r11, Z+1	; 0x01
    307c:	36 fe       	sbrs	r3, 6
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <vfprintf+0x174>
    3080:	69 2d       	mov	r22, r9
    3082:	70 e0       	ldi	r23, 0x00	; 0
    3084:	02 c0       	rjmp	.+4      	; 0x308a <vfprintf+0x178>
    3086:	6f ef       	ldi	r22, 0xFF	; 255
    3088:	7f ef       	ldi	r23, 0xFF	; 255
    308a:	c5 01       	movw	r24, r10
    308c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <strnlen_P>
    3090:	4c 01       	movw	r8, r24
    3092:	f3 2d       	mov	r31, r3
    3094:	f0 68       	ori	r31, 0x80	; 128
    3096:	3f 2e       	mov	r3, r31
    3098:	82 01       	movw	r16, r4
    309a:	33 fc       	sbrc	r3, 3
    309c:	1b c0       	rjmp	.+54     	; 0x30d4 <vfprintf+0x1c2>
    309e:	82 2d       	mov	r24, r2
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	88 16       	cp	r8, r24
    30a4:	99 06       	cpc	r9, r25
    30a6:	b0 f4       	brcc	.+44     	; 0x30d4 <vfprintf+0x1c2>
    30a8:	b6 01       	movw	r22, r12
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    30b2:	2a 94       	dec	r2
    30b4:	f4 cf       	rjmp	.-24     	; 0x309e <vfprintf+0x18c>
    30b6:	f5 01       	movw	r30, r10
    30b8:	37 fc       	sbrc	r3, 7
    30ba:	85 91       	lpm	r24, Z+
    30bc:	37 fe       	sbrs	r3, 7
    30be:	81 91       	ld	r24, Z+
    30c0:	5f 01       	movw	r10, r30
    30c2:	b6 01       	movw	r22, r12
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    30ca:	21 10       	cpse	r2, r1
    30cc:	2a 94       	dec	r2
    30ce:	21 e0       	ldi	r18, 0x01	; 1
    30d0:	82 1a       	sub	r8, r18
    30d2:	91 08       	sbc	r9, r1
    30d4:	81 14       	cp	r8, r1
    30d6:	91 04       	cpc	r9, r1
    30d8:	71 f7       	brne	.-36     	; 0x30b6 <vfprintf+0x1a4>
    30da:	e8 c0       	rjmp	.+464    	; 0x32ac <vfprintf+0x39a>
    30dc:	84 36       	cpi	r24, 0x64	; 100
    30de:	11 f0       	breq	.+4      	; 0x30e4 <vfprintf+0x1d2>
    30e0:	89 36       	cpi	r24, 0x69	; 105
    30e2:	41 f5       	brne	.+80     	; 0x3134 <vfprintf+0x222>
    30e4:	f8 01       	movw	r30, r16
    30e6:	37 fe       	sbrs	r3, 7
    30e8:	07 c0       	rjmp	.+14     	; 0x30f8 <vfprintf+0x1e6>
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	0c 5f       	subi	r16, 0xFC	; 252
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	08 c0       	rjmp	.+16     	; 0x3108 <vfprintf+0x1f6>
    30f8:	60 81       	ld	r22, Z
    30fa:	71 81       	ldd	r23, Z+1	; 0x01
    30fc:	07 2e       	mov	r0, r23
    30fe:	00 0c       	add	r0, r0
    3100:	88 0b       	sbc	r24, r24
    3102:	99 0b       	sbc	r25, r25
    3104:	0e 5f       	subi	r16, 0xFE	; 254
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	f3 2d       	mov	r31, r3
    310a:	ff 76       	andi	r31, 0x6F	; 111
    310c:	3f 2e       	mov	r3, r31
    310e:	97 ff       	sbrs	r25, 7
    3110:	09 c0       	rjmp	.+18     	; 0x3124 <vfprintf+0x212>
    3112:	90 95       	com	r25
    3114:	80 95       	com	r24
    3116:	70 95       	com	r23
    3118:	61 95       	neg	r22
    311a:	7f 4f       	sbci	r23, 0xFF	; 255
    311c:	8f 4f       	sbci	r24, 0xFF	; 255
    311e:	9f 4f       	sbci	r25, 0xFF	; 255
    3120:	f0 68       	ori	r31, 0x80	; 128
    3122:	3f 2e       	mov	r3, r31
    3124:	2a e0       	ldi	r18, 0x0A	; 10
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	a3 01       	movw	r20, r6
    312a:	0e 94 bc 19 	call	0x3378	; 0x3378 <__ultoa_invert>
    312e:	88 2e       	mov	r8, r24
    3130:	86 18       	sub	r8, r6
    3132:	45 c0       	rjmp	.+138    	; 0x31be <vfprintf+0x2ac>
    3134:	85 37       	cpi	r24, 0x75	; 117
    3136:	31 f4       	brne	.+12     	; 0x3144 <vfprintf+0x232>
    3138:	23 2d       	mov	r18, r3
    313a:	2f 7e       	andi	r18, 0xEF	; 239
    313c:	b2 2e       	mov	r11, r18
    313e:	2a e0       	ldi	r18, 0x0A	; 10
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	25 c0       	rjmp	.+74     	; 0x318e <vfprintf+0x27c>
    3144:	93 2d       	mov	r25, r3
    3146:	99 7f       	andi	r25, 0xF9	; 249
    3148:	b9 2e       	mov	r11, r25
    314a:	8f 36       	cpi	r24, 0x6F	; 111
    314c:	c1 f0       	breq	.+48     	; 0x317e <vfprintf+0x26c>
    314e:	18 f4       	brcc	.+6      	; 0x3156 <vfprintf+0x244>
    3150:	88 35       	cpi	r24, 0x58	; 88
    3152:	79 f0       	breq	.+30     	; 0x3172 <vfprintf+0x260>
    3154:	b5 c0       	rjmp	.+362    	; 0x32c0 <vfprintf+0x3ae>
    3156:	80 37       	cpi	r24, 0x70	; 112
    3158:	19 f0       	breq	.+6      	; 0x3160 <vfprintf+0x24e>
    315a:	88 37       	cpi	r24, 0x78	; 120
    315c:	21 f0       	breq	.+8      	; 0x3166 <vfprintf+0x254>
    315e:	b0 c0       	rjmp	.+352    	; 0x32c0 <vfprintf+0x3ae>
    3160:	e9 2f       	mov	r30, r25
    3162:	e0 61       	ori	r30, 0x10	; 16
    3164:	be 2e       	mov	r11, r30
    3166:	b4 fe       	sbrs	r11, 4
    3168:	0d c0       	rjmp	.+26     	; 0x3184 <vfprintf+0x272>
    316a:	fb 2d       	mov	r31, r11
    316c:	f4 60       	ori	r31, 0x04	; 4
    316e:	bf 2e       	mov	r11, r31
    3170:	09 c0       	rjmp	.+18     	; 0x3184 <vfprintf+0x272>
    3172:	34 fe       	sbrs	r3, 4
    3174:	0a c0       	rjmp	.+20     	; 0x318a <vfprintf+0x278>
    3176:	29 2f       	mov	r18, r25
    3178:	26 60       	ori	r18, 0x06	; 6
    317a:	b2 2e       	mov	r11, r18
    317c:	06 c0       	rjmp	.+12     	; 0x318a <vfprintf+0x278>
    317e:	28 e0       	ldi	r18, 0x08	; 8
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	05 c0       	rjmp	.+10     	; 0x318e <vfprintf+0x27c>
    3184:	20 e1       	ldi	r18, 0x10	; 16
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	02 c0       	rjmp	.+4      	; 0x318e <vfprintf+0x27c>
    318a:	20 e1       	ldi	r18, 0x10	; 16
    318c:	32 e0       	ldi	r19, 0x02	; 2
    318e:	f8 01       	movw	r30, r16
    3190:	b7 fe       	sbrs	r11, 7
    3192:	07 c0       	rjmp	.+14     	; 0x31a2 <vfprintf+0x290>
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	0c 5f       	subi	r16, 0xFC	; 252
    319e:	1f 4f       	sbci	r17, 0xFF	; 255
    31a0:	06 c0       	rjmp	.+12     	; 0x31ae <vfprintf+0x29c>
    31a2:	60 81       	ld	r22, Z
    31a4:	71 81       	ldd	r23, Z+1	; 0x01
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 5f       	subi	r16, 0xFE	; 254
    31ac:	1f 4f       	sbci	r17, 0xFF	; 255
    31ae:	a3 01       	movw	r20, r6
    31b0:	0e 94 bc 19 	call	0x3378	; 0x3378 <__ultoa_invert>
    31b4:	88 2e       	mov	r8, r24
    31b6:	86 18       	sub	r8, r6
    31b8:	fb 2d       	mov	r31, r11
    31ba:	ff 77       	andi	r31, 0x7F	; 127
    31bc:	3f 2e       	mov	r3, r31
    31be:	36 fe       	sbrs	r3, 6
    31c0:	0d c0       	rjmp	.+26     	; 0x31dc <vfprintf+0x2ca>
    31c2:	23 2d       	mov	r18, r3
    31c4:	2e 7f       	andi	r18, 0xFE	; 254
    31c6:	a2 2e       	mov	r10, r18
    31c8:	89 14       	cp	r8, r9
    31ca:	58 f4       	brcc	.+22     	; 0x31e2 <vfprintf+0x2d0>
    31cc:	34 fe       	sbrs	r3, 4
    31ce:	0b c0       	rjmp	.+22     	; 0x31e6 <vfprintf+0x2d4>
    31d0:	32 fc       	sbrc	r3, 2
    31d2:	09 c0       	rjmp	.+18     	; 0x31e6 <vfprintf+0x2d4>
    31d4:	83 2d       	mov	r24, r3
    31d6:	8e 7e       	andi	r24, 0xEE	; 238
    31d8:	a8 2e       	mov	r10, r24
    31da:	05 c0       	rjmp	.+10     	; 0x31e6 <vfprintf+0x2d4>
    31dc:	b8 2c       	mov	r11, r8
    31de:	a3 2c       	mov	r10, r3
    31e0:	03 c0       	rjmp	.+6      	; 0x31e8 <vfprintf+0x2d6>
    31e2:	b8 2c       	mov	r11, r8
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <vfprintf+0x2d6>
    31e6:	b9 2c       	mov	r11, r9
    31e8:	a4 fe       	sbrs	r10, 4
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <vfprintf+0x2f8>
    31ec:	fe 01       	movw	r30, r28
    31ee:	e8 0d       	add	r30, r8
    31f0:	f1 1d       	adc	r31, r1
    31f2:	80 81       	ld	r24, Z
    31f4:	80 33       	cpi	r24, 0x30	; 48
    31f6:	21 f4       	brne	.+8      	; 0x3200 <vfprintf+0x2ee>
    31f8:	9a 2d       	mov	r25, r10
    31fa:	99 7e       	andi	r25, 0xE9	; 233
    31fc:	a9 2e       	mov	r10, r25
    31fe:	09 c0       	rjmp	.+18     	; 0x3212 <vfprintf+0x300>
    3200:	a2 fe       	sbrs	r10, 2
    3202:	06 c0       	rjmp	.+12     	; 0x3210 <vfprintf+0x2fe>
    3204:	b3 94       	inc	r11
    3206:	b3 94       	inc	r11
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <vfprintf+0x300>
    320a:	8a 2d       	mov	r24, r10
    320c:	86 78       	andi	r24, 0x86	; 134
    320e:	09 f0       	breq	.+2      	; 0x3212 <vfprintf+0x300>
    3210:	b3 94       	inc	r11
    3212:	a3 fc       	sbrc	r10, 3
    3214:	11 c0       	rjmp	.+34     	; 0x3238 <vfprintf+0x326>
    3216:	a0 fe       	sbrs	r10, 0
    3218:	06 c0       	rjmp	.+12     	; 0x3226 <vfprintf+0x314>
    321a:	b2 14       	cp	r11, r2
    321c:	88 f4       	brcc	.+34     	; 0x3240 <vfprintf+0x32e>
    321e:	28 0c       	add	r2, r8
    3220:	92 2c       	mov	r9, r2
    3222:	9b 18       	sub	r9, r11
    3224:	0e c0       	rjmp	.+28     	; 0x3242 <vfprintf+0x330>
    3226:	b2 14       	cp	r11, r2
    3228:	60 f4       	brcc	.+24     	; 0x3242 <vfprintf+0x330>
    322a:	b6 01       	movw	r22, r12
    322c:	80 e2       	ldi	r24, 0x20	; 32
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    3234:	b3 94       	inc	r11
    3236:	f7 cf       	rjmp	.-18     	; 0x3226 <vfprintf+0x314>
    3238:	b2 14       	cp	r11, r2
    323a:	18 f4       	brcc	.+6      	; 0x3242 <vfprintf+0x330>
    323c:	2b 18       	sub	r2, r11
    323e:	02 c0       	rjmp	.+4      	; 0x3244 <vfprintf+0x332>
    3240:	98 2c       	mov	r9, r8
    3242:	21 2c       	mov	r2, r1
    3244:	a4 fe       	sbrs	r10, 4
    3246:	10 c0       	rjmp	.+32     	; 0x3268 <vfprintf+0x356>
    3248:	b6 01       	movw	r22, r12
    324a:	80 e3       	ldi	r24, 0x30	; 48
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    3252:	a2 fe       	sbrs	r10, 2
    3254:	17 c0       	rjmp	.+46     	; 0x3284 <vfprintf+0x372>
    3256:	a1 fc       	sbrc	r10, 1
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <vfprintf+0x34e>
    325a:	88 e7       	ldi	r24, 0x78	; 120
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <vfprintf+0x352>
    3260:	88 e5       	ldi	r24, 0x58	; 88
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	b6 01       	movw	r22, r12
    3266:	0c c0       	rjmp	.+24     	; 0x3280 <vfprintf+0x36e>
    3268:	8a 2d       	mov	r24, r10
    326a:	86 78       	andi	r24, 0x86	; 134
    326c:	59 f0       	breq	.+22     	; 0x3284 <vfprintf+0x372>
    326e:	a1 fe       	sbrs	r10, 1
    3270:	02 c0       	rjmp	.+4      	; 0x3276 <vfprintf+0x364>
    3272:	8b e2       	ldi	r24, 0x2B	; 43
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <vfprintf+0x366>
    3276:	80 e2       	ldi	r24, 0x20	; 32
    3278:	a7 fc       	sbrc	r10, 7
    327a:	8d e2       	ldi	r24, 0x2D	; 45
    327c:	b6 01       	movw	r22, r12
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    3284:	89 14       	cp	r8, r9
    3286:	38 f4       	brcc	.+14     	; 0x3296 <vfprintf+0x384>
    3288:	b6 01       	movw	r22, r12
    328a:	80 e3       	ldi	r24, 0x30	; 48
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    3292:	9a 94       	dec	r9
    3294:	f7 cf       	rjmp	.-18     	; 0x3284 <vfprintf+0x372>
    3296:	8a 94       	dec	r8
    3298:	f3 01       	movw	r30, r6
    329a:	e8 0d       	add	r30, r8
    329c:	f1 1d       	adc	r31, r1
    329e:	80 81       	ld	r24, Z
    32a0:	b6 01       	movw	r22, r12
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    32a8:	81 10       	cpse	r8, r1
    32aa:	f5 cf       	rjmp	.-22     	; 0x3296 <vfprintf+0x384>
    32ac:	22 20       	and	r2, r2
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <vfprintf+0x3a0>
    32b0:	42 ce       	rjmp	.-892    	; 0x2f36 <vfprintf+0x24>
    32b2:	b6 01       	movw	r22, r12
    32b4:	80 e2       	ldi	r24, 0x20	; 32
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 80 19 	call	0x3300	; 0x3300 <fputc>
    32bc:	2a 94       	dec	r2
    32be:	f6 cf       	rjmp	.-20     	; 0x32ac <vfprintf+0x39a>
    32c0:	f6 01       	movw	r30, r12
    32c2:	86 81       	ldd	r24, Z+6	; 0x06
    32c4:	97 81       	ldd	r25, Z+7	; 0x07
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <vfprintf+0x3ba>
    32c8:	8f ef       	ldi	r24, 0xFF	; 255
    32ca:	9f ef       	ldi	r25, 0xFF	; 255
    32cc:	2b 96       	adiw	r28, 0x0b	; 11
    32ce:	e2 e1       	ldi	r30, 0x12	; 18
    32d0:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__epilogue_restores__>

000032d4 <strnlen_P>:
    32d4:	fc 01       	movw	r30, r24
    32d6:	05 90       	lpm	r0, Z+
    32d8:	61 50       	subi	r22, 0x01	; 1
    32da:	70 40       	sbci	r23, 0x00	; 0
    32dc:	01 10       	cpse	r0, r1
    32de:	d8 f7       	brcc	.-10     	; 0x32d6 <strnlen_P+0x2>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	8e 0f       	add	r24, r30
    32e6:	9f 1f       	adc	r25, r31
    32e8:	08 95       	ret

000032ea <strnlen>:
    32ea:	fc 01       	movw	r30, r24
    32ec:	61 50       	subi	r22, 0x01	; 1
    32ee:	70 40       	sbci	r23, 0x00	; 0
    32f0:	01 90       	ld	r0, Z+
    32f2:	01 10       	cpse	r0, r1
    32f4:	d8 f7       	brcc	.-10     	; 0x32ec <strnlen+0x2>
    32f6:	80 95       	com	r24
    32f8:	90 95       	com	r25
    32fa:	8e 0f       	add	r24, r30
    32fc:	9f 1f       	adc	r25, r31
    32fe:	08 95       	ret

00003300 <fputc>:
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	fb 01       	movw	r30, r22
    330a:	23 81       	ldd	r18, Z+3	; 0x03
    330c:	21 fd       	sbrc	r18, 1
    330e:	03 c0       	rjmp	.+6      	; 0x3316 <fputc+0x16>
    3310:	8f ef       	ldi	r24, 0xFF	; 255
    3312:	9f ef       	ldi	r25, 0xFF	; 255
    3314:	2c c0       	rjmp	.+88     	; 0x336e <fputc+0x6e>
    3316:	22 ff       	sbrs	r18, 2
    3318:	16 c0       	rjmp	.+44     	; 0x3346 <fputc+0x46>
    331a:	46 81       	ldd	r20, Z+6	; 0x06
    331c:	57 81       	ldd	r21, Z+7	; 0x07
    331e:	24 81       	ldd	r18, Z+4	; 0x04
    3320:	35 81       	ldd	r19, Z+5	; 0x05
    3322:	42 17       	cp	r20, r18
    3324:	53 07       	cpc	r21, r19
    3326:	44 f4       	brge	.+16     	; 0x3338 <fputc+0x38>
    3328:	a0 81       	ld	r26, Z
    332a:	b1 81       	ldd	r27, Z+1	; 0x01
    332c:	9d 01       	movw	r18, r26
    332e:	2f 5f       	subi	r18, 0xFF	; 255
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	31 83       	std	Z+1, r19	; 0x01
    3334:	20 83       	st	Z, r18
    3336:	8c 93       	st	X, r24
    3338:	26 81       	ldd	r18, Z+6	; 0x06
    333a:	37 81       	ldd	r19, Z+7	; 0x07
    333c:	2f 5f       	subi	r18, 0xFF	; 255
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	37 83       	std	Z+7, r19	; 0x07
    3342:	26 83       	std	Z+6, r18	; 0x06
    3344:	14 c0       	rjmp	.+40     	; 0x336e <fputc+0x6e>
    3346:	8b 01       	movw	r16, r22
    3348:	ec 01       	movw	r28, r24
    334a:	fb 01       	movw	r30, r22
    334c:	00 84       	ldd	r0, Z+8	; 0x08
    334e:	f1 85       	ldd	r31, Z+9	; 0x09
    3350:	e0 2d       	mov	r30, r0
    3352:	09 95       	icall
    3354:	89 2b       	or	r24, r25
    3356:	e1 f6       	brne	.-72     	; 0x3310 <fputc+0x10>
    3358:	d8 01       	movw	r26, r16
    335a:	16 96       	adiw	r26, 0x06	; 6
    335c:	8d 91       	ld	r24, X+
    335e:	9c 91       	ld	r25, X
    3360:	17 97       	sbiw	r26, 0x07	; 7
    3362:	01 96       	adiw	r24, 0x01	; 1
    3364:	17 96       	adiw	r26, 0x07	; 7
    3366:	9c 93       	st	X, r25
    3368:	8e 93       	st	-X, r24
    336a:	16 97       	sbiw	r26, 0x06	; 6
    336c:	ce 01       	movw	r24, r28
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	08 95       	ret

00003378 <__ultoa_invert>:
    3378:	fa 01       	movw	r30, r20
    337a:	aa 27       	eor	r26, r26
    337c:	28 30       	cpi	r18, 0x08	; 8
    337e:	51 f1       	breq	.+84     	; 0x33d4 <__ultoa_invert+0x5c>
    3380:	20 31       	cpi	r18, 0x10	; 16
    3382:	81 f1       	breq	.+96     	; 0x33e4 <__ultoa_invert+0x6c>
    3384:	e8 94       	clt
    3386:	6f 93       	push	r22
    3388:	6e 7f       	andi	r22, 0xFE	; 254
    338a:	6e 5f       	subi	r22, 0xFE	; 254
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	8f 4f       	sbci	r24, 0xFF	; 255
    3390:	9f 4f       	sbci	r25, 0xFF	; 255
    3392:	af 4f       	sbci	r26, 0xFF	; 255
    3394:	b1 e0       	ldi	r27, 0x01	; 1
    3396:	3e d0       	rcall	.+124    	; 0x3414 <__ultoa_invert+0x9c>
    3398:	b4 e0       	ldi	r27, 0x04	; 4
    339a:	3c d0       	rcall	.+120    	; 0x3414 <__ultoa_invert+0x9c>
    339c:	67 0f       	add	r22, r23
    339e:	78 1f       	adc	r23, r24
    33a0:	89 1f       	adc	r24, r25
    33a2:	9a 1f       	adc	r25, r26
    33a4:	a1 1d       	adc	r26, r1
    33a6:	68 0f       	add	r22, r24
    33a8:	79 1f       	adc	r23, r25
    33aa:	8a 1f       	adc	r24, r26
    33ac:	91 1d       	adc	r25, r1
    33ae:	a1 1d       	adc	r26, r1
    33b0:	6a 0f       	add	r22, r26
    33b2:	71 1d       	adc	r23, r1
    33b4:	81 1d       	adc	r24, r1
    33b6:	91 1d       	adc	r25, r1
    33b8:	a1 1d       	adc	r26, r1
    33ba:	20 d0       	rcall	.+64     	; 0x33fc <__ultoa_invert+0x84>
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <__ultoa_invert+0x48>
    33be:	68 94       	set
    33c0:	3f 91       	pop	r19
    33c2:	2a e0       	ldi	r18, 0x0A	; 10
    33c4:	26 9f       	mul	r18, r22
    33c6:	11 24       	eor	r1, r1
    33c8:	30 19       	sub	r19, r0
    33ca:	30 5d       	subi	r19, 0xD0	; 208
    33cc:	31 93       	st	Z+, r19
    33ce:	de f6       	brtc	.-74     	; 0x3386 <__ultoa_invert+0xe>
    33d0:	cf 01       	movw	r24, r30
    33d2:	08 95       	ret
    33d4:	46 2f       	mov	r20, r22
    33d6:	47 70       	andi	r20, 0x07	; 7
    33d8:	40 5d       	subi	r20, 0xD0	; 208
    33da:	41 93       	st	Z+, r20
    33dc:	b3 e0       	ldi	r27, 0x03	; 3
    33de:	0f d0       	rcall	.+30     	; 0x33fe <__ultoa_invert+0x86>
    33e0:	c9 f7       	brne	.-14     	; 0x33d4 <__ultoa_invert+0x5c>
    33e2:	f6 cf       	rjmp	.-20     	; 0x33d0 <__ultoa_invert+0x58>
    33e4:	46 2f       	mov	r20, r22
    33e6:	4f 70       	andi	r20, 0x0F	; 15
    33e8:	40 5d       	subi	r20, 0xD0	; 208
    33ea:	4a 33       	cpi	r20, 0x3A	; 58
    33ec:	18 f0       	brcs	.+6      	; 0x33f4 <__ultoa_invert+0x7c>
    33ee:	49 5d       	subi	r20, 0xD9	; 217
    33f0:	31 fd       	sbrc	r19, 1
    33f2:	40 52       	subi	r20, 0x20	; 32
    33f4:	41 93       	st	Z+, r20
    33f6:	02 d0       	rcall	.+4      	; 0x33fc <__ultoa_invert+0x84>
    33f8:	a9 f7       	brne	.-22     	; 0x33e4 <__ultoa_invert+0x6c>
    33fa:	ea cf       	rjmp	.-44     	; 0x33d0 <__ultoa_invert+0x58>
    33fc:	b4 e0       	ldi	r27, 0x04	; 4
    33fe:	a6 95       	lsr	r26
    3400:	97 95       	ror	r25
    3402:	87 95       	ror	r24
    3404:	77 95       	ror	r23
    3406:	67 95       	ror	r22
    3408:	ba 95       	dec	r27
    340a:	c9 f7       	brne	.-14     	; 0x33fe <__ultoa_invert+0x86>
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	61 05       	cpc	r22, r1
    3410:	71 05       	cpc	r23, r1
    3412:	08 95       	ret
    3414:	9b 01       	movw	r18, r22
    3416:	ac 01       	movw	r20, r24
    3418:	0a 2e       	mov	r0, r26
    341a:	06 94       	lsr	r0
    341c:	57 95       	ror	r21
    341e:	47 95       	ror	r20
    3420:	37 95       	ror	r19
    3422:	27 95       	ror	r18
    3424:	ba 95       	dec	r27
    3426:	c9 f7       	brne	.-14     	; 0x341a <__ultoa_invert+0xa2>
    3428:	62 0f       	add	r22, r18
    342a:	73 1f       	adc	r23, r19
    342c:	84 1f       	adc	r24, r20
    342e:	95 1f       	adc	r25, r21
    3430:	a0 1d       	adc	r26, r0
    3432:	08 95       	ret

00003434 <eeprom_read_byte>:
    3434:	f9 99       	sbic	0x1f, 1	; 31
    3436:	fe cf       	rjmp	.-4      	; 0x3434 <eeprom_read_byte>
    3438:	92 bd       	out	0x22, r25	; 34
    343a:	81 bd       	out	0x21, r24	; 33
    343c:	f8 9a       	sbi	0x1f, 0	; 31
    343e:	99 27       	eor	r25, r25
    3440:	80 b5       	in	r24, 0x20	; 32
    3442:	08 95       	ret

00003444 <eeprom_read_dword>:
    3444:	a6 e1       	ldi	r26, 0x16	; 22
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	44 e0       	ldi	r20, 0x04	; 4
    344a:	50 e0       	ldi	r21, 0x00	; 0
    344c:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <eeprom_read_blraw>

00003450 <eeprom_read_word>:
    3450:	a8 e1       	ldi	r26, 0x18	; 24
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	42 e0       	ldi	r20, 0x02	; 2
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <eeprom_read_blraw>

0000345c <eeprom_write_byte>:
    345c:	26 2f       	mov	r18, r22

0000345e <eeprom_write_r18>:
    345e:	f9 99       	sbic	0x1f, 1	; 31
    3460:	fe cf       	rjmp	.-4      	; 0x345e <eeprom_write_r18>
    3462:	1f ba       	out	0x1f, r1	; 31
    3464:	92 bd       	out	0x22, r25	; 34
    3466:	81 bd       	out	0x21, r24	; 33
    3468:	20 bd       	out	0x20, r18	; 32
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	fa 9a       	sbi	0x1f, 2	; 31
    3470:	f9 9a       	sbi	0x1f, 1	; 31
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	08 95       	ret

00003478 <eeprom_write_dword>:
    3478:	24 2f       	mov	r18, r20
    347a:	0e 94 2f 1a 	call	0x345e	; 0x345e <eeprom_write_r18>
    347e:	25 2f       	mov	r18, r21
    3480:	0e 94 2f 1a 	call	0x345e	; 0x345e <eeprom_write_r18>
    3484:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <eeprom_write_word>

00003488 <eeprom_write_word>:
    3488:	0e 94 2e 1a 	call	0x345c	; 0x345c <eeprom_write_byte>
    348c:	27 2f       	mov	r18, r23
    348e:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <eeprom_write_r18>

00003492 <eeprom_read_block>:
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22

00003496 <eeprom_read_blraw>:
    3496:	fc 01       	movw	r30, r24
    3498:	f9 99       	sbic	0x1f, 1	; 31
    349a:	fe cf       	rjmp	.-4      	; 0x3498 <eeprom_read_blraw+0x2>
    349c:	06 c0       	rjmp	.+12     	; 0x34aa <eeprom_read_blraw+0x14>
    349e:	f2 bd       	out	0x22, r31	; 34
    34a0:	e1 bd       	out	0x21, r30	; 33
    34a2:	f8 9a       	sbi	0x1f, 0	; 31
    34a4:	31 96       	adiw	r30, 0x01	; 1
    34a6:	00 b4       	in	r0, 0x20	; 32
    34a8:	0d 92       	st	X+, r0
    34aa:	41 50       	subi	r20, 0x01	; 1
    34ac:	50 40       	sbci	r21, 0x00	; 0
    34ae:	b8 f7       	brcc	.-18     	; 0x349e <eeprom_read_blraw+0x8>
    34b0:	08 95       	ret

000034b2 <__prologue_saves__>:
    34b2:	2f 92       	push	r2
    34b4:	3f 92       	push	r3
    34b6:	4f 92       	push	r4
    34b8:	5f 92       	push	r5
    34ba:	6f 92       	push	r6
    34bc:	7f 92       	push	r7
    34be:	8f 92       	push	r8
    34c0:	9f 92       	push	r9
    34c2:	af 92       	push	r10
    34c4:	bf 92       	push	r11
    34c6:	cf 92       	push	r12
    34c8:	df 92       	push	r13
    34ca:	ef 92       	push	r14
    34cc:	ff 92       	push	r15
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	ca 1b       	sub	r28, r26
    34dc:	db 0b       	sbc	r29, r27
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	09 94       	ijmp

000034ea <__epilogue_restores__>:
    34ea:	2a 88       	ldd	r2, Y+18	; 0x12
    34ec:	39 88       	ldd	r3, Y+17	; 0x11
    34ee:	48 88       	ldd	r4, Y+16	; 0x10
    34f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    34fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    34fc:	b9 84       	ldd	r11, Y+9	; 0x09
    34fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3500:	df 80       	ldd	r13, Y+7	; 0x07
    3502:	ee 80       	ldd	r14, Y+6	; 0x06
    3504:	fd 80       	ldd	r15, Y+5	; 0x05
    3506:	0c 81       	ldd	r16, Y+4	; 0x04
    3508:	1b 81       	ldd	r17, Y+3	; 0x03
    350a:	aa 81       	ldd	r26, Y+2	; 0x02
    350c:	b9 81       	ldd	r27, Y+1	; 0x01
    350e:	ce 0f       	add	r28, r30
    3510:	d1 1d       	adc	r29, r1
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
    351c:	ed 01       	movw	r28, r26
    351e:	08 95       	ret

00003520 <_exit>:
    3520:	f8 94       	cli

00003522 <__stop_program>:
    3522:	ff cf       	rjmp	.-2      	; 0x3522 <__stop_program>
