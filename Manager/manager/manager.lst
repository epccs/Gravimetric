
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00002420  000024b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001da  0080019c  0080019c  00002550  2**0
                  ALLOC
  3 .stab         0000807c  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022a2  00000000  00000000  0000a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c86e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c880  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000040  00000000  00000000  0000c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000a20  00000000  00000000  0000c900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000896  00000000  00000000  0000d320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000002bd  00000000  00000000  0000dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  0000de73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_18>
      4c:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e0 e2       	ldi	r30, 0x20	; 32
      ce:	f4 e2       	ldi	r31, 0x24	; 36
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a6 37       	cpi	r26, 0x76	; 118
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 43 01 	call	0x286	; 0x286 <main>
      f0:	0c 94 0e 12 	jmp	0x241c	; 0x241c <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <bootloader_address>
    host_active = 0;
     1ae:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <host_active>
    lockout_active = 0;
     1b2:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <lockout_active>
    status_byt = 0;
     1b6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <test_mode_started>
    test_mode = 0;
     1d2:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     1e2:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_previous_byte>
    uart_output = 0;
     1e6:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1ea:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <initTimers>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     1ee:	60 e9       	ldi	r22, 0x90	; 144
     1f0:	70 ed       	ldi	r23, 0xD0	; 208
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <uartstream0_init>
     1fa:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <__iob+0x1>
     1fe:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <__iob>
     202:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <__iob+0x3>
     206:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     20a:	89 e2       	ldi	r24, 0x29	; 41
     20c:	0e 94 b7 0b 	call	0x176e	; 0x176e <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     210:	80 e3       	ldi	r24, 0x30	; 48
     212:	99 e0       	ldi	r25, 0x09	; 9
     214:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     218:	83 ef       	ldi	r24, 0xF3	; 243
     21a:	98 e0       	ldi	r25, 0x08	; 8
     21c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 99 0b 	call	0x1732	; 0x1732 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     226:	8a e2       	ldi	r24, 0x2A	; 42
     228:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     22c:	8c eb       	ldi	r24, 0xBC	; 188
     22e:	99 e0       	ldi	r25, 0x09	; 9
     230:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     234:	83 e4       	ldi	r24, 0x43	; 67
     236:	99 e0       	ldi	r25, 0x09	; 9
     238:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     242:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     244:	2f eb       	ldi	r18, 0xBF	; 191
     246:	84 ed       	ldi	r24, 0xD4	; 212
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	80 40       	sbci	r24, 0x00	; 0
     24e:	90 40       	sbci	r25, 0x00	; 0
     250:	e1 f7       	brne	.-8      	; 0x24a <setup+0x152>
     252:	00 c0       	rjmp	.+0      	; 0x254 <setup+0x15c>
     254:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     256:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     258:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     25a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     25c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id() )
     25e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <check_for_eeprom_id>
     262:	88 23       	and	r24, r24
     264:	29 f0       	breq	.+10     	; 0x270 <setup+0x178>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 c1 11 	call	0x2382	; 0x2382 <eeprom_read_byte>
     26e:	01 c0       	rjmp	.+2      	; 0x272 <setup+0x17a>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     270:	81 e3       	ldi	r24, 0x31	; 49
     272:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     276:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     27a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     27e:	88 60       	ori	r24, 0x08	; 8
     280:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
     284:	08 95       	ret

00000286 <main>:
#endif
}

int main(void)
{
    setup();
     286:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     28a:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     28e:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <blink_started_at>
     292:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <blink_started_at+0x1>
     296:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <blink_started_at+0x2>
     29a:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <blink_started_at+0x3>

    while (1) 
    {
        if (!test_mode) 
     29e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
     2a2:	81 11       	cpse	r24, r1
     2a4:	0a c0       	rjmp	.+20     	; 0x2ba <main+0x34>
        {
            blink_on_activate();
     2a6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <blink_on_activate>
            check_Bootload_Time();
     2aa:	0e 94 9b 02 	call	0x536	; 0x536 <check_Bootload_Time>
            check_DTR();
     2ae:	0e 94 3e 03 	call	0x67c	; 0x67c <check_DTR>
            check_lockout();
     2b2:	0e 94 c4 02 	call	0x588	; 0x588 <check_lockout>
            check_shutdown();
     2b6:	0e 94 ed 02 	call	0x5da	; 0x5da <check_shutdown>
        }
        if(write_rpu_address_to_eeprom) save_rpu_addr_state();
     2ba:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
     2be:	81 11       	cpse	r24, r1
     2c0:	0e 94 c5 09 	call	0x138a	; 0x138a <save_rpu_addr_state>
        check_uart();
     2c4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <check_uart>
        if (smbus_has_numBytes_to_handle) handle_smbus_receive();
     2c8:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <smbus_has_numBytes_to_handle>
     2cc:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
     2d0:	89 2b       	or	r24, r25
     2d2:	29 f3       	breq	.-54     	; 0x29e <main+0x18>
     2d4:	0e 94 4c 09 	call	0x1298	; 0x1298 <handle_smbus_receive>
     2d8:	e2 cf       	rjmp	.-60     	; 0x29e <main+0x18>

000002da <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     2da:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     2de:	88 23       	and	r24, r24
     2e0:	c1 f0       	breq	.+48     	; 0x312 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     2e2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2e4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     2e6:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2e8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     2ea:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2ec:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     2ee:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2f0:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     2f2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <local_mcu_is_rpu_aware>
     2f6:	88 23       	and	r24, r24
     2f8:	21 f0       	breq	.+8      	; 0x302 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     2fa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2fc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     2fe:	5d 9a       	sbi	0x0b, 5	; 11
     300:	03 c0       	rjmp	.+6      	; 0x308 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     302:	8f b7       	in	r24, 0x3f	; 63
     304:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     306:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     308:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     30a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     30e:	42 9a       	sbi	0x08, 2	; 8
     310:	17 c0       	rjmp	.+46     	; 0x340 <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     312:	8f b7       	in	r24, 0x3f	; 63
     314:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     316:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     318:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     31a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     31c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     31e:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     320:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     322:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <local_mcu_is_rpu_aware>
     326:	88 23       	and	r24, r24
     328:	21 f0       	breq	.+8      	; 0x332 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     32a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     32c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     32e:	5d 9a       	sbi	0x0b, 5	; 11
     330:	03 c0       	rjmp	.+6      	; 0x338 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     332:	8f b7       	in	r24, 0x3f	; 63
     334:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     336:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     338:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     33a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     33e:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     340:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     342:	08 95       	ret

00000344 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     344:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     348:	88 23       	and	r24, r24
     34a:	81 f0       	breq	.+32     	; 0x36c <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     34c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     34e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     350:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     352:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     354:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     356:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     358:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     35a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     35e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     360:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     362:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     364:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     366:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     368:	42 9a       	sbi	0x08, 2	; 8
     36a:	0f c0       	rjmp	.+30     	; 0x38a <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     36c:	8f b7       	in	r24, 0x3f	; 63
     36e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     370:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     372:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     374:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     376:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     378:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     37a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     37c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     37e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     380:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     382:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     384:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     386:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     388:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     38a:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     38c:	08 95       	ret

0000038e <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     38e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     392:	88 23       	and	r24, r24
     394:	81 f0       	breq	.+32     	; 0x3b6 <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     396:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     398:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     39a:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     39c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     39e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3a2:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3aa:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ac:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3b2:	42 9a       	sbi	0x08, 2	; 8
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <connect_lockout_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b6:	8f b7       	in	r24, 0x3f	; 63
     3b8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3ba:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3bc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3be:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3c2:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3c4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ca:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3cc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ce:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3d2:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d4:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3d6:	08 95       	ret

000003d8 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     3dc:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_detected>
     3e0:	81 11       	cpse	r24, r1
     3e2:	a6 c0       	rjmp	.+332    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     3e4:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     3e8:	00 91 f7 02 	lds	r16, 0x02F7	; 0x8002f7 <blink_started_at>
     3ec:	10 91 f8 02 	lds	r17, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     3f0:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     3f4:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	80 1b       	sub	r24, r16
     3fe:	91 0b       	sbc	r25, r17
     400:	a2 0b       	sbc	r26, r18
     402:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     404:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <status_byt>
     408:	27 7f       	andi	r18, 0xF7	; 247
     40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	6d c0       	rjmp	.+218    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     40e:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <host_is_foreign>
     412:	22 23       	and	r18, r18
     414:	21 f0       	breq	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
        {
            kRuntime = kRuntime >> 1;
     416:	b6 95       	lsr	r27
     418:	a7 95       	ror	r26
     41a:	97 95       	ror	r25
     41c:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     41e:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <bootloader_started>
     422:	22 23       	and	r18, r18
     424:	e9 f0       	breq	.+58     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     426:	8c 34       	cpi	r24, 0x4C	; 76
     428:	91 05       	cpc	r25, r1
     42a:	a1 05       	cpc	r26, r1
     42c:	b1 05       	cpc	r27, r1
     42e:	c0 f0       	brcs	.+48     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     430:	25 9b       	sbis	0x04, 5	; 4
     432:	09 c0       	rjmp	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     434:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     436:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     438:	f8 94       	cli
    {
        if (value_for_bit) 
     43a:	95 fd       	sbrc	r25, 5
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
        {
            *register_addr |= 1 << bit_offset;
     43e:	2d 9a       	sbi	0x05, 5	; 5
     440:	01 c0       	rjmp	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     442:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     444:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     446:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     44a:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     44e:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     452:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     456:	85 5b       	subi	r24, 0xB5	; 181
     458:	9f 4f       	sbci	r25, 0xFF	; 255
     45a:	af 4f       	sbci	r26, 0xFF	; 255
     45c:	bf 4f       	sbci	r27, 0xFF	; 255
     45e:	60 c0       	rjmp	.+192    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     460:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <lockout_active>
     464:	22 23       	and	r18, r18
     466:	f1 f0       	breq	.+60     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     468:	81 3d       	cpi	r24, 0xD1	; 209
     46a:	27 e0       	ldi	r18, 0x07	; 7
     46c:	92 07       	cpc	r25, r18
     46e:	a1 05       	cpc	r26, r1
     470:	b1 05       	cpc	r27, r1
     472:	c0 f0       	brcs	.+48     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     474:	25 9b       	sbis	0x04, 5	; 4
     476:	09 c0       	rjmp	.+18     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     478:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     47a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47c:	f8 94       	cli
    {
        if (value_for_bit) 
     47e:	95 fd       	sbrc	r25, 5
     480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
        {
            *register_addr |= 1 << bit_offset;
     482:	2d 9a       	sbi	0x05, 5	; 5
     484:	01 c0       	rjmp	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     486:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     488:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     48a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     48e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     492:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     496:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     49a:	80 53       	subi	r24, 0x30	; 48
     49c:	98 4f       	sbci	r25, 0xF8	; 248
     49e:	af 4f       	sbci	r26, 0xFF	; 255
     4a0:	bf 4f       	sbci	r27, 0xFF	; 255
     4a2:	3e c0       	rjmp	.+124    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4a4:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <host_active>
     4a8:	22 23       	and	r18, r18
     4aa:	09 f4       	brne	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	41 c0       	rjmp	.+130    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     4ae:	85 3f       	cpi	r24, 0xF5	; 245
     4b0:	91 40       	sbci	r25, 0x01	; 1
     4b2:	a1 05       	cpc	r26, r1
     4b4:	b1 05       	cpc	r27, r1
     4b6:	e0 f1       	brcs	.+120    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4b8:	25 9b       	sbis	0x04, 5	; 4
     4ba:	09 c0       	rjmp	.+18     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4bc:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4be:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4c0:	f8 94       	cli
    {
        if (value_for_bit) 
     4c2:	95 fd       	sbrc	r25, 5
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
        {
            *register_addr |= 1 << bit_offset;
     4c6:	2d 9a       	sbi	0x05, 5	; 5
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4ca:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4cc:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     4ce:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     4d2:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     4d6:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     4da:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     4de:	8c 50       	subi	r24, 0x0C	; 12
     4e0:	9e 4f       	sbci	r25, 0xFE	; 254
     4e2:	af 4f       	sbci	r26, 0xFF	; 255
     4e4:	bf 4f       	sbci	r27, 0xFF	; 255
     4e6:	1c c0       	rjmp	.+56     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     4e8:	89 3c       	cpi	r24, 0xC9	; 201
     4ea:	91 05       	cpc	r25, r1
     4ec:	a1 05       	cpc	r26, r1
     4ee:	b1 05       	cpc	r27, r1
     4f0:	f8 f0       	brcs	.+62     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4f2:	25 9b       	sbis	0x04, 5	; 4
     4f4:	09 c0       	rjmp	.+18     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4f6:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4fa:	f8 94       	cli
    {
        if (value_for_bit) 
     4fc:	95 fd       	sbrc	r25, 5
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
        {
            *register_addr |= 1 << bit_offset;
     500:	2d 9a       	sbi	0x05, 5	; 5
     502:	01 c0       	rjmp	.+2      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     504:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     506:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     508:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     50c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     510:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     514:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     518:	88 53       	subi	r24, 0x38	; 56
     51a:	9f 4f       	sbci	r25, 0xFF	; 255
     51c:	af 4f       	sbci	r26, 0xFF	; 255
     51e:	bf 4f       	sbci	r27, 0xFF	; 255
     520:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <blink_started_at>
     524:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <blink_started_at+0x1>
     528:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <blink_started_at+0x2>
     52c:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <blink_started_at+0x3>
        }
    }
}
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
    if (bootloader_started)
     53a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     53e:	88 23       	and	r24, r24
     540:	01 f1       	breq	.+64     	; 0x582 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     542:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     546:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <arduino_mode>
     54a:	21 11       	cpse	r18, r1
     54c:	1a c0       	rjmp	.+52     	; 0x582 <check_Bootload_Time+0x4c>
     54e:	00 91 e4 02 	lds	r16, 0x02E4	; 0x8002e4 <bootloader_started_at>
     552:	10 91 e5 02 	lds	r17, 0x02E5	; 0x8002e5 <bootloader_started_at+0x1>
     556:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <bootloader_started_at+0x2>
     55a:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <bootloader_started_at+0x3>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	80 1b       	sub	r24, r16
     564:	91 0b       	sbc	r25, r17
     566:	a2 0b       	sbc	r26, r18
     568:	b3 0b       	sbc	r27, r19
     56a:	89 33       	cpi	r24, 0x39	; 57
     56c:	91 4c       	sbci	r25, 0xC1	; 193
     56e:	a1 40       	sbci	r26, 0x01	; 1
     570:	b1 05       	cpc	r27, r1
     572:	38 f0       	brcs	.+14     	; 0x582 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     574:	0e 94 6d 01 	call	0x2da	; 0x2da <connect_normal_mode>
            host_active =1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <host_active>
            bootloader_started = 0;
     57e:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <bootloader_started>
        }
    }
}
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     58c:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     590:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <arduino_mode>
     594:	21 11       	cpse	r18, r1
     596:	1e c0       	rjmp	.+60     	; 0x5d4 <check_lockout+0x4c>
     598:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <lockout_active>
     59c:	22 23       	and	r18, r18
     59e:	d1 f0       	breq	.+52     	; 0x5d4 <check_lockout+0x4c>
     5a0:	00 91 e8 02 	lds	r16, 0x02E8	; 0x8002e8 <lockout_started_at>
     5a4:	10 91 e9 02 	lds	r17, 0x02E9	; 0x8002e9 <lockout_started_at+0x1>
     5a8:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <lockout_started_at+0x2>
     5ac:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <lockout_started_at+0x3>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	80 1b       	sub	r24, r16
     5b6:	91 0b       	sbc	r25, r17
     5b8:	a2 0b       	sbc	r26, r18
     5ba:	b3 0b       	sbc	r27, r19
     5bc:	81 3c       	cpi	r24, 0xC1	; 193
     5be:	94 4d       	sbci	r25, 0xD4	; 212
     5c0:	a1 40       	sbci	r26, 0x01	; 1
     5c2:	b1 05       	cpc	r27, r1
     5c4:	38 f0       	brcs	.+14     	; 0x5d4 <check_lockout+0x4c>
    {
        connect_normal_mode();
     5c6:	0e 94 6d 01 	call	0x2da	; 0x2da <connect_normal_mode>

        host_active = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <host_active>
        lockout_active =0;
     5d0:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <lockout_active>
    }
}
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <check_shutdown>:


void check_shutdown(void)
{
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
    if (shutdown_started)
     5de:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <shutdown_started>
     5e2:	88 23       	and	r24, r24
     5e4:	19 f1       	breq	.+70     	; 0x62c <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     5e6:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     5ea:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <shutdown_started_at>
     5ee:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <shutdown_started_at+0x1>
     5f2:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <shutdown_started_at+0x2>
     5f6:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <shutdown_started_at+0x3>
     5fa:	dc 01       	movw	r26, r24
     5fc:	cb 01       	movw	r24, r22
     5fe:	80 1b       	sub	r24, r16
     600:	91 0b       	sbc	r25, r17
     602:	a2 0b       	sbc	r26, r18
     604:	b3 0b       	sbc	r27, r19
     606:	89 3e       	cpi	r24, 0xE9	; 233
     608:	93 40       	sbci	r25, 0x03	; 3
     60a:	a1 05       	cpc	r26, r1
     60c:	b1 05       	cpc	r27, r1
     60e:	98 f1       	brcs	.+102    	; 0x676 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     610:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     612:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     614:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     616:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     618:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     61a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     61c:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     61e:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     620:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_detected>
     62a:	25 c0       	rjmp	.+74     	; 0x676 <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     62c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_detected>
     630:	81 11       	cpse	r24, r1
     632:	21 c0       	rjmp	.+66     	; 0x676 <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     634:	18 99       	sbic	0x03, 0	; 3
     636:	1f c0       	rjmp	.+62     	; 0x676 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     638:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     63a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     63c:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     63e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     640:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     642:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     644:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     646:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     648:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     64a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     64c:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     64e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     650:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     652:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     654:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     656:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     658:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <shutdown_started>
                shutdown_started_at = millis();
     662:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     666:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <shutdown_started_at>
     66a:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <shutdown_started_at+0x1>
     66e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <shutdown_started_at+0x2>
     672:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <shutdown_started_at+0x3>
            }
        }
}
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     67c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     680:	81 11       	cpse	r24, r1
     682:	b5 c0       	rjmp	.+362    	; 0x7ee <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     684:	4b 99       	sbic	0x09, 3	; 9
     686:	56 c0       	rjmp	.+172    	; 0x734 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     688:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     68c:	83 fd       	sbrc	r24, 3
     68e:	af c0       	rjmp	.+350    	; 0x7ee <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     690:	4a 9b       	sbis	0x09, 2	; 9
     692:	05 c0       	rjmp	.+10     	; 0x69e <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     694:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     696:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     698:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     69a:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     69c:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     69e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     6a2:	81 11       	cpse	r24, r1
     6a4:	a4 c0       	rjmp	.+328    	; 0x7ee <check_DTR+0x172>
     6a6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <lockout_active>
     6aa:	81 11       	cpse	r24, r1
     6ac:	a0 c0       	rjmp	.+320    	; 0x7ee <check_DTR+0x172>
     6ae:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <host_active>
     6b2:	81 11       	cpse	r24, r1
     6b4:	9c c0       	rjmp	.+312    	; 0x7ee <check_DTR+0x172>
     6b6:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <uart_has_TTL>
     6ba:	81 11       	cpse	r24, r1
     6bc:	98 c0       	rjmp	.+304    	; 0x7ee <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     6be:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     6c2:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     6c6:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     6ca:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     6ce:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     6d2:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <bootloader_address>
     6d6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     6da:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     6de:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     6e2:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	20 95       	com	r18
     6ea:	30 95       	com	r19
     6ec:	2a 70       	andi	r18, 0x0A	; 10
     6ee:	33 27       	eor	r19, r19
     6f0:	64 e0       	ldi	r22, 0x04	; 4
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	6a 95       	dec	r22
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <check_DTR+0x76>
     6fa:	89 2f       	mov	r24, r25
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	80 95       	com	r24
     700:	90 95       	com	r25
     702:	80 75       	andi	r24, 0x50	; 80
     704:	99 27       	eor	r25, r25
     706:	74 e0       	ldi	r23, 0x04	; 4
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	7a 95       	dec	r23
     70e:	e1 f7       	brne	.-8      	; 0x708 <check_DTR+0x8c>
     710:	82 2b       	or	r24, r18
     712:	93 2b       	or	r25, r19
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	1f 92       	push	r1
     71a:	4f 93       	push	r20
     71c:	86 e1       	ldi	r24, 0x16	; 22
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
                        uart_has_TTL = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <uart_has_TTL>
                        localhost_active = 1;
     72e:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <localhost_active>
     732:	57 c0       	rjmp	.+174    	; 0x7e2 <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     734:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <host_active>
     738:	88 23       	and	r24, r24
     73a:	09 f4       	brne	.+2      	; 0x73e <check_DTR+0xc2>
     73c:	58 c0       	rjmp	.+176    	; 0x7ee <check_DTR+0x172>
     73e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <localhost_active>
     742:	88 23       	and	r24, r24
     744:	09 f4       	brne	.+2      	; 0x748 <check_DTR+0xcc>
     746:	53 c0       	rjmp	.+166    	; 0x7ee <check_DTR+0x172>
     748:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <uart_has_TTL>
     74c:	81 11       	cpse	r24, r1
     74e:	4f c0       	rjmp	.+158    	; 0x7ee <check_DTR+0x172>
     750:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     754:	81 11       	cpse	r24, r1
     756:	4b c0       	rjmp	.+150    	; 0x7ee <check_DTR+0x172>
     758:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <lockout_active>
     75c:	81 11       	cpse	r24, r1
     75e:	47 c0       	rjmp	.+142    	; 0x7ee <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     760:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     764:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     768:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     76c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     770:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     774:	8f ec       	ldi	r24, 0xCF	; 207
     776:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     77a:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     77e:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     782:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	20 95       	com	r18
     78a:	30 95       	com	r19
     78c:	2a 70       	andi	r18, 0x0A	; 10
     78e:	33 27       	eor	r19, r19
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	8a 95       	dec	r24
     798:	e1 f7       	brne	.-8      	; 0x792 <check_DTR+0x116>
     79a:	89 2f       	mov	r24, r25
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	80 95       	com	r24
     7a0:	90 95       	com	r25
     7a2:	80 75       	andi	r24, 0x50	; 80
     7a4:	99 27       	eor	r25, r25
     7a6:	54 e0       	ldi	r21, 0x04	; 4
     7a8:	95 95       	asr	r25
     7aa:	87 95       	ror	r24
     7ac:	5a 95       	dec	r21
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <check_DTR+0x12c>
     7b0:	82 2b       	or	r24, r18
     7b2:	93 2b       	or	r25, r19
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	1f 92       	push	r1
     7ba:	4f 93       	push	r20
     7bc:	86 e1       	ldi	r24, 0x16	; 22
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	9f 93       	push	r25
     7c2:	8f 93       	push	r24
     7c4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
                uart_has_TTL = 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     7ce:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7d0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     7d2:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7d4:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     7d6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     7da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7dc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     7de:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7e0:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	08 95       	ret

000007f0 <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     7f0:	4f 92       	push	r4
     7f2:	5f 92       	push	r5
     7f4:	6f 92       	push	r6
     7f6:	7f 92       	push	r7
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     810:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     814:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <uart_has_TTL>
     818:	22 23       	and	r18, r18
     81a:	d9 f0       	breq	.+54     	; 0x852 <check_uart+0x62>
     81c:	40 90 08 03 	lds	r4, 0x0308	; 0x800308 <uart_started_at>
     820:	50 90 09 03 	lds	r5, 0x0309	; 0x800309 <uart_started_at+0x1>
     824:	60 90 0a 03 	lds	r6, 0x030A	; 0x80030a <uart_started_at+0x2>
     828:	70 90 0b 03 	lds	r7, 0x030B	; 0x80030b <uart_started_at+0x3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	84 19       	sub	r24, r4
     832:	95 09       	sbc	r25, r5
     834:	a6 09       	sbc	r26, r6
     836:	b7 09       	sbc	r27, r7
     838:	85 3f       	cpi	r24, 0xF5	; 245
     83a:	91 40       	sbci	r25, 0x01	; 1
     83c:	a1 05       	cpc	r26, r1
     83e:	b1 05       	cpc	r27, r1
     840:	40 f0       	brcs	.+16     	; 0x852 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     842:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     846:	81 70       	andi	r24, 0x01	; 1
     848:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
        uart_has_TTL = 0;
     84c:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
     850:	c9 c1       	rjmp	.+914    	; 0xbe4 <__stack+0x2e5>
    }
    else
    {
        if ( uart0_available() )
     852:	0e 94 be 0a 	call	0x157c	; 0x157c <uart0_available>
     856:	89 2b       	or	r24, r25
     858:	09 f4       	brne	.+2      	; 0x85c <check_uart+0x6c>
     85a:	c4 c1       	rjmp	.+904    	; 0xbe4 <__stack+0x2e5>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     85c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <__iob>
     860:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <__iob+0x1>
     864:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     868:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <uart_previous_byte>
     86c:	26 2f       	mov	r18, r22
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	20 95       	com	r18
     872:	30 95       	com	r19
     874:	a9 01       	movw	r20, r18
     876:	4a 70       	andi	r20, 0x0A	; 10
     878:	55 27       	eor	r21, r21
     87a:	74 e0       	ldi	r23, 0x04	; 4
     87c:	44 0f       	add	r20, r20
     87e:	55 1f       	adc	r21, r21
     880:	7a 95       	dec	r23
     882:	e1 f7       	brne	.-8      	; 0x87c <check_uart+0x8c>
     884:	20 75       	andi	r18, 0x50	; 80
     886:	33 27       	eor	r19, r19
     888:	e4 e0       	ldi	r30, 0x04	; 4
     88a:	35 95       	asr	r19
     88c:	27 95       	ror	r18
     88e:	ea 95       	dec	r30
     890:	e1 f7       	brne	.-8      	; 0x88a <check_uart+0x9a>
     892:	24 2b       	or	r18, r20
     894:	35 2b       	or	r19, r21
     896:	ac 01       	movw	r20, r24
     898:	55 27       	eor	r21, r21
     89a:	24 17       	cp	r18, r20
     89c:	35 07       	cpc	r19, r21
     89e:	39 f4       	brne	.+14     	; 0x8ae <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8a0:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8a4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <uart_has_TTL>
     8a8:	81 11       	cpse	r24, r1
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <check_uart+0xc4>
     8ac:	0f c0       	rjmp	.+30     	; 0x8cc <check_uart+0xdc>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     8ae:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_previous_byte>
                return;
     8b2:	98 c1       	rjmp	.+816    	; 0xbe4 <__stack+0x2e5>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     8b4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <uart_output>
     8b8:	68 17       	cp	r22, r24
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     8bc:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     8c0:	84 70       	andi	r24, 0x04	; 4
     8c2:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
                }
                uart_has_TTL = 0;
     8c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <check_uart+0xe4>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     8cc:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <localhost_active>
     8d0:	88 23       	and	r24, r24
     8d2:	19 f0       	breq	.+6      	; 0x8da <check_uart+0xea>
                {
                    host_is_foreign = 0; // used to connect the host
     8d4:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <host_is_foreign>
     8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <check_uart+0xf0>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     8e0:	61 11       	cpse	r22, r1
     8e2:	27 c0       	rjmp	.+78     	; 0x932 <__stack+0x33>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     8e4:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	80 5c       	subi	r24, 0xC0	; 192
     8ee:	94 4d       	sbci	r25, 0xD4	; 212
     8f0:	a1 40       	sbci	r26, 0x01	; 1
     8f2:	b1 09       	sbc	r27, r1
     8f4:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <lockout_started_at>
     8f8:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <lockout_started_at+0x1>
     8fc:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <lockout_started_at+0x2>
     900:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     904:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	88 53       	subi	r24, 0x38	; 56
     90e:	91 4c       	sbci	r25, 0xC1	; 193
     910:	a1 40       	sbci	r26, 0x01	; 1
     912:	b1 09       	sbc	r27, r1
     914:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <bootloader_started_at>
     918:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <bootloader_started_at+0x1>
     91c:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <bootloader_started_at+0x2>
     920:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     924:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     926:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     928:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     92a:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     92c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <arduino_mode>
     930:	32 c1       	rjmp	.+612    	; 0xb96 <__stack+0x297>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     932:	6f 3f       	cpi	r22, 0xFF	; 255
     934:	31 f4       	brne	.+12     	; 0x942 <__stack+0x43>
            {
                arduino_mode_started = 0;
     936:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <arduino_mode_started>
                arduino_mode = 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <arduino_mode>
                return;
     940:	51 c1       	rjmp	.+674    	; 0xbe4 <__stack+0x2e5>
            }
            if (input == RPU_START_TEST_MODE) 
     942:	61 30       	cpi	r22, 0x01	; 1
     944:	09 f0       	breq	.+2      	; 0x948 <__stack+0x49>
     946:	6b c0       	rjmp	.+214    	; 0xa1e <__stack+0x11f>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     948:	f9 b1       	in	r31, 0x09	; 9
     94a:	e9 b1       	in	r30, 0x09	; 9
     94c:	56 b1       	in	r21, 0x06	; 6
     94e:	49 b1       	in	r20, 0x09	; 9
     950:	39 b1       	in	r19, 0x09	; 9
     952:	89 b1       	in	r24, 0x09	; 9
     954:	29 b1       	in	r18, 0x09	; 9
     956:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	88 0f       	add	r24, r24
     95c:	89 2f       	mov	r24, r25
     95e:	88 1f       	adc	r24, r24
     960:	99 0b       	sbc	r25, r25
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	73 fb       	bst	r23, 3
     96c:	99 27       	eor	r25, r25
     96e:	90 f9       	bld	r25, 0
     970:	89 2b       	or	r24, r25
     972:	f3 fb       	bst	r31, 3
     974:	aa 24       	eor	r10, r10
     976:	a0 f8       	bld	r10, 0
     978:	b1 2c       	mov	r11, r1
     97a:	b6 94       	lsr	r11
     97c:	ba 2c       	mov	r11, r10
     97e:	aa 24       	eor	r10, r10
     980:	b7 94       	ror	r11
     982:	a7 94       	ror	r10
     984:	a8 2a       	or	r10, r24
     986:	e2 fb       	bst	r30, 2
     988:	cc 24       	eor	r12, r12
     98a:	c0 f8       	bld	r12, 0
     98c:	d1 2c       	mov	r13, r1
     98e:	d6 e0       	ldi	r29, 0x06	; 6
     990:	cc 0c       	add	r12, r12
     992:	dd 1c       	adc	r13, r13
     994:	da 95       	dec	r29
     996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x91>
     998:	ca 28       	or	r12, r10
     99a:	52 fb       	bst	r21, 2
     99c:	ee 24       	eor	r14, r14
     99e:	e0 f8       	bld	r14, 0
     9a0:	f1 2c       	mov	r15, r1
     9a2:	15 e0       	ldi	r17, 0x05	; 5
     9a4:	ee 0c       	add	r14, r14
     9a6:	ff 1c       	adc	r15, r15
     9a8:	1a 95       	dec	r17
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0xa5>
     9ac:	ec 28       	or	r14, r12
     9ae:	45 fb       	bst	r20, 5
     9b0:	00 27       	eor	r16, r16
     9b2:	00 f9       	bld	r16, 0
     9b4:	10 e0       	ldi	r17, 0x00	; 0
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	00 0f       	add	r16, r16
     9ba:	11 1f       	adc	r17, r17
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <__stack+0xb9>
     9c0:	0e 29       	or	r16, r14
     9c2:	36 fb       	bst	r19, 6
     9c4:	33 27       	eor	r19, r19
     9c6:	30 f9       	bld	r19, 0
     9c8:	c3 2f       	mov	r28, r19
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	d8 2f       	mov	r29, r24
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	cc 0f       	add	r28, r28
     9d2:	dd 1f       	adc	r29, r29
     9d4:	9a 95       	dec	r25
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <__stack+0xd1>
     9d8:	c0 2b       	or	r28, r16
     9da:	24 fb       	bst	r18, 4
     9dc:	88 24       	eor	r8, r8
     9de:	80 f8       	bld	r8, 0
     9e0:	91 2c       	mov	r9, r1
     9e2:	88 0c       	add	r8, r8
     9e4:	99 1c       	adc	r9, r9
     9e6:	8c 2a       	or	r8, r28
     9e8:	80 92 f3 02 	sts	0x02F3, r8	; 0x8002f3 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     9ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9ee:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     9f0:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9f2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     9f4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9f6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     9f8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9fa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     9fc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9fe:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a00:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a02:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a04:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a06:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a08:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a0a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a0c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a0e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a10:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a12:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a14:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <test_mode_started>
                test_mode = 1;
     a18:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <test_mode>
                return;
     a1c:	e3 c0       	rjmp	.+454    	; 0xbe4 <__stack+0x2e5>
            }
            if (input == RPU_END_TEST_MODE) 
     a1e:	6e 3f       	cpi	r22, 0xFE	; 254
     a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x125>
     a22:	76 c0       	rjmp	.+236    	; 0xb10 <__stack+0x211>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a24:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a28:	88 1f       	adc	r24, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a2e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a30:	f8 94       	cli
    {
        if (value_for_bit) 
     a32:	88 23       	and	r24, r24
     a34:	11 f0       	breq	.+4      	; 0xa3a <__stack+0x13b>
        {
            *register_addr |= 1 << bit_offset;
     a36:	5b 9a       	sbi	0x0b, 3	; 11
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <__stack+0x13d>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a3a:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a3e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a42:	86 fb       	bst	r24, 6
     a44:	88 27       	eor	r24, r24
     a46:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a48:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4a:	f8 94       	cli
    {
        if (value_for_bit) 
     a4c:	88 23       	and	r24, r24
     a4e:	11 f0       	breq	.+4      	; 0xa54 <__stack+0x155>
        {
            *register_addr |= 1 << bit_offset;
     a50:	5a 9a       	sbi	0x0b, 2	; 11
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <__stack+0x157>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a54:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a56:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a58:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a5c:	85 fb       	bst	r24, 5
     a5e:	88 27       	eor	r24, r24
     a60:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a62:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a64:	f8 94       	cli
    {
        if (value_for_bit) 
     a66:	88 23       	and	r24, r24
     a68:	11 f0       	breq	.+4      	; 0xa6e <__stack+0x16f>
        {
            *register_addr |= 1 << bit_offset;
     a6a:	42 9a       	sbi	0x08, 2	; 8
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <__stack+0x171>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a6e:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a70:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a72:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a76:	82 95       	swap	r24
     a78:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a7a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a7c:	f8 94       	cli
    {
        if (value_for_bit) 
     a7e:	88 23       	and	r24, r24
     a80:	11 f0       	breq	.+4      	; 0xa86 <__stack+0x187>
        {
            *register_addr |= 1 << bit_offset;
     a82:	5d 9a       	sbi	0x0b, 5	; 11
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <__stack+0x189>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a86:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a88:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a8a:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a8e:	83 fb       	bst	r24, 3
     a90:	88 27       	eor	r24, r24
     a92:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a94:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a96:	f8 94       	cli
    {
        if (value_for_bit) 
     a98:	88 23       	and	r24, r24
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <__stack+0x1a1>
        {
            *register_addr |= 1 << bit_offset;
     a9c:	5e 9a       	sbi	0x0b, 6	; 11
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <__stack+0x1a3>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aa0:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa2:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aa4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aa6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     aa8:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aaa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aac:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aae:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ab0:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ab2:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     ab4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     ab8:	88 61       	ori	r24, 0x18	; 24
     aba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     abe:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     ac2:	82 fb       	bst	r24, 2
     ac4:	88 27       	eor	r24, r24
     ac6:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ac8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aca:	f8 94       	cli
    {
        if (value_for_bit) 
     acc:	88 23       	and	r24, r24
     ace:	11 f0       	breq	.+4      	; 0xad4 <__stack+0x1d5>
        {
            *register_addr |= 1 << bit_offset;
     ad0:	5f 9a       	sbi	0x0b, 7	; 11
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <__stack+0x1d7>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ad4:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ad8:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     adc:	86 95       	lsr	r24
     ade:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ae0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae2:	f8 94       	cli
    {
        if (value_for_bit) 
     ae4:	88 23       	and	r24, r24
     ae6:	11 f0       	breq	.+4      	; 0xaec <__stack+0x1ed>
        {
            *register_addr |= 1 << bit_offset;
     ae8:	5c 9a       	sbi	0x0b, 4	; 11
     aea:	01 c0       	rjmp	.+2      	; 0xaee <__stack+0x1ef>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aec:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aee:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     af0:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     af4:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     af6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     af8:	f8 94       	cli
    {
        if (value_for_bit) 
     afa:	88 23       	and	r24, r24
     afc:	11 f0       	breq	.+4      	; 0xb02 <__stack+0x203>
        {
            *register_addr |= 1 << bit_offset;
     afe:	43 9a       	sbi	0x08, 3	; 8
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <__stack+0x205>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b02:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b04:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b06:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <test_mode_started>
                test_mode = 0;
     b0a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <test_mode>
                return;
     b0e:	6a c0       	rjmp	.+212    	; 0xbe4 <__stack+0x2e5>
            }
            if (input == rpu_address) // that is my local address
     b10:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <rpu_address>
     b14:	68 13       	cpse	r22, r24
     b16:	2a c0       	rjmp	.+84     	; 0xb6c <__stack+0x26d>
            {
                connect_bootload_mode();
     b18:	0e 94 a2 01 	call	0x344	; 0x344 <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b22:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b24:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b26:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b28:	8f bf       	out	0x3f, r24	; 63
     b2a:	8f e5       	ldi	r24, 0x5F	; 95
     b2c:	9a ee       	ldi	r25, 0xEA	; 234
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <__stack+0x22f>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <__stack+0x235>
     b34:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b36:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b38:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b3a:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b3c:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     b3e:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     b42:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     b46:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <blink_started_at>
     b4a:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <blink_started_at+0x1>
     b4e:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <blink_started_at+0x2>
     b52:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <blink_started_at+0x3>
                bootloader_started_at = millis();
     b56:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     b5a:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <bootloader_started_at>
     b5e:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <bootloader_started_at+0x1>
     b62:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <bootloader_started_at+0x2>
     b66:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <bootloader_started_at+0x3>
                return;
     b6a:	3c c0       	rjmp	.+120    	; 0xbe4 <__stack+0x2e5>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     b6c:	67 fd       	sbrc	r22, 7
     b6e:	1e c0       	rjmp	.+60     	; 0xbac <__stack+0x2ad>
            {  
                lockout_active =1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <lockout_active>
                bootloader_started = 0;
     b76:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <bootloader_started>
                host_active =0;
     b7a:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <host_active>

                connect_lockout_mode();
     b7e:	0e 94 c7 01 	call	0x38e	; 0x38e <connect_lockout_mode>

                lockout_started_at = millis();
     b82:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     b86:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <lockout_started_at>
     b8a:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <lockout_started_at+0x1>
     b8e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <lockout_started_at+0x2>
     b92:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <lockout_started_at+0x3>
                blink_started_at = millis();
     b96:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     b9a:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <blink_started_at>
     b9e:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <blink_started_at+0x1>
     ba2:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <blink_started_at+0x2>
     ba6:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <blink_started_at+0x3>
                return;
     baa:	1c c0       	rjmp	.+56     	; 0xbe4 <__stack+0x2e5>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     bac:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <host_is_foreign>
                lockout_active =0;
     bb0:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <lockout_active>
                host_active =0;
     bb4:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <host_active>
                bootloader_started = 0;
     bb8:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bbc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bbe:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     bc0:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bc2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bc4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bc6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     bc8:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bcc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bce:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     bd0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bd2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bd4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bd6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     bd8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bda:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bdc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bde:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     be0:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     be2:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	5f 90       	pop	r5
     c02:	4f 90       	pop	r4
     c04:	08 95       	ret

00000c06 <fnWtMgrAddr>:
}

// I2C_COMMAND_TO_SET_RPU_ADDRESS
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
    rpu_address = i2cBuffer[1];
     c06:	fc 01       	movw	r30, r24
     c08:	81 81       	ldd	r24, Z+1	; 0x01
     c0a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <rpu_address>
    write_rpu_address_to_eeprom = 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <write_rpu_address_to_eeprom>
     c14:	08 95       	ret

00000c16 <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c16:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <bootloader_address>
     c1a:	fc 01       	movw	r30, r24
     c1c:	21 83       	std	Z+1, r18	; 0x01
     c1e:	08 95       	ret

00000c20 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c20:	fc 01       	movw	r30, r24
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <bootloader_address>
     c28:	08 95       	ret

00000c2a <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c2a:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <shutdown_detected>
     c2e:	fc 01       	movw	r30, r24
     c30:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c32:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
     c36:	08 95       	ret

00000c38 <fnRdStatus>:
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = status_byt;
     c38:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <status_byt>
     c3c:	fc 01       	movw	r30, r24
     c3e:	21 83       	std	Z+1, r18	; 0x01
     c40:	08 95       	ret

00000c42 <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    status_byt = i2cBuffer[1];
     c42:	fc 01       	movw	r30, r24
     c44:	81 81       	ldd	r24, Z+1	; 0x01
     c46:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
     c4a:	08 95       	ret

00000c4c <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     c4c:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <arduino_mode>
     c50:	fc 01       	movw	r30, r24
     c52:	21 83       	std	Z+1, r18	; 0x01
     c54:	08 95       	ret

00000c56 <fnNull>:
    }
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     c56:	08 95       	ret

00000c58 <fnRdMgrAddr>:
  *    the manager broadcast the bootload address when the host serial is active (e.g., nRTS) 
  *    all managers lockout serial except the address to bootload and the host */

// I2C_COMMAND_TO_READ_RPU_ADDRESS and set RPU_NORMAL_MODE
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
     c58:	cf 93       	push	r28
    i2cBuffer[1] = rpu_address; // '1' is 0x31
     c5a:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <rpu_address>
     c5e:	fc 01       	movw	r30, r24
     c60:	21 83       	std	Z+1, r18	; 0x01
    local_mcu_is_rpu_aware =1; 
     c62:	c1 e0       	ldi	r28, 0x01	; 1
     c64:	c0 93 f5 02 	sts	0x02F5, r28	; 0x8002f5 <local_mcu_is_rpu_aware>
    
    // end the local mcu lockout. 
    if (localhost_active) 
     c68:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <localhost_active>
     c6c:	88 23       	and	r24, r24
     c6e:	b1 f1       	breq	.+108    	; 0xcdc <fnRdMgrAddr+0x84>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
     c70:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     c74:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     c78:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     c7c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     c80:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
     c84:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     c88:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     c8c:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     c90:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	20 95       	com	r18
     c98:	30 95       	com	r19
     c9a:	2a 70       	andi	r18, 0x0A	; 10
     c9c:	33 27       	eor	r19, r19
     c9e:	64 e0       	ldi	r22, 0x04	; 4
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	6a 95       	dec	r22
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <fnRdMgrAddr+0x48>
     ca8:	89 2f       	mov	r24, r25
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	80 95       	com	r24
     cae:	90 95       	com	r25
     cb0:	80 75       	andi	r24, 0x50	; 80
     cb2:	99 27       	eor	r25, r25
     cb4:	74 e0       	ldi	r23, 0x04	; 4
     cb6:	95 95       	asr	r25
     cb8:	87 95       	ror	r24
     cba:	7a 95       	dec	r23
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <fnRdMgrAddr+0x5e>
     cbe:	82 2b       	or	r24, r18
     cc0:	93 2b       	or	r25, r19
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	1f 92       	push	r1
     cc8:	4f 93       	push	r20
     cca:	86 e1       	ldi	r24, 0x16	; 22
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
     cd6:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <uart_has_TTL>
     cda:	39 c0       	rjmp	.+114    	; 0xd4e <fnRdMgrAddr+0xf6>
    }
    else 
        if (bootloader_started)
     cdc:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     ce0:	88 23       	and	r24, r24
     ce2:	e1 f1       	breq	.+120    	; 0xd5c <fnRdMgrAddr+0x104>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
     ce4:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     ce8:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     cec:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     cf0:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     cf4:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
     cf8:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     cfc:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     d00:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     d04:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	20 95       	com	r18
     d0c:	30 95       	com	r19
     d0e:	2a 70       	andi	r18, 0x0A	; 10
     d10:	33 27       	eor	r19, r19
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	22 0f       	add	r18, r18
     d16:	33 1f       	adc	r19, r19
     d18:	8a 95       	dec	r24
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <fnRdMgrAddr+0xbc>
     d1c:	89 2f       	mov	r24, r25
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	80 95       	com	r24
     d22:	90 95       	com	r25
     d24:	80 75       	andi	r24, 0x50	; 80
     d26:	99 27       	eor	r25, r25
     d28:	54 e0       	ldi	r21, 0x04	; 4
     d2a:	95 95       	asr	r25
     d2c:	87 95       	ror	r24
     d2e:	5a 95       	dec	r21
     d30:	e1 f7       	brne	.-8      	; 0xd2a <fnRdMgrAddr+0xd2>
     d32:	82 2b       	or	r24, r18
     d34:	93 2b       	or	r25, r19
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	1f 92       	push	r1
     d3c:	4f 93       	push	r20
     d3e:	86 e1       	ldi	r24, 0x16	; 22
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
     d4a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	20 c0       	rjmp	.+64     	; 0xd9c <fnRdMgrAddr+0x144>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
     d5c:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	80 5c       	subi	r24, 0xC0	; 192
     d66:	94 4d       	sbci	r25, 0xD4	; 212
     d68:	a1 40       	sbci	r26, 0x01	; 1
     d6a:	b1 09       	sbc	r27, r1
     d6c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <lockout_started_at>
     d70:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <lockout_started_at+0x1>
     d74:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <lockout_started_at+0x2>
     d78:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     d7c:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	88 53       	subi	r24, 0x38	; 56
     d86:	91 4c       	sbci	r25, 0xC1	; 193
     d88:	a1 40       	sbci	r26, 0x01	; 1
     d8a:	b1 09       	sbc	r27, r1
     d8c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <bootloader_started_at>
     d90:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <bootloader_started_at+0x1>
     d94:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <bootloader_started_at+0x2>
     d98:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <bootloader_started_at+0x3>
        }
}
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     da0:	7f 92       	push	r7
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
    if (test_mode)
     dba:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <test_mode>
     dbe:	ee 23       	and	r30, r30
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <fnRdXcvrCntlInTestMode+0x24>
     dc2:	55 c0       	rjmp	.+170    	; 0xe6e <fnRdXcvrCntlInTestMode+0xce>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     dc4:	e9 b1       	in	r30, 0x09	; 9
     dc6:	b9 b1       	in	r27, 0x09	; 9
     dc8:	f6 b1       	in	r31, 0x06	; 6
     dca:	79 b0       	in	r7, 0x09	; 9
     dcc:	a9 b0       	in	r10, 0x09	; 9
     dce:	09 b1       	in	r16, 0x09	; 9
     dd0:	b9 b0       	in	r11, 0x09	; 9
     dd2:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	00 0f       	add	r16, r16
     dd8:	01 2f       	mov	r16, r17
     dda:	00 1f       	adc	r16, r16
     ddc:	11 0b       	sbc	r17, r17
     dde:	00 0f       	add	r16, r16
     de0:	11 1f       	adc	r17, r17
     de2:	00 0f       	add	r16, r16
     de4:	11 1f       	adc	r17, r17
     de6:	c3 fb       	bst	r28, 3
     de8:	cc 27       	eor	r28, r28
     dea:	c0 f9       	bld	r28, 0
     dec:	ac 2f       	mov	r26, r28
     dee:	a0 2b       	or	r26, r16
     df0:	e3 fb       	bst	r30, 3
     df2:	88 24       	eor	r8, r8
     df4:	80 f8       	bld	r8, 0
     df6:	91 2c       	mov	r9, r1
     df8:	e4 01       	movw	r28, r8
     dfa:	d6 95       	lsr	r29
     dfc:	dc 2f       	mov	r29, r28
     dfe:	cc 27       	eor	r28, r28
     e00:	d7 95       	ror	r29
     e02:	c7 95       	ror	r28
     e04:	ca 2b       	or	r28, r26
     e06:	b2 fb       	bst	r27, 2
     e08:	cc 24       	eor	r12, r12
     e0a:	c0 f8       	bld	r12, 0
     e0c:	d1 2c       	mov	r13, r1
     e0e:	d6 01       	movw	r26, r12
     e10:	56 e0       	ldi	r21, 0x06	; 6
     e12:	aa 0f       	add	r26, r26
     e14:	bb 1f       	adc	r27, r27
     e16:	5a 95       	dec	r21
     e18:	e1 f7       	brne	.-8      	; 0xe12 <fnRdXcvrCntlInTestMode+0x72>
     e1a:	ac 2b       	or	r26, r28
     e1c:	f2 fb       	bst	r31, 2
     e1e:	ee 24       	eor	r14, r14
     e20:	e0 f8       	bld	r14, 0
     e22:	f1 2c       	mov	r15, r1
     e24:	f7 01       	movw	r30, r14
     e26:	65 e0       	ldi	r22, 0x05	; 5
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	6a 95       	dec	r22
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <fnRdXcvrCntlInTestMode+0x88>
     e30:	ea 2b       	or	r30, r26
     e32:	75 fa       	bst	r7, 5
     e34:	66 27       	eor	r22, r22
     e36:	60 f9       	bld	r22, 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	f4 e0       	ldi	r31, 0x04	; 4
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	fa 95       	dec	r31
     e42:	e1 f7       	brne	.-8      	; 0xe3c <fnRdXcvrCntlInTestMode+0x9c>
     e44:	6e 2b       	or	r22, r30
     e46:	a6 fa       	bst	r10, 6
     e48:	44 27       	eor	r20, r20
     e4a:	40 f9       	bld	r20, 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	a3 e0       	ldi	r26, 0x03	; 3
     e50:	44 0f       	add	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	aa 95       	dec	r26
     e56:	e1 f7       	brne	.-8      	; 0xe50 <fnRdXcvrCntlInTestMode+0xb0>
     e58:	46 2b       	or	r20, r22
     e5a:	b4 fa       	bst	r11, 4
     e5c:	22 27       	eor	r18, r18
     e5e:	20 f9       	bld	r18, 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	24 2b       	or	r18, r20
     e68:	fc 01       	movw	r30, r24
     e6a:	21 83       	std	Z+1, r18	; 0x01
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
     e6e:	fc 01       	movw	r30, r24
     e70:	11 82       	std	Z+1, r1	; 0x01
    }
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	9f 90       	pop	r9
     e88:	8f 90       	pop	r8
     e8a:	7f 90       	pop	r7
     e8c:	08 95       	ret

00000e8e <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	fc 01       	movw	r30, r24
    if (test_mode)
     e94:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
     e98:	88 23       	and	r24, r24
     e9a:	09 f4       	brne	.+2      	; 0xe9e <fnWtXcvrCntlInTestMode+0x10>
     e9c:	6e c0       	rjmp	.+220    	; 0xf7a <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
     e9e:	81 81       	ldd	r24, Z+1	; 0x01
     ea0:	88 1f       	adc	r24, r24
     ea2:	88 27       	eor	r24, r24
     ea4:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ea6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ea8:	f8 94       	cli
    {
        if (value_for_bit) 
     eaa:	88 23       	and	r24, r24
     eac:	11 f0       	breq	.+4      	; 0xeb2 <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
     eae:	5b 9a       	sbi	0x0b, 3	; 11
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     eb2:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eb4:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	86 fb       	bst	r24, 6
     eba:	88 27       	eor	r24, r24
     ebc:	80 f9       	bld	r24, 0
     ebe:	c8 2f       	mov	r28, r24
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ec4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ec6:	f8 94       	cli
    {
        if (value_for_bit) 
     ec8:	cd 2b       	or	r28, r29
     eca:	11 f0       	breq	.+4      	; 0xed0 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
     ecc:	5a 9a       	sbi	0x0b, 2	; 11
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ed0:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ed2:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
     ed4:	81 81       	ldd	r24, Z+1	; 0x01
     ed6:	85 fb       	bst	r24, 5
     ed8:	aa 27       	eor	r26, r26
     eda:	a0 f9       	bld	r26, 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ede:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ee0:	f8 94       	cli
    {
        if (value_for_bit) 
     ee2:	ab 2b       	or	r26, r27
     ee4:	11 f0       	breq	.+4      	; 0xeea <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
     ee6:	42 9a       	sbi	0x08, 2	; 8
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     eea:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     eec:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	84 fb       	bst	r24, 4
     ef2:	66 27       	eor	r22, r22
     ef4:	60 f9       	bld	r22, 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ef8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     efa:	f8 94       	cli
    {
        if (value_for_bit) 
     efc:	67 2b       	or	r22, r23
     efe:	11 f0       	breq	.+4      	; 0xf04 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
     f00:	5d 9a       	sbi	0x0b, 5	; 11
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f04:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f06:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
     f08:	81 81       	ldd	r24, Z+1	; 0x01
     f0a:	83 fb       	bst	r24, 3
     f0c:	44 27       	eor	r20, r20
     f0e:	40 f9       	bld	r20, 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f12:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f14:	f8 94       	cli
    {
        if (value_for_bit) 
     f16:	45 2b       	or	r20, r21
     f18:	11 f0       	breq	.+4      	; 0xf1e <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
     f1a:	5e 9a       	sbi	0x0b, 6	; 11
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f1e:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f20:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	82 ff       	sbrs	r24, 2
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
     f28:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f2c:	87 7e       	andi	r24, 0xE7	; 231
     f2e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f32:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f34:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     f36:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f38:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f3a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f3c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f3e:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f40:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f42:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f44:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     f46:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f48:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	81 fb       	bst	r24, 1
     f4e:	22 27       	eor	r18, r18
     f50:	20 f9       	bld	r18, 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f54:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f56:	f8 94       	cli
    {
        if (value_for_bit) 
     f58:	23 2b       	or	r18, r19
     f5a:	11 f0       	breq	.+4      	; 0xf60 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
     f5c:	5c 9a       	sbi	0x0b, 4	; 11
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f60:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f62:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     f64:	81 81       	ldd	r24, Z+1	; 0x01
     f66:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f68:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f6a:	f8 94       	cli
    {
        if (value_for_bit) 
     f6c:	88 23       	and	r24, r24
     f6e:	11 f0       	breq	.+4      	; 0xf74 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
     f70:	43 9a       	sbi	0x08, 3	; 8
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f74:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f76:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
     f7a:	11 82       	std	Z+1, r1	; 0x01
    }
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
     f82:	fc 01       	movw	r30, r24
     f84:	81 81       	ldd	r24, Z+1	; 0x01
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	f1 f4       	brne	.+60     	; 0xfc6 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f8a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f8c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     f8e:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f90:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f92:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f94:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f96:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f98:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f9a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f9c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     f9e:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa0:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     fa2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fa4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     fa6:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa8:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
     faa:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
     fae:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
        shutdown_started_at = millis();
     fb2:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     fb6:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <shutdown_started_at>
     fba:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <shutdown_started_at+0x1>
     fbe:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <shutdown_started_at+0x2>
     fc2:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <shutdown_started_at+0x3>
     fc6:	08 95       	ret

00000fc8 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
     fc8:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
     fca:	fc 01       	movw	r30, r24
     fcc:	c1 81       	ldd	r28, Z+1	; 0x01
     fce:	c1 30       	cpi	r28, 0x01	; 1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <fnWtArduinMode+0xc>
     fd2:	45 c0       	rjmp	.+138    	; 0x105e <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
     fd4:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <arduino_mode_started>
     fd8:	21 11       	cpse	r18, r1
     fda:	41 c0       	rjmp	.+130    	; 0x105e <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
     fdc:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
     fe0:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     fe4:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     fe8:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     fec:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     ff6:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     ffa:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     ffe:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	20 95       	com	r18
    1006:	30 95       	com	r19
    1008:	2a 70       	andi	r18, 0x0A	; 10
    100a:	33 27       	eor	r19, r19
    100c:	84 e0       	ldi	r24, 0x04	; 4
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	8a 95       	dec	r24
    1014:	e1 f7       	brne	.-8      	; 0x100e <fnWtArduinMode+0x46>
    1016:	89 2f       	mov	r24, r25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	80 95       	com	r24
    101c:	90 95       	com	r25
    101e:	80 75       	andi	r24, 0x50	; 80
    1020:	99 27       	eor	r25, r25
    1022:	54 e0       	ldi	r21, 0x04	; 4
    1024:	95 95       	asr	r25
    1026:	87 95       	ror	r24
    1028:	5a 95       	dec	r21
    102a:	e1 f7       	brne	.-8      	; 0x1024 <fnWtArduinMode+0x5c>
    102c:	82 2b       	or	r24, r18
    102e:	93 2b       	or	r25, r19
    1030:	9f 93       	push	r25
    1032:	8f 93       	push	r24
    1034:	1f 92       	push	r1
    1036:	4f 93       	push	r20
    1038:	86 e1       	ldi	r24, 0x16	; 22
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	9f 93       	push	r25
    103e:	8f 93       	push	r24
    1040:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1044:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    1048:	c0 93 03 03 	sts	0x0303, r28	; 0x800303 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    104c:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <arduino_mode>
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    105e:	fc 01       	movw	r30, r24
    1060:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    1066:	cf 93       	push	r28
    1068:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    106a:	c1 81       	ldd	r28, Z+1	; 0x01
    106c:	c1 30       	cpi	r28, 0x01	; 1
    106e:	09 f0       	breq	.+2      	; 0x1072 <fnStartTestMode+0xc>
    1070:	48 c0       	rjmp	.+144    	; 0x1102 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    1072:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <test_mode_started>
    1076:	81 11       	cpse	r24, r1
    1078:	42 c0       	rjmp	.+132    	; 0x10fe <fnStartTestMode+0x98>
    107a:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
    107e:	81 11       	cpse	r24, r1
    1080:	3e c0       	rjmp	.+124    	; 0x10fe <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    1082:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
    1086:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
    108a:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
    108e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
    1092:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1096:	c0 93 06 03 	sts	0x0306, r28	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    109a:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
    109e:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
    10a2:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	20 95       	com	r18
    10aa:	30 95       	com	r19
    10ac:	2a 70       	andi	r18, 0x0A	; 10
    10ae:	33 27       	eor	r19, r19
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	8a 95       	dec	r24
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <fnStartTestMode+0x4c>
    10ba:	89 2f       	mov	r24, r25
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	80 95       	com	r24
    10c0:	90 95       	com	r25
    10c2:	80 75       	andi	r24, 0x50	; 80
    10c4:	99 27       	eor	r25, r25
    10c6:	54 e0       	ldi	r21, 0x04	; 4
    10c8:	95 95       	asr	r25
    10ca:	87 95       	ror	r24
    10cc:	5a 95       	dec	r21
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <fnStartTestMode+0x62>
    10d0:	82 2b       	or	r24, r18
    10d2:	93 2b       	or	r25, r19
    10d4:	9f 93       	push	r25
    10d6:	8f 93       	push	r24
    10d8:	1f 92       	push	r1
    10da:	4f 93       	push	r20
    10dc:	86 e1       	ldi	r24, 0x16	; 22
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	9f 93       	push	r25
    10e2:	8f 93       	push	r24
    10e4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    10e8:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    10ec:	c0 93 ec 02 	sts	0x02EC, r28	; 0x8002ec <test_mode_started>
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	81 83       	std	Z+1, r24	; 0x01
    }
}
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    1112:	19 81       	ldd	r17, Y+1	; 0x01
    1114:	11 30       	cpi	r17, 0x01	; 1
    1116:	09 f0       	breq	.+2      	; 0x111a <fnEndTestMode+0x10>
    1118:	61 c0       	rjmp	.+194    	; 0x11dc <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    111a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <test_mode_started>
    111e:	81 11       	cpse	r24, r1
    1120:	5d c0       	rjmp	.+186    	; 0x11dc <fnEndTestMode+0xd2>
    1122:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
    1126:	88 23       	and	r24, r24
    1128:	09 f4       	brne	.+2      	; 0x112c <fnEndTestMode+0x22>
    112a:	58 c0       	rjmp	.+176    	; 0x11dc <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    112c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    112e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1130:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1132:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1134:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1136:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1138:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    113a:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    113c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1140:	88 61       	ori	r24, 0x18	; 24
    1142:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1146:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1148:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    114a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    114c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    114e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1150:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1152:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1154:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    1156:	0e 94 47 0b 	call	0x168e	; 0x168e <millis>
    115a:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
    115e:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
    1162:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
    1166:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    116a:	8e ef       	ldi	r24, 0xFE	; 254
    116c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1170:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
    1174:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <uart_output>
    1178:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	20 95       	com	r18
    1180:	30 95       	com	r19
    1182:	2a 70       	andi	r18, 0x0A	; 10
    1184:	33 27       	eor	r19, r19
    1186:	a9 01       	movw	r20, r18
    1188:	24 e0       	ldi	r18, 0x04	; 4
    118a:	44 0f       	add	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	2a 95       	dec	r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <fnEndTestMode+0x80>
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	20 95       	com	r18
    1198:	30 95       	com	r19
    119a:	20 75       	andi	r18, 0x50	; 80
    119c:	33 27       	eor	r19, r19
    119e:	64 e0       	ldi	r22, 0x04	; 4
    11a0:	35 95       	asr	r19
    11a2:	27 95       	ror	r18
    11a4:	6a 95       	dec	r22
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <fnEndTestMode+0x96>
    11a8:	24 2b       	or	r18, r20
    11aa:	35 2b       	or	r19, r21
    11ac:	3f 93       	push	r19
    11ae:	2f 93       	push	r18
    11b0:	1f 92       	push	r1
    11b2:	9f 93       	push	r25
    11b4:	86 e1       	ldi	r24, 0x16	; 22
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    11c0:	10 93 04 03 	sts	0x0304, r17	; 0x800304 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    11c4:	10 93 ec 02 	sts	0x02EC, r17	; 0x8002ec <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    11c8:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	01 c0       	rjmp	.+2      	; 0x11de <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    11dc:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	08 95       	ret

000011e6 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    11e6:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	29 2f       	mov	r18, r25
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	26 17       	cp	r18, r22
    11f0:	37 07       	cpc	r19, r23
    11f2:	54 f4       	brge	.+20     	; 0x1208 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    11f4:	fa 01       	movw	r30, r20
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	80 81       	ld	r24, Z
    11fc:	f9 01       	movw	r30, r18
    11fe:	e4 5f       	subi	r30, 0xF4	; 244
    1200:	fc 4f       	sbci	r31, 0xFC	; 252
    1202:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	f1 cf       	rjmp	.-30     	; 0x11ea <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    1208:	90 32       	cpi	r25, 0x20	; 32
    120a:	20 f4       	brcc	.+8      	; 0x1214 <receive_i2c_event+0x2e>
    120c:	f9 01       	movw	r30, r18
    120e:	e4 5f       	subi	r30, 0xF4	; 244
    1210:	fc 4f       	sbci	r31, 0xFC	; 252
    1212:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    1214:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    1218:	62 30       	cpi	r22, 0x02	; 2
    121a:	10 f4       	brcc	.+4      	; 0x1220 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	0d c0       	rjmp	.+26     	; 0x123a <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    1220:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <i2c0Buffer>
    1224:	e8 2f       	mov	r30, r24
    1226:	e2 95       	swap	r30
    1228:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    122a:	e4 30       	cpi	r30, 0x04	; 4
    122c:	10 f0       	brcs	.+4      	; 0x1232 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    122e:	8e ef       	ldi	r24, 0xFE	; 254
    1230:	04 c0       	rjmp	.+8      	; 0x123a <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    1232:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	20 f0       	brcs	.+8      	; 0x1240 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    1238:	8d ef       	ldi	r24, 0xFD	; 253
    123a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    123e:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    1240:	98 e0       	ldi	r25, 0x08	; 8
    1242:	e9 9f       	mul	r30, r25
    1244:	f0 01       	movw	r30, r0
    1246:	11 24       	eor	r1, r1
    1248:	e8 0f       	add	r30, r24
    124a:	f1 1d       	adc	r31, r1
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	e5 5e       	subi	r30, 0xE5	; 229
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	01 90       	ld	r0, Z+
    1256:	f0 81       	ld	r31, Z
    1258:	e0 2d       	mov	r30, r0
    125a:	8c e0       	ldi	r24, 0x0C	; 12
    125c:	93 e0       	ldi	r25, 0x03	; 3
    125e:	09 94       	ijmp

00001260 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    1260:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    1264:	8c e0       	ldi	r24, 0x0C	; 12
    1266:	93 e0       	ldi	r25, 0x03	; 3
    1268:	0e 94 bb 0b 	call	0x1776	; 0x1776 <twi0_transmit>
    if (return_code != 0)
    126c:	88 23       	and	r24, r24
    126e:	29 f0       	breq	.+10     	; 0x127a <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    1270:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
    1274:	82 70       	andi	r24, 0x02	; 2
    1276:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
    127a:	08 95       	ret

0000127c <fnRdMgrAddrQuietly>:
}

// I2C_COMMAND_TO_READ_RPU_ADDRESS
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = rpu_address; // '1' is 0x31
    127c:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <rpu_address>
    1280:	fc 01       	movw	r30, r24
    1282:	21 83       	std	Z+1, r18	; 0x01
    1284:	08 95       	ret

00001286 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    1286:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <inBytes_to_handle+0x1>
    128a:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    128e:	70 93 4f 03 	sts	0x034F, r23	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
    1292:	60 93 4e 03 	sts	0x034E, r22	; 0x80034e <smbus_has_numBytes_to_handle>
    1296:	08 95       	ret

00001298 <handle_smbus_receive>:
        {fnWtArduinMode, fnRdArduinMode, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull},
        {fnNull, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull},
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
    1298:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <smbus_has_numBytes_to_handle>
    129c:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
    smbus_has_numBytes_to_handle = 0; 
    12a0:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
    12a4:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <smbus_has_numBytes_to_handle>
    12a8:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <inBytes_to_handle>
    12ac:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <inBytes_to_handle+0x1>
    // read_i2c_block_data has a single command byte in its data set
    // it will write i2c address, the command* byte, and then cause a repeated start
    // followed by the i2c address (again) and then reading** the data
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	31 05       	cpc	r19, r1
    12b4:	11 f0       	breq	.+4      	; 0x12ba <handle_smbus_receive+0x22>
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	23 c0       	rjmp	.+70     	; 0x1300 <handle_smbus_receive+0x68>
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    12ba:	90 81       	ld	r25, Z
    12bc:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <smbusBuffer>
    12c0:	98 13       	cpse	r25, r24
    12c2:	59 c0       	rjmp	.+178    	; 0x1376 <handle_smbus_receive+0xde>
    12c4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    12c8:	81 11       	cpse	r24, r1
    12ca:	55 c0       	rjmp	.+170    	; 0x1376 <handle_smbus_receive+0xde>
        {
            for(i = 0; i < smbusBufferLength; ++i)
    12cc:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    12d0:	ac e2       	ldi	r26, 0x2C	; 44
    12d2:	b3 e0       	ldi	r27, 0x03	; 3
    12d4:	e0 e5       	ldi	r30, 0x50	; 80
    12d6:	f3 e0       	ldi	r31, 0x03	; 3
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	98 17       	cp	r25, r24
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <handle_smbus_receive+0x4e>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
    12de:	2d 91       	ld	r18, X+
    12e0:	21 93       	st	Z+, r18
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
        {
            for(i = 0; i < smbusBufferLength; ++i)
    12e2:	9f 5f       	subi	r25, 0xFF	; 255
    12e4:	fa cf       	rjmp	.-12     	; 0x12da <handle_smbus_receive+0x42>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
            }
            if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    12e6:	80 32       	cpi	r24, 0x20	; 32
    12e8:	28 f4       	brcc	.+10     	; 0x12f4 <handle_smbus_receive+0x5c>
    12ea:	e8 2f       	mov	r30, r24
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	e0 5b       	subi	r30, 0xB0	; 176
    12f0:	fc 4f       	sbci	r31, 0xFC	; 252
    12f2:	11 82       	std	Z+1, r1	; 0x01
            smbus_oldBufferLength = smbusBufferLength;
    12f4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
            transmit_data_ready = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    12fe:	08 95       	ret
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    1300:	84 2f       	mov	r24, r20
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	82 17       	cp	r24, r18
    1306:	93 07       	cpc	r25, r19
    1308:	54 f4       	brge	.+20     	; 0x131e <handle_smbus_receive+0x86>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    130a:	df 01       	movw	r26, r30
    130c:	a8 0f       	add	r26, r24
    130e:	b9 1f       	adc	r27, r25
    1310:	5c 91       	ld	r21, X
    1312:	dc 01       	movw	r26, r24
    1314:	a4 5d       	subi	r26, 0xD4	; 212
    1316:	bc 4f       	sbci	r27, 0xFC	; 252
    1318:	5c 93       	st	X, r21
            smbus_oldBufferLength = smbusBufferLength;
            transmit_data_ready = 1;
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    131a:	4f 5f       	subi	r20, 0xFF	; 255
    131c:	f1 cf       	rjmp	.-30     	; 0x1300 <handle_smbus_receive+0x68>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    }
    if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    131e:	40 32       	cpi	r20, 0x20	; 32
    1320:	20 f4       	brcc	.+8      	; 0x132a <handle_smbus_receive+0x92>
    1322:	fc 01       	movw	r30, r24
    1324:	e4 5d       	subi	r30, 0xD4	; 212
    1326:	fc 4f       	sbci	r31, 0xFC	; 252
    1328:	11 82       	std	Z+1, r1	; 0x01
    smbusBufferLength = numBytes;
    132a:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

    // an read_i2c_block_data has a command byte 
    if( !(smbusBufferLength > 0) ) 
    132e:	21 11       	cpse	r18, r1
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <handle_smbus_receive+0x9e>
    {
        smbusBuffer[0] = 0xFF; // error code for small size.
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <handle_smbus_receive+0xb8>
        return; // not valid, do nothing just echo an error code.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (smbusBuffer[0] & 0xF0) >> 4;
    1336:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <smbusBuffer>
    133a:	e8 2f       	mov	r30, r24
    133c:	e2 95       	swap	r30
    133e:	ef 70       	andi	r30, 0x0F	; 15
    if(group >= GROUP) 
    1340:	e4 30       	cpi	r30, 0x04	; 4
    1342:	10 f0       	brcs	.+4      	; 0x1348 <handle_smbus_receive+0xb0>
    {
        smbusBuffer[0] = 0xFE; // error code for bad group.
    1344:	8e ef       	ldi	r24, 0xFE	; 254
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <handle_smbus_receive+0xb8>
        return; 
    }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = smbusBuffer[0] & 0x0F;
    1348:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    134a:	88 30       	cpi	r24, 0x08	; 8
    134c:	20 f0       	brcs	.+8      	; 0x1356 <handle_smbus_receive+0xbe>
    {
        smbusBuffer[0] = 0xFD; // error code for bad command.
    134e:	8d ef       	ldi	r24, 0xFD	; 253
    1350:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <smbusBuffer>
        return; // not valid, do nothing but echo error code.
    1354:	08 95       	ret
    }

    // Call the i2c command function and return
    (* pf[group][command])(smbusBuffer);
    1356:	98 e0       	ldi	r25, 0x08	; 8
    1358:	e9 9f       	mul	r30, r25
    135a:	f0 01       	movw	r30, r0
    135c:	11 24       	eor	r1, r1
    135e:	e8 0f       	add	r30, r24
    1360:	f1 1d       	adc	r31, r1
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	e5 5a       	subi	r30, 0xA5	; 165
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	01 90       	ld	r0, Z+
    136c:	f0 81       	ld	r31, Z
    136e:	e0 2d       	mov	r30, r0
    1370:	8c e2       	ldi	r24, 0x2C	; 44
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	09 94       	ijmp
    1376:	08 95       	ret

00001378 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    1378:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    137c:	80 e5       	ldi	r24, 0x50	; 80
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <twi1_transmit>
    transmit_data_ready = 0;
    1384:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    1388:	08 95       	ret

0000138a <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    138a:	cf 93       	push	r28
    if (eeprom_is_ready())
    138c:	f9 99       	sbic	0x1f, 1	; 31
    138e:	24 c0       	rjmp	.+72     	; 0x13d8 <save_rpu_addr_state+0x4e>
    {
        // up to first EE_RPU_IDMAX states may be used for writhing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    1390:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
    1394:	9f ef       	ldi	r25, 0xFF	; 255
    1396:	98 0f       	add	r25, r24
    1398:	9a 30       	cpi	r25, 0x0A	; 10
    139a:	90 f4       	brcc	.+36     	; 0x13c0 <save_rpu_addr_state+0x36>
        { // write "RPUadpt\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	fc 01       	movw	r30, r24
    13a0:	ed 54       	subi	r30, 0x4D	; 77
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    13a6:	6c 2f       	mov	r22, r28
    13a8:	87 96       	adiw	r24, 0x27	; 39
    13aa:	0e 94 c9 11 	call	0x2392	; 0x2392 <eeprom_write_byte>
            
            if (value == '\0') 
    13ae:	c1 11       	cpse	r28, r1
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <save_rpu_addr_state+0x2c>
            {
                write_rpu_address_to_eeprom = 11;
    13b2:	8b e0       	ldi	r24, 0x0B	; 11
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <save_rpu_addr_state+0x32>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    13b6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    13c0:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
    13c4:	8b 30       	cpi	r24, 0x0B	; 11
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <save_rpu_addr_state+0x4e>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    13c8:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <rpu_address>
    13cc:	82 e3       	ldi	r24, 0x32	; 50
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 c9 11 	call	0x2392	; 0x2392 <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    13d4:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <write_rpu_address_to_eeprom>
        }
    }
}
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	c8 e2       	ldi	r28, 0x28	; 40
    13e4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    13e6:	fe 01       	movw	r30, r28
    13e8:	e4 57       	subi	r30, 0x74	; 116
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    13ee:	ce 01       	movw	r24, r28
    13f0:	0e 94 c1 11 	call	0x2382	; 0x2382 <eeprom_read_byte>
        if (id != ee_id) 
    13f4:	18 13       	cpse	r17, r24
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    13f8:	11 23       	and	r17, r17
    13fa:	31 f0       	breq	.+12     	; 0x1408 <check_for_eeprom_id+0x2c>
    13fc:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    13fe:	c2 33       	cpi	r28, 0x32	; 50
    1400:	d1 05       	cpc	r29, r1
    1402:	89 f7       	brne	.-30     	; 0x13e6 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	01 c0       	rjmp	.+2      	; 0x140a <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	08 95       	ret

00001412 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	5f 93       	push	r21
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    142c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    1430:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    1434:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    1436:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	8f 71       	andi	r24, 0x1F	; 31
    1440:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    1442:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	84 17       	cp	r24, r20
    144a:	95 07       	cpc	r25, r21
    144c:	39 f0       	breq	.+14     	; 0x145c <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    144e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1452:	fc 01       	movw	r30, r24
    1454:	eb 55       	subi	r30, 0x5B	; 91
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	30 83       	st	Z, r19
    145a:	01 c0       	rjmp	.+2      	; 0x145e <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    145c:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    145e:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    1462:	ff 91       	pop	r31
    1464:	ef 91       	pop	r30
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	ef 93       	push	r30
    148c:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    148e:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    1492:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1496:	98 17       	cp	r25, r24
    1498:	79 f0       	breq	.+30     	; 0x14b8 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    149a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	8f 71       	andi	r24, 0x1F	; 31
    14a4:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    14a6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    14aa:	fc 01       	movw	r30, r24
    14ac:	eb 53       	subi	r30, 0x3B	; 59
    14ae:	fe 4f       	sbci	r31, 0xFE	; 254
    14b0:	80 81       	ld	r24, Z
    14b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    14b8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14bc:	8f 7d       	andi	r24, 0xDF	; 223
    14be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    14d4:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    14d8:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    14dc:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    14e0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    14e4:	97 ff       	sbrs	r25, 7
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    14e8:	22 e0       	ldi	r18, 0x02	; 2
    14ea:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    14ee:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    14f0:	28 e9       	ldi	r18, 0x98	; 152
    14f2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    14f6:	26 e0       	ldi	r18, 0x06	; 6
    14f8:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    14fc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    1500:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1504:	08 95       	ret

00001506 <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    1506:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    150a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    150e:	98 17       	cp	r25, r24
    1510:	a1 f0       	breq	.+40     	; 0x153a <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    1512:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	8f 71       	andi	r24, 0x1F	; 31
    151c:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    151e:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1522:	fc 01       	movw	r30, r24
    1524:	eb 55       	subi	r30, 0x5B	; 91
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    152a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	98 2f       	mov	r25, r24
    1532:	88 27       	eor	r24, r24
    1534:	82 0f       	add	r24, r18
    1536:	91 1d       	adc	r25, r1
    1538:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    153e:	08 95       	ret

00001540 <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1540:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	2f 71       	andi	r18, 0x1F	; 31
    154c:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    154e:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	24 17       	cp	r18, r20
    1556:	35 07       	cpc	r19, r21
    1558:	d1 f3       	breq	.-12     	; 0x154e <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    155a:	f9 01       	movw	r30, r18
    155c:	eb 53       	subi	r30, 0x3B	; 59
    155e:	fe 4f       	sbci	r31, 0xFE	; 254
    1560:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    1562:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    1566:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    156a:	80 62       	ori	r24, 0x20	; 32
    156c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1570:	08 95       	ret

00001572 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    1572:	0e 94 a0 0a 	call	0x1540	; 0x1540 <uart0_putc>
	return 0;
}
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	08 95       	ret

0000157c <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    157c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1580:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	80 96       	adiw	r24, 0x20	; 32
    1588:	82 1b       	sub	r24, r18
    158a:	91 09       	sbc	r25, r1
} /* uart0_available */
    158c:	8f 71       	andi	r24, 0x1F	; 31
    158e:	99 27       	eor	r25, r25
    1590:	08 95       	ret

00001592 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    1592:	0e 94 be 0a 	call	0x157c	; 0x157c <uart0_available>
    1596:	89 2b       	or	r24, r25
    1598:	e1 f3       	breq	.-8      	; 0x1592 <uartstream0_getchar>
    res = uart0_getc();
    159a:	0e 94 83 0a 	call	0x1506	; 0x1506 <uart0_getc>
    if(res == '\r') res = '\n';
    159e:	8d 30       	cpi	r24, 0x0D	; 13
    15a0:	91 05       	cpc	r25, r1
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <uartstream0_getchar+0x16>
    15a4:	8a e0       	ldi	r24, 0x0A	; 10
    15a6:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    15a8:	99 27       	eor	r25, r25
    15aa:	08 95       	ret

000015ac <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	8b 01       	movw	r16, r22
    15b2:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	80 5a       	subi	r24, 0xA0	; 160
    15ba:	9c 41       	sbci	r25, 0x1C	; 28
    15bc:	a9 4e       	sbci	r26, 0xE9	; 233
    15be:	bf 4f       	sbci	r27, 0xFF	; 255
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	43 e0       	ldi	r20, 0x03	; 3
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	4a 95       	dec	r20
    15d0:	d1 f7       	brne	.-12     	; 0x15c6 <uartstream0_init+0x1a>
    15d2:	a9 01       	movw	r20, r18
    15d4:	98 01       	movw	r18, r16
    15d6:	e4 e0       	ldi	r30, 0x04	; 4
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	44 1f       	adc	r20, r20
    15de:	55 1f       	adc	r21, r21
    15e0:	ea 95       	dec	r30
    15e2:	d1 f7       	brne	.-12     	; 0x15d8 <uartstream0_init+0x2c>
    15e4:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__udivmodsi4>
    15e8:	c9 01       	movw	r24, r18
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <uart0_init>
	return &uartstream0_f;
}	
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	08 95       	ret

000015fa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1610:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timer0_millis>
    1614:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <timer0_millis+0x1>
    1618:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <timer0_millis+0x2>
    161c:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1620:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1624:	2d e2       	ldi	r18, 0x2D	; 45
    1626:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1628:	2d 37       	cpi	r18, 0x7D	; 125
    162a:	20 f4       	brcc	.+8      	; 0x1634 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	a1 1d       	adc	r26, r1
    1630:	b1 1d       	adc	r27, r1
    1632:	05 c0       	rjmp	.+10     	; 0x163e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1634:	20 eb       	ldi	r18, 0xB0	; 176
    1636:	23 0f       	add	r18, r19
		m += 1;
    1638:	02 96       	adiw	r24, 0x02	; 2
    163a:	a1 1d       	adc	r26, r1
    163c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    163e:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <timer0_fract>
	timer0_millis = m;
    1642:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <timer0_millis>
    1646:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <timer0_millis+0x1>
    164a:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <timer0_millis+0x2>
    164e:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <timer0_millis+0x3>
	timer0_overflow_count++;
    1652:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer0_overflow_count>
    1656:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer0_overflow_count+0x1>
    165a:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <timer0_overflow_count+0x2>
    165e:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <timer0_overflow_count+0x3>
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	a1 1d       	adc	r26, r1
    1666:	b1 1d       	adc	r27, r1
    1668:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <timer0_overflow_count>
    166c:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <timer0_overflow_count+0x1>
    1670:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <timer0_overflow_count+0x2>
    1674:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <timer0_overflow_count+0x3>
}
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    168e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1690:	f8 94       	cli
	m = timer0_millis;
    1692:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <timer0_millis>
    1696:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <timer0_millis+0x1>
    169a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer0_millis+0x2>
    169e:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer0_millis+0x3>
	SREG = oldSREG;
    16a2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    16a4:	08 95       	ret

000016a6 <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    16a6:	84 b5       	in	r24, 0x24	; 36
    16a8:	82 60       	ori	r24, 0x02	; 2
    16aa:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    16ac:	84 b5       	in	r24, 0x24	; 36
    16ae:	81 60       	ori	r24, 0x01	; 1
    16b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    16b2:	85 b5       	in	r24, 0x25	; 37
    16b4:	82 60       	ori	r24, 0x02	; 2
    16b6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    16b8:	85 b5       	in	r24, 0x25	; 37
    16ba:	81 60       	ori	r24, 0x01	; 1
    16bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    16be:	ee e6       	ldi	r30, 0x6E	; 110
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	81 60       	ori	r24, 0x01	; 1
    16c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16c8:	e1 e8       	ldi	r30, 0x81	; 129
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    16ce:	80 81       	ld	r24, Z
    16d0:	82 60       	ori	r24, 0x02	; 2
    16d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    16d4:	80 81       	ld	r24, Z
    16d6:	81 60       	ori	r24, 0x01	; 1
    16d8:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    16da:	e0 e8       	ldi	r30, 0x80	; 128
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    16e4:	e1 eb       	ldi	r30, 0xB1	; 177
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    16ee:	e0 eb       	ldi	r30, 0xB0	; 176
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	81 60       	ori	r24, 0x01	; 1
    16f6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    16f8:	e1 e9       	ldi	r30, 0x91	; 145
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    1702:	80 81       	ld	r24, Z
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1708:	e0 e9       	ldi	r30, 0x90	; 144
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	81 60       	ori	r24, 0x01	; 1
    1710:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    1712:	e1 ea       	ldi	r30, 0xA1	; 161
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	82 60       	ori	r24, 0x02	; 2
    171a:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    171c:	80 81       	ld	r24, Z
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1722:	e0 ea       	ldi	r30, 0xA0	; 160
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	81 60       	ori	r24, 0x01	; 1
    172a:	80 83       	st	Z, r24
    172c:	08 95       	ret

0000172e <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    172e:	08 95       	ret

00001730 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    1730:	08 95       	ret

00001732 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    1732:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
    twi0_sendStop = 1;		// default value
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <twi0_sendStop>
    twi0_inRepStart = 0;
    173c:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    1740:	88 23       	and	r24, r24
    1742:	21 f0       	breq	.+8      	; 0x174c <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    1744:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    1746:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    1748:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    174a:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    174c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1750:	8e 7f       	andi	r24, 0xFE	; 254
    1752:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    1756:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    1760:	84 e3       	ldi	r24, 0x34	; 52
    1762:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    1766:	85 e4       	ldi	r24, 0x45	; 69
    1768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    176c:	08 95       	ret

0000176e <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    176e:	88 0f       	add	r24, r24
    1770:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    1774:	08 95       	ret

00001776 <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    1776:	61 32       	cpi	r22, 0x21	; 33
    1778:	98 f4       	brcc	.+38     	; 0x17a0 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    177a:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <twi0_state>
    177e:	24 30       	cpi	r18, 0x04	; 4
    1780:	89 f4       	brne	.+34     	; 0x17a4 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    1782:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <twi0_txBufferLength>
    1786:	28 2f       	mov	r18, r24
    1788:	a2 e1       	ldi	r26, 0x12	; 18
    178a:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    178c:	fc 01       	movw	r30, r24
    178e:	8e 2f       	mov	r24, r30
    1790:	82 1b       	sub	r24, r18
    1792:	86 17       	cp	r24, r22
    1794:	18 f4       	brcc	.+6      	; 0x179c <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    1796:	81 91       	ld	r24, Z+
    1798:	8d 93       	st	X+, r24
    179a:	f9 cf       	rjmp	.-14     	; 0x178e <twi0_transmit+0x18>
    }
  
    return 0;
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    17a6:	08 95       	ret

000017a8 <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    17a8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    17ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    17b0:	08 95       	ret

000017b2 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    17b2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    17b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    17ba:	08 95       	ret

000017bc <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    17bc:	85 ed       	ldi	r24, 0xD5	; 213
    17be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    17c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17c6:	84 fd       	sbrc	r24, 4
    17c8:	fc cf       	rjmp	.-8      	; 0x17c2 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    17ca:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
    17ce:	08 95       	ret

000017d0 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    17d0:	85 ec       	ldi	r24, 0xC5	; 197
    17d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    17d6:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
    17da:	08 95       	ret

000017dc <__vector_24>:
}

ISR(TWI0_vect)
{
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	2f 93       	push	r18
    17e8:	3f 93       	push	r19
    17ea:	4f 93       	push	r20
    17ec:	5f 93       	push	r21
    17ee:	6f 93       	push	r22
    17f0:	7f 93       	push	r23
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    17fe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1802:	88 7f       	andi	r24, 0xF8	; 248
    1804:	80 36       	cpi	r24, 0x60	; 96
    1806:	09 f4       	brne	.+2      	; 0x180a <__vector_24+0x2e>
    1808:	9e c0       	rjmp	.+316    	; 0x1946 <__vector_24+0x16a>
    180a:	78 f5       	brcc	.+94     	; 0x186a <__vector_24+0x8e>
    180c:	88 32       	cpi	r24, 0x28	; 40
    180e:	09 f4       	brne	.+2      	; 0x1812 <__vector_24+0x36>
    1810:	5d c0       	rjmp	.+186    	; 0x18cc <__vector_24+0xf0>
    1812:	90 f4       	brcc	.+36     	; 0x1838 <__vector_24+0x5c>
    1814:	80 31       	cpi	r24, 0x10	; 16
    1816:	09 f4       	brne	.+2      	; 0x181a <__vector_24+0x3e>
    1818:	56 c0       	rjmp	.+172    	; 0x18c6 <__vector_24+0xea>
    181a:	38 f4       	brcc	.+14     	; 0x182a <__vector_24+0x4e>
    181c:	88 23       	and	r24, r24
    181e:	09 f4       	brne	.+2      	; 0x1822 <__vector_24+0x46>
    1820:	f5 c0       	rjmp	.+490    	; 0x1a0c <__vector_24+0x230>
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	09 f4       	brne	.+2      	; 0x1828 <__vector_24+0x4c>
    1826:	4f c0       	rjmp	.+158    	; 0x18c6 <__vector_24+0xea>
    1828:	f5 c0       	rjmp	.+490    	; 0x1a14 <__vector_24+0x238>
    182a:	88 31       	cpi	r24, 0x18	; 24
    182c:	09 f4       	brne	.+2      	; 0x1830 <__vector_24+0x54>
    182e:	4e c0       	rjmp	.+156    	; 0x18cc <__vector_24+0xf0>
    1830:	80 32       	cpi	r24, 0x20	; 32
    1832:	09 f4       	brne	.+2      	; 0x1836 <__vector_24+0x5a>
    1834:	5f c0       	rjmp	.+190    	; 0x18f4 <__vector_24+0x118>
    1836:	ee c0       	rjmp	.+476    	; 0x1a14 <__vector_24+0x238>
    1838:	80 34       	cpi	r24, 0x40	; 64
    183a:	09 f4       	brne	.+2      	; 0x183e <__vector_24+0x62>
    183c:	6a c0       	rjmp	.+212    	; 0x1912 <__vector_24+0x136>
    183e:	58 f4       	brcc	.+22     	; 0x1856 <__vector_24+0x7a>
    1840:	80 33       	cpi	r24, 0x30	; 48
    1842:	09 f4       	brne	.+2      	; 0x1846 <__vector_24+0x6a>
    1844:	57 c0       	rjmp	.+174    	; 0x18f4 <__vector_24+0x118>
    1846:	88 33       	cpi	r24, 0x38	; 56
    1848:	09 f0       	breq	.+2      	; 0x184c <__vector_24+0x70>
    184a:	e4 c0       	rjmp	.+456    	; 0x1a14 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    184c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <twi0_error>
            twi0_releaseBus();
    1850:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <twi0_releaseBus>
            break;
    1854:	df c0       	rjmp	.+446    	; 0x1a14 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    1856:	80 35       	cpi	r24, 0x50	; 80
    1858:	09 f4       	brne	.+2      	; 0x185c <__vector_24+0x80>
    185a:	4f c0       	rjmp	.+158    	; 0x18fa <__vector_24+0x11e>
    185c:	88 35       	cpi	r24, 0x58	; 88
    185e:	09 f4       	brne	.+2      	; 0x1862 <__vector_24+0x86>
    1860:	5d c0       	rjmp	.+186    	; 0x191c <__vector_24+0x140>
    1862:	88 34       	cpi	r24, 0x48	; 72
    1864:	09 f0       	breq	.+2      	; 0x1868 <__vector_24+0x8c>
    1866:	d6 c0       	rjmp	.+428    	; 0x1a14 <__vector_24+0x238>
    1868:	d3 c0       	rjmp	.+422    	; 0x1a10 <__vector_24+0x234>
    186a:	88 39       	cpi	r24, 0x98	; 152
    186c:	09 f4       	brne	.+2      	; 0x1870 <__vector_24+0x94>
    186e:	c4 c0       	rjmp	.+392    	; 0x19f8 <__vector_24+0x21c>
    1870:	a8 f4       	brcc	.+42     	; 0x189c <__vector_24+0xc0>
    1872:	88 37       	cpi	r24, 0x78	; 120
    1874:	09 f4       	brne	.+2      	; 0x1878 <__vector_24+0x9c>
    1876:	67 c0       	rjmp	.+206    	; 0x1946 <__vector_24+0x16a>
    1878:	38 f4       	brcc	.+14     	; 0x1888 <__vector_24+0xac>
    187a:	88 36       	cpi	r24, 0x68	; 104
    187c:	09 f4       	brne	.+2      	; 0x1880 <__vector_24+0xa4>
    187e:	63 c0       	rjmp	.+198    	; 0x1946 <__vector_24+0x16a>
    1880:	80 37       	cpi	r24, 0x70	; 112
    1882:	09 f4       	brne	.+2      	; 0x1886 <__vector_24+0xaa>
    1884:	60 c0       	rjmp	.+192    	; 0x1946 <__vector_24+0x16a>
    1886:	c6 c0       	rjmp	.+396    	; 0x1a14 <__vector_24+0x238>
    1888:	88 38       	cpi	r24, 0x88	; 136
    188a:	09 f4       	brne	.+2      	; 0x188e <__vector_24+0xb2>
    188c:	b5 c0       	rjmp	.+362    	; 0x19f8 <__vector_24+0x21c>
    188e:	80 39       	cpi	r24, 0x90	; 144
    1890:	09 f4       	brne	.+2      	; 0x1894 <__vector_24+0xb8>
    1892:	5f c0       	rjmp	.+190    	; 0x1952 <__vector_24+0x176>
    1894:	80 38       	cpi	r24, 0x80	; 128
    1896:	09 f0       	breq	.+2      	; 0x189a <__vector_24+0xbe>
    1898:	bd c0       	rjmp	.+378    	; 0x1a14 <__vector_24+0x238>
    189a:	5b c0       	rjmp	.+182    	; 0x1952 <__vector_24+0x176>
    189c:	80 3b       	cpi	r24, 0xB0	; 176
    189e:	09 f4       	brne	.+2      	; 0x18a2 <__vector_24+0xc6>
    18a0:	83 c0       	rjmp	.+262    	; 0x19a8 <__vector_24+0x1cc>
    18a2:	38 f4       	brcc	.+14     	; 0x18b2 <__vector_24+0xd6>
    18a4:	80 3a       	cpi	r24, 0xA0	; 160
    18a6:	09 f4       	brne	.+2      	; 0x18aa <__vector_24+0xce>
    18a8:	66 c0       	rjmp	.+204    	; 0x1976 <__vector_24+0x19a>
    18aa:	88 3a       	cpi	r24, 0xA8	; 168
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <__vector_24+0xd4>
    18ae:	7c c0       	rjmp	.+248    	; 0x19a8 <__vector_24+0x1cc>
    18b0:	b1 c0       	rjmp	.+354    	; 0x1a14 <__vector_24+0x238>
    18b2:	80 3c       	cpi	r24, 0xC0	; 192
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <__vector_24+0xdc>
    18b6:	a4 c0       	rjmp	.+328    	; 0x1a00 <__vector_24+0x224>
    18b8:	88 3c       	cpi	r24, 0xC8	; 200
    18ba:	09 f4       	brne	.+2      	; 0x18be <__vector_24+0xe2>
    18bc:	a1 c0       	rjmp	.+322    	; 0x1a00 <__vector_24+0x224>
    18be:	88 3b       	cpi	r24, 0xB8	; 184
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <__vector_24+0xe8>
    18c2:	87 c0       	rjmp	.+270    	; 0x19d2 <__vector_24+0x1f6>
    18c4:	a7 c0       	rjmp	.+334    	; 0x1a14 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    18c6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_slarw>
    18ca:	10 c0       	rjmp	.+32     	; 0x18ec <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    18cc:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    18d0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <twi0_masterBufferLength>
    18d4:	98 17       	cp	r25, r24
    18d6:	70 f5       	brcc	.+92     	; 0x1934 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    18d8:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	8e 0f       	add	r24, r30
    18e0:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi0_masterBufferIndex>
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	ec 5c       	subi	r30, 0xCC	; 204
    18e8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ea:	80 81       	ld	r24, Z
    18ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    18f0:	85 ec       	ldi	r24, 0xC5	; 197
    18f2:	83 c0       	rjmp	.+262    	; 0x19fa <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    18f4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <twi0_error>
    18f8:	8b c0       	rjmp	.+278    	; 0x1a10 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    18fa:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8e 0f       	add	r24, r30
    1902:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi0_masterBufferIndex>
    1906:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	ec 5c       	subi	r30, 0xCC	; 204
    190e:	fd 4f       	sbci	r31, 0xFD	; 253
    1910:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    1912:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    1916:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <twi0_masterBufferLength>
    191a:	6b c0       	rjmp	.+214    	; 0x19f2 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    191c:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	8e 0f       	add	r24, r30
    1924:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi0_masterBufferIndex>
    1928:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	ec 5c       	subi	r30, 0xCC	; 204
    1930:	fd 4f       	sbci	r31, 0xFD	; 253
    1932:	80 83       	st	Z, r24
            if (twi0_sendStop)
    1934:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi0_sendStop>
    1938:	81 11       	cpse	r24, r1
    193a:	6a c0       	rjmp	.+212    	; 0x1a10 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    1942:	84 ea       	ldi	r24, 0xA4	; 164
    1944:	5e c0       	rjmp	.+188    	; 0x1a02 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    194c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_rxBufferIndex>
    1950:	cf cf       	rjmp	.-98     	; 0x18f0 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    1952:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    1956:	80 32       	cpi	r24, 0x20	; 32
    1958:	08 f0       	brcs	.+2      	; 0x195c <__vector_24+0x180>
    195a:	4e c0       	rjmp	.+156    	; 0x19f8 <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    195c:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	8e 0f       	add	r24, r30
    1964:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_rxBufferIndex>
    1968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	e0 51       	subi	r30, 0x10	; 16
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	80 83       	st	Z, r24
    1974:	bd cf       	rjmp	.-134    	; 0x18f0 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    1976:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    197a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    197e:	80 32       	cpi	r24, 0x20	; 32
    1980:	30 f4       	brcc	.+12     	; 0x198e <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    1982:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	e0 51       	subi	r30, 0x10	; 16
    198a:	fe 4f       	sbci	r31, 0xFE	; 254
    198c:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    198e:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    1998:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    199c:	80 ef       	ldi	r24, 0xF0	; 240
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    19a2:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_rxBufferIndex>
            break;
    19a6:	36 c0       	rjmp	.+108    	; 0x1a14 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    19ae:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    19b2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    19b6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    19ba:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    19be:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    19c0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <twi0_txBufferLength>
    19c4:	81 11       	cpse	r24, r1
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    19ce:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    19d2:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <twi0_txBufferIndex>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	8e 0f       	add	r24, r30
    19da:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferIndex>
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	ee 5e       	subi	r30, 0xEE	; 238
    19e2:	fd 4f       	sbci	r31, 0xFD	; 253
    19e4:	80 81       	ld	r24, Z
    19e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    19ea:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <twi0_txBufferIndex>
    19ee:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <twi0_txBufferLength>
    19f2:	98 17       	cp	r25, r24
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <__vector_24+0x21c>
    19f6:	7c cf       	rjmp	.-264    	; 0x18f0 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    19f8:	85 e8       	ldi	r24, 0x85	; 133
    19fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19fe:	0a c0       	rjmp	.+20     	; 0x1a14 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1a00:	85 ec       	ldi	r24, 0xC5	; 197
    1a02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    1a06:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
            break;
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    1a0c:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <twi0_error>
            twi0_stop();
    1a10:	0e 94 de 0b 	call	0x17bc	; 0x17bc <twi0_stop>
            break;
    }
}
    1a14:	ff 91       	pop	r31
    1a16:	ef 91       	pop	r30
    1a18:	bf 91       	pop	r27
    1a1a:	af 91       	pop	r26
    1a1c:	9f 91       	pop	r25
    1a1e:	8f 91       	pop	r24
    1a20:	7f 91       	pop	r23
    1a22:	6f 91       	pop	r22
    1a24:	5f 91       	pop	r21
    1a26:	4f 91       	pop	r20
    1a28:	3f 91       	pop	r19
    1a2a:	2f 91       	pop	r18
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    1a36:	08 95       	ret

00001a38 <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    1a38:	08 95       	ret

00001a3a <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    1a3a:	2c e7       	ldi	r18, 0x7C	; 124
    1a3c:	32 e0       	ldi	r19, 0x02	; 2
    1a3e:	30 93 5b 02 	sts	0x025B, r19	; 0x80025b <twi1_rxBuffer+0x1>
    1a42:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    1a46:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
    twi1_sendStop = 1;		// default value
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <twi1_sendStop>
    twi1_inRepStart = 0;
    1a50:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    1a54:	88 23       	and	r24, r24
    1a56:	21 f0       	breq	.+8      	; 0x1a60 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    1a58:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    1a5a:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    1a5c:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    1a5e:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    1a60:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1a64:	8e 7f       	andi	r24, 0xFE	; 254
    1a66:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    1a6a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1a6e:	8d 7f       	andi	r24, 0xFD	; 253
    1a70:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    1a74:	84 e3       	ldi	r24, 0x34	; 52
    1a76:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    1a7a:	85 e4       	ldi	r24, 0x45	; 69
    1a7c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    1a80:	08 95       	ret

00001a82 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    1a82:	88 0f       	add	r24, r24
    1a84:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1a88:	08 95       	ret

00001a8a <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    1a8a:	61 32       	cpi	r22, 0x21	; 33
    1a8c:	98 f4       	brcc	.+38     	; 0x1ab4 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    1a8e:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <twi1_state>
    1a92:	24 30       	cpi	r18, 0x04	; 4
    1a94:	89 f4       	brne	.+34     	; 0x1ab8 <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    1a96:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <twi1_txBufferLength>
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	ae e9       	ldi	r26, 0x9E	; 158
    1a9e:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	8e 2f       	mov	r24, r30
    1aa4:	82 1b       	sub	r24, r18
    1aa6:	86 17       	cp	r24, r22
    1aa8:	18 f4       	brcc	.+6      	; 0x1ab0 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    1aaa:	81 91       	ld	r24, Z+
    1aac:	8d 93       	st	X+, r24
    1aae:	f9 cf       	rjmp	.-14     	; 0x1aa2 <twi1_transmit+0x18>
    }
  
    return 0;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    1aba:	08 95       	ret

00001abc <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    1abc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    1ac0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    1ac4:	08 95       	ret

00001ac6 <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    1ac6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    1aca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    1ace:	08 95       	ret

00001ad0 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1ad0:	85 ed       	ldi	r24, 0xD5	; 213
    1ad2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    1ad6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    1ada:	84 fd       	sbrc	r24, 4
    1adc:	fc cf       	rjmp	.-8      	; 0x1ad6 <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    1ade:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
    1ae2:	08 95       	ret

00001ae4 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    1ae4:	85 ec       	ldi	r24, 0xC5	; 197
    1ae6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    1aea:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
    1aee:	08 95       	ret

00001af0 <__vector_40>:
}

ISR(TWI1_vect)
{
    1af0:	1f 92       	push	r1
    1af2:	0f 92       	push	r0
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	0f 92       	push	r0
    1af8:	11 24       	eor	r1, r1
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    1b12:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1b16:	88 7f       	andi	r24, 0xF8	; 248
    1b18:	80 36       	cpi	r24, 0x60	; 96
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <__vector_40+0x2e>
    1b1c:	9e c0       	rjmp	.+316    	; 0x1c5a <__vector_40+0x16a>
    1b1e:	78 f5       	brcc	.+94     	; 0x1b7e <__vector_40+0x8e>
    1b20:	88 32       	cpi	r24, 0x28	; 40
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__vector_40+0x36>
    1b24:	5d c0       	rjmp	.+186    	; 0x1be0 <__vector_40+0xf0>
    1b26:	90 f4       	brcc	.+36     	; 0x1b4c <__vector_40+0x5c>
    1b28:	80 31       	cpi	r24, 0x10	; 16
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <__vector_40+0x3e>
    1b2c:	56 c0       	rjmp	.+172    	; 0x1bda <__vector_40+0xea>
    1b2e:	38 f4       	brcc	.+14     	; 0x1b3e <__vector_40+0x4e>
    1b30:	88 23       	and	r24, r24
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <__vector_40+0x46>
    1b34:	0a c1       	rjmp	.+532    	; 0x1d4a <__vector_40+0x25a>
    1b36:	88 30       	cpi	r24, 0x08	; 8
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <__vector_40+0x4c>
    1b3a:	4f c0       	rjmp	.+158    	; 0x1bda <__vector_40+0xea>
    1b3c:	0a c1       	rjmp	.+532    	; 0x1d52 <__vector_40+0x262>
    1b3e:	88 31       	cpi	r24, 0x18	; 24
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <__vector_40+0x54>
    1b42:	4e c0       	rjmp	.+156    	; 0x1be0 <__vector_40+0xf0>
    1b44:	80 32       	cpi	r24, 0x20	; 32
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <__vector_40+0x5a>
    1b48:	5f c0       	rjmp	.+190    	; 0x1c08 <__vector_40+0x118>
    1b4a:	03 c1       	rjmp	.+518    	; 0x1d52 <__vector_40+0x262>
    1b4c:	80 34       	cpi	r24, 0x40	; 64
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <__vector_40+0x62>
    1b50:	6a c0       	rjmp	.+212    	; 0x1c26 <__vector_40+0x136>
    1b52:	58 f4       	brcc	.+22     	; 0x1b6a <__vector_40+0x7a>
    1b54:	80 33       	cpi	r24, 0x30	; 48
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <__vector_40+0x6a>
    1b58:	57 c0       	rjmp	.+174    	; 0x1c08 <__vector_40+0x118>
    1b5a:	88 33       	cpi	r24, 0x38	; 56
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <__vector_40+0x70>
    1b5e:	f9 c0       	rjmp	.+498    	; 0x1d52 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    1b60:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi1_error>
            twi1_releaseBus();
    1b64:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <twi1_releaseBus>
            break;
    1b68:	f4 c0       	rjmp	.+488    	; 0x1d52 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    1b6a:	80 35       	cpi	r24, 0x50	; 80
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <__vector_40+0x80>
    1b6e:	4f c0       	rjmp	.+158    	; 0x1c0e <__vector_40+0x11e>
    1b70:	88 35       	cpi	r24, 0x58	; 88
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__vector_40+0x86>
    1b74:	5d c0       	rjmp	.+186    	; 0x1c30 <__vector_40+0x140>
    1b76:	88 34       	cpi	r24, 0x48	; 72
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <__vector_40+0x8c>
    1b7a:	eb c0       	rjmp	.+470    	; 0x1d52 <__vector_40+0x262>
    1b7c:	e8 c0       	rjmp	.+464    	; 0x1d4e <__vector_40+0x25e>
    1b7e:	88 39       	cpi	r24, 0x98	; 152
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <__vector_40+0x94>
    1b82:	d9 c0       	rjmp	.+434    	; 0x1d36 <__vector_40+0x246>
    1b84:	a8 f4       	brcc	.+42     	; 0x1bb0 <__vector_40+0xc0>
    1b86:	88 37       	cpi	r24, 0x78	; 120
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__vector_40+0x9c>
    1b8a:	67 c0       	rjmp	.+206    	; 0x1c5a <__vector_40+0x16a>
    1b8c:	38 f4       	brcc	.+14     	; 0x1b9c <__vector_40+0xac>
    1b8e:	88 36       	cpi	r24, 0x68	; 104
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <__vector_40+0xa4>
    1b92:	63 c0       	rjmp	.+198    	; 0x1c5a <__vector_40+0x16a>
    1b94:	80 37       	cpi	r24, 0x70	; 112
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <__vector_40+0xaa>
    1b98:	60 c0       	rjmp	.+192    	; 0x1c5a <__vector_40+0x16a>
    1b9a:	db c0       	rjmp	.+438    	; 0x1d52 <__vector_40+0x262>
    1b9c:	88 38       	cpi	r24, 0x88	; 136
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <__vector_40+0xb2>
    1ba0:	ca c0       	rjmp	.+404    	; 0x1d36 <__vector_40+0x246>
    1ba2:	80 39       	cpi	r24, 0x90	; 144
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <__vector_40+0xb8>
    1ba6:	5f c0       	rjmp	.+190    	; 0x1c66 <__vector_40+0x176>
    1ba8:	80 38       	cpi	r24, 0x80	; 128
    1baa:	09 f0       	breq	.+2      	; 0x1bae <__vector_40+0xbe>
    1bac:	d2 c0       	rjmp	.+420    	; 0x1d52 <__vector_40+0x262>
    1bae:	5b c0       	rjmp	.+182    	; 0x1c66 <__vector_40+0x176>
    1bb0:	80 3b       	cpi	r24, 0xB0	; 176
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <__vector_40+0xc6>
    1bb4:	98 c0       	rjmp	.+304    	; 0x1ce6 <__vector_40+0x1f6>
    1bb6:	38 f4       	brcc	.+14     	; 0x1bc6 <__vector_40+0xd6>
    1bb8:	80 3a       	cpi	r24, 0xA0	; 160
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <__vector_40+0xce>
    1bbc:	69 c0       	rjmp	.+210    	; 0x1c90 <__vector_40+0x1a0>
    1bbe:	88 3a       	cpi	r24, 0xA8	; 168
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <__vector_40+0xd4>
    1bc2:	91 c0       	rjmp	.+290    	; 0x1ce6 <__vector_40+0x1f6>
    1bc4:	c6 c0       	rjmp	.+396    	; 0x1d52 <__vector_40+0x262>
    1bc6:	80 3c       	cpi	r24, 0xC0	; 192
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <__vector_40+0xdc>
    1bca:	b9 c0       	rjmp	.+370    	; 0x1d3e <__vector_40+0x24e>
    1bcc:	88 3c       	cpi	r24, 0xC8	; 200
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <__vector_40+0xe2>
    1bd0:	b6 c0       	rjmp	.+364    	; 0x1d3e <__vector_40+0x24e>
    1bd2:	88 3b       	cpi	r24, 0xB8	; 184
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <__vector_40+0xe8>
    1bd6:	9c c0       	rjmp	.+312    	; 0x1d10 <__vector_40+0x220>
    1bd8:	bc c0       	rjmp	.+376    	; 0x1d52 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    1bda:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_slarw>
    1bde:	10 c0       	rjmp	.+32     	; 0x1c00 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    1be0:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1be4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi1_masterBufferLength>
    1be8:	98 17       	cp	r25, r24
    1bea:	70 f5       	brcc	.+92     	; 0x1c48 <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    1bec:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	8e 0f       	add	r24, r30
    1bf4:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi1_masterBufferIndex>
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	e0 54       	subi	r30, 0x40	; 64
    1bfc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1c04:	85 ec       	ldi	r24, 0xC5	; 197
    1c06:	98 c0       	rjmp	.+304    	; 0x1d38 <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    1c08:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi1_error>
    1c0c:	a0 c0       	rjmp	.+320    	; 0x1d4e <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    1c0e:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	8e 0f       	add	r24, r30
    1c16:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi1_masterBufferIndex>
    1c1a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	e0 54       	subi	r30, 0x40	; 64
    1c22:	fd 4f       	sbci	r31, 0xFD	; 253
    1c24:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    1c26:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c2a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi1_masterBufferLength>
    1c2e:	80 c0       	rjmp	.+256    	; 0x1d30 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    1c30:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	8e 0f       	add	r24, r30
    1c38:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi1_masterBufferIndex>
    1c3c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	e0 54       	subi	r30, 0x40	; 64
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	80 83       	st	Z, r24
            if (twi1_sendStop)
    1c48:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi1_sendStop>
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	7f c0       	rjmp	.+254    	; 0x1d4e <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    1c56:	84 ea       	ldi	r24, 0xA4	; 164
    1c58:	73 c0       	rjmp	.+230    	; 0x1d40 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    1c60:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_rxBufferIndex>
    1c64:	cf cf       	rjmp	.-98     	; 0x1c04 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    1c66:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1c6a:	80 32       	cpi	r24, 0x20	; 32
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <__vector_40+0x180>
    1c6e:	63 c0       	rjmp	.+198    	; 0x1d36 <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    1c70:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <twi1_rxBuffer>
    1c74:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <twi1_rxBuffer+0x1>
    1c78:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	98 0f       	add	r25, r24
    1c80:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <twi1_rxBufferIndex>
    1c84:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    1c88:	e8 0f       	add	r30, r24
    1c8a:	f1 1d       	adc	r31, r1
    1c8c:	90 83       	st	Z, r25
    1c8e:	ba cf       	rjmp	.-140    	; 0x1c04 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    1c90:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    1c94:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1c98:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBuffer>
    1c9c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <twi1_rxBuffer+0x1>
    1ca0:	20 32       	cpi	r18, 0x20	; 32
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    1ca4:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1ca8:	fc 01       	movw	r30, r24
    1caa:	e2 0f       	add	r30, r18
    1cac:	f1 1d       	adc	r31, r1
    1cae:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    1cb0:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    1cba:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    1cbe:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    1cc0:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBuffer>
    1cc4:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <twi1_rxBuffer+0x1>
    1cc8:	8c 57       	subi	r24, 0x7C	; 124
    1cca:	92 40       	sbci	r25, 0x02	; 2
    1ccc:	19 f4       	brne	.+6      	; 0x1cd4 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    1cce:	8c e5       	ldi	r24, 0x5C	; 92
    1cd0:	92 e0       	ldi	r25, 0x02	; 2
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    1cd4:	8c e7       	ldi	r24, 0x7C	; 124
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <twi1_rxBuffer+0x1>
    1cdc:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    1ce0:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_rxBufferIndex>
            break;
    1ce4:	36 c0       	rjmp	.+108    	; 0x1d52 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    1cec:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    1cf0:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    1cf4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    1cf8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    1cfc:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    1cfe:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi1_txBufferLength>
    1d02:	81 11       	cpse	r24, r1
    1d04:	05 c0       	rjmp	.+10     	; 0x1d10 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    1d0c:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    1d10:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <twi1_txBufferIndex>
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	8e 0f       	add	r24, r30
    1d18:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferIndex>
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	e2 56       	subi	r30, 0x62	; 98
    1d20:	fd 4f       	sbci	r31, 0xFD	; 253
    1d22:	80 81       	ld	r24, Z
    1d24:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    1d28:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <twi1_txBufferIndex>
    1d2c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi1_txBufferLength>
    1d30:	98 17       	cp	r25, r24
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <__vector_40+0x246>
    1d34:	67 cf       	rjmp	.-306    	; 0x1c04 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    1d36:	85 e8       	ldi	r24, 0x85	; 133
    1d38:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    1d3c:	0a c0       	rjmp	.+20     	; 0x1d52 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1d3e:	85 ec       	ldi	r24, 0xC5	; 197
    1d40:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    1d44:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
            break;
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    1d4a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi1_error>
            twi1_stop();
    1d4e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <twi1_stop>
            break;
    }
}
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	7f 91       	pop	r23
    1d60:	6f 91       	pop	r22
    1d62:	5f 91       	pop	r21
    1d64:	4f 91       	pop	r20
    1d66:	3f 91       	pop	r19
    1d68:	2f 91       	pop	r18
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	0f 90       	pop	r0
    1d70:	1f 90       	pop	r1
    1d72:	18 95       	reti

00001d74 <__udivmodsi4>:
    1d74:	a1 e2       	ldi	r26, 0x21	; 33
    1d76:	1a 2e       	mov	r1, r26
    1d78:	aa 1b       	sub	r26, r26
    1d7a:	bb 1b       	sub	r27, r27
    1d7c:	fd 01       	movw	r30, r26
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <__udivmodsi4_ep>

00001d80 <__udivmodsi4_loop>:
    1d80:	aa 1f       	adc	r26, r26
    1d82:	bb 1f       	adc	r27, r27
    1d84:	ee 1f       	adc	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	a2 17       	cp	r26, r18
    1d8a:	b3 07       	cpc	r27, r19
    1d8c:	e4 07       	cpc	r30, r20
    1d8e:	f5 07       	cpc	r31, r21
    1d90:	20 f0       	brcs	.+8      	; 0x1d9a <__udivmodsi4_ep>
    1d92:	a2 1b       	sub	r26, r18
    1d94:	b3 0b       	sbc	r27, r19
    1d96:	e4 0b       	sbc	r30, r20
    1d98:	f5 0b       	sbc	r31, r21

00001d9a <__udivmodsi4_ep>:
    1d9a:	66 1f       	adc	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	1a 94       	dec	r1
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <__udivmodsi4_loop>
    1da6:	60 95       	com	r22
    1da8:	70 95       	com	r23
    1daa:	80 95       	com	r24
    1dac:	90 95       	com	r25
    1dae:	9b 01       	movw	r18, r22
    1db0:	ac 01       	movw	r20, r24
    1db2:	bd 01       	movw	r22, r26
    1db4:	cf 01       	movw	r24, r30
    1db6:	08 95       	ret

00001db8 <fgetc>:
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	20 ff       	sbrs	r18, 0
    1dc2:	33 c0       	rjmp	.+102    	; 0x1e2a <fgetc+0x72>
    1dc4:	26 ff       	sbrs	r18, 6
    1dc6:	0a c0       	rjmp	.+20     	; 0x1ddc <fgetc+0x24>
    1dc8:	2f 7b       	andi	r18, 0xBF	; 191
    1dca:	2b 83       	std	Y+3, r18	; 0x03
    1dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dce:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	9f 83       	std	Y+7, r25	; 0x07
    1dd4:	8e 83       	std	Y+6, r24	; 0x06
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	29 c0       	rjmp	.+82     	; 0x1e2e <fgetc+0x76>
    1ddc:	22 ff       	sbrs	r18, 2
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <fgetc+0x46>
    1de0:	e8 81       	ld	r30, Y
    1de2:	f9 81       	ldd	r31, Y+1	; 0x01
    1de4:	80 81       	ld	r24, Z
    1de6:	08 2e       	mov	r0, r24
    1de8:	00 0c       	add	r0, r0
    1dea:	99 0b       	sbc	r25, r25
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	19 f4       	brne	.+6      	; 0x1df6 <fgetc+0x3e>
    1df0:	20 62       	ori	r18, 0x20	; 32
    1df2:	2b 83       	std	Y+3, r18	; 0x03
    1df4:	1a c0       	rjmp	.+52     	; 0x1e2a <fgetc+0x72>
    1df6:	31 96       	adiw	r30, 0x01	; 1
    1df8:	f9 83       	std	Y+1, r31	; 0x01
    1dfa:	e8 83       	st	Y, r30
    1dfc:	0e c0       	rjmp	.+28     	; 0x1e1a <fgetc+0x62>
    1dfe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e00:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e02:	09 95       	icall
    1e04:	97 ff       	sbrs	r25, 7
    1e06:	09 c0       	rjmp	.+18     	; 0x1e1a <fgetc+0x62>
    1e08:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	11 f0       	breq	.+4      	; 0x1e12 <fgetc+0x5a>
    1e0e:	80 e2       	ldi	r24, 0x20	; 32
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <fgetc+0x5c>
    1e12:	80 e1       	ldi	r24, 0x10	; 16
    1e14:	82 2b       	or	r24, r18
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	08 c0       	rjmp	.+16     	; 0x1e2a <fgetc+0x72>
    1e1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	3f 83       	std	Y+7, r19	; 0x07
    1e24:	2e 83       	std	Y+6, r18	; 0x06
    1e26:	99 27       	eor	r25, r25
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <fgetc+0x76>
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	9f ef       	ldi	r25, 0xFF	; 255
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <printf>:
    1e34:	a0 e0       	ldi	r26, 0x00	; 0
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e0 e2       	ldi	r30, 0x20	; 32
    1e3a:	ff e0       	ldi	r31, 0x0F	; 15
    1e3c:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__+0x20>
    1e40:	ae 01       	movw	r20, r28
    1e42:	4b 5f       	subi	r20, 0xFB	; 251
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	fa 01       	movw	r30, r20
    1e48:	61 91       	ld	r22, Z+
    1e4a:	71 91       	ld	r23, Z+
    1e4c:	af 01       	movw	r20, r30
    1e4e:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__iob+0x2>
    1e52:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <__iob+0x3>
    1e56:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <vfprintf>
    1e5a:	e2 e0       	ldi	r30, 0x02	; 2
    1e5c:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__+0x20>

00001e60 <vfprintf>:
    1e60:	ab e0       	ldi	r26, 0x0B	; 11
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e6 e3       	ldi	r30, 0x36	; 54
    1e66:	ff e0       	ldi	r31, 0x0F	; 15
    1e68:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__>
    1e6c:	6c 01       	movw	r12, r24
    1e6e:	7b 01       	movw	r14, r22
    1e70:	8a 01       	movw	r16, r20
    1e72:	fc 01       	movw	r30, r24
    1e74:	17 82       	std	Z+7, r1	; 0x07
    1e76:	16 82       	std	Z+6, r1	; 0x06
    1e78:	83 81       	ldd	r24, Z+3	; 0x03
    1e7a:	81 ff       	sbrs	r24, 1
    1e7c:	cc c1       	rjmp	.+920    	; 0x2216 <vfprintf+0x3b6>
    1e7e:	ce 01       	movw	r24, r28
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	3c 01       	movw	r6, r24
    1e84:	f6 01       	movw	r30, r12
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	f7 01       	movw	r30, r14
    1e8a:	93 fd       	sbrc	r25, 3
    1e8c:	85 91       	lpm	r24, Z+
    1e8e:	93 ff       	sbrs	r25, 3
    1e90:	81 91       	ld	r24, Z+
    1e92:	7f 01       	movw	r14, r30
    1e94:	88 23       	and	r24, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <vfprintf+0x3a>
    1e98:	ba c1       	rjmp	.+884    	; 0x220e <vfprintf+0x3ae>
    1e9a:	85 32       	cpi	r24, 0x25	; 37
    1e9c:	39 f4       	brne	.+14     	; 0x1eac <vfprintf+0x4c>
    1e9e:	93 fd       	sbrc	r25, 3
    1ea0:	85 91       	lpm	r24, Z+
    1ea2:	93 ff       	sbrs	r25, 3
    1ea4:	81 91       	ld	r24, Z+
    1ea6:	7f 01       	movw	r14, r30
    1ea8:	85 32       	cpi	r24, 0x25	; 37
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <vfprintf+0x56>
    1eac:	b6 01       	movw	r22, r12
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    1eb4:	e7 cf       	rjmp	.-50     	; 0x1e84 <vfprintf+0x24>
    1eb6:	91 2c       	mov	r9, r1
    1eb8:	21 2c       	mov	r2, r1
    1eba:	31 2c       	mov	r3, r1
    1ebc:	ff e1       	ldi	r31, 0x1F	; 31
    1ebe:	f3 15       	cp	r31, r3
    1ec0:	d8 f0       	brcs	.+54     	; 0x1ef8 <vfprintf+0x98>
    1ec2:	8b 32       	cpi	r24, 0x2B	; 43
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <vfprintf+0x84>
    1ec6:	38 f4       	brcc	.+14     	; 0x1ed6 <vfprintf+0x76>
    1ec8:	80 32       	cpi	r24, 0x20	; 32
    1eca:	79 f0       	breq	.+30     	; 0x1eea <vfprintf+0x8a>
    1ecc:	83 32       	cpi	r24, 0x23	; 35
    1ece:	a1 f4       	brne	.+40     	; 0x1ef8 <vfprintf+0x98>
    1ed0:	23 2d       	mov	r18, r3
    1ed2:	20 61       	ori	r18, 0x10	; 16
    1ed4:	1d c0       	rjmp	.+58     	; 0x1f10 <vfprintf+0xb0>
    1ed6:	8d 32       	cpi	r24, 0x2D	; 45
    1ed8:	61 f0       	breq	.+24     	; 0x1ef2 <vfprintf+0x92>
    1eda:	80 33       	cpi	r24, 0x30	; 48
    1edc:	69 f4       	brne	.+26     	; 0x1ef8 <vfprintf+0x98>
    1ede:	23 2d       	mov	r18, r3
    1ee0:	21 60       	ori	r18, 0x01	; 1
    1ee2:	16 c0       	rjmp	.+44     	; 0x1f10 <vfprintf+0xb0>
    1ee4:	83 2d       	mov	r24, r3
    1ee6:	82 60       	ori	r24, 0x02	; 2
    1ee8:	38 2e       	mov	r3, r24
    1eea:	e3 2d       	mov	r30, r3
    1eec:	e4 60       	ori	r30, 0x04	; 4
    1eee:	3e 2e       	mov	r3, r30
    1ef0:	2a c0       	rjmp	.+84     	; 0x1f46 <vfprintf+0xe6>
    1ef2:	f3 2d       	mov	r31, r3
    1ef4:	f8 60       	ori	r31, 0x08	; 8
    1ef6:	1d c0       	rjmp	.+58     	; 0x1f32 <vfprintf+0xd2>
    1ef8:	37 fc       	sbrc	r3, 7
    1efa:	2d c0       	rjmp	.+90     	; 0x1f56 <vfprintf+0xf6>
    1efc:	20 ed       	ldi	r18, 0xD0	; 208
    1efe:	28 0f       	add	r18, r24
    1f00:	2a 30       	cpi	r18, 0x0A	; 10
    1f02:	40 f0       	brcs	.+16     	; 0x1f14 <vfprintf+0xb4>
    1f04:	8e 32       	cpi	r24, 0x2E	; 46
    1f06:	b9 f4       	brne	.+46     	; 0x1f36 <vfprintf+0xd6>
    1f08:	36 fc       	sbrc	r3, 6
    1f0a:	81 c1       	rjmp	.+770    	; 0x220e <vfprintf+0x3ae>
    1f0c:	23 2d       	mov	r18, r3
    1f0e:	20 64       	ori	r18, 0x40	; 64
    1f10:	32 2e       	mov	r3, r18
    1f12:	19 c0       	rjmp	.+50     	; 0x1f46 <vfprintf+0xe6>
    1f14:	36 fe       	sbrs	r3, 6
    1f16:	06 c0       	rjmp	.+12     	; 0x1f24 <vfprintf+0xc4>
    1f18:	8a e0       	ldi	r24, 0x0A	; 10
    1f1a:	98 9e       	mul	r9, r24
    1f1c:	20 0d       	add	r18, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	92 2e       	mov	r9, r18
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <vfprintf+0xe6>
    1f24:	ea e0       	ldi	r30, 0x0A	; 10
    1f26:	2e 9e       	mul	r2, r30
    1f28:	20 0d       	add	r18, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	22 2e       	mov	r2, r18
    1f2e:	f3 2d       	mov	r31, r3
    1f30:	f0 62       	ori	r31, 0x20	; 32
    1f32:	3f 2e       	mov	r3, r31
    1f34:	08 c0       	rjmp	.+16     	; 0x1f46 <vfprintf+0xe6>
    1f36:	8c 36       	cpi	r24, 0x6C	; 108
    1f38:	21 f4       	brne	.+8      	; 0x1f42 <vfprintf+0xe2>
    1f3a:	83 2d       	mov	r24, r3
    1f3c:	80 68       	ori	r24, 0x80	; 128
    1f3e:	38 2e       	mov	r3, r24
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0xe6>
    1f42:	88 36       	cpi	r24, 0x68	; 104
    1f44:	41 f4       	brne	.+16     	; 0x1f56 <vfprintf+0xf6>
    1f46:	f7 01       	movw	r30, r14
    1f48:	93 fd       	sbrc	r25, 3
    1f4a:	85 91       	lpm	r24, Z+
    1f4c:	93 ff       	sbrs	r25, 3
    1f4e:	81 91       	ld	r24, Z+
    1f50:	7f 01       	movw	r14, r30
    1f52:	81 11       	cpse	r24, r1
    1f54:	b3 cf       	rjmp	.-154    	; 0x1ebc <vfprintf+0x5c>
    1f56:	98 2f       	mov	r25, r24
    1f58:	9f 7d       	andi	r25, 0xDF	; 223
    1f5a:	95 54       	subi	r25, 0x45	; 69
    1f5c:	93 30       	cpi	r25, 0x03	; 3
    1f5e:	28 f4       	brcc	.+10     	; 0x1f6a <vfprintf+0x10a>
    1f60:	0c 5f       	subi	r16, 0xFC	; 252
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	9f e3       	ldi	r25, 0x3F	; 63
    1f66:	99 83       	std	Y+1, r25	; 0x01
    1f68:	0d c0       	rjmp	.+26     	; 0x1f84 <vfprintf+0x124>
    1f6a:	83 36       	cpi	r24, 0x63	; 99
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <vfprintf+0x11a>
    1f6e:	83 37       	cpi	r24, 0x73	; 115
    1f70:	71 f0       	breq	.+28     	; 0x1f8e <vfprintf+0x12e>
    1f72:	83 35       	cpi	r24, 0x53	; 83
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <vfprintf+0x118>
    1f76:	59 c0       	rjmp	.+178    	; 0x202a <vfprintf+0x1ca>
    1f78:	21 c0       	rjmp	.+66     	; 0x1fbc <vfprintf+0x15c>
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	80 81       	ld	r24, Z
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	0e 5f       	subi	r16, 0xFE	; 254
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	88 24       	eor	r8, r8
    1f86:	83 94       	inc	r8
    1f88:	91 2c       	mov	r9, r1
    1f8a:	53 01       	movw	r10, r6
    1f8c:	13 c0       	rjmp	.+38     	; 0x1fb4 <vfprintf+0x154>
    1f8e:	28 01       	movw	r4, r16
    1f90:	f2 e0       	ldi	r31, 0x02	; 2
    1f92:	4f 0e       	add	r4, r31
    1f94:	51 1c       	adc	r5, r1
    1f96:	f8 01       	movw	r30, r16
    1f98:	a0 80       	ld	r10, Z
    1f9a:	b1 80       	ldd	r11, Z+1	; 0x01
    1f9c:	36 fe       	sbrs	r3, 6
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <vfprintf+0x146>
    1fa0:	69 2d       	mov	r22, r9
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <vfprintf+0x14a>
    1fa6:	6f ef       	ldi	r22, 0xFF	; 255
    1fa8:	7f ef       	ldi	r23, 0xFF	; 255
    1faa:	c5 01       	movw	r24, r10
    1fac:	0e 94 1c 11 	call	0x2238	; 0x2238 <strnlen>
    1fb0:	4c 01       	movw	r8, r24
    1fb2:	82 01       	movw	r16, r4
    1fb4:	f3 2d       	mov	r31, r3
    1fb6:	ff 77       	andi	r31, 0x7F	; 127
    1fb8:	3f 2e       	mov	r3, r31
    1fba:	16 c0       	rjmp	.+44     	; 0x1fe8 <vfprintf+0x188>
    1fbc:	28 01       	movw	r4, r16
    1fbe:	22 e0       	ldi	r18, 0x02	; 2
    1fc0:	42 0e       	add	r4, r18
    1fc2:	51 1c       	adc	r5, r1
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	a0 80       	ld	r10, Z
    1fc8:	b1 80       	ldd	r11, Z+1	; 0x01
    1fca:	36 fe       	sbrs	r3, 6
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <vfprintf+0x174>
    1fce:	69 2d       	mov	r22, r9
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <vfprintf+0x178>
    1fd4:	6f ef       	ldi	r22, 0xFF	; 255
    1fd6:	7f ef       	ldi	r23, 0xFF	; 255
    1fd8:	c5 01       	movw	r24, r10
    1fda:	0e 94 11 11 	call	0x2222	; 0x2222 <strnlen_P>
    1fde:	4c 01       	movw	r8, r24
    1fe0:	f3 2d       	mov	r31, r3
    1fe2:	f0 68       	ori	r31, 0x80	; 128
    1fe4:	3f 2e       	mov	r3, r31
    1fe6:	82 01       	movw	r16, r4
    1fe8:	33 fc       	sbrc	r3, 3
    1fea:	1b c0       	rjmp	.+54     	; 0x2022 <vfprintf+0x1c2>
    1fec:	82 2d       	mov	r24, r2
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	88 16       	cp	r8, r24
    1ff2:	99 06       	cpc	r9, r25
    1ff4:	b0 f4       	brcc	.+44     	; 0x2022 <vfprintf+0x1c2>
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	80 e2       	ldi	r24, 0x20	; 32
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    2000:	2a 94       	dec	r2
    2002:	f4 cf       	rjmp	.-24     	; 0x1fec <vfprintf+0x18c>
    2004:	f5 01       	movw	r30, r10
    2006:	37 fc       	sbrc	r3, 7
    2008:	85 91       	lpm	r24, Z+
    200a:	37 fe       	sbrs	r3, 7
    200c:	81 91       	ld	r24, Z+
    200e:	5f 01       	movw	r10, r30
    2010:	b6 01       	movw	r22, r12
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    2018:	21 10       	cpse	r2, r1
    201a:	2a 94       	dec	r2
    201c:	21 e0       	ldi	r18, 0x01	; 1
    201e:	82 1a       	sub	r8, r18
    2020:	91 08       	sbc	r9, r1
    2022:	81 14       	cp	r8, r1
    2024:	91 04       	cpc	r9, r1
    2026:	71 f7       	brne	.-36     	; 0x2004 <vfprintf+0x1a4>
    2028:	e8 c0       	rjmp	.+464    	; 0x21fa <vfprintf+0x39a>
    202a:	84 36       	cpi	r24, 0x64	; 100
    202c:	11 f0       	breq	.+4      	; 0x2032 <vfprintf+0x1d2>
    202e:	89 36       	cpi	r24, 0x69	; 105
    2030:	41 f5       	brne	.+80     	; 0x2082 <vfprintf+0x222>
    2032:	f8 01       	movw	r30, r16
    2034:	37 fe       	sbrs	r3, 7
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <vfprintf+0x1e6>
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	0c 5f       	subi	r16, 0xFC	; 252
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <vfprintf+0x1f6>
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	07 2e       	mov	r0, r23
    204c:	00 0c       	add	r0, r0
    204e:	88 0b       	sbc	r24, r24
    2050:	99 0b       	sbc	r25, r25
    2052:	0e 5f       	subi	r16, 0xFE	; 254
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	f3 2d       	mov	r31, r3
    2058:	ff 76       	andi	r31, 0x6F	; 111
    205a:	3f 2e       	mov	r3, r31
    205c:	97 ff       	sbrs	r25, 7
    205e:	09 c0       	rjmp	.+18     	; 0x2072 <vfprintf+0x212>
    2060:	90 95       	com	r25
    2062:	80 95       	com	r24
    2064:	70 95       	com	r23
    2066:	61 95       	neg	r22
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	8f 4f       	sbci	r24, 0xFF	; 255
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	f0 68       	ori	r31, 0x80	; 128
    2070:	3f 2e       	mov	r3, r31
    2072:	2a e0       	ldi	r18, 0x0A	; 10
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	a3 01       	movw	r20, r6
    2078:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__ultoa_invert>
    207c:	88 2e       	mov	r8, r24
    207e:	86 18       	sub	r8, r6
    2080:	45 c0       	rjmp	.+138    	; 0x210c <vfprintf+0x2ac>
    2082:	85 37       	cpi	r24, 0x75	; 117
    2084:	31 f4       	brne	.+12     	; 0x2092 <vfprintf+0x232>
    2086:	23 2d       	mov	r18, r3
    2088:	2f 7e       	andi	r18, 0xEF	; 239
    208a:	b2 2e       	mov	r11, r18
    208c:	2a e0       	ldi	r18, 0x0A	; 10
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	25 c0       	rjmp	.+74     	; 0x20dc <vfprintf+0x27c>
    2092:	93 2d       	mov	r25, r3
    2094:	99 7f       	andi	r25, 0xF9	; 249
    2096:	b9 2e       	mov	r11, r25
    2098:	8f 36       	cpi	r24, 0x6F	; 111
    209a:	c1 f0       	breq	.+48     	; 0x20cc <vfprintf+0x26c>
    209c:	18 f4       	brcc	.+6      	; 0x20a4 <vfprintf+0x244>
    209e:	88 35       	cpi	r24, 0x58	; 88
    20a0:	79 f0       	breq	.+30     	; 0x20c0 <vfprintf+0x260>
    20a2:	b5 c0       	rjmp	.+362    	; 0x220e <vfprintf+0x3ae>
    20a4:	80 37       	cpi	r24, 0x70	; 112
    20a6:	19 f0       	breq	.+6      	; 0x20ae <vfprintf+0x24e>
    20a8:	88 37       	cpi	r24, 0x78	; 120
    20aa:	21 f0       	breq	.+8      	; 0x20b4 <vfprintf+0x254>
    20ac:	b0 c0       	rjmp	.+352    	; 0x220e <vfprintf+0x3ae>
    20ae:	e9 2f       	mov	r30, r25
    20b0:	e0 61       	ori	r30, 0x10	; 16
    20b2:	be 2e       	mov	r11, r30
    20b4:	b4 fe       	sbrs	r11, 4
    20b6:	0d c0       	rjmp	.+26     	; 0x20d2 <vfprintf+0x272>
    20b8:	fb 2d       	mov	r31, r11
    20ba:	f4 60       	ori	r31, 0x04	; 4
    20bc:	bf 2e       	mov	r11, r31
    20be:	09 c0       	rjmp	.+18     	; 0x20d2 <vfprintf+0x272>
    20c0:	34 fe       	sbrs	r3, 4
    20c2:	0a c0       	rjmp	.+20     	; 0x20d8 <vfprintf+0x278>
    20c4:	29 2f       	mov	r18, r25
    20c6:	26 60       	ori	r18, 0x06	; 6
    20c8:	b2 2e       	mov	r11, r18
    20ca:	06 c0       	rjmp	.+12     	; 0x20d8 <vfprintf+0x278>
    20cc:	28 e0       	ldi	r18, 0x08	; 8
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	05 c0       	rjmp	.+10     	; 0x20dc <vfprintf+0x27c>
    20d2:	20 e1       	ldi	r18, 0x10	; 16
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <vfprintf+0x27c>
    20d8:	20 e1       	ldi	r18, 0x10	; 16
    20da:	32 e0       	ldi	r19, 0x02	; 2
    20dc:	f8 01       	movw	r30, r16
    20de:	b7 fe       	sbrs	r11, 7
    20e0:	07 c0       	rjmp	.+14     	; 0x20f0 <vfprintf+0x290>
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	0c 5f       	subi	r16, 0xFC	; 252
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	06 c0       	rjmp	.+12     	; 0x20fc <vfprintf+0x29c>
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 5f       	subi	r16, 0xFE	; 254
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	a3 01       	movw	r20, r6
    20fe:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__ultoa_invert>
    2102:	88 2e       	mov	r8, r24
    2104:	86 18       	sub	r8, r6
    2106:	fb 2d       	mov	r31, r11
    2108:	ff 77       	andi	r31, 0x7F	; 127
    210a:	3f 2e       	mov	r3, r31
    210c:	36 fe       	sbrs	r3, 6
    210e:	0d c0       	rjmp	.+26     	; 0x212a <vfprintf+0x2ca>
    2110:	23 2d       	mov	r18, r3
    2112:	2e 7f       	andi	r18, 0xFE	; 254
    2114:	a2 2e       	mov	r10, r18
    2116:	89 14       	cp	r8, r9
    2118:	58 f4       	brcc	.+22     	; 0x2130 <vfprintf+0x2d0>
    211a:	34 fe       	sbrs	r3, 4
    211c:	0b c0       	rjmp	.+22     	; 0x2134 <vfprintf+0x2d4>
    211e:	32 fc       	sbrc	r3, 2
    2120:	09 c0       	rjmp	.+18     	; 0x2134 <vfprintf+0x2d4>
    2122:	83 2d       	mov	r24, r3
    2124:	8e 7e       	andi	r24, 0xEE	; 238
    2126:	a8 2e       	mov	r10, r24
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <vfprintf+0x2d4>
    212a:	b8 2c       	mov	r11, r8
    212c:	a3 2c       	mov	r10, r3
    212e:	03 c0       	rjmp	.+6      	; 0x2136 <vfprintf+0x2d6>
    2130:	b8 2c       	mov	r11, r8
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <vfprintf+0x2d6>
    2134:	b9 2c       	mov	r11, r9
    2136:	a4 fe       	sbrs	r10, 4
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <vfprintf+0x2f8>
    213a:	fe 01       	movw	r30, r28
    213c:	e8 0d       	add	r30, r8
    213e:	f1 1d       	adc	r31, r1
    2140:	80 81       	ld	r24, Z
    2142:	80 33       	cpi	r24, 0x30	; 48
    2144:	21 f4       	brne	.+8      	; 0x214e <vfprintf+0x2ee>
    2146:	9a 2d       	mov	r25, r10
    2148:	99 7e       	andi	r25, 0xE9	; 233
    214a:	a9 2e       	mov	r10, r25
    214c:	09 c0       	rjmp	.+18     	; 0x2160 <vfprintf+0x300>
    214e:	a2 fe       	sbrs	r10, 2
    2150:	06 c0       	rjmp	.+12     	; 0x215e <vfprintf+0x2fe>
    2152:	b3 94       	inc	r11
    2154:	b3 94       	inc	r11
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <vfprintf+0x300>
    2158:	8a 2d       	mov	r24, r10
    215a:	86 78       	andi	r24, 0x86	; 134
    215c:	09 f0       	breq	.+2      	; 0x2160 <vfprintf+0x300>
    215e:	b3 94       	inc	r11
    2160:	a3 fc       	sbrc	r10, 3
    2162:	11 c0       	rjmp	.+34     	; 0x2186 <vfprintf+0x326>
    2164:	a0 fe       	sbrs	r10, 0
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <vfprintf+0x314>
    2168:	b2 14       	cp	r11, r2
    216a:	88 f4       	brcc	.+34     	; 0x218e <vfprintf+0x32e>
    216c:	28 0c       	add	r2, r8
    216e:	92 2c       	mov	r9, r2
    2170:	9b 18       	sub	r9, r11
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <vfprintf+0x330>
    2174:	b2 14       	cp	r11, r2
    2176:	60 f4       	brcc	.+24     	; 0x2190 <vfprintf+0x330>
    2178:	b6 01       	movw	r22, r12
    217a:	80 e2       	ldi	r24, 0x20	; 32
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    2182:	b3 94       	inc	r11
    2184:	f7 cf       	rjmp	.-18     	; 0x2174 <vfprintf+0x314>
    2186:	b2 14       	cp	r11, r2
    2188:	18 f4       	brcc	.+6      	; 0x2190 <vfprintf+0x330>
    218a:	2b 18       	sub	r2, r11
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <vfprintf+0x332>
    218e:	98 2c       	mov	r9, r8
    2190:	21 2c       	mov	r2, r1
    2192:	a4 fe       	sbrs	r10, 4
    2194:	10 c0       	rjmp	.+32     	; 0x21b6 <vfprintf+0x356>
    2196:	b6 01       	movw	r22, r12
    2198:	80 e3       	ldi	r24, 0x30	; 48
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    21a0:	a2 fe       	sbrs	r10, 2
    21a2:	17 c0       	rjmp	.+46     	; 0x21d2 <vfprintf+0x372>
    21a4:	a1 fc       	sbrc	r10, 1
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <vfprintf+0x34e>
    21a8:	88 e7       	ldi	r24, 0x78	; 120
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <vfprintf+0x352>
    21ae:	88 e5       	ldi	r24, 0x58	; 88
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	b6 01       	movw	r22, r12
    21b4:	0c c0       	rjmp	.+24     	; 0x21ce <vfprintf+0x36e>
    21b6:	8a 2d       	mov	r24, r10
    21b8:	86 78       	andi	r24, 0x86	; 134
    21ba:	59 f0       	breq	.+22     	; 0x21d2 <vfprintf+0x372>
    21bc:	a1 fe       	sbrs	r10, 1
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <vfprintf+0x364>
    21c0:	8b e2       	ldi	r24, 0x2B	; 43
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <vfprintf+0x366>
    21c4:	80 e2       	ldi	r24, 0x20	; 32
    21c6:	a7 fc       	sbrc	r10, 7
    21c8:	8d e2       	ldi	r24, 0x2D	; 45
    21ca:	b6 01       	movw	r22, r12
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    21d2:	89 14       	cp	r8, r9
    21d4:	38 f4       	brcc	.+14     	; 0x21e4 <vfprintf+0x384>
    21d6:	b6 01       	movw	r22, r12
    21d8:	80 e3       	ldi	r24, 0x30	; 48
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    21e0:	9a 94       	dec	r9
    21e2:	f7 cf       	rjmp	.-18     	; 0x21d2 <vfprintf+0x372>
    21e4:	8a 94       	dec	r8
    21e6:	f3 01       	movw	r30, r6
    21e8:	e8 0d       	add	r30, r8
    21ea:	f1 1d       	adc	r31, r1
    21ec:	80 81       	ld	r24, Z
    21ee:	b6 01       	movw	r22, r12
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    21f6:	81 10       	cpse	r8, r1
    21f8:	f5 cf       	rjmp	.-22     	; 0x21e4 <vfprintf+0x384>
    21fa:	22 20       	and	r2, r2
    21fc:	09 f4       	brne	.+2      	; 0x2200 <vfprintf+0x3a0>
    21fe:	42 ce       	rjmp	.-892    	; 0x1e84 <vfprintf+0x24>
    2200:	b6 01       	movw	r22, r12
    2202:	80 e2       	ldi	r24, 0x20	; 32
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 27 11 	call	0x224e	; 0x224e <fputc>
    220a:	2a 94       	dec	r2
    220c:	f6 cf       	rjmp	.-20     	; 0x21fa <vfprintf+0x39a>
    220e:	f6 01       	movw	r30, r12
    2210:	86 81       	ldd	r24, Z+6	; 0x06
    2212:	97 81       	ldd	r25, Z+7	; 0x07
    2214:	02 c0       	rjmp	.+4      	; 0x221a <vfprintf+0x3ba>
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	9f ef       	ldi	r25, 0xFF	; 255
    221a:	2b 96       	adiw	r28, 0x0b	; 11
    221c:	e2 e1       	ldi	r30, 0x12	; 18
    221e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__>

00002222 <strnlen_P>:
    2222:	fc 01       	movw	r30, r24
    2224:	05 90       	lpm	r0, Z+
    2226:	61 50       	subi	r22, 0x01	; 1
    2228:	70 40       	sbci	r23, 0x00	; 0
    222a:	01 10       	cpse	r0, r1
    222c:	d8 f7       	brcc	.-10     	; 0x2224 <strnlen_P+0x2>
    222e:	80 95       	com	r24
    2230:	90 95       	com	r25
    2232:	8e 0f       	add	r24, r30
    2234:	9f 1f       	adc	r25, r31
    2236:	08 95       	ret

00002238 <strnlen>:
    2238:	fc 01       	movw	r30, r24
    223a:	61 50       	subi	r22, 0x01	; 1
    223c:	70 40       	sbci	r23, 0x00	; 0
    223e:	01 90       	ld	r0, Z+
    2240:	01 10       	cpse	r0, r1
    2242:	d8 f7       	brcc	.-10     	; 0x223a <strnlen+0x2>
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	8e 0f       	add	r24, r30
    224a:	9f 1f       	adc	r25, r31
    224c:	08 95       	ret

0000224e <fputc>:
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	fb 01       	movw	r30, r22
    2258:	23 81       	ldd	r18, Z+3	; 0x03
    225a:	21 fd       	sbrc	r18, 1
    225c:	03 c0       	rjmp	.+6      	; 0x2264 <fputc+0x16>
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	9f ef       	ldi	r25, 0xFF	; 255
    2262:	2c c0       	rjmp	.+88     	; 0x22bc <fputc+0x6e>
    2264:	22 ff       	sbrs	r18, 2
    2266:	16 c0       	rjmp	.+44     	; 0x2294 <fputc+0x46>
    2268:	46 81       	ldd	r20, Z+6	; 0x06
    226a:	57 81       	ldd	r21, Z+7	; 0x07
    226c:	24 81       	ldd	r18, Z+4	; 0x04
    226e:	35 81       	ldd	r19, Z+5	; 0x05
    2270:	42 17       	cp	r20, r18
    2272:	53 07       	cpc	r21, r19
    2274:	44 f4       	brge	.+16     	; 0x2286 <fputc+0x38>
    2276:	a0 81       	ld	r26, Z
    2278:	b1 81       	ldd	r27, Z+1	; 0x01
    227a:	9d 01       	movw	r18, r26
    227c:	2f 5f       	subi	r18, 0xFF	; 255
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	31 83       	std	Z+1, r19	; 0x01
    2282:	20 83       	st	Z, r18
    2284:	8c 93       	st	X, r24
    2286:	26 81       	ldd	r18, Z+6	; 0x06
    2288:	37 81       	ldd	r19, Z+7	; 0x07
    228a:	2f 5f       	subi	r18, 0xFF	; 255
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	37 83       	std	Z+7, r19	; 0x07
    2290:	26 83       	std	Z+6, r18	; 0x06
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <fputc+0x6e>
    2294:	8b 01       	movw	r16, r22
    2296:	ec 01       	movw	r28, r24
    2298:	fb 01       	movw	r30, r22
    229a:	00 84       	ldd	r0, Z+8	; 0x08
    229c:	f1 85       	ldd	r31, Z+9	; 0x09
    229e:	e0 2d       	mov	r30, r0
    22a0:	09 95       	icall
    22a2:	89 2b       	or	r24, r25
    22a4:	e1 f6       	brne	.-72     	; 0x225e <fputc+0x10>
    22a6:	d8 01       	movw	r26, r16
    22a8:	16 96       	adiw	r26, 0x06	; 6
    22aa:	8d 91       	ld	r24, X+
    22ac:	9c 91       	ld	r25, X
    22ae:	17 97       	sbiw	r26, 0x07	; 7
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	17 96       	adiw	r26, 0x07	; 7
    22b4:	9c 93       	st	X, r25
    22b6:	8e 93       	st	-X, r24
    22b8:	16 97       	sbiw	r26, 0x06	; 6
    22ba:	ce 01       	movw	r24, r28
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <__ultoa_invert>:
    22c6:	fa 01       	movw	r30, r20
    22c8:	aa 27       	eor	r26, r26
    22ca:	28 30       	cpi	r18, 0x08	; 8
    22cc:	51 f1       	breq	.+84     	; 0x2322 <__ultoa_invert+0x5c>
    22ce:	20 31       	cpi	r18, 0x10	; 16
    22d0:	81 f1       	breq	.+96     	; 0x2332 <__ultoa_invert+0x6c>
    22d2:	e8 94       	clt
    22d4:	6f 93       	push	r22
    22d6:	6e 7f       	andi	r22, 0xFE	; 254
    22d8:	6e 5f       	subi	r22, 0xFE	; 254
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	8f 4f       	sbci	r24, 0xFF	; 255
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	af 4f       	sbci	r26, 0xFF	; 255
    22e2:	b1 e0       	ldi	r27, 0x01	; 1
    22e4:	3e d0       	rcall	.+124    	; 0x2362 <__ultoa_invert+0x9c>
    22e6:	b4 e0       	ldi	r27, 0x04	; 4
    22e8:	3c d0       	rcall	.+120    	; 0x2362 <__ultoa_invert+0x9c>
    22ea:	67 0f       	add	r22, r23
    22ec:	78 1f       	adc	r23, r24
    22ee:	89 1f       	adc	r24, r25
    22f0:	9a 1f       	adc	r25, r26
    22f2:	a1 1d       	adc	r26, r1
    22f4:	68 0f       	add	r22, r24
    22f6:	79 1f       	adc	r23, r25
    22f8:	8a 1f       	adc	r24, r26
    22fa:	91 1d       	adc	r25, r1
    22fc:	a1 1d       	adc	r26, r1
    22fe:	6a 0f       	add	r22, r26
    2300:	71 1d       	adc	r23, r1
    2302:	81 1d       	adc	r24, r1
    2304:	91 1d       	adc	r25, r1
    2306:	a1 1d       	adc	r26, r1
    2308:	20 d0       	rcall	.+64     	; 0x234a <__ultoa_invert+0x84>
    230a:	09 f4       	brne	.+2      	; 0x230e <__ultoa_invert+0x48>
    230c:	68 94       	set
    230e:	3f 91       	pop	r19
    2310:	2a e0       	ldi	r18, 0x0A	; 10
    2312:	26 9f       	mul	r18, r22
    2314:	11 24       	eor	r1, r1
    2316:	30 19       	sub	r19, r0
    2318:	30 5d       	subi	r19, 0xD0	; 208
    231a:	31 93       	st	Z+, r19
    231c:	de f6       	brtc	.-74     	; 0x22d4 <__ultoa_invert+0xe>
    231e:	cf 01       	movw	r24, r30
    2320:	08 95       	ret
    2322:	46 2f       	mov	r20, r22
    2324:	47 70       	andi	r20, 0x07	; 7
    2326:	40 5d       	subi	r20, 0xD0	; 208
    2328:	41 93       	st	Z+, r20
    232a:	b3 e0       	ldi	r27, 0x03	; 3
    232c:	0f d0       	rcall	.+30     	; 0x234c <__ultoa_invert+0x86>
    232e:	c9 f7       	brne	.-14     	; 0x2322 <__ultoa_invert+0x5c>
    2330:	f6 cf       	rjmp	.-20     	; 0x231e <__ultoa_invert+0x58>
    2332:	46 2f       	mov	r20, r22
    2334:	4f 70       	andi	r20, 0x0F	; 15
    2336:	40 5d       	subi	r20, 0xD0	; 208
    2338:	4a 33       	cpi	r20, 0x3A	; 58
    233a:	18 f0       	brcs	.+6      	; 0x2342 <__ultoa_invert+0x7c>
    233c:	49 5d       	subi	r20, 0xD9	; 217
    233e:	31 fd       	sbrc	r19, 1
    2340:	40 52       	subi	r20, 0x20	; 32
    2342:	41 93       	st	Z+, r20
    2344:	02 d0       	rcall	.+4      	; 0x234a <__ultoa_invert+0x84>
    2346:	a9 f7       	brne	.-22     	; 0x2332 <__ultoa_invert+0x6c>
    2348:	ea cf       	rjmp	.-44     	; 0x231e <__ultoa_invert+0x58>
    234a:	b4 e0       	ldi	r27, 0x04	; 4
    234c:	a6 95       	lsr	r26
    234e:	97 95       	ror	r25
    2350:	87 95       	ror	r24
    2352:	77 95       	ror	r23
    2354:	67 95       	ror	r22
    2356:	ba 95       	dec	r27
    2358:	c9 f7       	brne	.-14     	; 0x234c <__ultoa_invert+0x86>
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	61 05       	cpc	r22, r1
    235e:	71 05       	cpc	r23, r1
    2360:	08 95       	ret
    2362:	9b 01       	movw	r18, r22
    2364:	ac 01       	movw	r20, r24
    2366:	0a 2e       	mov	r0, r26
    2368:	06 94       	lsr	r0
    236a:	57 95       	ror	r21
    236c:	47 95       	ror	r20
    236e:	37 95       	ror	r19
    2370:	27 95       	ror	r18
    2372:	ba 95       	dec	r27
    2374:	c9 f7       	brne	.-14     	; 0x2368 <__ultoa_invert+0xa2>
    2376:	62 0f       	add	r22, r18
    2378:	73 1f       	adc	r23, r19
    237a:	84 1f       	adc	r24, r20
    237c:	95 1f       	adc	r25, r21
    237e:	a0 1d       	adc	r26, r0
    2380:	08 95       	ret

00002382 <eeprom_read_byte>:
    2382:	f9 99       	sbic	0x1f, 1	; 31
    2384:	fe cf       	rjmp	.-4      	; 0x2382 <eeprom_read_byte>
    2386:	92 bd       	out	0x22, r25	; 34
    2388:	81 bd       	out	0x21, r24	; 33
    238a:	f8 9a       	sbi	0x1f, 0	; 31
    238c:	99 27       	eor	r25, r25
    238e:	80 b5       	in	r24, 0x20	; 32
    2390:	08 95       	ret

00002392 <eeprom_write_byte>:
    2392:	26 2f       	mov	r18, r22

00002394 <eeprom_write_r18>:
    2394:	f9 99       	sbic	0x1f, 1	; 31
    2396:	fe cf       	rjmp	.-4      	; 0x2394 <eeprom_write_r18>
    2398:	1f ba       	out	0x1f, r1	; 31
    239a:	92 bd       	out	0x22, r25	; 34
    239c:	81 bd       	out	0x21, r24	; 33
    239e:	20 bd       	out	0x20, r18	; 32
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	fa 9a       	sbi	0x1f, 2	; 31
    23a6:	f9 9a       	sbi	0x1f, 1	; 31
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	08 95       	ret

000023ae <__prologue_saves__>:
    23ae:	2f 92       	push	r2
    23b0:	3f 92       	push	r3
    23b2:	4f 92       	push	r4
    23b4:	5f 92       	push	r5
    23b6:	6f 92       	push	r6
    23b8:	7f 92       	push	r7
    23ba:	8f 92       	push	r8
    23bc:	9f 92       	push	r9
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	ca 1b       	sub	r28, r26
    23d8:	db 0b       	sbc	r29, r27
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	09 94       	ijmp

000023e6 <__epilogue_restores__>:
    23e6:	2a 88       	ldd	r2, Y+18	; 0x12
    23e8:	39 88       	ldd	r3, Y+17	; 0x11
    23ea:	48 88       	ldd	r4, Y+16	; 0x10
    23ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    23f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f8:	b9 84       	ldd	r11, Y+9	; 0x09
    23fa:	c8 84       	ldd	r12, Y+8	; 0x08
    23fc:	df 80       	ldd	r13, Y+7	; 0x07
    23fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2400:	fd 80       	ldd	r15, Y+5	; 0x05
    2402:	0c 81       	ldd	r16, Y+4	; 0x04
    2404:	1b 81       	ldd	r17, Y+3	; 0x03
    2406:	aa 81       	ldd	r26, Y+2	; 0x02
    2408:	b9 81       	ldd	r27, Y+1	; 0x01
    240a:	ce 0f       	add	r28, r30
    240c:	d1 1d       	adc	r29, r1
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	ed 01       	movw	r28, r26
    241a:	08 95       	ret

0000241c <_exit>:
    241c:	f8 94       	cli

0000241e <__stop_program>:
    241e:	ff cf       	rjmp	.-2      	; 0x241e <__stop_program>
