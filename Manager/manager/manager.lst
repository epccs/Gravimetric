
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00003662  000036f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  0080019c  0080019c  00003792  2**0
                  ALLOC
  3 .stab         0000bea4  00000000  00000000  00003794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f2d  00000000  00000000  0000f638  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012565  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012578  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  000125b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2a  00000000  00000000  00012698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  000133c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004fa  00000000  00000000  00013cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  000141b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_18>
      4c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e2 e6       	ldi	r30, 0x62	; 98
      ce:	f6 e3       	ldi	r31, 0x36	; 54
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a2 3c       	cpi	r26, 0xC2	; 194
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
      f0:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
    host_active = 0;
     1ae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
    lockout_active = 0;
     1b2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    status_byt = 0;
     1b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
    test_mode = 0;
     1d2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     1e2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
    uart_output = 0;
     1e6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1ea:	0e 94 f5 13 	call	0x27ea	; 0x27ea <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
     1ee:	80 e4       	ldi	r24, 0x40	; 64
     1f0:	0e 94 32 13 	call	0x2664	; 0x2664 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 4d 13 	call	0x269a	; 0x269a <enable_ADC_auto_conversion>
    adc_started_at = millis();
     1fa:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     1fe:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <adc_started_at>
     202:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <adc_started_at+0x1>
     206:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <adc_started_at+0x2>
     20a:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <adc_started_at+0x3>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20e:	60 e9       	ldi	r22, 0x90	; 144
     210:	70 ed       	ldi	r23, 0xD0	; 208
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 a6 12 	call	0x254c	; 0x254c <uartstream0_init>
     21a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <__iob+0x1>
     21e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <__iob>
     222:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <__iob+0x3>
     226:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     22a:	89 e2       	ldi	r24, 0x29	; 41
     22c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     230:	8d e1       	ldi	r24, 0x1D	; 29
     232:	9b e0       	ldi	r25, 0x0B	; 11
     234:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     238:	80 ee       	ldi	r24, 0xE0	; 224
     23a:	9a e0       	ldi	r25, 0x0A	; 10
     23c:	0e 94 76 14 	call	0x28ec	; 0x28ec <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 3b 14 	call	0x2876	; 0x2876 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     246:	8a e2       	ldi	r24, 0x2A	; 42
     248:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     24c:	8a ea       	ldi	r24, 0xAA	; 170
     24e:	9b e0       	ldi	r25, 0x0B	; 11
     250:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     254:	8d e2       	ldi	r24, 0x2D	; 45
     256:	9b e0       	ldi	r25, 0x0B	; 11
     258:	0e 94 00 16 	call	0x2c00	; 0x2c00 <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     262:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f eb       	ldi	r18, 0xBF	; 191
     266:	84 ed       	ldi	r24, 0xD4	; 212
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <setup+0x172>
     272:	00 c0       	rjmp	.+0      	; 0x274 <setup+0x17c>
     274:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     276:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     278:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     27a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
     27e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
     282:	0e 94 de 0b 	call	0x17bc	; 0x17bc <check_for_eeprom_id>
     286:	88 23       	and	r24, r24
     288:	29 f0       	breq	.+10     	; 0x294 <setup+0x19c>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <eeprom_read_byte>
     292:	01 c0       	rjmp	.+2      	; 0x296 <setup+0x19e>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     29a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
     29e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LoadBatLimitsFromEEPROM>

    // load Day-Night state machien values from EEPROM (or set defaults)
    LoadDayNightValuesFromEEPROM();
     2a2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LoadDayNightValuesFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     2a6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     2aa:	88 60       	ori	r24, 0x08	; 8
     2ac:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     2b0:	08 95       	ret

000002b2 <main>:
#endif
}

int main(void)
{
    setup();
     2b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2b6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     2ba:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     2be:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     2c2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     2c6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>

    while (1) // scan time for each loop varies depending on how much of each thing needs to be done 
    {
        if (!test_mode) 
     2ca:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
     2ce:	81 11       	cpse	r24, r1
     2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <main+0x34>
        {
            blink_on_activate();
     2d2:	0e 94 05 02 	call	0x40a	; 0x40a <blink_on_activate>
            check_Bootload_Time();
     2d6:	0e 94 b4 02 	call	0x568	; 0x568 <check_Bootload_Time>
            check_DTR();
     2da:	0e 94 57 03 	call	0x6ae	; 0x6ae <check_DTR>
            check_lockout();
     2de:	0e 94 dd 02 	call	0x5ba	; 0x5ba <check_lockout>
            check_shutdown();
     2e2:	0e 94 06 03 	call	0x60c	; 0x60c <check_shutdown>
        }
        save_rpu_addr_state();
     2e6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <save_rpu_addr_state>
        check_uart();
     2ea:	0e 94 11 04 	call	0x822	; 0x822 <check_uart>
        adc_burst();
     2ee:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <adc_burst>
        CalReferancesFromI2CtoEE();
     2f2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <CalReferancesFromI2CtoEE>
        BatLimitsFromI2CtoEE();
     2f6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <BatLimitsFromI2CtoEE>
        check_if_alt_should_be_on();
     2fa:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <check_if_alt_should_be_on>
        DayNightValuesFromI2CtoEE();
     2fe:	0e 94 a0 10 	call	0x2140	; 0x2140 <DayNightValuesFromI2CtoEE>
        check_daynight();
     302:	0e 94 ed 10 	call	0x21da	; 0x21da <check_daynight>
        handle_smbus_receive();
     306:	0e 94 36 0b 	call	0x166c	; 0x166c <handle_smbus_receive>
    }    
     30a:	df cf       	rjmp	.-66     	; 0x2ca <main+0x18>

0000030c <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     30c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     310:	88 23       	and	r24, r24
     312:	c1 f0       	breq	.+48     	; 0x344 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     314:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     316:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     318:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     31a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     31c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     31e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     320:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     322:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     324:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     328:	88 23       	and	r24, r24
     32a:	21 f0       	breq	.+8      	; 0x334 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     32c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     32e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     330:	5d 9a       	sbi	0x0b, 5	; 11
     332:	03 c0       	rjmp	.+6      	; 0x33a <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     334:	8f b7       	in	r24, 0x3f	; 63
     336:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     338:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     33a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     33c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     340:	42 9a       	sbi	0x08, 2	; 8
     342:	17 c0       	rjmp	.+46     	; 0x372 <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     344:	8f b7       	in	r24, 0x3f	; 63
     346:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     348:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     34a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     34c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     34e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     350:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     352:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     354:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     358:	88 23       	and	r24, r24
     35a:	21 f0       	breq	.+8      	; 0x364 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     35e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     360:	5d 9a       	sbi	0x0b, 5	; 11
     362:	03 c0       	rjmp	.+6      	; 0x36a <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     364:	8f b7       	in	r24, 0x3f	; 63
     366:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     368:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     36a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     36c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     36e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     370:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     372:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     374:	08 95       	ret

00000376 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     376:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     37a:	88 23       	and	r24, r24
     37c:	81 f0       	breq	.+32     	; 0x39e <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     37e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     380:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     382:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     384:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     386:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     388:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     38a:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     38c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     38e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     390:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     392:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     394:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     396:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     398:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     39a:	42 9a       	sbi	0x08, 2	; 8
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     39e:	8f b7       	in	r24, 0x3f	; 63
     3a0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3a2:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3aa:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ac:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3b2:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ba:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3bc:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3be:	08 95       	ret

000003c0 <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3c0:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3c4:	88 23       	and	r24, r24
     3c6:	81 f0       	breq	.+32     	; 0x3e8 <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ca:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3cc:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ce:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3d4:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3da:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3dc:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3de:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3e4:	42 9a       	sbi	0x08, 2	; 8
     3e6:	0f c0       	rjmp	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e8:	8f b7       	in	r24, 0x3f	; 63
     3ea:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3ec:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ee:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3f4:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3fa:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3fc:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     400:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     402:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     404:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     406:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     408:	08 95       	ret

0000040a <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     40e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     412:	81 11       	cpse	r24, r1
     414:	a6 c0       	rjmp	.+332    	; 0x562 <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     416:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     41a:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <blink_started_at>
     41e:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     422:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     426:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     42a:	dc 01       	movw	r26, r24
     42c:	cb 01       	movw	r24, r22
     42e:	80 1b       	sub	r24, r16
     430:	91 0b       	sbc	r25, r17
     432:	a2 0b       	sbc	r26, r18
     434:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     436:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     43a:	27 7f       	andi	r18, 0xF7	; 247
     43c:	09 f0       	breq	.+2      	; 0x440 <blink_on_activate+0x36>
     43e:	6d c0       	rjmp	.+218    	; 0x51a <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     440:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <host_is_foreign>
     444:	22 23       	and	r18, r18
     446:	21 f0       	breq	.+8      	; 0x450 <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     448:	b6 95       	lsr	r27
     44a:	a7 95       	ror	r26
     44c:	97 95       	ror	r25
     44e:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     450:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started>
     454:	22 23       	and	r18, r18
     456:	e9 f0       	breq	.+58     	; 0x492 <blink_on_activate+0x88>
     458:	8c 34       	cpi	r24, 0x4C	; 76
     45a:	91 05       	cpc	r25, r1
     45c:	a1 05       	cpc	r26, r1
     45e:	b1 05       	cpc	r27, r1
     460:	c0 f0       	brcs	.+48     	; 0x492 <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     462:	25 9b       	sbis	0x04, 5	; 4
     464:	09 c0       	rjmp	.+18     	; 0x478 <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     466:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     468:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     46a:	f8 94       	cli
    {
        if (value_for_bit) 
     46c:	95 fd       	sbrc	r25, 5
     46e:	02 c0       	rjmp	.+4      	; 0x474 <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     470:	2d 9a       	sbi	0x05, 5	; 5
     472:	01 c0       	rjmp	.+2      	; 0x476 <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     474:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     476:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     478:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     47c:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     480:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     484:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     488:	85 5b       	subi	r24, 0xB5	; 181
     48a:	9f 4f       	sbci	r25, 0xFF	; 255
     48c:	af 4f       	sbci	r26, 0xFF	; 255
     48e:	bf 4f       	sbci	r27, 0xFF	; 255
     490:	60 c0       	rjmp	.+192    	; 0x552 <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     492:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     496:	22 23       	and	r18, r18
     498:	f1 f0       	breq	.+60     	; 0x4d6 <blink_on_activate+0xcc>
     49a:	81 3d       	cpi	r24, 0xD1	; 209
     49c:	27 e0       	ldi	r18, 0x07	; 7
     49e:	92 07       	cpc	r25, r18
     4a0:	a1 05       	cpc	r26, r1
     4a2:	b1 05       	cpc	r27, r1
     4a4:	c0 f0       	brcs	.+48     	; 0x4d6 <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4a6:	25 9b       	sbis	0x04, 5	; 4
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4aa:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4ac:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4ae:	f8 94       	cli
    {
        if (value_for_bit) 
     4b0:	95 fd       	sbrc	r25, 5
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     4b4:	2d 9a       	sbi	0x05, 5	; 5
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4b8:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4ba:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4bc:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4c0:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4c4:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4c8:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4cc:	80 53       	subi	r24, 0x30	; 48
     4ce:	98 4f       	sbci	r25, 0xF8	; 248
     4d0:	af 4f       	sbci	r26, 0xFF	; 255
     4d2:	bf 4f       	sbci	r27, 0xFF	; 255
     4d4:	3e c0       	rjmp	.+124    	; 0x552 <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4d6:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <host_active>
     4da:	22 23       	and	r18, r18
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <blink_on_activate+0xd6>
     4de:	41 c0       	rjmp	.+130    	; 0x562 <blink_on_activate+0x158>
     4e0:	85 3f       	cpi	r24, 0xF5	; 245
     4e2:	91 40       	sbci	r25, 0x01	; 1
     4e4:	a1 05       	cpc	r26, r1
     4e6:	b1 05       	cpc	r27, r1
     4e8:	e0 f1       	brcs	.+120    	; 0x562 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4ea:	25 9b       	sbis	0x04, 5	; 4
     4ec:	09 c0       	rjmp	.+18     	; 0x500 <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4ee:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4f0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4f2:	f8 94       	cli
    {
        if (value_for_bit) 
     4f4:	95 fd       	sbrc	r25, 5
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     4f8:	2d 9a       	sbi	0x05, 5	; 5
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4fc:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4fe:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     500:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     504:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     508:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     50c:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     510:	8c 50       	subi	r24, 0x0C	; 12
     512:	9e 4f       	sbci	r25, 0xFE	; 254
     514:	af 4f       	sbci	r26, 0xFF	; 255
     516:	bf 4f       	sbci	r27, 0xFF	; 255
     518:	1c c0       	rjmp	.+56     	; 0x552 <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     51a:	89 3c       	cpi	r24, 0xC9	; 201
     51c:	91 05       	cpc	r25, r1
     51e:	a1 05       	cpc	r26, r1
     520:	b1 05       	cpc	r27, r1
     522:	f8 f0       	brcs	.+62     	; 0x562 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     524:	25 9b       	sbis	0x04, 5	; 4
     526:	09 c0       	rjmp	.+18     	; 0x53a <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     528:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     52a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     52c:	f8 94       	cli
    {
        if (value_for_bit) 
     52e:	95 fd       	sbrc	r25, 5
     530:	02 c0       	rjmp	.+4      	; 0x536 <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     532:	2d 9a       	sbi	0x05, 5	; 5
     534:	01 c0       	rjmp	.+2      	; 0x538 <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     536:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     538:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     53a:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     53e:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     542:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     546:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     54a:	88 53       	subi	r24, 0x38	; 56
     54c:	9f 4f       	sbci	r25, 0xFF	; 255
     54e:	af 4f       	sbci	r26, 0xFF	; 255
     550:	bf 4f       	sbci	r27, 0xFF	; 255
     552:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <blink_started_at>
     556:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <blink_started_at+0x1>
     55a:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <blink_started_at+0x2>
     55e:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <blink_started_at+0x3>
        }
    }
}
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
    if (bootloader_started)
     56c:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     570:	88 23       	and	r24, r24
     572:	01 f1       	breq	.+64     	; 0x5b4 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     574:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     578:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     57c:	21 11       	cpse	r18, r1
     57e:	1a c0       	rjmp	.+52     	; 0x5b4 <check_Bootload_Time+0x4c>
     580:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <bootloader_started_at>
     584:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <bootloader_started_at+0x1>
     588:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <bootloader_started_at+0x2>
     58c:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <bootloader_started_at+0x3>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	80 1b       	sub	r24, r16
     596:	91 0b       	sbc	r25, r17
     598:	a2 0b       	sbc	r26, r18
     59a:	b3 0b       	sbc	r27, r19
     59c:	89 33       	cpi	r24, 0x39	; 57
     59e:	91 4c       	sbci	r25, 0xC1	; 193
     5a0:	a1 40       	sbci	r26, 0x01	; 1
     5a2:	b1 05       	cpc	r27, r1
     5a4:	38 f0       	brcs	.+14     	; 0x5b4 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     5a6:	0e 94 86 01 	call	0x30c	; 0x30c <connect_normal_mode>
            host_active =1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
            bootloader_started = 0;
     5b0:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
        }
    }
}
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5be:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5c2:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5c6:	21 11       	cpse	r18, r1
     5c8:	1e c0       	rjmp	.+60     	; 0x606 <check_lockout+0x4c>
     5ca:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     5ce:	22 23       	and	r18, r18
     5d0:	d1 f0       	breq	.+52     	; 0x606 <check_lockout+0x4c>
     5d2:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <lockout_started_at>
     5d6:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <lockout_started_at+0x1>
     5da:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <lockout_started_at+0x2>
     5de:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <lockout_started_at+0x3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	80 1b       	sub	r24, r16
     5e8:	91 0b       	sbc	r25, r17
     5ea:	a2 0b       	sbc	r26, r18
     5ec:	b3 0b       	sbc	r27, r19
     5ee:	81 3c       	cpi	r24, 0xC1	; 193
     5f0:	94 4d       	sbci	r25, 0xD4	; 212
     5f2:	a1 40       	sbci	r26, 0x01	; 1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	38 f0       	brcs	.+14     	; 0x606 <check_lockout+0x4c>
    {
        connect_normal_mode();
     5f8:	0e 94 86 01 	call	0x30c	; 0x30c <connect_normal_mode>

        host_active = 1;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
        lockout_active =0;
     602:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    }
}
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <check_shutdown>:


void check_shutdown(void)
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
    if (shutdown_started)
     610:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_started>
     614:	88 23       	and	r24, r24
     616:	19 f1       	breq	.+70     	; 0x65e <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     618:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     61c:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <shutdown_started_at>
     620:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <shutdown_started_at+0x1>
     624:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <shutdown_started_at+0x2>
     628:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <shutdown_started_at+0x3>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	80 1b       	sub	r24, r16
     632:	91 0b       	sbc	r25, r17
     634:	a2 0b       	sbc	r26, r18
     636:	b3 0b       	sbc	r27, r19
     638:	89 3e       	cpi	r24, 0xE9	; 233
     63a:	93 40       	sbci	r25, 0x03	; 3
     63c:	a1 05       	cpc	r26, r1
     63e:	b1 05       	cpc	r27, r1
     640:	98 f1       	brcs	.+102    	; 0x6a8 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     642:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     644:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     646:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     648:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     64a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     64c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     64e:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     650:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     652:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <shutdown_detected>
     65c:	25 c0       	rjmp	.+74     	; 0x6a8 <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     65e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     662:	81 11       	cpse	r24, r1
     664:	21 c0       	rjmp	.+66     	; 0x6a8 <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     666:	18 99       	sbic	0x03, 0	; 3
     668:	1f c0       	rjmp	.+62     	; 0x6a8 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     66a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     66e:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     670:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     672:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     674:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     676:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     678:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     67a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     67c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     67e:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     680:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     682:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     684:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     686:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     688:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     68a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
                shutdown_started_at = millis();
     694:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     698:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
     69c:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
     6a0:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
     6a4:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
            }
        }
}
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     6ae:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     6b2:	81 11       	cpse	r24, r1
     6b4:	b5 c0       	rjmp	.+362    	; 0x820 <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     6b6:	4b 99       	sbic	0x09, 3	; 9
     6b8:	56 c0       	rjmp	.+172    	; 0x766 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6ba:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     6be:	83 fd       	sbrc	r24, 3
     6c0:	af c0       	rjmp	.+350    	; 0x820 <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     6c2:	4a 9b       	sbis	0x09, 2	; 9
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6c6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6c8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6ca:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6cc:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6ce:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6d0:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     6d4:	81 11       	cpse	r24, r1
     6d6:	a4 c0       	rjmp	.+328    	; 0x820 <check_DTR+0x172>
     6d8:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     6dc:	81 11       	cpse	r24, r1
     6de:	a0 c0       	rjmp	.+320    	; 0x820 <check_DTR+0x172>
     6e0:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     6e4:	81 11       	cpse	r24, r1
     6e6:	9c c0       	rjmp	.+312    	; 0x820 <check_DTR+0x172>
     6e8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     6ec:	81 11       	cpse	r24, r1
     6ee:	98 c0       	rjmp	.+304    	; 0x820 <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     6f0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     6f4:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     6f8:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     6fc:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     700:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     704:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <bootloader_address>
     708:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     70c:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     710:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     714:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	20 95       	com	r18
     71c:	30 95       	com	r19
     71e:	2a 70       	andi	r18, 0x0A	; 10
     720:	33 27       	eor	r19, r19
     722:	64 e0       	ldi	r22, 0x04	; 4
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	6a 95       	dec	r22
     72a:	e1 f7       	brne	.-8      	; 0x724 <check_DTR+0x76>
     72c:	89 2f       	mov	r24, r25
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	80 95       	com	r24
     732:	90 95       	com	r25
     734:	80 75       	andi	r24, 0x50	; 80
     736:	99 27       	eor	r25, r25
     738:	74 e0       	ldi	r23, 0x04	; 4
     73a:	95 95       	asr	r25
     73c:	87 95       	ror	r24
     73e:	7a 95       	dec	r23
     740:	e1 f7       	brne	.-8      	; 0x73a <check_DTR+0x8c>
     742:	82 2b       	or	r24, r18
     744:	93 2b       	or	r25, r19
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	1f 92       	push	r1
     74c:	4f 93       	push	r20
     74e:	86 e1       	ldi	r24, 0x16	; 22
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
                        uart_has_TTL = 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
                        localhost_active = 1;
     760:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <localhost_active>
     764:	57 c0       	rjmp	.+174    	; 0x814 <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     766:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <check_DTR+0xc2>
     76e:	58 c0       	rjmp	.+176    	; 0x820 <check_DTR+0x172>
     770:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     774:	88 23       	and	r24, r24
     776:	09 f4       	brne	.+2      	; 0x77a <check_DTR+0xcc>
     778:	53 c0       	rjmp	.+166    	; 0x820 <check_DTR+0x172>
     77a:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     77e:	81 11       	cpse	r24, r1
     780:	4f c0       	rjmp	.+158    	; 0x820 <check_DTR+0x172>
     782:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     786:	81 11       	cpse	r24, r1
     788:	4b c0       	rjmp	.+150    	; 0x820 <check_DTR+0x172>
     78a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     78e:	81 11       	cpse	r24, r1
     790:	47 c0       	rjmp	.+142    	; 0x820 <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     792:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     796:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     79a:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     79e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     7a2:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7a6:	8f ec       	ldi	r24, 0xCF	; 207
     7a8:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7ac:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     7b0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     7b4:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	20 95       	com	r18
     7bc:	30 95       	com	r19
     7be:	2a 70       	andi	r18, 0x0A	; 10
     7c0:	33 27       	eor	r19, r19
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	22 0f       	add	r18, r18
     7c6:	33 1f       	adc	r19, r19
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <check_DTR+0x116>
     7cc:	89 2f       	mov	r24, r25
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	80 95       	com	r24
     7d2:	90 95       	com	r25
     7d4:	80 75       	andi	r24, 0x50	; 80
     7d6:	99 27       	eor	r25, r25
     7d8:	54 e0       	ldi	r21, 0x04	; 4
     7da:	95 95       	asr	r25
     7dc:	87 95       	ror	r24
     7de:	5a 95       	dec	r21
     7e0:	e1 f7       	brne	.-8      	; 0x7da <check_DTR+0x12c>
     7e2:	82 2b       	or	r24, r18
     7e4:	93 2b       	or	r25, r19
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	1f 92       	push	r1
     7ec:	4f 93       	push	r20
     7ee:	86 e1       	ldi	r24, 0x16	; 22
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
                uart_has_TTL = 1;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     800:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     802:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     804:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     806:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     808:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     80c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     80e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     810:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     812:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	08 95       	ret

00000822 <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     822:	4f 92       	push	r4
     824:	5f 92       	push	r5
     826:	6f 92       	push	r6
     828:	7f 92       	push	r7
     82a:	8f 92       	push	r8
     82c:	9f 92       	push	r9
     82e:	af 92       	push	r10
     830:	bf 92       	push	r11
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     842:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     846:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <uart_has_TTL>
     84a:	22 23       	and	r18, r18
     84c:	d9 f0       	breq	.+54     	; 0x884 <check_uart+0x62>
     84e:	40 90 09 03 	lds	r4, 0x0309	; 0x800309 <uart_started_at>
     852:	50 90 0a 03 	lds	r5, 0x030A	; 0x80030a <uart_started_at+0x1>
     856:	60 90 0b 03 	lds	r6, 0x030B	; 0x80030b <uart_started_at+0x2>
     85a:	70 90 0c 03 	lds	r7, 0x030C	; 0x80030c <uart_started_at+0x3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	84 19       	sub	r24, r4
     864:	95 09       	sbc	r25, r5
     866:	a6 09       	sbc	r26, r6
     868:	b7 09       	sbc	r27, r7
     86a:	85 3f       	cpi	r24, 0xF5	; 245
     86c:	91 40       	sbci	r25, 0x01	; 1
     86e:	a1 05       	cpc	r26, r1
     870:	b1 05       	cpc	r27, r1
     872:	40 f0       	brcs	.+16     	; 0x884 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     874:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
        uart_has_TTL = 0;
     87e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     882:	cd c1       	rjmp	.+922    	; 0xc1e <__stack+0x31f>
    }
    else
    {
        if ( uart0_available() )
     884:	0e 94 8e 12 	call	0x251c	; 0x251c <uart0_available>
     888:	89 2b       	or	r24, r25
     88a:	09 f4       	brne	.+2      	; 0x88e <check_uart+0x6c>
     88c:	c8 c1       	rjmp	.+912    	; 0xc1e <__stack+0x31f>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     88e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <__iob>
     892:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <__iob+0x1>
     896:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     89a:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <uart_previous_byte>
     89e:	26 2f       	mov	r18, r22
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	20 95       	com	r18
     8a4:	30 95       	com	r19
     8a6:	a9 01       	movw	r20, r18
     8a8:	4a 70       	andi	r20, 0x0A	; 10
     8aa:	55 27       	eor	r21, r21
     8ac:	74 e0       	ldi	r23, 0x04	; 4
     8ae:	44 0f       	add	r20, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	7a 95       	dec	r23
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <check_uart+0x8c>
     8b6:	20 75       	andi	r18, 0x50	; 80
     8b8:	33 27       	eor	r19, r19
     8ba:	e4 e0       	ldi	r30, 0x04	; 4
     8bc:	35 95       	asr	r19
     8be:	27 95       	ror	r18
     8c0:	ea 95       	dec	r30
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <check_uart+0x9a>
     8c4:	24 2b       	or	r18, r20
     8c6:	35 2b       	or	r19, r21
     8c8:	ac 01       	movw	r20, r24
     8ca:	55 27       	eor	r21, r21
     8cc:	24 17       	cp	r18, r20
     8ce:	35 07       	cpc	r19, r21
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8d2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8d6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     8da:	81 11       	cpse	r24, r1
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <check_uart+0xc4>
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <check_uart+0xdc>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     8e0:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_previous_byte>
                return;
     8e4:	9c c1       	rjmp	.+824    	; 0xc1e <__stack+0x31f>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     8e6:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
     8ea:	68 17       	cp	r22, r24
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     8ee:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     8f2:	84 70       	andi	r24, 0x04	; 4
     8f4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
                }
                uart_has_TTL = 0;
     8f8:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__stack+0x7>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     8fe:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     902:	88 23       	and	r24, r24
     904:	19 f0       	breq	.+6      	; 0x90c <__stack+0xd>
                {
                    host_is_foreign = 0; // used to connect the host
     906:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
     90a:	03 c0       	rjmp	.+6      	; 0x912 <__stack+0x13>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     912:	61 11       	cpse	r22, r1
     914:	27 c0       	rjmp	.+78     	; 0x964 <__stack+0x65>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     916:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	80 5c       	subi	r24, 0xC0	; 192
     920:	94 4d       	sbci	r25, 0xD4	; 212
     922:	a1 40       	sbci	r26, 0x01	; 1
     924:	b1 09       	sbc	r27, r1
     926:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     92a:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     92e:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     932:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     936:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	88 53       	subi	r24, 0x38	; 56
     940:	91 4c       	sbci	r25, 0xC1	; 193
     942:	a1 40       	sbci	r26, 0x01	; 1
     944:	b1 09       	sbc	r27, r1
     946:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     94a:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     94e:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     952:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     956:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     958:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     95a:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     95c:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     95e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
     962:	36 c1       	rjmp	.+620    	; 0xbd0 <__stack+0x2d1>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     964:	6f 3f       	cpi	r22, 0xFF	; 255
     966:	31 f4       	brne	.+12     	; 0x974 <__stack+0x75>
            {
                arduino_mode_started = 0;
     968:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
                arduino_mode = 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <arduino_mode>
                return;
     972:	55 c1       	rjmp	.+682    	; 0xc1e <__stack+0x31f>
            }
            if (input == RPU_START_TEST_MODE) 
     974:	61 30       	cpi	r22, 0x01	; 1
     976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x7b>
     978:	6f c0       	rjmp	.+222    	; 0xa58 <__stack+0x159>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     97a:	f9 b1       	in	r31, 0x09	; 9
     97c:	e9 b1       	in	r30, 0x09	; 9
     97e:	56 b1       	in	r21, 0x06	; 6
     980:	49 b1       	in	r20, 0x09	; 9
     982:	39 b1       	in	r19, 0x09	; 9
     984:	89 b1       	in	r24, 0x09	; 9
     986:	29 b1       	in	r18, 0x09	; 9
     988:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	88 0f       	add	r24, r24
     98e:	89 2f       	mov	r24, r25
     990:	88 1f       	adc	r24, r24
     992:	99 0b       	sbc	r25, r25
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	73 fb       	bst	r23, 3
     99e:	99 27       	eor	r25, r25
     9a0:	90 f9       	bld	r25, 0
     9a2:	89 2b       	or	r24, r25
     9a4:	f3 fb       	bst	r31, 3
     9a6:	aa 24       	eor	r10, r10
     9a8:	a0 f8       	bld	r10, 0
     9aa:	b1 2c       	mov	r11, r1
     9ac:	b6 94       	lsr	r11
     9ae:	ba 2c       	mov	r11, r10
     9b0:	aa 24       	eor	r10, r10
     9b2:	b7 94       	ror	r11
     9b4:	a7 94       	ror	r10
     9b6:	a8 2a       	or	r10, r24
     9b8:	e2 fb       	bst	r30, 2
     9ba:	cc 24       	eor	r12, r12
     9bc:	c0 f8       	bld	r12, 0
     9be:	d1 2c       	mov	r13, r1
     9c0:	d6 e0       	ldi	r29, 0x06	; 6
     9c2:	cc 0c       	add	r12, r12
     9c4:	dd 1c       	adc	r13, r13
     9c6:	da 95       	dec	r29
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <__stack+0xc3>
     9ca:	ca 28       	or	r12, r10
     9cc:	52 fb       	bst	r21, 2
     9ce:	ee 24       	eor	r14, r14
     9d0:	e0 f8       	bld	r14, 0
     9d2:	f1 2c       	mov	r15, r1
     9d4:	15 e0       	ldi	r17, 0x05	; 5
     9d6:	ee 0c       	add	r14, r14
     9d8:	ff 1c       	adc	r15, r15
     9da:	1a 95       	dec	r17
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <__stack+0xd7>
     9de:	ec 28       	or	r14, r12
     9e0:	45 fb       	bst	r20, 5
     9e2:	00 27       	eor	r16, r16
     9e4:	00 f9       	bld	r16, 0
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	00 0f       	add	r16, r16
     9ec:	11 1f       	adc	r17, r17
     9ee:	8a 95       	dec	r24
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <__stack+0xeb>
     9f2:	0e 29       	or	r16, r14
     9f4:	36 fb       	bst	r19, 6
     9f6:	33 27       	eor	r19, r19
     9f8:	30 f9       	bld	r19, 0
     9fa:	c3 2f       	mov	r28, r19
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	d8 2f       	mov	r29, r24
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	cc 0f       	add	r28, r28
     a04:	dd 1f       	adc	r29, r29
     a06:	9a 95       	dec	r25
     a08:	e1 f7       	brne	.-8      	; 0xa02 <__stack+0x103>
     a0a:	c0 2b       	or	r28, r16
     a0c:	24 fb       	bst	r18, 4
     a0e:	88 24       	eor	r8, r8
     a10:	80 f8       	bld	r8, 0
     a12:	91 2c       	mov	r9, r1
     a14:	88 0c       	add	r8, r8
     a16:	99 1c       	adc	r9, r9
     a18:	8c 2a       	or	r8, r28
     a1a:	80 92 f4 02 	sts	0x02F4, r8	; 0x8002f4 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a1e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a20:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a22:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a24:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a26:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a28:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a2a:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a2c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a2e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a30:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a32:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a34:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a36:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a38:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a3a:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a3e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a40:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a42:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a44:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a46:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a48:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a4a:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4c:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a4e:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 1;
     a52:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <test_mode>
                return;
     a56:	e3 c0       	rjmp	.+454    	; 0xc1e <__stack+0x31f>
            }
            if (input == RPU_END_TEST_MODE) 
     a58:	6e 3f       	cpi	r22, 0xFE	; 254
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	76 c0       	rjmp	.+236    	; 0xb4a <__stack+0x24b>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a5e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a62:	88 1f       	adc	r24, r24
     a64:	88 27       	eor	r24, r24
     a66:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a68:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a6a:	f8 94       	cli
    {
        if (value_for_bit) 
     a6c:	88 23       	and	r24, r24
     a6e:	11 f0       	breq	.+4      	; 0xa74 <__stack+0x175>
        {
            *register_addr |= 1 << bit_offset;
     a70:	5b 9a       	sbi	0x0b, 3	; 11
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <__stack+0x177>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a74:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a76:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a78:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a7c:	86 fb       	bst	r24, 6
     a7e:	88 27       	eor	r24, r24
     a80:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a82:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a84:	f8 94       	cli
    {
        if (value_for_bit) 
     a86:	88 23       	and	r24, r24
     a88:	11 f0       	breq	.+4      	; 0xa8e <__stack+0x18f>
        {
            *register_addr |= 1 << bit_offset;
     a8a:	5a 9a       	sbi	0x0b, 2	; 11
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <__stack+0x191>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a8e:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a90:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a92:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a96:	85 fb       	bst	r24, 5
     a98:	88 27       	eor	r24, r24
     a9a:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a9c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a9e:	f8 94       	cli
    {
        if (value_for_bit) 
     aa0:	88 23       	and	r24, r24
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <__stack+0x1a9>
        {
            *register_addr |= 1 << bit_offset;
     aa4:	42 9a       	sbi	0x08, 2	; 8
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <__stack+0x1ab>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aa8:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aaa:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aac:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ab0:	82 95       	swap	r24
     ab2:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ab4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ab6:	f8 94       	cli
    {
        if (value_for_bit) 
     ab8:	88 23       	and	r24, r24
     aba:	11 f0       	breq	.+4      	; 0xac0 <__stack+0x1c1>
        {
            *register_addr |= 1 << bit_offset;
     abc:	5d 9a       	sbi	0x0b, 5	; 11
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <__stack+0x1c3>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ac0:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ac2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ac4:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ac8:	83 fb       	bst	r24, 3
     aca:	88 27       	eor	r24, r24
     acc:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ace:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ad0:	f8 94       	cli
    {
        if (value_for_bit) 
     ad2:	88 23       	and	r24, r24
     ad4:	11 f0       	breq	.+4      	; 0xada <__stack+0x1db>
        {
            *register_addr |= 1 << bit_offset;
     ad6:	5e 9a       	sbi	0x0b, 6	; 11
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <__stack+0x1dd>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ada:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     adc:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ade:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     ae2:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ae6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aea:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aec:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     aee:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     af2:	88 61       	ori	r24, 0x18	; 24
     af4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     af8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     afc:	82 fb       	bst	r24, 2
     afe:	88 27       	eor	r24, r24
     b00:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b02:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b04:	f8 94       	cli
    {
        if (value_for_bit) 
     b06:	88 23       	and	r24, r24
     b08:	11 f0       	breq	.+4      	; 0xb0e <__stack+0x20f>
        {
            *register_addr |= 1 << bit_offset;
     b0a:	5f 9a       	sbi	0x0b, 7	; 11
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <__stack+0x211>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b0e:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b10:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b12:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b16:	86 95       	lsr	r24
     b18:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b1a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b1c:	f8 94       	cli
    {
        if (value_for_bit) 
     b1e:	88 23       	and	r24, r24
     b20:	11 f0       	breq	.+4      	; 0xb26 <__stack+0x227>
        {
            *register_addr |= 1 << bit_offset;
     b22:	5c 9a       	sbi	0x0b, 4	; 11
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <__stack+0x229>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b26:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b28:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b2a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b2e:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b32:	f8 94       	cli
    {
        if (value_for_bit) 
     b34:	88 23       	and	r24, r24
     b36:	11 f0       	breq	.+4      	; 0xb3c <__stack+0x23d>
        {
            *register_addr |= 1 << bit_offset;
     b38:	43 9a       	sbi	0x08, 3	; 8
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <__stack+0x23f>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b3c:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b3e:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b40:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 0;
     b44:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
                return;
     b48:	6a c0       	rjmp	.+212    	; 0xc1e <__stack+0x31f>
            }
            if (input == rpu_address) // that is my local address
     b4a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     b4e:	68 13       	cpse	r22, r24
     b50:	2a c0       	rjmp	.+84     	; 0xba6 <__stack+0x2a7>
            {
                connect_bootload_mode();
     b52:	0e 94 bb 01 	call	0x376	; 0x376 <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b5c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b5e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b60:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b62:	8f bf       	out	0x3f, r24	; 63
     b64:	8f e5       	ldi	r24, 0x5F	; 95
     b66:	9a ee       	ldi	r25, 0xEA	; 234
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <__stack+0x269>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <__stack+0x26f>
     b6e:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b70:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b72:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b74:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b76:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     b78:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     b7c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     b80:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     b84:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     b88:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     b8c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                bootloader_started_at = millis();
     b90:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     b94:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <bootloader_started_at>
     b98:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <bootloader_started_at+0x1>
     b9c:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <bootloader_started_at+0x2>
     ba0:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <bootloader_started_at+0x3>
                return;
     ba4:	3c c0       	rjmp	.+120    	; 0xc1e <__stack+0x31f>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     ba6:	67 fd       	sbrc	r22, 7
     ba8:	1e c0       	rjmp	.+60     	; 0xbe6 <__stack+0x2e7>
            {  
                lockout_active =1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lockout_active>
                bootloader_started = 0;
     bb0:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
                host_active =0;
     bb4:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>

                connect_lockout_mode();
     bb8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <connect_lockout_mode>

                lockout_started_at = millis();
     bbc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     bc0:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <lockout_started_at>
     bc4:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <lockout_started_at+0x1>
     bc8:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <lockout_started_at+0x2>
     bcc:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <lockout_started_at+0x3>
                blink_started_at = millis();
     bd0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
     bd4:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     bd8:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     bdc:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     be0:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                return;
     be4:	1c c0       	rjmp	.+56     	; 0xc1e <__stack+0x31f>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     be6:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
                lockout_active =0;
     bea:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
                host_active =0;
     bee:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
                bootloader_started = 0;
     bf2:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bf6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bf8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     bfa:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bfc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bfe:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c00:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c02:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c04:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c06:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c08:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c0a:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c0c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c0e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c10:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c12:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c14:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c16:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c18:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c1a:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c1c:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	7f 90       	pop	r7
     c38:	6f 90       	pop	r6
     c3a:	5f 90       	pop	r5
     c3c:	4f 90       	pop	r4
     c3e:	08 95       	ret

00000c40 <fnWtMgrAddr>:
    }
}

// (Obsolete) I2C command to access manager address
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
     c40:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
     c42:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
     c44:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     c48:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
     c4a:	80 ed       	ldi	r24, 0xD0	; 208
     c4c:	89 0f       	add	r24, r25
     c4e:	8b 34       	cpi	r24, 0x4B	; 75
     c50:	28 f4       	brcc	.+10     	; 0xc5c <fnWtMgrAddr+0x1c>
    {
        rpu_address = tmp_addr;
     c52:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <rpu_address>
        write_rpu_address_to_eeprom = 1;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
     c5c:	08 95       	ret

00000c5e <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c5e:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <bootloader_address>
     c62:	fc 01       	movw	r30, r24
     c64:	21 83       	std	Z+1, r18	; 0x01
     c66:	08 95       	ret

00000c68 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c68:	fc 01       	movw	r30, r24
     c6a:	81 81       	ldd	r24, Z+1	; 0x01
     c6c:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
     c70:	08 95       	ret

00000c72 <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c72:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <shutdown_detected>
     c76:	fc 01       	movw	r30, r24
     c78:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c7a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
     c7e:	08 95       	ret

00000c80 <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     c80:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     c82:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <status_byt>
     c86:	9f 70       	andi	r25, 0x0F	; 15
     c88:	91 83       	std	Z+1, r25	; 0x01
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     c8a:	83 b1       	in	r24, 0x03	; 3
    i2cBuffer[1] &= digitalRead(ALT_EN)<<4; // report if alternat power is enabled
     c8c:	11 82       	std	Z+1, r1	; 0x01
     c8e:	83 b1       	in	r24, 0x03	; 3
     c90:	08 95       	ret

00000c92 <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    if ( (i2cBuffer[1] & 0x10) ) 
     c92:	fc 01       	movw	r30, r24
     c94:	21 81       	ldd	r18, Z+1	; 0x01
     c96:	24 ff       	sbrs	r18, 4
     c98:	0b c0       	rjmp	.+22     	; 0xcb0 <fnWtStatus+0x1e>
    {
        enable_alternate_power = 1;
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <enable_alternate_power>
        alt_pwm_accum_charge_time = 0; // clear charge time
     ca0:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <alt_pwm_accum_charge_time>
     ca4:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <alt_pwm_accum_charge_time+0x1>
     ca8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <alt_pwm_accum_charge_time+0x2>
     cac:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    }
    if ( (i2cBuffer[1] & 0x20) && !shutdown_started && !shutdown_detected ) enable_sbc_power = 1;
     cb0:	fc 01       	movw	r30, r24
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	85 ff       	sbrs	r24, 5
     cb6:	0b c0       	rjmp	.+22     	; 0xcce <fnWtStatus+0x3c>
     cb8:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <shutdown_started>
     cbc:	91 11       	cpse	r25, r1
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <fnWtStatus+0x3c>
     cc0:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <shutdown_detected>
     cc4:	91 11       	cpse	r25, r1
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <fnWtStatus+0x3c>
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <enable_sbc_power>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     cd4:	08 95       	ret

00000cd6 <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     cd6:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     cda:	fc 01       	movw	r30, r24
     cdc:	21 83       	std	Z+1, r18	; 0x01
     cde:	08 95       	ret

00000ce0 <fnBatStartChrg>:

// I2C command for Battery charge start limit (uint16_t)
void fnBatStartChrg(uint8_t* i2cBuffer)
{
    // battery_low_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_low_limit>>8) & 0xFF;
     ce0:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <battery_low_limit+0x1>
    battery_low_limit = 0x00FF & battery_low_limit; // mask out the old value
    battery_low_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_low_limit; // place new value in high byte
     ce4:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <battery_low_limit+0x1>
     ce8:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <battery_low_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     cec:	fc 01       	movw	r30, r24
     cee:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_low_limit & 0xFF;
     cf0:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <battery_low_limit>
    battery_low_limit = 0xFFFFFF00 & battery_low_limit;
    battery_low_limit = ((uint32_t) (i2cBuffer[2])) & battery_low_limit;  
     cf4:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <battery_low_limit+0x1>
     cf8:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <battery_low_limit>
    i2cBuffer[2] = temp;
     cfc:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
     d04:	08 95       	ret

00000d06 <fnBatDoneChrg>:

// I2C command for Battery charge done limit (uint16_t)
void fnBatDoneChrg(uint8_t* i2cBuffer)
{
    // battery_high_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_high_limit>>8) & 0xFF;
     d06:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <battery_high_limit+0x1>
    battery_high_limit = 0x00FF & battery_high_limit; // mask out the old value
    battery_high_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_high_limit; // place new value in high byte
     d0a:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <battery_high_limit+0x1>
     d0e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <battery_high_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d12:	fc 01       	movw	r30, r24
     d14:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_high_limit & 0xFF;
     d16:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <battery_high_limit>
    battery_high_limit = 0xFFFFFF00 & battery_high_limit;
    battery_high_limit = ((uint32_t) (i2cBuffer[2])) & battery_high_limit;  
     d1a:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <battery_high_limit+0x1>
     d1e:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <battery_high_limit>
    i2cBuffer[2] = temp;
     d22:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
     d2a:	08 95       	ret

00000d2c <fnRdBatChrgTime>:
}

// I2C command to read battery charging time while doing pwm e.g., absorption time
void fnRdBatChrgTime(uint8_t* i2cBuffer)
{
     d2c:	fc 01       	movw	r30, r24
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (alt_pwm_accum_charge_time>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     d2e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <alt_pwm_accum_charge_time+0x3>
     d32:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (alt_pwm_accum_charge_time>>16) & 0xFF;
     d34:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <alt_pwm_accum_charge_time+0x2>
     d38:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (alt_pwm_accum_charge_time>>8) & 0xFF;
     d3a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <alt_pwm_accum_charge_time+0x1>
     d3e:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  alt_pwm_accum_charge_time & 0xFF; // low byte. Again Mask should optimize out
     d40:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <alt_pwm_accum_charge_time>
     d44:	84 83       	std	Z+4, r24	; 0x04
     d46:	08 95       	ret

00000d48 <fnMorningThreshold>:

// I2C command for day-night Morning Threshold (uint16_t)
void fnMorningThreshold(uint8_t* i2cBuffer)
{
    // daynight_morning_threshold is a uint16_t e.g., two bytes
    uint8_t temp = (daynight_morning_threshold>>8) & 0xFF;
     d48:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    daynight_morning_threshold = 0x00FF & daynight_morning_threshold; // mask out the old value
    daynight_morning_threshold = ((uint32_t) (i2cBuffer[1])<<8) & daynight_morning_threshold; // place new value in high byte
     d4c:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <daynight_morning_threshold+0x1>
     d50:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <daynight_morning_threshold>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d54:	fc 01       	movw	r30, r24
     d56:	21 83       	std	Z+1, r18	; 0x01

    temp = daynight_morning_threshold & 0xFF;
     d58:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    daynight_morning_threshold = 0xFFFFFF00 & daynight_morning_threshold;
    daynight_morning_threshold = ((uint32_t) (i2cBuffer[2])) & daynight_morning_threshold;  
     d5c:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <daynight_morning_threshold+0x1>
     d60:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <daynight_morning_threshold>
    i2cBuffer[2] = temp;
     d64:	22 83       	std	Z+2, r18	; 0x02
    
    daynight_values_loaded = DAYNIGHT_MORNING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     d6c:	08 95       	ret

00000d6e <fnEveningThreshold>:

// I2C command for day-night Evening Threshold (uint16_t)
void fnEveningThreshold(uint8_t* i2cBuffer)
{
    // daynight_evening_threshold is a uint16_t e.g., two bytes
    uint8_t temp = (daynight_evening_threshold>>8) & 0xFF;
     d6e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    daynight_evening_threshold = 0x00FF & daynight_evening_threshold; // mask out the old value
    daynight_evening_threshold = ((uint32_t) (i2cBuffer[1])<<8) & daynight_evening_threshold; // place new value in high byte
     d72:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <daynight_evening_threshold+0x1>
     d76:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <daynight_evening_threshold>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d7a:	fc 01       	movw	r30, r24
     d7c:	21 83       	std	Z+1, r18	; 0x01

    temp = daynight_evening_threshold & 0xFF;
     d7e:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    daynight_evening_threshold = 0xFFFFFF00 & daynight_evening_threshold;
    daynight_evening_threshold = ((uint32_t) (i2cBuffer[2])) & daynight_evening_threshold;  
     d82:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <daynight_evening_threshold+0x1>
     d86:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <daynight_evening_threshold>
    i2cBuffer[2] = temp;
     d8a:	22 83       	std	Z+2, r18	; 0x02
    
    daynight_values_loaded = DAYNIGHT_EVENING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     d92:	08 95       	ret

00000d94 <fnDayNightState>:

// I2C command to read Day-Night state
void fnDayNightState(uint8_t* i2cBuffer)
{
    // there is one byte in an uint8_t
    i2cBuffer[1] = 0; // dayState;
     d94:	fc 01       	movw	r30, r24
     d96:	11 82       	std	Z+1, r1	; 0x01
     d98:	08 95       	ret

00000d9a <fnRdTimedAccumAltI>:
    i2cBuffer[2] =  adc_buffer & 0xFF; 
}

// I2C command to read timed accumulation of analog channel ALT_I
void fnRdTimedAccumAltI(uint8_t* i2cBuffer)
{
     d9a:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_alt_ti>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     d9c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
     da0:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_alt_ti>>16) & 0xFF;
     da2:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
     da6:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_alt_ti>>8) & 0xFF;
     da8:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
     dac:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_alt_ti & 0xFF; // low byte. Again Mask should optimize out
     dae:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <accumulate_alt_ti>
     db2:	84 83       	std	Z+4, r24	; 0x04
     db4:	08 95       	ret

00000db6 <fnRdTimedAccumPwrI>:
}

// I2C command to read timed accumulation of analog channel PWR_I
void fnRdTimedAccumPwrI(uint8_t* i2cBuffer)
{
     db6:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_pwr_ti>>24) & 0xFF;
     db8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
     dbc:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_pwr_ti>>16) & 0xFF;
     dbe:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
     dc2:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_pwr_ti>>8) & 0xFF;
     dc4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
     dc8:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_pwr_ti & 0xFF;
     dca:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <accumulate_pwr_ti>
     dce:	84 83       	std	Z+4, r24	; 0x04
     dd0:	08 95       	ret

00000dd2 <fnAnalogRefExternAVCC>:
// I2C command for Analog referance EXTERNAL_AVCC
// swap the I2C buffer with the ref_extern_avcc_uV in use
// set ref_loaded so main loop will try to save it to EEPROM
// the main loop will reload EEPROM or default value if new is out of range
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_extern_avcc_uV;
     ddc:	c0 91 7e 03 	lds	r28, 0x037E	; 0x80037e <ref_extern_avcc_uV>
     de0:	d0 91 7f 03 	lds	r29, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
     de4:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
     de8:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     dec:	41 81       	ldd	r20, Z+1	; 0x01
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	34 2f       	mov	r19, r20
     df6:	22 27       	eor	r18, r18
     df8:	11 27       	eor	r17, r17
     dfa:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000 & old) >>24 ); // swap the return value with the old byte
     dfc:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     dfe:	42 81       	ldd	r20, Z+2	; 0x02
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	ba 01       	movw	r22, r20
     e08:	55 27       	eor	r21, r21
     e0a:	44 27       	eor	r20, r20
     e0c:	40 0f       	add	r20, r16
     e0e:	51 1f       	adc	r21, r17
     e10:	62 1f       	adc	r22, r18
     e12:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000 & old) >>16 ); 
     e14:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     e16:	83 81       	ldd	r24, Z+3	; 0x03
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ba 2f       	mov	r27, r26
     e20:	a9 2f       	mov	r26, r25
     e22:	98 2f       	mov	r25, r24
     e24:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00 & old) >>8 ); 
     e26:	d3 83       	std	Z+3, r29	; 0x03
     e28:	24 81       	ldd	r18, Z+4	; 0x04
     e2a:	42 0f       	add	r20, r18
     e2c:	51 1d       	adc	r21, r1
     e2e:	61 1d       	adc	r22, r1
     e30:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FF & old) ); 
     e32:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_extern_avcc_uV = new;
     e34:	84 0f       	add	r24, r20
     e36:	95 1f       	adc	r25, r21
     e38:	a6 1f       	adc	r26, r22
     e3a:	b7 1f       	adc	r27, r23
     e3c:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <ref_extern_avcc_uV>
     e40:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <ref_extern_avcc_uV+0x1>
     e44:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <ref_extern_avcc_uV+0x2>
     e48:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <ref_extern_avcc_uV+0x3>

    ref_loaded = REF_AVCC_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	08 95       	ret

00000e5c <fnAnalogRefIntern1V1>:

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_intern_1v1_uV;
     e66:	c0 91 82 03 	lds	r28, 0x0382	; 0x800382 <ref_intern_1v1_uV>
     e6a:	d0 91 83 03 	lds	r29, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
     e6e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
     e72:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     e76:	41 81       	ldd	r20, Z+1	; 0x01
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	34 2f       	mov	r19, r20
     e80:	22 27       	eor	r18, r18
     e82:	11 27       	eor	r17, r17
     e84:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000 & old) >>24 ); // swap the return value with the old byte
     e86:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     e88:	42 81       	ldd	r20, Z+2	; 0x02
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	ba 01       	movw	r22, r20
     e92:	55 27       	eor	r21, r21
     e94:	44 27       	eor	r20, r20
     e96:	40 0f       	add	r20, r16
     e98:	51 1f       	adc	r21, r17
     e9a:	62 1f       	adc	r22, r18
     e9c:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000 & old) >>16 ); 
     e9e:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a0 e0       	ldi	r26, 0x00	; 0
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ba 2f       	mov	r27, r26
     eaa:	a9 2f       	mov	r26, r25
     eac:	98 2f       	mov	r25, r24
     eae:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00 & old) >>8 ); 
     eb0:	d3 83       	std	Z+3, r29	; 0x03
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	42 0f       	add	r20, r18
     eb6:	51 1d       	adc	r21, r1
     eb8:	61 1d       	adc	r22, r1
     eba:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FF & old) ); 
     ebc:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_intern_1v1_uV = new;
     ebe:	84 0f       	add	r24, r20
     ec0:	95 1f       	adc	r25, r21
     ec2:	a6 1f       	adc	r26, r22
     ec4:	b7 1f       	adc	r27, r23
     ec6:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
     eca:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
     ece:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
     ed2:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <fnMorningDebounce>:
    }
}

// I2C command for day-night morning debounce time (unsigned long)
void fnMorningDebounce(uint8_t* i2cBuffer)
{
     ee6:	fc 01       	movw	r30, r24
    // daynight_morning_debounce is a unsigned long and has four bytes
    uint8_t temp = (daynight_morning_debounce>>24) & 0xFF;
     ee8:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    daynight_morning_debounce = 0x00FFFFFF & daynight_morning_debounce; // mask out the old high value
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[1])<<24) & daynight_morning_debounce; // place new value in high byte
     eec:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     ef0:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     ef4:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     ef8:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     efc:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (daynight_morning_debounce>>16) & 0xFF;
     efe:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    daynight_morning_debounce = 0xFF00FFFF & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[2])<<16) & daynight_morning_debounce; 
     f02:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     f06:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     f0a:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     f0e:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[2] =  temp;
     f12:	82 83       	std	Z+2, r24	; 0x02

    temp = (daynight_morning_debounce>>8) & 0xFF;
     f14:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    daynight_morning_debounce = 0xFFFF00FF & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[3])<<8) & daynight_morning_debounce; 
     f18:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     f1c:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     f20:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     f24:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[3] =  temp;
     f28:	83 83       	std	Z+3, r24	; 0x03

    temp = daynight_morning_debounce & 0xFF;
     f2a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <daynight_morning_debounce>
    daynight_morning_debounce = 0xFFFFFF00 & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[4])) & daynight_morning_debounce;  
     f2e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     f32:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     f36:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     f3a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[4] =  temp;
     f3e:	84 83       	std	Z+4, r24	; 0x04
    
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f40:	84 e0       	ldi	r24, 0x04	; 4
     f42:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     f46:	08 95       	ret

00000f48 <fnEveningDebounce>:
}

// I2C command for day-night evening debounce time (unsigned long)
void fnEveningDebounce(uint8_t* i2cBuffer)
{
     f48:	fc 01       	movw	r30, r24
    // daynight_evening_debounce is a unsigned long and has four bytes
    uint8_t temp = (daynight_evening_debounce>>24) & 0xFF;
     f4a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    daynight_evening_debounce = 0x00FFFFFF & daynight_evening_debounce; // mask out the old high value
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[1])<<24) & daynight_evening_debounce; // place new value in high byte
     f4e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f52:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f56:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f5a:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     f5e:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (daynight_evening_debounce>>16) & 0xFF;
     f60:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    daynight_evening_debounce = 0xFF00FFFF & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[2])<<16) & daynight_evening_debounce; 
     f64:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f68:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f6c:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f70:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[2] =  temp;
     f74:	82 83       	std	Z+2, r24	; 0x02

    temp = (daynight_evening_debounce>>8) & 0xFF;
     f76:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    daynight_evening_debounce = 0xFFFF00FF & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[3])<<8) & daynight_evening_debounce; 
     f7a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f7e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f82:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f86:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[3] =  temp;
     f8a:	83 83       	std	Z+3, r24	; 0x03

    temp = daynight_evening_debounce & 0xFF;
     f8c:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <daynight_evening_debounce>
    daynight_evening_debounce = 0xFFFFFF00 & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[4])) & daynight_evening_debounce;  
     f90:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f94:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f98:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f9c:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[4] =  temp;
     fa0:	84 83       	std	Z+4, r24	; 0x04
    
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     fa8:	08 95       	ret

00000faa <fnNull>:
    i2cBuffer[4] =  now & 0xFF; // low byte. Again Mask should optimize out
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     faa:	08 95       	ret

00000fac <fnMillis>:
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
}

// I2C command to read millis time
void fnMillis(uint8_t* i2cBuffer)
{
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	ec 01       	movw	r28, r24
    unsigned long now = millis();
     fb2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (now>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     fb6:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  (now>>16) & 0xFF;
     fb8:	8a 83       	std	Y+2, r24	; 0x02
    i2cBuffer[3] =  (now>>8) & 0xFF;
     fba:	7b 83       	std	Y+3, r23	; 0x03
    i2cBuffer[4] =  now & 0xFF; // low byte. Again Mask should optimize out
     fbc:	6c 83       	std	Y+4, r22	; 0x04
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <fnRdAdcAltI>:
/********* POWER MANAGER ***********
  *  for ALT_I, ALT_V, PWR_I, PWR_V reading     */

// I2C command to read analog channel 0
void fnRdAdcAltI(uint8_t* i2cBuffer)
{
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_I);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     fd0:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; // low byte. Again Mask should optimize out
     fd2:	8a 83       	std	Y+2, r24	; 0x02
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <fnRdAdcAltV>:

// I2C command to read analog channel 1
void fnRdAdcAltV(uint8_t* i2cBuffer)
{
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_V);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     fe6:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
     fe8:	8a 83       	std	Y+2, r24	; 0x02
}
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <fnRdAdcPwrI>:

// I2C command to read analog channel 6
void fnRdAdcPwrI(uint8_t* i2cBuffer)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_I);
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     ffc:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
     ffe:	8a 83       	std	Y+2, r24	; 0x02
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <fnRdAdcPwrV>:

// I2C command to read analog channel 7
void fnRdAdcPwrV(uint8_t* i2cBuffer)
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_V);
    100c:	87 e0       	ldi	r24, 0x07	; 7
    100e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    1012:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; 
    1014:	8a 83       	std	Y+2, r24	; 0x02
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    if (test_mode)
    1036:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <test_mode>
    103a:	ee 23       	and	r30, r30
    103c:	09 f4       	brne	.+2      	; 0x1040 <fnRdXcvrCntlInTestMode+0x24>
    103e:	55 c0       	rjmp	.+170    	; 0x10ea <fnRdXcvrCntlInTestMode+0xce>
    1040:	e9 b1       	in	r30, 0x09	; 9
    1042:	b9 b1       	in	r27, 0x09	; 9
    1044:	f6 b1       	in	r31, 0x06	; 6
    1046:	79 b0       	in	r7, 0x09	; 9
    1048:	a9 b0       	in	r10, 0x09	; 9
    104a:	09 b1       	in	r16, 0x09	; 9
    104c:	b9 b0       	in	r11, 0x09	; 9
    104e:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	00 0f       	add	r16, r16
    1054:	01 2f       	mov	r16, r17
    1056:	00 1f       	adc	r16, r16
    1058:	11 0b       	sbc	r17, r17
    105a:	00 0f       	add	r16, r16
    105c:	11 1f       	adc	r17, r17
    105e:	00 0f       	add	r16, r16
    1060:	11 1f       	adc	r17, r17
    1062:	c3 fb       	bst	r28, 3
    1064:	cc 27       	eor	r28, r28
    1066:	c0 f9       	bld	r28, 0
    1068:	ac 2f       	mov	r26, r28
    106a:	a0 2b       	or	r26, r16
    106c:	e3 fb       	bst	r30, 3
    106e:	88 24       	eor	r8, r8
    1070:	80 f8       	bld	r8, 0
    1072:	91 2c       	mov	r9, r1
    1074:	e4 01       	movw	r28, r8
    1076:	d6 95       	lsr	r29
    1078:	dc 2f       	mov	r29, r28
    107a:	cc 27       	eor	r28, r28
    107c:	d7 95       	ror	r29
    107e:	c7 95       	ror	r28
    1080:	ca 2b       	or	r28, r26
    1082:	b2 fb       	bst	r27, 2
    1084:	cc 24       	eor	r12, r12
    1086:	c0 f8       	bld	r12, 0
    1088:	d1 2c       	mov	r13, r1
    108a:	d6 01       	movw	r26, r12
    108c:	56 e0       	ldi	r21, 0x06	; 6
    108e:	aa 0f       	add	r26, r26
    1090:	bb 1f       	adc	r27, r27
    1092:	5a 95       	dec	r21
    1094:	e1 f7       	brne	.-8      	; 0x108e <fnRdXcvrCntlInTestMode+0x72>
    1096:	ac 2b       	or	r26, r28
    1098:	f2 fb       	bst	r31, 2
    109a:	ee 24       	eor	r14, r14
    109c:	e0 f8       	bld	r14, 0
    109e:	f1 2c       	mov	r15, r1
    10a0:	f7 01       	movw	r30, r14
    10a2:	65 e0       	ldi	r22, 0x05	; 5
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	6a 95       	dec	r22
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <fnRdXcvrCntlInTestMode+0x88>
    10ac:	ea 2b       	or	r30, r26
    10ae:	75 fa       	bst	r7, 5
    10b0:	66 27       	eor	r22, r22
    10b2:	60 f9       	bld	r22, 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	f4 e0       	ldi	r31, 0x04	; 4
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	fa 95       	dec	r31
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <fnRdXcvrCntlInTestMode+0x9c>
    10c0:	6e 2b       	or	r22, r30
    10c2:	a6 fa       	bst	r10, 6
    10c4:	44 27       	eor	r20, r20
    10c6:	40 f9       	bld	r20, 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	a3 e0       	ldi	r26, 0x03	; 3
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	aa 95       	dec	r26
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <fnRdXcvrCntlInTestMode+0xb0>
    10d4:	46 2b       	or	r20, r22
    10d6:	b4 fa       	bst	r11, 4
    10d8:	22 27       	eor	r18, r18
    10da:	20 f9       	bld	r18, 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	24 2b       	or	r18, r20
    10e4:	fc 01       	movw	r30, r24
    10e6:	21 83       	std	Z+1, r18	; 0x01
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    10ea:	fc 01       	movw	r30, r24
    10ec:	11 82       	std	Z+1, r1	; 0x01
    }
}
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	7f 90       	pop	r7
    1108:	08 95       	ret

0000110a <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	fc 01       	movw	r30, r24
    if (test_mode)
    1110:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1114:	88 23       	and	r24, r24
    1116:	09 f4       	brne	.+2      	; 0x111a <fnWtXcvrCntlInTestMode+0x10>
    1118:	6e c0       	rjmp	.+220    	; 0x11f6 <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    111a:	81 81       	ldd	r24, Z+1	; 0x01
    111c:	88 1f       	adc	r24, r24
    111e:	88 27       	eor	r24, r24
    1120:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1122:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1124:	f8 94       	cli
    {
        if (value_for_bit) 
    1126:	88 23       	and	r24, r24
    1128:	11 f0       	breq	.+4      	; 0x112e <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    112a:	5b 9a       	sbi	0x0b, 3	; 11
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    112e:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1130:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	86 fb       	bst	r24, 6
    1136:	88 27       	eor	r24, r24
    1138:	80 f9       	bld	r24, 0
    113a:	c8 2f       	mov	r28, r24
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1142:	f8 94       	cli
    {
        if (value_for_bit) 
    1144:	cd 2b       	or	r28, r29
    1146:	11 f0       	breq	.+4      	; 0x114c <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    1148:	5a 9a       	sbi	0x0b, 2	; 11
    114a:	01 c0       	rjmp	.+2      	; 0x114e <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    114c:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    114e:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    1150:	81 81       	ldd	r24, Z+1	; 0x01
    1152:	85 fb       	bst	r24, 5
    1154:	aa 27       	eor	r26, r26
    1156:	a0 f9       	bld	r26, 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    115a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    115c:	f8 94       	cli
    {
        if (value_for_bit) 
    115e:	ab 2b       	or	r26, r27
    1160:	11 f0       	breq	.+4      	; 0x1166 <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    1162:	42 9a       	sbi	0x08, 2	; 8
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1166:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1168:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    116a:	81 81       	ldd	r24, Z+1	; 0x01
    116c:	84 fb       	bst	r24, 4
    116e:	66 27       	eor	r22, r22
    1170:	60 f9       	bld	r22, 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1174:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1176:	f8 94       	cli
    {
        if (value_for_bit) 
    1178:	67 2b       	or	r22, r23
    117a:	11 f0       	breq	.+4      	; 0x1180 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    117c:	5d 9a       	sbi	0x0b, 5	; 11
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1180:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1182:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	83 fb       	bst	r24, 3
    1188:	44 27       	eor	r20, r20
    118a:	40 f9       	bld	r20, 0
    118c:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    118e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1190:	f8 94       	cli
    {
        if (value_for_bit) 
    1192:	45 2b       	or	r20, r21
    1194:	11 f0       	breq	.+4      	; 0x119a <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    1196:	5e 9a       	sbi	0x0b, 6	; 11
    1198:	01 c0       	rjmp	.+2      	; 0x119c <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    119a:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    119c:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    119e:	81 81       	ldd	r24, Z+1	; 0x01
    11a0:	82 ff       	sbrs	r24, 2
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    11a4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11a8:	87 7e       	andi	r24, 0xE7	; 231
    11aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11ae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11b0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    11b2:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11b4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11b6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11b8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11ba:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11bc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11be:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11c0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    11c2:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11c4:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    11c6:	81 81       	ldd	r24, Z+1	; 0x01
    11c8:	81 fb       	bst	r24, 1
    11ca:	22 27       	eor	r18, r18
    11cc:	20 f9       	bld	r18, 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11d0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11d2:	f8 94       	cli
    {
        if (value_for_bit) 
    11d4:	23 2b       	or	r18, r19
    11d6:	11 f0       	breq	.+4      	; 0x11dc <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    11d8:	5c 9a       	sbi	0x0b, 4	; 11
    11da:	01 c0       	rjmp	.+2      	; 0x11de <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11dc:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11de:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11e6:	f8 94       	cli
    {
        if (value_for_bit) 
    11e8:	88 23       	and	r24, r24
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    11ec:	43 9a       	sbi	0x08, 3	; 8
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11f0:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11f2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    11f6:	11 82       	std	Z+1, r1	; 0x01
    }
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    11fe:	fc 01       	movw	r30, r24
    1200:	81 81       	ldd	r24, Z+1	; 0x01
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	f1 f4       	brne	.+60     	; 0x1242 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1206:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1208:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    120a:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    120c:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    120e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1210:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1212:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1214:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1216:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1218:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    121a:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    121c:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    121e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1220:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1222:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1224:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    1226:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    122a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
        shutdown_started_at = millis();
    122e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1232:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
    1236:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
    123a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
    123e:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
    1242:	08 95       	ret

00001244 <fnRdMgrAddr>:
  *    all managers lockout serial except the address to bootload and the host */

// I2C command to access manager address and set RPU_NORMAL_MODE
// if given a valid address (ASCII 48..122) it will save that rather than setting normal mode.
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
    1244:	cf 93       	push	r28
    1246:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
    124a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
    124e:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
    1250:	80 ed       	ldi	r24, 0xD0	; 208
    1252:	89 0f       	add	r24, r25
    1254:	8b 34       	cpi	r24, 0x4B	; 75
    1256:	30 f4       	brcc	.+12     	; 0x1264 <fnRdMgrAddr+0x20>
    {
        rpu_address = tmp_addr;
    1258:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <rpu_address>
        write_rpu_address_to_eeprom = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
        return;
    1262:	9d c0       	rjmp	.+314    	; 0x139e <fnRdMgrAddr+0x15a>
    }
    local_mcu_is_rpu_aware =1; 
    1264:	c1 e0       	ldi	r28, 0x01	; 1
    1266:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <local_mcu_is_rpu_aware>
    // end the local mcu lockout. 
    if (localhost_active) 
    126a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
    126e:	88 23       	and	r24, r24
    1270:	b1 f1       	breq	.+108    	; 0x12de <fnRdMgrAddr+0x9a>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
    1272:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1276:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    127a:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    127e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1282:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
    1286:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    128a:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    128e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1292:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	20 95       	com	r18
    129a:	30 95       	com	r19
    129c:	2a 70       	andi	r18, 0x0A	; 10
    129e:	33 27       	eor	r19, r19
    12a0:	64 e0       	ldi	r22, 0x04	; 4
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	6a 95       	dec	r22
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <fnRdMgrAddr+0x5e>
    12aa:	89 2f       	mov	r24, r25
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	80 95       	com	r24
    12b0:	90 95       	com	r25
    12b2:	80 75       	andi	r24, 0x50	; 80
    12b4:	99 27       	eor	r25, r25
    12b6:	74 e0       	ldi	r23, 0x04	; 4
    12b8:	95 95       	asr	r25
    12ba:	87 95       	ror	r24
    12bc:	7a 95       	dec	r23
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <fnRdMgrAddr+0x74>
    12c0:	82 2b       	or	r24, r18
    12c2:	93 2b       	or	r25, r19
    12c4:	9f 93       	push	r25
    12c6:	8f 93       	push	r24
    12c8:	1f 92       	push	r1
    12ca:	4f 93       	push	r20
    12cc:	86 e1       	ldi	r24, 0x16	; 22
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	9f 93       	push	r25
    12d2:	8f 93       	push	r24
    12d4:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
    12d8:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
    12dc:	39 c0       	rjmp	.+114    	; 0x1350 <fnRdMgrAddr+0x10c>
    }
    else 
        if (bootloader_started)
    12de:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
    12e2:	88 23       	and	r24, r24
    12e4:	e1 f1       	breq	.+120    	; 0x135e <fnRdMgrAddr+0x11a>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
    12e6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    12ea:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    12ee:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    12f2:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    12f6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
    12fa:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    12fe:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1302:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1306:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	20 95       	com	r18
    130e:	30 95       	com	r19
    1310:	2a 70       	andi	r18, 0x0A	; 10
    1312:	33 27       	eor	r19, r19
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	8a 95       	dec	r24
    131c:	e1 f7       	brne	.-8      	; 0x1316 <fnRdMgrAddr+0xd2>
    131e:	89 2f       	mov	r24, r25
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	80 95       	com	r24
    1324:	90 95       	com	r25
    1326:	80 75       	andi	r24, 0x50	; 80
    1328:	99 27       	eor	r25, r25
    132a:	54 e0       	ldi	r21, 0x04	; 4
    132c:	95 95       	asr	r25
    132e:	87 95       	ror	r24
    1330:	5a 95       	dec	r21
    1332:	e1 f7       	brne	.-8      	; 0x132c <fnRdMgrAddr+0xe8>
    1334:	82 2b       	or	r24, r18
    1336:	93 2b       	or	r25, r19
    1338:	9f 93       	push	r25
    133a:	8f 93       	push	r24
    133c:	1f 92       	push	r1
    133e:	4f 93       	push	r20
    1340:	86 e1       	ldi	r24, 0x16	; 22
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	9f 93       	push	r25
    1346:	8f 93       	push	r24
    1348:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
    134c:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	20 c0       	rjmp	.+64     	; 0x139e <fnRdMgrAddr+0x15a>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
    135e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	80 5c       	subi	r24, 0xC0	; 192
    1368:	94 4d       	sbci	r25, 0xD4	; 212
    136a:	a1 40       	sbci	r26, 0x01	; 1
    136c:	b1 09       	sbc	r27, r1
    136e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
    1372:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
    1376:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
    137a:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
    137e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	88 53       	subi	r24, 0x38	; 56
    1388:	91 4c       	sbci	r25, 0xC1	; 193
    138a:	a1 40       	sbci	r26, 0x01	; 1
    138c:	b1 09       	sbc	r27, r1
    138e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
    1392:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
    1396:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
    139a:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
        }
        
}
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    13a2:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    13a4:	fc 01       	movw	r30, r24
    13a6:	c1 81       	ldd	r28, Z+1	; 0x01
    13a8:	c1 30       	cpi	r28, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <fnWtArduinMode+0xc>
    13ac:	45 c0       	rjmp	.+138    	; 0x1438 <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    13ae:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode_started>
    13b2:	21 11       	cpse	r18, r1
    13b4:	41 c0       	rjmp	.+130    	; 0x1438 <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    13b6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    13ba:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    13be:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    13c2:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    13c6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    13d0:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    13d4:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    13d8:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	20 95       	com	r18
    13e0:	30 95       	com	r19
    13e2:	2a 70       	andi	r18, 0x0A	; 10
    13e4:	33 27       	eor	r19, r19
    13e6:	84 e0       	ldi	r24, 0x04	; 4
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	8a 95       	dec	r24
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <fnWtArduinMode+0x46>
    13f0:	89 2f       	mov	r24, r25
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	80 95       	com	r24
    13f6:	90 95       	com	r25
    13f8:	80 75       	andi	r24, 0x50	; 80
    13fa:	99 27       	eor	r25, r25
    13fc:	54 e0       	ldi	r21, 0x04	; 4
    13fe:	95 95       	asr	r25
    1400:	87 95       	ror	r24
    1402:	5a 95       	dec	r21
    1404:	e1 f7       	brne	.-8      	; 0x13fe <fnWtArduinMode+0x5c>
    1406:	82 2b       	or	r24, r18
    1408:	93 2b       	or	r25, r19
    140a:	9f 93       	push	r25
    140c:	8f 93       	push	r24
    140e:	1f 92       	push	r1
    1410:	4f 93       	push	r20
    1412:	86 e1       	ldi	r24, 0x16	; 22
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	9f 93       	push	r25
    1418:	8f 93       	push	r24
    141a:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    141e:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    1422:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    1426:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    1438:	fc 01       	movw	r30, r24
    143a:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    1440:	cf 93       	push	r28
    1442:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    1444:	c1 81       	ldd	r28, Z+1	; 0x01
    1446:	c1 30       	cpi	r28, 0x01	; 1
    1448:	09 f0       	breq	.+2      	; 0x144c <fnStartTestMode+0xc>
    144a:	48 c0       	rjmp	.+144    	; 0x14dc <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    144c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    1450:	81 11       	cpse	r24, r1
    1452:	42 c0       	rjmp	.+132    	; 0x14d8 <fnStartTestMode+0x98>
    1454:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1458:	81 11       	cpse	r24, r1
    145a:	3e c0       	rjmp	.+124    	; 0x14d8 <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    145c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1460:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1464:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1468:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    146c:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1470:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1474:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1478:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    147c:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	20 95       	com	r18
    1484:	30 95       	com	r19
    1486:	2a 70       	andi	r18, 0x0A	; 10
    1488:	33 27       	eor	r19, r19
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	8a 95       	dec	r24
    1492:	e1 f7       	brne	.-8      	; 0x148c <fnStartTestMode+0x4c>
    1494:	89 2f       	mov	r24, r25
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	80 95       	com	r24
    149a:	90 95       	com	r25
    149c:	80 75       	andi	r24, 0x50	; 80
    149e:	99 27       	eor	r25, r25
    14a0:	54 e0       	ldi	r21, 0x04	; 4
    14a2:	95 95       	asr	r25
    14a4:	87 95       	ror	r24
    14a6:	5a 95       	dec	r21
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <fnStartTestMode+0x62>
    14aa:	82 2b       	or	r24, r18
    14ac:	93 2b       	or	r25, r19
    14ae:	9f 93       	push	r25
    14b0:	8f 93       	push	r24
    14b2:	1f 92       	push	r1
    14b4:	4f 93       	push	r20
    14b6:	86 e1       	ldi	r24, 0x16	; 22
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    14c2:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    14c6:	c0 93 ed 02 	sts	0x02ED, r28	; 0x8002ed <test_mode_started>
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	01 c0       	rjmp	.+2      	; 0x14de <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	81 83       	std	Z+1, r24	; 0x01
    }
}
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    14ec:	19 81       	ldd	r17, Y+1	; 0x01
    14ee:	11 30       	cpi	r17, 0x01	; 1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <fnEndTestMode+0x10>
    14f2:	61 c0       	rjmp	.+194    	; 0x15b6 <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    14f4:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    14f8:	81 11       	cpse	r24, r1
    14fa:	5d c0       	rjmp	.+186    	; 0x15b6 <fnEndTestMode+0xd2>
    14fc:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <fnEndTestMode+0x22>
    1504:	58 c0       	rjmp	.+176    	; 0x15b6 <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1506:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1508:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    150a:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    150c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    150e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1510:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1512:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1514:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    1516:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    151a:	88 61       	ori	r24, 0x18	; 24
    151c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1520:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1522:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1524:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1526:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1528:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    152a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    152c:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    152e:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    1530:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1534:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1538:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    153c:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1540:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    1544:	8e ef       	ldi	r24, 0xFE	; 254
    1546:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    154a:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    154e:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
    1552:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	20 95       	com	r18
    155a:	30 95       	com	r19
    155c:	2a 70       	andi	r18, 0x0A	; 10
    155e:	33 27       	eor	r19, r19
    1560:	a9 01       	movw	r20, r18
    1562:	24 e0       	ldi	r18, 0x04	; 4
    1564:	44 0f       	add	r20, r20
    1566:	55 1f       	adc	r21, r21
    1568:	2a 95       	dec	r18
    156a:	e1 f7       	brne	.-8      	; 0x1564 <fnEndTestMode+0x80>
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	20 95       	com	r18
    1572:	30 95       	com	r19
    1574:	20 75       	andi	r18, 0x50	; 80
    1576:	33 27       	eor	r19, r19
    1578:	64 e0       	ldi	r22, 0x04	; 4
    157a:	35 95       	asr	r19
    157c:	27 95       	ror	r18
    157e:	6a 95       	dec	r22
    1580:	e1 f7       	brne	.-8      	; 0x157a <fnEndTestMode+0x96>
    1582:	24 2b       	or	r18, r20
    1584:	35 2b       	or	r19, r21
    1586:	3f 93       	push	r19
    1588:	2f 93       	push	r18
    158a:	1f 92       	push	r1
    158c:	9f 93       	push	r25
    158e:	86 e1       	ldi	r24, 0x16	; 22
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	9f 93       	push	r25
    1594:	8f 93       	push	r24
    1596:	0e 94 12 18 	call	0x3024	; 0x3024 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    159a:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    159e:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    15a2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    15b6:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	08 95       	ret

000015c0 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    15c0:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	29 2f       	mov	r18, r25
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	26 17       	cp	r18, r22
    15ca:	37 07       	cpc	r19, r23
    15cc:	54 f4       	brge	.+20     	; 0x15e2 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    15ce:	fa 01       	movw	r30, r20
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	80 81       	ld	r24, Z
    15d6:	f9 01       	movw	r30, r18
    15d8:	e3 5f       	subi	r30, 0xF3	; 243
    15da:	fc 4f       	sbci	r31, 0xFC	; 252
    15dc:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    15de:	9f 5f       	subi	r25, 0xFF	; 255
    15e0:	f1 cf       	rjmp	.-30     	; 0x15c4 <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    15e2:	90 32       	cpi	r25, 0x20	; 32
    15e4:	20 f4       	brcc	.+8      	; 0x15ee <receive_i2c_event+0x2e>
    15e6:	f9 01       	movw	r30, r18
    15e8:	e3 5f       	subi	r30, 0xF3	; 243
    15ea:	fc 4f       	sbci	r31, 0xFC	; 252
    15ec:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    15ee:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    15f2:	62 30       	cpi	r22, 0x02	; 2
    15f4:	10 f4       	brcc	.+4      	; 0x15fa <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    15fa:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <i2c0Buffer>
    15fe:	e8 2f       	mov	r30, r24
    1600:	e2 95       	swap	r30
    1602:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    1604:	e4 30       	cpi	r30, 0x04	; 4
    1606:	10 f0       	brcs	.+4      	; 0x160c <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    1608:	8e ef       	ldi	r24, 0xFE	; 254
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    160c:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    160e:	88 30       	cpi	r24, 0x08	; 8
    1610:	20 f0       	brcs	.+8      	; 0x161a <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    1612:	8d ef       	ldi	r24, 0xFD	; 253
    1614:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    1618:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    161a:	98 e0       	ldi	r25, 0x08	; 8
    161c:	e9 9f       	mul	r30, r25
    161e:	f0 01       	movw	r30, r0
    1620:	11 24       	eor	r1, r1
    1622:	e8 0f       	add	r30, r24
    1624:	f1 1d       	adc	r31, r1
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	e5 5e       	subi	r30, 0xE5	; 229
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	01 90       	ld	r0, Z+
    1630:	f0 81       	ld	r31, Z
    1632:	e0 2d       	mov	r30, r0
    1634:	8d e0       	ldi	r24, 0x0D	; 13
    1636:	93 e0       	ldi	r25, 0x03	; 3
    1638:	09 94       	ijmp

0000163a <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    163a:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    163e:	8d e0       	ldi	r24, 0x0D	; 13
    1640:	93 e0       	ldi	r25, 0x03	; 3
    1642:	0e 94 5d 14 	call	0x28ba	; 0x28ba <twi0_transmit>
    if (return_code != 0)
    1646:	88 23       	and	r24, r24
    1648:	29 f0       	breq	.+10     	; 0x1654 <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    164a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
    164e:	82 70       	andi	r24, 0x02	; 2
    1650:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
    1654:	08 95       	ret

00001656 <fnRdMgrAddrQuietly>:
    1656:	0c 94 20 06 	jmp	0xc40	; 0xc40 <fnWtMgrAddr>

0000165a <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    165a:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <inBytes_to_handle+0x1>
    165e:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    1662:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1666:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <smbus_has_numBytes_to_handle>
    166a:	08 95       	ret

0000166c <handle_smbus_receive>:

// twi1.c has been modified, so it has an interleaved buffer that allows  
// the event to put a copy of the pointer where I can use it outside the ISR.
void handle_smbus_receive(void)
{
    if (smbus_has_numBytes_to_handle)
    166c:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
    1670:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1674:	21 15       	cp	r18, r1
    1676:	31 05       	cpc	r19, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <handle_smbus_receive+0x10>
    167a:	6b c0       	rjmp	.+214    	; 0x1752 <handle_smbus_receive+0xe6>
            {fnRdAdcAltI, fnRdAdcAltV, fnRdAdcPwrI, fnRdAdcPwrV, fnRdTimedAccumAltI, fnRdTimedAccumPwrI, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
            {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
        };

        int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
        smbus_has_numBytes_to_handle = 0; 
    167c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1680:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    1684:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <inBytes_to_handle>
    1688:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <inBytes_to_handle+0x1>
        // read_i2c_block_data has a single command byte in its data set
        // it will write i2c address, the command* byte, and then cause a repeated start
        // followed by the i2c address (again) and then reading** the data
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
    168c:	21 30       	cpi	r18, 0x01	; 1
    168e:	31 05       	cpc	r19, r1
    1690:	11 f0       	breq	.+4      	; 0x1696 <handle_smbus_receive+0x2a>
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	23 c0       	rjmp	.+70     	; 0x16dc <handle_smbus_receive+0x70>
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    1696:	90 81       	ld	r25, Z
    1698:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    169c:	98 13       	cpse	r25, r24
    169e:	59 c0       	rjmp	.+178    	; 0x1752 <handle_smbus_receive+0xe6>
    16a0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    16a4:	81 11       	cpse	r24, r1
    16a6:	55 c0       	rjmp	.+170    	; 0x1752 <handle_smbus_receive+0xe6>
            {
                for(i = 0; i < smbusBufferLength; ++i)
    16a8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    16ac:	ad e2       	ldi	r26, 0x2D	; 45
    16ae:	b3 e0       	ldi	r27, 0x03	; 3
    16b0:	e1 e5       	ldi	r30, 0x51	; 81
    16b2:	f3 e0       	ldi	r31, 0x03	; 3
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	98 17       	cp	r25, r24
    16b8:	21 f0       	breq	.+8      	; 0x16c2 <handle_smbus_receive+0x56>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
    16ba:	2d 91       	ld	r18, X+
    16bc:	21 93       	st	Z+, r18
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
            {
                for(i = 0; i < smbusBufferLength; ++i)
    16be:	9f 5f       	subi	r25, 0xFF	; 255
    16c0:	fa cf       	rjmp	.-12     	; 0x16b6 <handle_smbus_receive+0x4a>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
                }
                if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    16c2:	80 32       	cpi	r24, 0x20	; 32
    16c4:	28 f4       	brcc	.+10     	; 0x16d0 <handle_smbus_receive+0x64>
    16c6:	e8 2f       	mov	r30, r24
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	ef 5a       	subi	r30, 0xAF	; 175
    16cc:	fc 4f       	sbci	r31, 0xFC	; 252
    16ce:	11 82       	std	Z+1, r1	; 0x01
                smbus_oldBufferLength = smbusBufferLength;
    16d0:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
                transmit_data_ready = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    16da:	08 95       	ret
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    16dc:	84 2f       	mov	r24, r20
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	82 17       	cp	r24, r18
    16e2:	93 07       	cpc	r25, r19
    16e4:	54 f4       	brge	.+20     	; 0x16fa <handle_smbus_receive+0x8e>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    16e6:	df 01       	movw	r26, r30
    16e8:	a8 0f       	add	r26, r24
    16ea:	b9 1f       	adc	r27, r25
    16ec:	5c 91       	ld	r21, X
    16ee:	dc 01       	movw	r26, r24
    16f0:	a3 5d       	subi	r26, 0xD3	; 211
    16f2:	bc 4f       	sbci	r27, 0xFC	; 252
    16f4:	5c 93       	st	X, r21
                smbus_oldBufferLength = smbusBufferLength;
                transmit_data_ready = 1;
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    16f6:	4f 5f       	subi	r20, 0xFF	; 255
    16f8:	f1 cf       	rjmp	.-30     	; 0x16dc <handle_smbus_receive+0x70>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
        }
        if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    16fa:	40 32       	cpi	r20, 0x20	; 32
    16fc:	20 f4       	brcc	.+8      	; 0x1706 <handle_smbus_receive+0x9a>
    16fe:	fc 01       	movw	r30, r24
    1700:	e3 5d       	subi	r30, 0xD3	; 211
    1702:	fc 4f       	sbci	r31, 0xFC	; 252
    1704:	11 82       	std	Z+1, r1	; 0x01
        smbusBufferLength = numBytes;
    1706:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

        // an read_i2c_block_data has a command byte 
        if( !(smbusBufferLength > 0) ) 
    170a:	21 11       	cpse	r18, r1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <handle_smbus_receive+0xa6>
        {
            smbusBuffer[0] = 0xFF; // error code for small size.
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	0d c0       	rjmp	.+26     	; 0x172c <handle_smbus_receive+0xc0>
            return; // not valid, do nothing just echo an error code.
        }

        // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
        uint8_t group;
        group = (smbusBuffer[0] & 0xF0) >> 4;
    1712:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    1716:	e8 2f       	mov	r30, r24
    1718:	e2 95       	swap	r30
    171a:	ef 70       	andi	r30, 0x0F	; 15
        if(group >= GROUP) 
    171c:	e4 30       	cpi	r30, 0x04	; 4
    171e:	10 f0       	brcs	.+4      	; 0x1724 <handle_smbus_receive+0xb8>
        {
            smbusBuffer[0] = 0xFE; // error code for bad group.
    1720:	8e ef       	ldi	r24, 0xFE	; 254
    1722:	04 c0       	rjmp	.+8      	; 0x172c <handle_smbus_receive+0xc0>
            return; 
        }

        // mask the command bits (0..3) so they can be used as an index.
        uint8_t command;
        command = smbusBuffer[0] & 0x0F;
    1724:	8f 70       	andi	r24, 0x0F	; 15
        if(command >= MGR_CMDS) 
    1726:	88 30       	cpi	r24, 0x08	; 8
    1728:	20 f0       	brcs	.+8      	; 0x1732 <handle_smbus_receive+0xc6>
        {
            smbusBuffer[0] = 0xFD; // error code for bad command.
    172a:	8d ef       	ldi	r24, 0xFD	; 253
    172c:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <smbusBuffer>
            return; // not valid, do nothing but echo error code.
    1730:	08 95       	ret
        }

        // Call the i2c command function and return
        (* pf[group][command])(smbusBuffer);
    1732:	98 e0       	ldi	r25, 0x08	; 8
    1734:	e9 9f       	mul	r30, r25
    1736:	f0 01       	movw	r30, r0
    1738:	11 24       	eor	r1, r1
    173a:	e8 0f       	add	r30, r24
    173c:	f1 1d       	adc	r31, r1
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	e5 5a       	subi	r30, 0xA5	; 165
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	01 90       	ld	r0, Z+
    1748:	f0 81       	ld	r31, Z
    174a:	e0 2d       	mov	r30, r0
    174c:	8d e2       	ldi	r24, 0x2D	; 45
    174e:	93 e0       	ldi	r25, 0x03	; 3
    1750:	09 94       	ijmp
    1752:	08 95       	ret

00001754 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    1754:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    1758:	81 e5       	ldi	r24, 0x51	; 81
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <twi1_transmit>
    transmit_data_ready = 0;
    1760:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    1764:	08 95       	ret

00001766 <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    1766:	cf 93       	push	r28
    if (write_rpu_address_to_eeprom && eeprom_is_ready())
    1768:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    176c:	88 23       	and	r24, r24
    176e:	21 f1       	breq	.+72     	; 0x17b8 <save_rpu_addr_state+0x52>
    1770:	f9 99       	sbic	0x1f, 1	; 31
    1772:	22 c0       	rjmp	.+68     	; 0x17b8 <save_rpu_addr_state+0x52>
    {
        // up to first EE_RPU_IDMAX locations may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    1774:	9f ef       	ldi	r25, 0xFF	; 255
    1776:	98 0f       	add	r25, r24
    1778:	9a 30       	cpi	r25, 0x0A	; 10
    177a:	90 f4       	brcc	.+36     	; 0x17a0 <save_rpu_addr_state+0x3a>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	fc 01       	movw	r30, r24
    1780:	ed 54       	subi	r30, 0x4D	; 77
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    1786:	6c 2f       	mov	r22, r28
    1788:	87 96       	adiw	r24, 0x27	; 39
    178a:	0e 94 cd 1a 	call	0x359a	; 0x359a <eeprom_write_byte>
            
            if (value == '\0') 
    178e:	c1 11       	cpse	r28, r1
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <save_rpu_addr_state+0x30>
            {
                write_rpu_address_to_eeprom = 11;
    1792:	8b e0       	ldi	r24, 0x0B	; 11
    1794:	03 c0       	rjmp	.+6      	; 0x179c <save_rpu_addr_state+0x36>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    1796:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    17a0:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    17a4:	8b 30       	cpi	r24, 0x0B	; 11
    17a6:	41 f4       	brne	.+16     	; 0x17b8 <save_rpu_addr_state+0x52>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    17a8:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <rpu_address>
    17ac:	82 e3       	ldi	r24, 0x32	; 50
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 cd 1a 	call	0x359a	; 0x359a <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    17b4:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
        }
    }
}
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	c8 e2       	ldi	r28, 0x28	; 40
    17c4:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    17c6:	fe 01       	movw	r30, r28
    17c8:	e4 57       	subi	r30, 0x74	; 116
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    17ce:	ce 01       	movw	r24, r28
    17d0:	0e 94 b9 1a 	call	0x3572	; 0x3572 <eeprom_read_byte>
        if (id != ee_id) 
    17d4:	18 13       	cpse	r17, r24
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    17d8:	11 23       	and	r17, r17
    17da:	31 f0       	breq	.+12     	; 0x17e8 <check_for_eeprom_id+0x2c>
    17dc:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    17de:	c2 33       	cpi	r28, 0x32	; 50
    17e0:	d1 05       	cpc	r29, r1
    17e2:	89 f7       	brne	.-30     	; 0x17c6 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	08 95       	ret

000017f2 <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    17f6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    17fa:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <adc_started_at>
    17fe:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <adc_started_at+0x1>
    1802:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <adc_started_at+0x2>
    1806:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <adc_started_at+0x3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	80 1b       	sub	r24, r16
    1810:	91 0b       	sbc	r25, r17
    1812:	a2 0b       	sbc	r26, r18
    1814:	b3 0b       	sbc	r27, r19
    1816:	0b 97       	sbiw	r24, 0x0b	; 11
    1818:	a1 05       	cpc	r26, r1
    181a:	b1 05       	cpc	r27, r1
    181c:	08 f4       	brcc	.+2      	; 0x1820 <adc_burst+0x2e>
    181e:	4c c0       	rjmp	.+152    	; 0x18b8 <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    1826:	09 2e       	mov	r0, r25
    1828:	00 0c       	add	r0, r0
    182a:	aa 0b       	sbc	r26, r26
    182c:	bb 0b       	sbc	r27, r27
    182e:	40 91 71 03 	lds	r20, 0x0371	; 0x800371 <accumulate_alt_ti>
    1832:	50 91 72 03 	lds	r21, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
    1836:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
    183a:	70 91 74 03 	lds	r23, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
    183e:	84 0f       	add	r24, r20
    1840:	95 1f       	adc	r25, r21
    1842:	a6 1f       	adc	r26, r22
    1844:	b7 1f       	adc	r27, r23
    1846:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <accumulate_alt_ti>
    184a:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <accumulate_alt_ti+0x1>
    184e:	a0 93 73 03 	sts	0x0373, r26	; 0x800373 <accumulate_alt_ti+0x2>
    1852:	b0 93 74 03 	sts	0x0374, r27	; 0x800374 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    1856:	86 e0       	ldi	r24, 0x06	; 6
    1858:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    185c:	09 2e       	mov	r0, r25
    185e:	00 0c       	add	r0, r0
    1860:	aa 0b       	sbc	r26, r26
    1862:	bb 0b       	sbc	r27, r27
    1864:	40 91 75 03 	lds	r20, 0x0375	; 0x800375 <accumulate_pwr_ti>
    1868:	50 91 76 03 	lds	r21, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
    186c:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
    1870:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
    1874:	84 0f       	add	r24, r20
    1876:	95 1f       	adc	r25, r21
    1878:	a6 1f       	adc	r26, r22
    187a:	b7 1f       	adc	r27, r23
    187c:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <accumulate_pwr_ti>
    1880:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <accumulate_pwr_ti+0x1>
    1884:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <accumulate_pwr_ti+0x2>
    1888:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0e 94 4d 13 	call	0x269a	; 0x269a <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    1892:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <adc_started_at>
    1896:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <adc_started_at+0x1>
    189a:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <adc_started_at+0x2>
    189e:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <adc_started_at+0x3>
    18a2:	0a 96       	adiw	r24, 0x0a	; 10
    18a4:	a1 1d       	adc	r26, r1
    18a6:	b1 1d       	adc	r27, r1
    18a8:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <adc_started_at>
    18ac:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <adc_started_at+0x1>
    18b0:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <adc_started_at+0x2>
    18b4:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <adc_started_at+0x3>
    } 
}
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <IsValidValForAvccRef>:
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

// 
uint8_t IsValidValForAvccRef() 
{
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    float tmp_avcc;
    memcpy(&tmp_avcc, &ref_extern_avcc_uV, sizeof tmp_avcc);
    18c6:	c0 90 7e 03 	lds	r12, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    18ca:	d0 90 7f 03 	lds	r13, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    18ce:	e0 90 80 03 	lds	r14, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    18d2:	f0 90 81 03 	lds	r15, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    if ( ((tmp_avcc > REF_EXTERN_AVCC_MIN) && (tmp_avcc < REF_EXTERN_AVCC_MAX)) )
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e9       	ldi	r20, 0x90	; 144
    18dc:	50 e4       	ldi	r21, 0x40	; 64
    18de:	c7 01       	movw	r24, r14
    18e0:	b6 01       	movw	r22, r12
    18e2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__gesf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	64 f4       	brge	.+24     	; 0x1902 <IsValidValForAvccRef+0x44>
    {
        return 1;
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 eb       	ldi	r20, 0xB0	; 176
    18f0:	50 e4       	ldi	r21, 0x40	; 64
    18f2:	c7 01       	movw	r24, r14
    18f4:	b6 01       	movw	r22, r12
    18f6:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__cmpsf2>
    18fa:	88 1f       	adc	r24, r24
    18fc:	88 27       	eor	r24, r24
    18fe:	88 1f       	adc	r24, r24
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <IsValidValForAvccRef+0x46>
    }
    else
    {
        return 0;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	08 95       	ret

0000190e <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref() 
{
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    float tmp_1v1;
    memcpy(&tmp_1v1, &ref_intern_1v1_uV, sizeof tmp_1v1);
    1916:	c0 90 82 03 	lds	r12, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    191a:	d0 90 83 03 	lds	r13, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    191e:	e0 90 84 03 	lds	r14, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    1922:	f0 90 85 03 	lds	r15, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    if ( ((tmp_1v1 > REF_INTERN_1V1_MIN) && (tmp_1v1 < REF_INTERN_1V1_MAX)) )
    1926:	26 e6       	ldi	r18, 0x66	; 102
    1928:	36 e6       	ldi	r19, 0x66	; 102
    192a:	46 e6       	ldi	r20, 0x66	; 102
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	c7 01       	movw	r24, r14
    1930:	b6 01       	movw	r22, r12
    1932:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__gesf2>
    1936:	18 16       	cp	r1, r24
    1938:	64 f4       	brge	.+24     	; 0x1952 <IsValidValFor1V1Ref+0x44>
    {
        return 1;
    193a:	26 e6       	ldi	r18, 0x66	; 102
    193c:	36 e6       	ldi	r19, 0x66	; 102
    193e:	46 ea       	ldi	r20, 0xA6	; 166
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	c7 01       	movw	r24, r14
    1944:	b6 01       	movw	r22, r12
    1946:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__cmpsf2>
    194a:	88 1f       	adc	r24, r24
    194c:	88 27       	eor	r24, r24
    194e:	88 1f       	adc	r24, r24
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <IsValidValFor1V1Ref+0x46>
    }
    else
    {
        return 0;
    1952:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	08 95       	ret

0000195e <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    195e:	8e e1       	ldi	r24, 0x1E	; 30
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    if ( eeprom_is_ready() )
    1966:	f9 99       	sbic	0x1f, 1	; 31
    1968:	0a c0       	rjmp	.+20     	; 0x197e <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    196a:	84 34       	cpi	r24, 0x44	; 68
    196c:	91 44       	sbci	r25, 0x41	; 65
    196e:	49 f0       	breq	.+18     	; 0x1982 <WriteEeReferenceId+0x24>
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    1970:	64 e4       	ldi	r22, 0x44	; 68
    1972:	71 e4       	ldi	r23, 0x41	; 65
    1974:	8e e1       	ldi	r24, 0x1E	; 30
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <eeprom_write_word>
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1984:	08 95       	ret

00001986 <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1992:	f9 99       	sbic	0x1f, 1	; 31
    1994:	12 c0       	rjmp	.+36     	; 0x19ba <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    1996:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    199a:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    199e:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    19a2:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    19a6:	84 17       	cp	r24, r20
    19a8:	95 07       	cpc	r25, r21
    19aa:	a6 07       	cpc	r26, r22
    19ac:	b7 07       	cpc	r27, r23
    19ae:	39 f0       	breq	.+14     	; 0x19be <WriteEeReferenceAvcc+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <eeprom_write_dword>
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    19c0:	08 95       	ret

000019c2 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    19c2:	84 e2       	ldi	r24, 0x24	; 36
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    19ce:	f9 99       	sbic	0x1f, 1	; 31
    19d0:	12 c0       	rjmp	.+36     	; 0x19f6 <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    19d2:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    19d6:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    19da:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    19de:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    19e2:	84 17       	cp	r24, r20
    19e4:	95 07       	cpc	r25, r21
    19e6:	a6 07       	cpc	r26, r22
    19e8:	b7 07       	cpc	r27, r23
    19ea:	39 f0       	breq	.+14     	; 0x19fa <WriteEeReference1V1+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    19ec:	84 e2       	ldi	r24, 0x24	; 36
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <eeprom_write_dword>
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    19fc:	08 95       	ret

000019fe <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    19fe:	8e e1       	ldi	r24, 0x1E	; 30
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1a06:	84 34       	cpi	r24, 0x44	; 68
    1a08:	91 44       	sbci	r25, 0x41	; 65
    1a0a:	81 f5       	brne	.+96     	; 0x1a6c <LoadAnalogRefFromEEPROM+0x6e>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC));
    1a0c:	80 e2       	ldi	r24, 0x20	; 32
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    1a14:	60 93 7e 03 	sts	0x037E, r22	; 0x80037e <ref_extern_avcc_uV>
    1a18:	70 93 7f 03 	sts	0x037F, r23	; 0x80037f <ref_extern_avcc_uV+0x1>
    1a1c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <ref_extern_avcc_uV+0x2>
    1a20:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <ref_extern_avcc_uV+0x3>
        if ( IsValidValForAvccRef() ) 
    1a24:	0e 94 5f 0c 	call	0x18be	; 0x18be <IsValidValForAvccRef>
    1a28:	88 23       	and	r24, r24
    1a2a:	01 f1       	breq	.+64     	; 0x1a6c <LoadAnalogRefFromEEPROM+0x6e>
        {
            ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    1a2c:	84 e2       	ldi	r24, 0x24	; 36
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    1a34:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <ref_intern_1v1_uV>
    1a38:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <ref_intern_1v1_uV+0x1>
    1a3c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <ref_intern_1v1_uV+0x2>
    1a40:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <ref_intern_1v1_uV+0x3>
            if ( IsValidValFor1V1Ref() )
    1a44:	0e 94 87 0c 	call	0x190e	; 0x190e <IsValidValFor1V1Ref>
    1a48:	81 11       	cpse	r24, r1
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <LoadAnalogRefFromEEPROM+0x66>
                return 1;
            }
            else
            { // 1v1 is not used (should it be removed?)
                float tmp_1v1 = 1.08;
                memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    1a4c:	81 e7       	ldi	r24, 0x71	; 113
    1a4e:	9d e3       	ldi	r25, 0x3D	; 61
    1a50:	aa e8       	ldi	r26, 0x8A	; 138
    1a52:	bf e3       	ldi	r27, 0x3F	; 63
    1a54:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
    1a58:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
    1a5c:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
    1a60:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
                ref_loaded = REF_LOADED;
    1a64:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	08 95       	ret
    }

    // use defaults
    // on AVR sizeof(float) == sizeof(uint32_t)
    float tmp_avcc = 5.0;
    memcpy(&ref_extern_avcc_uV, &tmp_avcc, sizeof ref_extern_avcc_uV);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 ea       	ldi	r26, 0xA0	; 160
    1a72:	b0 e4       	ldi	r27, 0x40	; 64
    1a74:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <ref_extern_avcc_uV>
    1a78:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <ref_extern_avcc_uV+0x1>
    1a7c:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <ref_extern_avcc_uV+0x2>
    1a80:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <ref_extern_avcc_uV+0x3>
    float tmp_1v1 = 1.08;
    memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    1a84:	81 e7       	ldi	r24, 0x71	; 113
    1a86:	9d e3       	ldi	r25, 0x3D	; 61
    1a88:	aa e8       	ldi	r26, 0x8A	; 138
    1a8a:	bf e3       	ldi	r27, 0x3F	; 63
    1a8c:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
    1a90:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
    1a94:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
    1a98:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
    ref_loaded = REF_DEFAULT;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
    return 0;
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
}
    1aa4:	08 95       	ret

00001aa6 <CalReferancesFromI2CtoEE>:

// save calibration referances from I2C to EEPROM (if valid)
void CalReferancesFromI2CtoEE(void)
{
    1aa6:	cf 93       	push	r28
    if (ref_loaded > REF_DEFAULT)
    1aa8:	c0 91 7d 03 	lds	r28, 0x037D	; 0x80037d <ref_loaded>
    1aac:	c2 30       	cpi	r28, 0x02	; 2
    1aae:	38 f1       	brcs	.+78     	; 0x1afe <CalReferancesFromI2CtoEE+0x58>
    {
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
    1ab0:	0e 94 5f 0c 	call	0x18be	; 0x18be <IsValidValForAvccRef>
    1ab4:	88 23       	and	r24, r24
    1ab6:	01 f1       	breq	.+64     	; 0x1af8 <CalReferancesFromI2CtoEE+0x52>
    1ab8:	0e 94 87 0c 	call	0x190e	; 0x190e <IsValidValFor1V1Ref>
    1abc:	88 23       	and	r24, r24
    1abe:	e1 f0       	breq	.+56     	; 0x1af8 <CalReferancesFromI2CtoEE+0x52>
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1ac0:	8e e1       	ldi	r24, 0x1E	; 30
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1ac8:	84 34       	cpi	r24, 0x44	; 68
    1aca:	91 44       	sbci	r25, 0x41	; 65
    1acc:	19 f0       	breq	.+6      	; 0x1ad4 <CalReferancesFromI2CtoEE+0x2e>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1ace:	cf 91       	pop	r28
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
            {
                WriteEeReferenceId();
    1ad0:	0c 94 af 0c 	jmp	0x195e	; 0x195e <WriteEeReferenceId>
                return; // that is enough for this loop
            }
            else 
            {
                if (ref_loaded == REF_1V1_TOSAVE)
    1ad4:	c3 30       	cpi	r28, 0x03	; 3
    1ad6:	39 f4       	brne	.+14     	; 0x1ae6 <CalReferancesFromI2CtoEE+0x40>
                {
                    if (WriteEeReference1V1())
    1ad8:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <WriteEeReference1V1>
    1adc:	88 23       	and	r24, r24
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <CalReferancesFromI2CtoEE+0x40>
                    {
                        ref_loaded = REF_LOADED;
    1ae0:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
                        return; // all done
    1ae4:	0c c0       	rjmp	.+24     	; 0x1afe <CalReferancesFromI2CtoEE+0x58>
                    }
                }
                if (ref_loaded == REF_AVCC_TOSAVE)
    1ae6:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	41 f4       	brne	.+16     	; 0x1afe <CalReferancesFromI2CtoEE+0x58>
                {
                    if (WriteEeReferenceAvcc())
    1aee:	0e 94 c3 0c 	call	0x1986	; 0x1986 <WriteEeReferenceAvcc>
    1af2:	81 11       	cpse	r24, r1
    1af4:	f5 cf       	rjmp	.-22     	; 0x1ae0 <CalReferancesFromI2CtoEE+0x3a>
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <CalReferancesFromI2CtoEE+0x58>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1af8:	cf 91       	pop	r28
                }
            }       
        }
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1afa:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <LoadAnalogRefFromEEPROM>
        }
    }
}
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <check_if_alt_should_be_on>:


// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    if (enable_alternate_power)
    1b16:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <enable_alternate_power>
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <check_if_alt_should_be_on+0x1e>
    1b1e:	d1 c0       	rjmp	.+418    	; 0x1cc2 <check_if_alt_should_be_on+0x1c0>
    {
        int battery = analogRead(PWR_V);
    1b20:	87 e0       	ldi	r24, 0x07	; 7
    1b22:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    1b26:	7c 01       	movw	r14, r24
        if (battery >= battery_high_limit)
    1b28:	c0 91 90 03 	lds	r28, 0x0390	; 0x800390 <battery_high_limit>
    1b2c:	d0 91 91 03 	lds	r29, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1b30:	8c 17       	cp	r24, r28
    1b32:	9d 07       	cpc	r25, r29
    1b34:	4c f0       	brlt	.+18     	; 0x1b48 <check_if_alt_should_be_on+0x46>
        {
            if (digitalRead(ALT_EN))
    1b36:	1b 9b       	sbis	0x03, 3	; 3
    1b38:	c8 c0       	rjmp	.+400    	; 0x1cca <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b3a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b3c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1b3e:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b40:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                enable_alternate_power = 0; // charge is done
    1b42:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <enable_alternate_power>
    1b46:	c1 c0       	rjmp	.+386    	; 0x1cca <check_if_alt_should_be_on+0x1c8>
            }
            return; // if alt_en is not on do nothing
        }
        int pwm_range = ( (battery_high_limit - battery_low_limit)>>1 ); // half the diff between high and low limit
    1b48:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <battery_low_limit>
    1b4c:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1b50:	c8 1b       	sub	r28, r24
    1b52:	d9 0b       	sbc	r29, r25
    1b54:	d5 95       	asr	r29
    1b56:	c7 95       	ror	r28
        unsigned long kRuntime = millis() - alt_pwm_started_at;
    1b58:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1b5c:	00 91 88 03 	lds	r16, 0x0388	; 0x800388 <alt_pwm_started_at>
    1b60:	10 91 89 03 	lds	r17, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1b64:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1b68:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1b6c:	5b 01       	movw	r10, r22
    1b6e:	6c 01       	movw	r12, r24
    1b70:	a0 1a       	sub	r10, r16
    1b72:	b1 0a       	sbc	r11, r17
    1b74:	c2 0a       	sbc	r12, r18
    1b76:	d3 0a       	sbc	r13, r19
    1b78:	96 01       	movw	r18, r12
    1b7a:	85 01       	movw	r16, r10
        if (battery < (battery_low_limit + pwm_range ) )
    1b7c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <battery_low_limit>
    1b80:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1b84:	8c 0f       	add	r24, r28
    1b86:	9d 1f       	adc	r25, r29
    1b88:	e8 16       	cp	r14, r24
    1b8a:	f9 06       	cpc	r15, r25
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <check_if_alt_should_be_on+0x8e>
    1b8e:	5b c0       	rjmp	.+182    	; 0x1c46 <check_if_alt_should_be_on+0x144>
        { // half way between high and low limit pwm will occure at 2 sec intervals
            unsigned long offtime = ALT_PWM_PERIOD * ( (battery_high_limit - battery) / pwm_range );
            if (digitalRead(ALT_EN))
    1b90:	1b 9b       	sbis	0x03, 3	; 3
    1b92:	39 c0       	rjmp	.+114    	; 0x1c06 <check_if_alt_should_be_on+0x104>
            {
                if ( (kRuntime + offtime) > ALT_PWM_PERIOD )
    1b94:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <battery_high_limit>
    1b98:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1b9c:	8e 19       	sub	r24, r14
    1b9e:	9f 09       	sbc	r25, r15
    1ba0:	be 01       	movw	r22, r28
    1ba2:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__divmodhi4>
    1ba6:	40 ed       	ldi	r20, 0xD0	; 208
    1ba8:	57 e0       	ldi	r21, 0x07	; 7
    1baa:	64 9f       	mul	r22, r20
    1bac:	c0 01       	movw	r24, r0
    1bae:	65 9f       	mul	r22, r21
    1bb0:	90 0d       	add	r25, r0
    1bb2:	74 9f       	mul	r23, r20
    1bb4:	90 0d       	add	r25, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	09 2e       	mov	r0, r25
    1bba:	00 0c       	add	r0, r0
    1bbc:	aa 0b       	sbc	r26, r26
    1bbe:	bb 0b       	sbc	r27, r27
    1bc0:	8a 0d       	add	r24, r10
    1bc2:	9b 1d       	adc	r25, r11
    1bc4:	ac 1d       	adc	r26, r12
    1bc6:	bd 1d       	adc	r27, r13
    1bc8:	81 3d       	cpi	r24, 0xD1	; 209
    1bca:	97 40       	sbci	r25, 0x07	; 7
    1bcc:	a1 05       	cpc	r26, r1
    1bce:	b1 05       	cpc	r27, r1
    1bd0:	08 f4       	brcc	.+2      	; 0x1bd4 <check_if_alt_should_be_on+0xd2>
    1bd2:	7b c0       	rjmp	.+246    	; 0x1cca <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1bd4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bd6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1bd8:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bda:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,LOW);
                    alt_pwm_accum_charge_time += kRuntime;
    1bdc:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <alt_pwm_accum_charge_time>
    1be0:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <alt_pwm_accum_charge_time+0x1>
    1be4:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <alt_pwm_accum_charge_time+0x2>
    1be8:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    1bec:	08 0f       	add	r16, r24
    1bee:	19 1f       	adc	r17, r25
    1bf0:	2a 1f       	adc	r18, r26
    1bf2:	3b 1f       	adc	r19, r27
    1bf4:	00 93 8c 03 	sts	0x038C, r16	; 0x80038c <alt_pwm_accum_charge_time>
    1bf8:	10 93 8d 03 	sts	0x038D, r17	; 0x80038d <alt_pwm_accum_charge_time+0x1>
    1bfc:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <alt_pwm_accum_charge_time+0x2>
    1c00:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    1c04:	62 c0       	rjmp	.+196    	; 0x1cca <check_if_alt_should_be_on+0x1c8>
                }
            }
            else 
            {
                if ( kRuntime > ALT_PWM_PERIOD )
    1c06:	81 ed       	ldi	r24, 0xD1	; 209
    1c08:	a8 16       	cp	r10, r24
    1c0a:	87 e0       	ldi	r24, 0x07	; 7
    1c0c:	b8 06       	cpc	r11, r24
    1c0e:	c1 04       	cpc	r12, r1
    1c10:	d1 04       	cpc	r13, r1
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <check_if_alt_should_be_on+0x114>
    1c14:	5a c0       	rjmp	.+180    	; 0x1cca <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c16:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c18:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1c1a:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c1c:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,HIGH);
                    if (kRuntime > (ALT_PWM_PERIOD<<1) )
    1c1e:	41 ea       	ldi	r20, 0xA1	; 161
    1c20:	a4 16       	cp	r10, r20
    1c22:	4f e0       	ldi	r20, 0x0F	; 15
    1c24:	b4 06       	cpc	r11, r20
    1c26:	c1 04       	cpc	r12, r1
    1c28:	d1 04       	cpc	r13, r1
    1c2a:	58 f5       	brcc	.+86     	; 0x1c82 <check_if_alt_should_be_on+0x180>
                    {
                        alt_pwm_started_at = millis();
                    }
                    else
                    {
                        alt_pwm_started_at += ALT_PWM_PERIOD;
    1c2c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_pwm_started_at>
    1c30:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1c34:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1c38:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1c3c:	80 53       	subi	r24, 0x30	; 48
    1c3e:	98 4f       	sbci	r25, 0xF8	; 248
    1c40:	af 4f       	sbci	r26, 0xFF	; 255
    1c42:	bf 4f       	sbci	r27, 0xFF	; 255
    1c44:	35 c0       	rjmp	.+106    	; 0x1cb0 <check_if_alt_should_be_on+0x1ae>
                    }
                }
            }
            return;
        }
        else if (digitalRead(ALT_EN))
    1c46:	1b 9b       	sbis	0x03, 3	; 3
    1c48:	0a c0       	rjmp	.+20     	; 0x1c5e <check_if_alt_should_be_on+0x15c>
        { // if pwm is not occuring we still need to rest every so often to measure the battery
            if ( (kRuntime + ALT_REST) > ALT_REST_PERIOD )
    1c4a:	06 50       	subi	r16, 0x06	; 6
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	2f 4f       	sbci	r18, 0xFF	; 255
    1c50:	3f 4f       	sbci	r19, 0xFF	; 255
    1c52:	01 31       	cpi	r16, 0x11	; 17
    1c54:	17 42       	sbci	r17, 0x27	; 39
    1c56:	21 05       	cpc	r18, r1
    1c58:	31 05       	cpc	r19, r1
    1c5a:	b8 f1       	brcs	.+110    	; 0x1cca <check_if_alt_should_be_on+0x1c8>
    1c5c:	32 c0       	rjmp	.+100    	; 0x1cc2 <check_if_alt_should_be_on+0x1c0>
            }
            return;
        }
        else 
        {
            if ( kRuntime > ALT_REST_PERIOD)
    1c5e:	41 e1       	ldi	r20, 0x11	; 17
    1c60:	a4 16       	cp	r10, r20
    1c62:	47 e2       	ldi	r20, 0x27	; 39
    1c64:	b4 06       	cpc	r11, r20
    1c66:	c1 04       	cpc	r12, r1
    1c68:	d1 04       	cpc	r13, r1
    1c6a:	78 f1       	brcs	.+94     	; 0x1cca <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c6c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c6e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1c70:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c72:	8f bf       	out	0x3f, r24	; 63
            { // end of resting time, start charging
                digitalWrite(ALT_EN,HIGH);
                if (kRuntime > (ALT_REST_PERIOD<<1) )
    1c74:	81 e2       	ldi	r24, 0x21	; 33
    1c76:	a8 16       	cp	r10, r24
    1c78:	8e e4       	ldi	r24, 0x4E	; 78
    1c7a:	b8 06       	cpc	r11, r24
    1c7c:	c1 04       	cpc	r12, r1
    1c7e:	d1 04       	cpc	r13, r1
    1c80:	58 f0       	brcs	.+22     	; 0x1c98 <check_if_alt_should_be_on+0x196>
                {
                    alt_pwm_started_at = millis();
    1c82:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    1c86:	60 93 88 03 	sts	0x0388, r22	; 0x800388 <alt_pwm_started_at>
    1c8a:	70 93 89 03 	sts	0x0389, r23	; 0x800389 <alt_pwm_started_at+0x1>
    1c8e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <alt_pwm_started_at+0x2>
    1c92:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <alt_pwm_started_at+0x3>
    1c96:	19 c0       	rjmp	.+50     	; 0x1cca <check_if_alt_should_be_on+0x1c8>
                }
                else
                {
                    alt_pwm_started_at += ALT_REST_PERIOD;
    1c98:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_pwm_started_at>
    1c9c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1ca0:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1ca4:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1ca8:	80 5f       	subi	r24, 0xF0	; 240
    1caa:	98 4d       	sbci	r25, 0xD8	; 216
    1cac:	af 4f       	sbci	r26, 0xFF	; 255
    1cae:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb0:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <alt_pwm_started_at>
    1cb4:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <alt_pwm_started_at+0x1>
    1cb8:	a0 93 8a 03 	sts	0x038A, r26	; 0x80038a <alt_pwm_started_at+0x2>
    1cbc:	b0 93 8b 03 	sts	0x038B, r27	; 0x80038b <alt_pwm_started_at+0x3>
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1cc2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cc4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1cc6:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cc8:	8f bf       	out	0x3f, r24	; 63
    }
    else 
    {
        digitalWrite(ALT_EN,LOW);
    }
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	af 90       	pop	r10
    1cde:	08 95       	ret

00001ce0 <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	20 81       	ld	r18, Z
    1ce4:	31 81       	ldd	r19, Z+1	; 0x01
    1ce6:	2b 54       	subi	r18, 0x4B	; 75
    1ce8:	31 40       	sbci	r19, 0x01	; 1
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	27 38       	cpi	r18, 0x87	; 135
    1cee:	31 05       	cpc	r19, r1
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <IsValidBatHighLimFor12V+0x14>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1cf4:	08 95       	ret

00001cf6 <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	2e 53       	subi	r18, 0x3E	; 62
    1cfe:	31 40       	sbci	r19, 0x01	; 1
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	26 36       	cpi	r18, 0x66	; 102
    1d04:	31 05       	cpc	r19, r1
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <IsValidBatLowLimFor12V+0x14>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d0a:	08 95       	ret

00001d0c <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 81       	ld	r18, Z
    1d10:	31 81       	ldd	r19, Z+1	; 0x01
    1d12:	25 59       	subi	r18, 0x95	; 149
    1d14:	32 40       	sbci	r19, 0x02	; 2
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	2f 30       	cpi	r18, 0x0F	; 15
    1d1a:	31 40       	sbci	r19, 0x01	; 1
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <IsValidBatHighLimFor24V+0x14>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d20:	08 95       	ret

00001d22 <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 81       	ld	r18, Z
    1d26:	31 81       	ldd	r19, Z+1	; 0x01
    1d28:	2c 57       	subi	r18, 0x7C	; 124
    1d2a:	32 40       	sbci	r19, 0x02	; 2
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	2b 3c       	cpi	r18, 0xCB	; 203
    1d30:	31 05       	cpc	r19, r1
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <IsValidBatLowLimFor24V+0x14>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d36:	08 95       	ret

00001d38 <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1d38:	8c e3       	ldi	r24, 0x3C	; 60
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    if ( eeprom_is_ready() )
    1d40:	f9 99       	sbic	0x1f, 1	; 31
    1d42:	0c c0       	rjmp	.+24     	; 0x1d5c <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1d44:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <battery_high_limit>
    1d48:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1d4c:	86 17       	cp	r24, r22
    1d4e:	97 07       	cpc	r25, r23
    1d50:	39 f0       	breq	.+14     	; 0x1d60 <WriteEEBatHighLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    1d52:	8c e3       	ldi	r24, 0x3C	; 60
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <eeprom_write_word>
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1d62:	08 95       	ret

00001d64 <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1d64:	8e e3       	ldi	r24, 0x3E	; 62
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    if ( eeprom_is_ready() )
    1d6c:	f9 99       	sbic	0x1f, 1	; 31
    1d6e:	0c c0       	rjmp	.+24     	; 0x1d88 <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    1d70:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <battery_low_limit>
    1d74:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1d78:	86 17       	cp	r24, r22
    1d7a:	97 07       	cpc	r25, r23
    1d7c:	39 f0       	breq	.+14     	; 0x1d8c <WriteEEBatLowLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    1d7e:	8e e3       	ldi	r24, 0x3E	; 62
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <eeprom_write_word>
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1d8e:	08 95       	ret

00001d90 <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <LoadBatLimitsFromEEPROM+0xe>
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <LoadBatLimitsFromEEPROM+0x10>
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1da4:	8c e3       	ldi	r24, 0x3C	; 60
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    1dac:	7c 01       	movw	r14, r24
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    1db2:	8e e3       	ldi	r24, 0x3E	; 62
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    1dba:	8c 01       	movw	r16, r24
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	03 96       	adiw	r24, 0x03	; 3
    1dc4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <IsValidBatHighLimFor12V>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <LoadBatLimitsFromEEPROM+0x48>
    1dcc:	ce 01       	movw	r24, r28
    1dce:	03 96       	adiw	r24, 0x03	; 3
    1dd0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <IsValidBatHighLimFor24V>
    1dd4:	88 23       	and	r24, r24
    1dd6:	c1 f0       	breq	.+48     	; 0x1e08 <LoadBatLimitsFromEEPROM+0x78>
    1dd8:	ce 01       	movw	r24, r28
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <IsValidBatLowLimFor12V>
    1de0:	81 11       	cpse	r24, r1
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <LoadBatLimitsFromEEPROM+0x60>
    1de4:	ce 01       	movw	r24, r28
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <IsValidBatLowLimFor24V>
    1dec:	88 23       	and	r24, r24
    1dee:	61 f0       	breq	.+24     	; 0x1e08 <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    1df0:	f0 92 91 03 	sts	0x0391, r15	; 0x800391 <battery_high_limit+0x1>
    1df4:	e0 92 90 03 	sts	0x0390, r14	; 0x800390 <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    1df8:	10 93 94 03 	sts	0x0394, r17	; 0x800394 <battery_low_limit+0x1>
    1dfc:	00 93 93 03 	sts	0x0393, r16	; 0x800393 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    1e00:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bat_limit_loaded>
        return 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	10 c0       	rjmp	.+32     	; 0x1e28 <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    1e08:	8d e8       	ldi	r24, 0x8D	; 141
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <battery_high_limit+0x1>
    1e10:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1e14:	86 e7       	ldi	r24, 0x76	; 118
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <battery_low_limit+0x1>
    1e1c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if (bat_limit_loaded > BAT_LIM_DEFAULT)
    1e3e:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	58 f1       	brcs	.+86     	; 0x1e9c <BatLimitsFromI2CtoEE+0x5e>
    {
        if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1e46:	82 30       	cpi	r24, 0x02	; 2
    1e48:	99 f4       	brne	.+38     	; 0x1e70 <BatLimitsFromI2CtoEE+0x32>
        {
            if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1e4a:	80 e9       	ldi	r24, 0x90	; 144
    1e4c:	93 e0       	ldi	r25, 0x03	; 3
    1e4e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <IsValidBatHighLimFor12V>
    1e52:	81 11       	cpse	r24, r1
    1e54:	06 c0       	rjmp	.+12     	; 0x1e62 <BatLimitsFromI2CtoEE+0x24>
    1e56:	80 e9       	ldi	r24, 0x90	; 144
    1e58:	93 e0       	ldi	r25, 0x03	; 3
    1e5a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <IsValidBatHighLimFor24V>
    1e5e:	88 23       	and	r24, r24
    1e60:	39 f0       	breq	.+14     	; 0x1e70 <BatLimitsFromI2CtoEE+0x32>
            {
                if (WriteEEBatHighLim())
    1e62:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <WriteEEBatHighLim>
    1e66:	88 23       	and	r24, r24
    1e68:	19 f0       	breq	.+6      	; 0x1e70 <BatLimitsFromI2CtoEE+0x32>
                {
                    bat_limit_loaded = BAT_LIM_LOADED;
    1e6a:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bat_limit_loaded>
                    return; // all done
    1e6e:	08 95       	ret
                }
            }
        }
        if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1e70:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	81 f4       	brne	.+32     	; 0x1e98 <BatLimitsFromI2CtoEE+0x5a>
        {    
            if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1e78:	83 e9       	ldi	r24, 0x93	; 147
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <IsValidBatLowLimFor12V>
    1e80:	81 11       	cpse	r24, r1
    1e82:	06 c0       	rjmp	.+12     	; 0x1e90 <BatLimitsFromI2CtoEE+0x52>
    1e84:	83 e9       	ldi	r24, 0x93	; 147
    1e86:	93 e0       	ldi	r25, 0x03	; 3
    1e88:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <IsValidBatLowLimFor24V>
    1e8c:	88 23       	and	r24, r24
    1e8e:	21 f0       	breq	.+8      	; 0x1e98 <BatLimitsFromI2CtoEE+0x5a>
            {
                if (WriteEEBatLowLim())
    1e90:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <WriteEEBatLowLim>
    1e94:	81 11       	cpse	r24, r1
    1e96:	e9 cf       	rjmp	.-46     	; 0x1e6a <BatLimitsFromI2CtoEE+0x2c>
                    bat_limit_loaded = BAT_LIM_LOADED;
                    return; // all done
                }
            }
        }
        LoadBatLimitsFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    1e98:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <LoadBatLimitsFromEEPROM>
    1e9c:	08 95       	ret

00001e9e <IsValidMorningThresholdFor12V>:
int daynight_evening_threshold;
unsigned long daynight_morning_debounce;
unsigned long daynight_evening_debounce;

uint8_t IsValidMorningThresholdFor12V(int *value) 
{
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 81       	ld	r18, Z
    1ea2:	31 81       	ldd	r19, Z+1	; 0x01
    1ea4:	2c 53       	subi	r18, 0x3C	; 60
    1ea6:	31 09       	sbc	r19, r1
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	23 39       	cpi	r18, 0x93	; 147
    1eac:	31 05       	cpc	r19, r1
    1eae:	08 f0       	brcs	.+2      	; 0x1eb2 <IsValidMorningThresholdFor12V+0x14>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1eb2:	08 95       	ret

00001eb4 <IsValidEveningThresholdFor12V>:

uint8_t IsValidEveningThresholdFor12V(int *value) 
{
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	20 81       	ld	r18, Z
    1eb8:	31 81       	ldd	r19, Z+1	; 0x01
    1eba:	2a 51       	subi	r18, 0x1A	; 26
    1ebc:	31 09       	sbc	r19, r1
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	2e 34       	cpi	r18, 0x4E	; 78
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <IsValidEveningThresholdFor12V+0x14>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1ec8:	08 95       	ret

00001eca <IsValidMorningThresholdFor24V>:

uint8_t IsValidMorningThresholdFor24V(int *value) 
{
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 81       	ld	r18, Z
    1ece:	31 81       	ldd	r19, Z+1	; 0x01
    1ed0:	27 57       	subi	r18, 0x77	; 119
    1ed2:	31 09       	sbc	r19, r1
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	27 32       	cpi	r18, 0x27	; 39
    1ed8:	31 40       	sbci	r19, 0x01	; 1
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <IsValidMorningThresholdFor24V+0x14>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1ede:	08 95       	ret

00001ee0 <IsValidEveningThresholdFor24V>:

uint8_t IsValidEveningThresholdFor24V(int *value) 
{
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	20 81       	ld	r18, Z
    1ee4:	31 81       	ldd	r19, Z+1	; 0x01
    1ee6:	23 53       	subi	r18, 0x33	; 51
    1ee8:	31 09       	sbc	r19, r1
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	2c 39       	cpi	r18, 0x9C	; 156
    1eee:	31 05       	cpc	r19, r1
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <IsValidEveningThresholdFor24V+0x14>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1ef4:	08 95       	ret

00001ef6 <IsValidEveningDebounce>:
        return 0;
    }
}

uint8_t IsValidEveningDebounce(unsigned long *value) 
{
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	40 81       	ld	r20, Z
    1efa:	51 81       	ldd	r21, Z+1	; 0x01
    1efc:	62 81       	ldd	r22, Z+2	; 0x02
    1efe:	73 81       	ldd	r23, Z+3	; 0x03
    1f00:	41 54       	subi	r20, 0x41	; 65
    1f02:	5f 41       	sbci	r21, 0x1F	; 31
    1f04:	61 09       	sbc	r22, r1
    1f06:	71 09       	sbc	r23, r1
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	4f 33       	cpi	r20, 0x3F	; 63
    1f0c:	5f 4c       	sbci	r21, 0xCF	; 207
    1f0e:	66 43       	sbci	r22, 0x36	; 54
    1f10:	71 05       	cpc	r23, r1
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <IsValidEveningDebounce+0x20>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1f16:	08 95       	ret

00001f18 <WriteEEMorningThreshold>:

// wrtite daynight_morning_threshold (when morning debounce starts) to EEPROM
uint8_t WriteEEMorningThreshold() 
{
    uint16_t tmp_daynight_morning_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)); 
    1f18:	86 e4       	ldi	r24, 0x46	; 70
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    if ( eeprom_is_ready() )
    1f20:	f9 99       	sbic	0x1f, 1	; 31
    1f22:	0c c0       	rjmp	.+24     	; 0x1f3c <WriteEEMorningThreshold+0x24>
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
    1f24:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <daynight_morning_threshold>
    1f28:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    1f2c:	86 17       	cp	r24, r22
    1f2e:	97 07       	cpc	r25, r23
    1f30:	39 f0       	breq	.+14     	; 0x1f40 <WriteEEMorningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
    1f32:	86 e4       	ldi	r24, 0x46	; 70
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <eeprom_write_word>
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <WriteEEMorningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	08 95       	ret
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
        }
        return 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f42:	08 95       	ret

00001f44 <WriteEEEveningThreshold>:

// wrtite daynight_evening_threshold (when evening debounce starts) to EEPROM
uint8_t WriteEEEveningThreshold() 
{
    uint16_t tmp_daynight_evening_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)); 
    1f44:	88 e4       	ldi	r24, 0x48	; 72
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    if ( eeprom_is_ready() )
    1f4c:	f9 99       	sbic	0x1f, 1	; 31
    1f4e:	0c c0       	rjmp	.+24     	; 0x1f68 <WriteEEEveningThreshold+0x24>
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
    1f50:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <daynight_evening_threshold>
    1f54:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    1f58:	86 17       	cp	r24, r22
    1f5a:	97 07       	cpc	r25, r23
    1f5c:	39 f0       	breq	.+14     	; 0x1f6c <WriteEEEveningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
    1f5e:	88 e4       	ldi	r24, 0x48	; 72
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <eeprom_write_word>
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <WriteEEEveningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	08 95       	ret
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
        }
        return 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f6e:	08 95       	ret

00001f70 <WriteEEMorningDebounce>:

// wrtite daynight_morning_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEMorningDebounce() 
{
    uint32_t tmp_daynight_morning_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)); 
    1f70:	8a e4       	ldi	r24, 0x4A	; 74
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1f7c:	f9 99       	sbic	0x1f, 1	; 31
    1f7e:	12 c0       	rjmp	.+36     	; 0x1fa4 <WriteEEMorningDebounce+0x34>
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
    1f80:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <daynight_morning_debounce>
    1f84:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    1f88:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    1f8c:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    1f90:	84 17       	cp	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	a6 07       	cpc	r26, r22
    1f96:	b7 07       	cpc	r27, r23
    1f98:	39 f0       	breq	.+14     	; 0x1fa8 <WriteEEMorningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
    1f9a:	8a e4       	ldi	r24, 0x4A	; 74
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <eeprom_write_dword>
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <WriteEEMorningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	08 95       	ret
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
        }
        return 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1faa:	08 95       	ret

00001fac <WriteEEEveningDebounce>:

// wrtite daynight_evening_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEEveningDebounce() 
{
    uint32_t tmp_daynight_evening_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)); 
    1fac:	8e e4       	ldi	r24, 0x4E	; 78
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1fb8:	f9 99       	sbic	0x1f, 1	; 31
    1fba:	12 c0       	rjmp	.+36     	; 0x1fe0 <WriteEEEveningDebounce+0x34>
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
    1fbc:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <daynight_evening_debounce>
    1fc0:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    1fc4:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    1fc8:	70 91 98 03 	lds	r23, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    1fcc:	84 17       	cp	r24, r20
    1fce:	95 07       	cpc	r25, r21
    1fd0:	a6 07       	cpc	r26, r22
    1fd2:	b7 07       	cpc	r27, r23
    1fd4:	39 f0       	breq	.+14     	; 0x1fe4 <WriteEEEveningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
    1fd6:	8e e4       	ldi	r24, 0x4E	; 78
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <eeprom_write_dword>
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <WriteEEEveningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	08 95       	ret
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
        }
        return 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1fe6:	08 95       	ret

00001fe8 <LoadDayNightValuesFromEEPROM>:

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    1fe8:	cf 92       	push	r12
    1fea:	df 92       	push	r13
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	2c 97       	sbiw	r28, 0x0c	; 12
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    uint8_t use_defaults = 0;
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    2006:	86 e4       	ldi	r24, 0x46	; 70
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    200e:	7c 01       	movw	r14, r24
    2010:	9c 87       	std	Y+12, r25	; 0x0c
    2012:	8b 87       	std	Y+11, r24	; 0x0b
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    2014:	ce 01       	movw	r24, r28
    2016:	0b 96       	adiw	r24, 0x0b	; 11
    2018:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <IsValidMorningThresholdFor12V>
    201c:	81 11       	cpse	r24, r1
    201e:	06 c0       	rjmp	.+12     	; 0x202c <LoadDayNightValuesFromEEPROM+0x44>
    2020:	ce 01       	movw	r24, r28
    2022:	0b 96       	adiw	r24, 0x0b	; 11
    2024:	0e 94 65 0f 	call	0x1eca	; 0x1eca <IsValidMorningThresholdFor24V>
    2028:	88 23       	and	r24, r24
    202a:	31 f0       	breq	.+12     	; 0x2038 <LoadDayNightValuesFromEEPROM+0x50>
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    202c:	f0 92 9a 03 	sts	0x039A, r15	; 0x80039a <daynight_morning_threshold+0x1>
    2030:	e0 92 99 03 	sts	0x0399, r14	; 0x800399 <daynight_morning_threshold>
}

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    uint8_t use_defaults = 0;
    2034:	10 e0       	ldi	r17, 0x00	; 0
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    2036:	01 c0       	rjmp	.+2      	; 0x203a <LoadDayNightValuesFromEEPROM+0x52>
    }
    else
    {
        use_defaults = 1;
    2038:	11 e0       	ldi	r17, 0x01	; 1
    }
    int tmp_daynight_evening_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)));
    203a:	88 e4       	ldi	r24, 0x48	; 72
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 c7 1a 	call	0x358e	; 0x358e <eeprom_read_word>
    2042:	7c 01       	movw	r14, r24
    2044:	9a 87       	std	Y+10, r25	; 0x0a
    2046:	89 87       	std	Y+9, r24	; 0x09
    if ( (IsValidEveningThresholdFor12V(&tmp_daynight_evening_threshold) || IsValidEveningThresholdFor24V(&tmp_daynight_evening_threshold)) )
    2048:	ce 01       	movw	r24, r28
    204a:	09 96       	adiw	r24, 0x09	; 9
    204c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <IsValidEveningThresholdFor12V>
    2050:	81 11       	cpse	r24, r1
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <LoadDayNightValuesFromEEPROM+0x78>
    2054:	ce 01       	movw	r24, r28
    2056:	09 96       	adiw	r24, 0x09	; 9
    2058:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <IsValidEveningThresholdFor24V>
    205c:	88 23       	and	r24, r24
    205e:	29 f0       	breq	.+10     	; 0x206a <LoadDayNightValuesFromEEPROM+0x82>
    {
        daynight_evening_threshold = tmp_daynight_evening_threshold;
    2060:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <daynight_evening_threshold+0x1>
    2064:	e0 92 9c 03 	sts	0x039C, r14	; 0x80039c <daynight_evening_threshold>
    2068:	01 c0       	rjmp	.+2      	; 0x206c <LoadDayNightValuesFromEEPROM+0x84>
    }
    else
    {
        use_defaults = 1;
    206a:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_morning_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)));
    206c:	8a e4       	ldi	r24, 0x4A	; 74
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    2074:	6b 01       	movw	r12, r22
    2076:	7c 01       	movw	r14, r24
    2078:	6d 83       	std	Y+5, r22	; 0x05
    207a:	7e 83       	std	Y+6, r23	; 0x06
    207c:	8f 83       	std	Y+7, r24	; 0x07
    207e:	98 87       	std	Y+8, r25	; 0x08
    if ( IsValidMorningDebounce(&tmp_daynight_morning_debounce) )
    2080:	ce 01       	movw	r24, r28
    2082:	05 96       	adiw	r24, 0x05	; 5
    2084:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <IsValidEveningDebounce>
    2088:	88 23       	and	r24, r24
    208a:	49 f0       	breq	.+18     	; 0x209e <LoadDayNightValuesFromEEPROM+0xb6>
    {
        daynight_morning_debounce = tmp_daynight_morning_debounce;
    208c:	c0 92 9e 03 	sts	0x039E, r12	; 0x80039e <daynight_morning_debounce>
    2090:	d0 92 9f 03 	sts	0x039F, r13	; 0x80039f <daynight_morning_debounce+0x1>
    2094:	e0 92 a0 03 	sts	0x03A0, r14	; 0x8003a0 <daynight_morning_debounce+0x2>
    2098:	f0 92 a1 03 	sts	0x03A1, r15	; 0x8003a1 <daynight_morning_debounce+0x3>
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <LoadDayNightValuesFromEEPROM+0xb8>
    }
    else
    {
        use_defaults = 1;
    209e:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    20a0:	8e e4       	ldi	r24, 0x4E	; 78
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 c1 1a 	call	0x3582	; 0x3582 <eeprom_read_dword>
    20a8:	6b 01       	movw	r12, r22
    20aa:	7c 01       	movw	r14, r24
    20ac:	69 83       	std	Y+1, r22	; 0x01
    20ae:	7a 83       	std	Y+2, r23	; 0x02
    20b0:	8b 83       	std	Y+3, r24	; 0x03
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    20b4:	ce 01       	movw	r24, r28
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <IsValidEveningDebounce>
    20bc:	81 11       	cpse	r24, r1
    20be:	25 c0       	rjmp	.+74     	; 0x210a <LoadDayNightValuesFromEEPROM+0x122>
        use_defaults = 1;
    }
    if (use_defaults)
    {
        // default values are for 12V PV measured with ALT_V channel with 5V referance
        daynight_morning_threshold = 80; // 4.3/(((5.0)/1024.0)*(110.0/10.0))
    20c0:	80 e5       	ldi	r24, 0x50	; 80
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <daynight_morning_threshold+0x1>
    20c8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <daynight_morning_threshold>
        daynight_evening_threshold = 40; // 2.15/(((5.0)/1024.0)*(110.0/10.0))
    20cc:	88 e2       	ldi	r24, 0x28	; 40
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <daynight_evening_threshold+0x1>
    20d4:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <daynight_evening_threshold>
        daynight_morning_debounce = 1200000UL; // 20 min
    20d8:	80 e8       	ldi	r24, 0x80	; 128
    20da:	9f e4       	ldi	r25, 0x4F	; 79
    20dc:	a2 e1       	ldi	r26, 0x12	; 18
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <daynight_morning_debounce>
    20e4:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <daynight_morning_debounce+0x1>
    20e8:	a0 93 a0 03 	sts	0x03A0, r26	; 0x8003a0 <daynight_morning_debounce+0x2>
    20ec:	b0 93 a1 03 	sts	0x03A1, r27	; 0x8003a1 <daynight_morning_debounce+0x3>
        daynight_evening_debounce = 1200000UL; // 20 min
    20f0:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <daynight_evening_debounce>
    20f4:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <daynight_evening_debounce+0x1>
    20f8:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <daynight_evening_debounce+0x2>
    20fc:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <daynight_evening_debounce+0x3>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
        return 0;
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <LoadDayNightValuesFromEEPROM+0x13c>
        use_defaults = 1;
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    {
        daynight_evening_debounce = tmp_daynight_evening_debounce;
    210a:	c0 92 95 03 	sts	0x0395, r12	; 0x800395 <daynight_evening_debounce>
    210e:	d0 92 96 03 	sts	0x0396, r13	; 0x800396 <daynight_evening_debounce+0x1>
    2112:	e0 92 97 03 	sts	0x0397, r14	; 0x800397 <daynight_evening_debounce+0x2>
    2116:	f0 92 98 03 	sts	0x0398, r15	; 0x800398 <daynight_evening_debounce+0x3>
    }
    else
    {
        use_defaults = 1;
    }
    if (use_defaults)
    211a:	11 11       	cpse	r17, r1
    211c:	d1 cf       	rjmp	.-94     	; 0x20c0 <LoadDayNightValuesFromEEPROM+0xd8>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
        return 0;
    }
    else
    {
        daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    211e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <daynight_values_loaded>
        return 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    2124:	2c 96       	adiw	r28, 0x0c	; 12
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	08 95       	ret

00002140 <DayNightValuesFromI2CtoEE>:

// Save day-night state machine values from I2C to EEPROM (if valid), one will change per loop, and I2C will take several loop cycles to get another.
void DayNightValuesFromI2CtoEE(void)
{
    if (daynight_values_loaded > DAYNIGHT_VALUES_DEFAULT)
    2140:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    2144:	82 30       	cpi	r24, 0x02	; 2
    2146:	08 f4       	brcc	.+2      	; 0x214a <DayNightValuesFromI2CtoEE+0xa>
    2148:	47 c0       	rjmp	.+142    	; 0x21d8 <DayNightValuesFromI2CtoEE+0x98>
    {
        if (daynight_values_loaded == DAYNIGHT_MORNING_THRESHOLD_TOSAVE)
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	99 f4       	brne	.+38     	; 0x2174 <DayNightValuesFromI2CtoEE+0x34>
        {
            if ( IsValidMorningThresholdFor12V(&daynight_morning_threshold) || IsValidMorningThresholdFor24V(&daynight_morning_threshold) )
    214e:	89 e9       	ldi	r24, 0x99	; 153
    2150:	93 e0       	ldi	r25, 0x03	; 3
    2152:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <IsValidMorningThresholdFor12V>
    2156:	81 11       	cpse	r24, r1
    2158:	06 c0       	rjmp	.+12     	; 0x2166 <DayNightValuesFromI2CtoEE+0x26>
    215a:	89 e9       	ldi	r24, 0x99	; 153
    215c:	93 e0       	ldi	r25, 0x03	; 3
    215e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <IsValidMorningThresholdFor24V>
    2162:	88 23       	and	r24, r24
    2164:	39 f0       	breq	.+14     	; 0x2174 <DayNightValuesFromI2CtoEE+0x34>
            {
                if (WriteEEMorningThreshold())
    2166:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <WriteEEMorningThreshold>
    216a:	88 23       	and	r24, r24
    216c:	19 f0       	breq	.+6      	; 0x2174 <DayNightValuesFromI2CtoEE+0x34>
                {
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    216e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <daynight_values_loaded>
                    return; // all done
    2172:	08 95       	ret
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_THRESHOLD_TOSAVE)
    2174:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	81 f4       	brne	.+32     	; 0x219c <DayNightValuesFromI2CtoEE+0x5c>
        {    
            if ( IsValidEveningThresholdFor12V(&daynight_evening_threshold) || IsValidEveningThresholdFor24V(&daynight_evening_threshold) )
    217c:	8c e9       	ldi	r24, 0x9C	; 156
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <IsValidEveningThresholdFor12V>
    2184:	81 11       	cpse	r24, r1
    2186:	06 c0       	rjmp	.+12     	; 0x2194 <DayNightValuesFromI2CtoEE+0x54>
    2188:	8c e9       	ldi	r24, 0x9C	; 156
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <IsValidEveningThresholdFor24V>
    2190:	88 23       	and	r24, r24
    2192:	21 f0       	breq	.+8      	; 0x219c <DayNightValuesFromI2CtoEE+0x5c>
            {
                if (WriteEEEveningThreshold())
    2194:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <WriteEEEveningThreshold>
    2198:	81 11       	cpse	r24, r1
    219a:	e9 cf       	rjmp	.-46     	; 0x216e <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_MORNING_DEBOUNCE_TOSAVE)
    219c:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	51 f4       	brne	.+20     	; 0x21b8 <DayNightValuesFromI2CtoEE+0x78>
        {
            if ( IsValidMorningDebounce(&daynight_morning_debounce) )
    21a4:	8e e9       	ldi	r24, 0x9E	; 158
    21a6:	93 e0       	ldi	r25, 0x03	; 3
    21a8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <IsValidEveningDebounce>
    21ac:	88 23       	and	r24, r24
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <DayNightValuesFromI2CtoEE+0x78>
            {
                if (WriteEEMorningDebounce())
    21b0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <WriteEEMorningDebounce>
    21b4:	81 11       	cpse	r24, r1
    21b6:	db cf       	rjmp	.-74     	; 0x216e <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_DEBOUNCE_TOSAVE)
    21b8:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    21bc:	85 30       	cpi	r24, 0x05	; 5
    21be:	51 f4       	brne	.+20     	; 0x21d4 <DayNightValuesFromI2CtoEE+0x94>
        {
            if ( IsValidEveningDebounce(&daynight_evening_debounce) )
    21c0:	85 e9       	ldi	r24, 0x95	; 149
    21c2:	93 e0       	ldi	r25, 0x03	; 3
    21c4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <IsValidEveningDebounce>
    21c8:	88 23       	and	r24, r24
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <DayNightValuesFromI2CtoEE+0x94>
            {
                if (WriteEEEveningDebounce())
    21cc:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <WriteEEEveningDebounce>
    21d0:	81 11       	cpse	r24, r1
    21d2:	cd cf       	rjmp	.-102    	; 0x216e <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        LoadDayNightValuesFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    21d4:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <LoadDayNightValuesFromEEPROM>
    21d8:	08 95       	ret

000021da <check_daynight>:
    bit 6 is set when day_work needs done
    bit 5 is used with I2C, which if a 1 is passed then bits 7 and 6 are returned with the state
    bit 4 is used with I2C, which if set with the bytes from master/host will clear bits 7 and 6 if they are also clear on the data byte from master/host.
*/
void check_daynight() 
{ 
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29

    // check light on solar pannel with ALT_V, reading are only taken when !ALT_EN.
    int sensor_val = analogRead(ALT_V);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	0e 94 73 13 	call	0x26e6	; 0x26e6 <analogRead>
    21e8:	ec 01       	movw	r28, r24
    uint8_t low_nibble_daynight_state = daynight_state & 0x0F; 
    21ea:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    21ee:	98 2f       	mov	r25, r24
    21f0:	9f 70       	andi	r25, 0x0F	; 15
    
    if(low_nibble_daynight_state == DAYNIGHT_START_STATE) 
    21f2:	79 f5       	brne	.+94     	; 0x2252 <check_daynight+0x78>
    { 
        unsigned long kRuntime= millis() - dayTmrStarted;
    21f4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
        if ((kRuntime) > ((unsigned long)STARTUP_DELAY)) 
    21f8:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    21fc:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    2200:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    2204:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	80 1b       	sub	r24, r16
    220e:	91 0b       	sbc	r25, r17
    2210:	a2 0b       	sbc	r26, r18
    2212:	b3 0b       	sbc	r27, r19
    2214:	89 3f       	cpi	r24, 0xF9	; 249
    2216:	9a 42       	sbci	r25, 0x2A	; 42
    2218:	a1 05       	cpc	r26, r1
    221a:	b1 05       	cpc	r27, r1
    221c:	08 f4       	brcc	.+2      	; 0x2220 <check_daynight+0x46>
    221e:	c4 c0       	rjmp	.+392    	; 0x23a8 <check_daynight+0x1ce>
        {
            if(sensor_val > daynight_evening_threshold ) 
    2220:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    2224:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    2228:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE; 
    222c:	80 7f       	andi	r24, 0xF0	; 240
    if(low_nibble_daynight_state == DAYNIGHT_START_STATE) 
    { 
        unsigned long kRuntime= millis() - dayTmrStarted;
        if ((kRuntime) > ((unsigned long)STARTUP_DELAY)) 
        {
            if(sensor_val > daynight_evening_threshold ) 
    222e:	2c 17       	cp	r18, r28
    2230:	3d 07       	cpc	r19, r29
    2232:	0c f4       	brge	.+2      	; 0x2236 <check_daynight+0x5c>
    2234:	48 c0       	rjmp	.+144    	; 0x22c6 <check_daynight+0xec>
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE; 
                dayTmrStarted = millis();
            } 
            else 
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    2236:	8c 5f       	subi	r24, 0xFC	; 252
    2238:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <daynight_state>
                dayTmrStarted = millis();
    223c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    2240:	60 93 a3 03 	sts	0x03A3, r22	; 0x8003a3 <dayTmrStarted>
    2244:	70 93 a4 03 	sts	0x03A4, r23	; 0x8003a4 <dayTmrStarted+0x1>
    2248:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <dayTmrStarted+0x2>
    224c:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <dayTmrStarted+0x3>
    2250:	ab c0       	rjmp	.+342    	; 0x23a8 <check_daynight+0x1ce>
            }
        }
        return;
    } 
  
    if(low_nibble_daynight_state == DAYNIGHT_DAY_STATE) 
    2252:	91 30       	cpi	r25, 0x01	; 1
    2254:	59 f4       	brne	.+22     	; 0x226c <check_daynight+0x92>
    { //day
        if (sensor_val < daynight_evening_threshold ) 
    2256:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    225a:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    225e:	c2 17       	cp	r28, r18
    2260:	d3 07       	cpc	r29, r19
    2262:	0c f0       	brlt	.+2      	; 0x2266 <check_daynight+0x8c>
    2264:	4e c0       	rjmp	.+156    	; 0x2302 <check_daynight+0x128>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_EVENING_DEBOUNCE_STATE;
    2266:	80 7f       	andi	r24, 0xF0	; 240
    2268:	8e 5f       	subi	r24, 0xFE	; 254
    226a:	3f c0       	rjmp	.+126    	; 0x22ea <check_daynight+0x110>
            dayTmrStarted = millis();
        }
        return;
    }
  
    if(low_nibble_daynight_state == DAYNIGHT_EVENING_DEBOUNCE_STATE) 
    226c:	92 30       	cpi	r25, 0x02	; 2
    226e:	69 f5       	brne	.+90     	; 0x22ca <check_daynight+0xf0>
    { //evening_debounce
        if (sensor_val < daynight_evening_threshold ) 
    2270:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    2274:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    2278:	c2 17       	cp	r28, r18
    227a:	d3 07       	cpc	r29, r19
    227c:	1c f5       	brge	.+70     	; 0x22c4 <check_daynight+0xea>
        {
            unsigned long kRuntime= millis() - dayTmrStarted;
    227e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
            if ((kRuntime) > (daynight_evening_debounce)) 
    2282:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    2286:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    228a:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    228e:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	80 1b       	sub	r24, r16
    2298:	91 0b       	sbc	r25, r17
    229a:	a2 0b       	sbc	r26, r18
    229c:	b3 0b       	sbc	r27, r19
    229e:	00 91 95 03 	lds	r16, 0x0395	; 0x800395 <daynight_evening_debounce>
    22a2:	10 91 96 03 	lds	r17, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    22a6:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    22aa:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    22ae:	08 17       	cp	r16, r24
    22b0:	19 07       	cpc	r17, r25
    22b2:	2a 07       	cpc	r18, r26
    22b4:	3b 07       	cpc	r19, r27
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <check_daynight+0xe0>
    22b8:	77 c0       	rjmp	.+238    	; 0x23a8 <check_daynight+0x1ce>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHTWORK_STATE;
    22ba:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    22be:	80 7f       	andi	r24, 0xF0	; 240
    22c0:	8d 5f       	subi	r24, 0xFD	; 253
    22c2:	ba cf       	rjmp	.-140    	; 0x2238 <check_daynight+0x5e>
                dayTmrStarted = millis();
            } 
        } 
        else 
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE;
    22c4:	80 7f       	andi	r24, 0xF0	; 240
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	b7 cf       	rjmp	.-146    	; 0x2238 <check_daynight+0x5e>
            dayTmrStarted = millis();
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_NIGHTWORK_STATE) 
    22ca:	93 30       	cpi	r25, 0x03	; 3
    22cc:	19 f4       	brne	.+6      	; 0x22d4 <check_daynight+0xfa>
    { 
        //do the night work callback, e.g. load night light settings at the start of a night
        daynight_state = (daynight_state & 0x7F) + 0x80; //clear bit 7 so I can set it and keep the other bits
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    22ce:	80 77       	andi	r24, 0x70	; 112
    22d0:	84 68       	ori	r24, 0x84	; 132
    22d2:	68 c0       	rjmp	.+208    	; 0x23a4 <check_daynight+0x1ca>
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_NIGHT_STATE) 
    22d4:	94 30       	cpi	r25, 0x04	; 4
    22d6:	79 f5       	brne	.+94     	; 0x2336 <check_daynight+0x15c>
    { //night
        if (sensor_val > daynight_morning_threshold ) 
    22d8:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    22dc:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    22e0:	2c 17       	cp	r18, r28
    22e2:	3d 07       	cpc	r19, r29
    22e4:	74 f4       	brge	.+28     	; 0x2302 <check_daynight+0x128>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_MORNING_DEBOUNCE_STATE;
    22e6:	80 7f       	andi	r24, 0xF0	; 240
    22e8:	8b 5f       	subi	r24, 0xFB	; 251
    22ea:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <daynight_state>
            dayTmrStarted = millis();
    22ee:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
    22f2:	60 93 a3 03 	sts	0x03A3, r22	; 0x8003a3 <dayTmrStarted>
    22f6:	70 93 a4 03 	sts	0x03A4, r23	; 0x8003a4 <dayTmrStarted+0x1>
    22fa:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <dayTmrStarted+0x2>
    22fe:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <dayTmrStarted+0x3>
        }
        unsigned long kRuntime= millis() - dayTmrStarted;
    2302:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
        if ((kRuntime) > ((unsigned long)DAYNIGHT_TO_LONG)) 
    2306:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    230a:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    230e:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    2312:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	80 1b       	sub	r24, r16
    231c:	91 0b       	sbc	r25, r17
    231e:	a2 0b       	sbc	r26, r18
    2320:	b3 0b       	sbc	r27, r19
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	92 4a       	sbci	r25, 0xA2	; 162
    2326:	aa 44       	sbci	r26, 0x4A	; 74
    2328:	b4 40       	sbci	r27, 0x04	; 4
    232a:	f0 f1       	brcs	.+124    	; 0x23a8 <check_daynight+0x1ce>
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_FAIL_STATE;
    232c:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    2330:	80 7f       	andi	r24, 0xF0	; 240
    2332:	89 5f       	subi	r24, 0xF9	; 249
    2334:	81 cf       	rjmp	.-254    	; 0x2238 <check_daynight+0x5e>
            dayTmrStarted = millis();
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_MORNING_DEBOUNCE_STATE) 
    2336:	95 30       	cpi	r25, 0x05	; 5
    2338:	61 f5       	brne	.+88     	; 0x2392 <check_daynight+0x1b8>
    { //morning_debounce
        if (sensor_val > daynight_morning_threshold ) 
    233a:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    233e:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    2342:	2c 17       	cp	r18, r28
    2344:	3d 07       	cpc	r19, r29
    2346:	14 f5       	brge	.+68     	; 0x238c <check_daynight+0x1b2>
        {
            unsigned long kRuntime= millis() - dayTmrStarted;
    2348:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <millis>
            if ((kRuntime) > (daynight_morning_debounce)) 
    234c:	00 91 a3 03 	lds	r16, 0x03A3	; 0x8003a3 <dayTmrStarted>
    2350:	10 91 a4 03 	lds	r17, 0x03A4	; 0x8003a4 <dayTmrStarted+0x1>
    2354:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <dayTmrStarted+0x2>
    2358:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <dayTmrStarted+0x3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	80 1b       	sub	r24, r16
    2362:	91 0b       	sbc	r25, r17
    2364:	a2 0b       	sbc	r26, r18
    2366:	b3 0b       	sbc	r27, r19
    2368:	00 91 9e 03 	lds	r16, 0x039E	; 0x80039e <daynight_morning_debounce>
    236c:	10 91 9f 03 	lds	r17, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    2370:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    2374:	30 91 a1 03 	lds	r19, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    2378:	08 17       	cp	r16, r24
    237a:	19 07       	cpc	r17, r25
    237c:	2a 07       	cpc	r18, r26
    237e:	3b 07       	cpc	r19, r27
    2380:	98 f4       	brcc	.+38     	; 0x23a8 <check_daynight+0x1ce>
            {
                daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAYWORK_STATE;
    2382:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <daynight_state>
    2386:	80 7f       	andi	r24, 0xF0	; 240
    2388:	8a 5f       	subi	r24, 0xFA	; 250
    238a:	0c c0       	rjmp	.+24     	; 0x23a4 <check_daynight+0x1ca>
            }
        }
        else 
        {
            daynight_state = (daynight_state & 0xF0) + DAYNIGHT_NIGHT_STATE;
    238c:	80 7f       	andi	r24, 0xF0	; 240
    238e:	8c 5f       	subi	r24, 0xFC	; 252
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <check_daynight+0x1ca>
        }
        return;
    }

    if(low_nibble_daynight_state == DAYNIGHT_DAYWORK_STATE) 
    2392:	96 30       	cpi	r25, 0x06	; 6
    2394:	19 f4       	brne	.+6      	; 0x239c <check_daynight+0x1c2>
    { 
        //do the day work callback, e.g. load irrigation settings at the start of a day
        daynight_state = (daynight_state & 0xBF) + 0x40; //clear bit 6 so I can set it and keep the other bits
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_DAY_STATE;
    2396:	80 7b       	andi	r24, 0xB0	; 176
    2398:	81 64       	ori	r24, 0x41	; 65
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <check_daynight+0x1ca>
        return;
    }

    //index out of bounds? 
    if(low_nibble_daynight_state > DAYNIGHT_FAIL_STATE) 
    239c:	97 30       	cpi	r25, 0x07	; 7
    239e:	21 f0       	breq	.+8      	; 0x23a8 <check_daynight+0x1ce>
    { 
        daynight_state = (daynight_state & 0xF0) + DAYNIGHT_FAIL_STATE;
    23a0:	80 7f       	andi	r24, 0xF0	; 240
    23a2:	89 5f       	subi	r24, 0xF9	; 249
    23a4:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <daynight_state>
        return;
    }
    return;
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	08 95       	ret

000023b2 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	8f 93       	push	r24
    23c6:	9f 93       	push	r25
    23c8:	ef 93       	push	r30
    23ca:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    23cc:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    23d0:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    23d4:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    23d6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	8f 71       	andi	r24, 0x1F	; 31
    23e0:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    23e2:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	84 17       	cp	r24, r20
    23ea:	95 07       	cpc	r25, r21
    23ec:	39 f0       	breq	.+14     	; 0x23fc <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    23ee:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    23f2:	fc 01       	movw	r30, r24
    23f4:	eb 55       	subi	r30, 0x5B	; 91
    23f6:	fe 4f       	sbci	r31, 0xFE	; 254
    23f8:	30 83       	st	Z, r19
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    23fc:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    23fe:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    2402:	ff 91       	pop	r31
    2404:	ef 91       	pop	r30
    2406:	9f 91       	pop	r25
    2408:	8f 91       	pop	r24
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	0f 90       	pop	r0
    2418:	1f 90       	pop	r1
    241a:	18 95       	reti

0000241c <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    241c:	1f 92       	push	r1
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	ef 93       	push	r30
    242c:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    242e:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    2432:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2436:	98 17       	cp	r25, r24
    2438:	79 f0       	breq	.+30     	; 0x2458 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    243a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	8f 71       	andi	r24, 0x1F	; 31
    2444:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    2446:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    244a:	fc 01       	movw	r30, r24
    244c:	eb 53       	subi	r30, 0x3B	; 59
    244e:	fe 4f       	sbci	r31, 0xFE	; 254
    2450:	80 81       	ld	r24, Z
    2452:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    2458:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    245c:	8f 7d       	andi	r24, 0xDF	; 223
    245e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	9f 91       	pop	r25
    2468:	8f 91       	pop	r24
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti

00002474 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    2474:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    2478:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    247c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    2480:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    2484:	97 ff       	sbrs	r25, 7
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    2488:	22 e0       	ldi	r18, 0x02	; 2
    248a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    248e:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    2490:	28 e9       	ldi	r18, 0x98	; 152
    2492:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    2496:	26 e0       	ldi	r18, 0x06	; 6
    2498:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    249c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    24a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    24a4:	08 95       	ret

000024a6 <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    24a6:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    24aa:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    24ae:	98 17       	cp	r25, r24
    24b0:	a1 f0       	breq	.+40     	; 0x24da <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    24b2:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	8f 71       	andi	r24, 0x1F	; 31
    24bc:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    24be:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    24c2:	fc 01       	movw	r30, r24
    24c4:	eb 55       	subi	r30, 0x5B	; 91
    24c6:	fe 4f       	sbci	r31, 0xFE	; 254
    24c8:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    24ca:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	98 2f       	mov	r25, r24
    24d2:	88 27       	eor	r24, r24
    24d4:	82 0f       	add	r24, r18
    24d6:	91 1d       	adc	r25, r1
    24d8:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    24de:	08 95       	ret

000024e0 <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    24e0:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	2f 5f       	subi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	2f 71       	andi	r18, 0x1F	; 31
    24ec:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    24ee:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	24 17       	cp	r18, r20
    24f6:	35 07       	cpc	r19, r21
    24f8:	d1 f3       	breq	.-12     	; 0x24ee <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    24fa:	f9 01       	movw	r30, r18
    24fc:	eb 53       	subi	r30, 0x3B	; 59
    24fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2500:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    2502:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    2506:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    250a:	80 62       	ori	r24, 0x20	; 32
    250c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2510:	08 95       	ret

00002512 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    2512:	0e 94 70 12 	call	0x24e0	; 0x24e0 <uart0_putc>
	return 0;
}
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	08 95       	ret

0000251c <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    251c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    2520:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	80 96       	adiw	r24, 0x20	; 32
    2528:	82 1b       	sub	r24, r18
    252a:	91 09       	sbc	r25, r1
} /* uart0_available */
    252c:	8f 71       	andi	r24, 0x1F	; 31
    252e:	99 27       	eor	r25, r25
    2530:	08 95       	ret

00002532 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    2532:	0e 94 8e 12 	call	0x251c	; 0x251c <uart0_available>
    2536:	89 2b       	or	r24, r25
    2538:	e1 f3       	breq	.-8      	; 0x2532 <uartstream0_getchar>
    res = uart0_getc();
    253a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <uart0_getc>
    if(res == '\r') res = '\n';
    253e:	8d 30       	cpi	r24, 0x0D	; 13
    2540:	91 05       	cpc	r25, r1
    2542:	11 f4       	brne	.+4      	; 0x2548 <uartstream0_getchar+0x16>
    2544:	8a e0       	ldi	r24, 0x0A	; 10
    2546:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    2548:	99 27       	eor	r25, r25
    254a:	08 95       	ret

0000254c <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	8b 01       	movw	r16, r22
    2552:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	80 5a       	subi	r24, 0xA0	; 160
    255a:	9c 41       	sbci	r25, 0x1C	; 28
    255c:	a9 4e       	sbci	r26, 0xE9	; 233
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	43 e0       	ldi	r20, 0x03	; 3
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	4a 95       	dec	r20
    2570:	d1 f7       	brne	.-12     	; 0x2566 <uartstream0_init+0x1a>
    2572:	a9 01       	movw	r20, r18
    2574:	98 01       	movw	r18, r16
    2576:	e4 e0       	ldi	r30, 0x04	; 4
    2578:	22 0f       	add	r18, r18
    257a:	33 1f       	adc	r19, r19
    257c:	44 1f       	adc	r20, r20
    257e:	55 1f       	adc	r21, r21
    2580:	ea 95       	dec	r30
    2582:	d1 f7       	brne	.-12     	; 0x2578 <uartstream0_init+0x2c>
    2584:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__udivmodsi4>
    2588:	c9 01       	movw	r24, r18
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	0e 94 3a 12 	call	0x2474	; 0x2474 <uart0_init>
	return &uartstream0_f;
}	
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <__vector_21>:
volatile uint8_t analog_reference;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    259a:	1f 92       	push	r1
    259c:	0f 92       	push	r0
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	0f 92       	push	r0
    25a2:	11 24       	eor	r1, r1
    25a4:	2f 93       	push	r18
    25a6:	8f 93       	push	r24
    25a8:	9f 93       	push	r25
    25aa:	ef 93       	push	r30
    25ac:	ff 93       	push	r31
    // ADCL contain lower 8 bits, ADCH upper (two bits)
    // Must read ADCL first (news ADC is now defined for this)
    adc[adc_channel] = ADC;
    25ae:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <adc_channel>
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    25b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	e7 55       	subi	r30, 0x57	; 87
    25c2:	fc 4f       	sbci	r31, 0xFC	; 252
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    //adc[adc_channel] = ADCL | (ADCH << 8);
    
    ++adc_channel;
    25c8:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    
    // ch 0 is ALT_I, always read
    // ch 1 is ALT_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 1) && digitalRead(ALT_EN) )
    25d2:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	29 f4       	brne	.+10     	; 0x25e4 <__vector_21+0x4a>
    25da:	1b 9b       	sbis	0x03, 3	; 3
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <__vector_21+0x4a>
    {
        adc_channel = 6; // skip channel 1
    25de:	86 e0       	ldi	r24, 0x06	; 6
    25e0:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    }
    // skip channels 3..5
    if (adc_channel == 2)
    25e4:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	19 f4       	brne	.+6      	; 0x25f2 <__vector_21+0x58>
    {
        adc_channel = 6;
    25ec:	86 e0       	ldi	r24, 0x06	; 6
    25ee:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    }
    // ch 6 is PWR_I, always read
    // ch 7 is PWR_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 7) && digitalRead(ALT_EN) )
    25f2:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    25f6:	87 30       	cpi	r24, 0x07	; 7
    25f8:	29 f4       	brne	.+10     	; 0x2604 <__vector_21+0x6a>
    25fa:	1b 9b       	sbis	0x03, 3	; 3
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <__vector_21+0x6a>
    {
        adc_channel = 8; // skip channel 7
    25fe:	88 e0       	ldi	r24, 0x08	; 8
    2600:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <adc_channel>
    }

    if (adc_channel >= ADC_CHANNELS) 
    2604:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <adc_channel>
    2608:	88 30       	cpi	r24, 0x08	; 8
    260a:	b0 f4       	brcc	.+44     	; 0x2638 <__vector_21+0x9e>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    260c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2610:	80 7f       	andi	r24, 0xF0	; 240
    2612:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    2616:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    261a:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <analog_reference>
    261e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <adc_channel>
    2622:	8f 71       	andi	r24, 0x1F	; 31
    2624:	82 2b       	or	r24, r18
    2626:	89 0f       	add	r24, r25
    2628:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    262c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2630:	80 64       	ori	r24, 0x40	; 64
    2632:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2636:	0c c0       	rjmp	.+24     	; 0x2650 <__vector_21+0xb6>
        adc_channel = 8; // skip channel 7
    }

    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    2638:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <adc_channel>
        adc[ADC_CHANNELS] = 0x7FFF; // mark to notify that ADC burst is done
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	9f e7       	ldi	r25, 0x7F	; 127
    2640:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <adc+0x11>
    2644:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <adc+0x10>
        if (!free_running)
    2648:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <free_running>
    264c:	81 11       	cpse	r24, r1
    264e:	de cf       	rjmp	.-68     	; 0x260c <__vector_21+0x72>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    2650:	ff 91       	pop	r31
    2652:	ef 91       	pop	r30
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	2f 91       	pop	r18
    265a:	0f 90       	pop	r0
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	0f 90       	pop	r0
    2660:	1f 90       	pop	r1
    2662:	18 95       	reti

00002664 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a pin.
    analog_reference = reference;
    2664:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <analog_reference>
    free_running = 0;
    2668:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    266c:	ec e7       	ldi	r30, 0x7C	; 124
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    2672:	90 73       	andi	r25, 0x30	; 48
    2674:	89 2b       	or	r24, r25
    2676:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    2678:	ea e7       	ldi	r30, 0x7A	; 122
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	84 60       	ori	r24, 0x04	; 4
    2680:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    2682:	80 81       	ld	r24, Z
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    2688:	80 81       	ld	r24, Z
    268a:	8e 7f       	andi	r24, 0xFE	; 254
    268c:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS2);
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
	// enable a2d conversions
	ADCSRA |= (1<<ADEN);
    268e:	80 81       	ld	r24, Z
    2690:	80 68       	ori	r24, 0x80	; 128
    2692:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0;
    2694:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <ADC_auto_conversion>
    2698:	08 95       	ret

0000269a <enable_ADC_auto_conversion>:

/* This changes the ADC to Auto Trigger mode. It will take readings on each 
    channel and hold them in an array. The array value is accessed by reading from adc[]  */
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    269a:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <adc_channel>
    adc[ADC_CHANNELS] = 0x00;
    269e:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <adc+0x11>
    26a2:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <adc+0x10>
    free_running = free_run;
    26a6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <free_running>
    //      EXTERNAL_AREF 0
    //      EXTERNAL_AVCC (1<<REFS0)
    //      INTERNAL_1V1 (1<<REFS1) | (1<<REFS0)
#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    26aa:	ec e7       	ldi	r30, 0x7C	; 124
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | analog_reference ;
    26b0:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <analog_reference>
    26b4:	80 73       	andi	r24, 0x30	; 48
    26b6:	89 2b       	or	r24, r25
    26b8:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    26ba:	ea e7       	ldi	r30, 0x7A	; 122
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	84 60       	ori	r24, 0x04	; 4
    26c2:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    26c4:	80 81       	ld	r24, Z
    26c6:	82 60       	ori	r24, 0x02	; 2
    26c8:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    26ca:	80 81       	ld	r24, Z
    26cc:	8e 7f       	andi	r24, 0xFE	; 254
    26ce:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
    
	// Power up the ADC and set it for a single conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    26d0:	80 81       	ld	r24, Z
    26d2:	87 75       	andi	r24, 0x57	; 87
    26d4:	88 68       	ori	r24, 0x88	; 136
    26d6:	80 83       	st	Z, r24

    // Start an ADC Conversion 
    ADCSRA |= (1<<ADSC);
    26d8:	80 81       	ld	r24, Z
    26da:	80 64       	ori	r24, 0x40	; 64
    26dc:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <ADC_auto_conversion>
    26e4:	08 95       	ret

000026e6 <analogRead>:


// Use the ADC channel number only (not the pin number)
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    26e6:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <ADC_auto_conversion>
    26ea:	99 23       	and	r25, r25
    26ec:	61 f0       	breq	.+24     	; 0x2706 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    26ee:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26f0:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    26f2:	e8 2f       	mov	r30, r24
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	ee 0f       	add	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	e7 55       	subi	r30, 0x57	; 87
    26fc:	fc 4f       	sbci	r31, 0xFC	; 252
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2702:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2704:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2706:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    270a:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    270c:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    2710:	e8 2f       	mov	r30, r24
    2712:	e7 70       	andi	r30, 0x07	; 7
    2714:	82 2f       	mov	r24, r18
    2716:	89 2b       	or	r24, r25
    2718:	e8 2b       	or	r30, r24
    271a:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    271e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2722:	80 64       	ori	r24, 0x40	; 64
    2724:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    2728:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    272c:	86 fd       	sbrc	r24, 6
    272e:	fc cf       	rjmp	.-8      	; 0x2728 <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    2730:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    2734:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    273c:	08 95       	ret

0000273e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    273e:	1f 92       	push	r1
    2740:	0f 92       	push	r0
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	0f 92       	push	r0
    2746:	11 24       	eor	r1, r1
    2748:	2f 93       	push	r18
    274a:	3f 93       	push	r19
    274c:	8f 93       	push	r24
    274e:	9f 93       	push	r25
    2750:	af 93       	push	r26
    2752:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2754:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
    2758:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    275c:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    2760:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2764:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2768:	2d e2       	ldi	r18, 0x2D	; 45
    276a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    276c:	2d 37       	cpi	r18, 0x7D	; 125
    276e:	20 f4       	brcc	.+8      	; 0x2778 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	a1 1d       	adc	r26, r1
    2774:	b1 1d       	adc	r27, r1
    2776:	05 c0       	rjmp	.+10     	; 0x2782 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2778:	20 eb       	ldi	r18, 0xB0	; 176
    277a:	23 0f       	add	r18, r19
		m += 1;
    277c:	02 96       	adiw	r24, 0x02	; 2
    277e:	a1 1d       	adc	r26, r1
    2780:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2782:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
	timer0_millis = m;
    2786:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
    278a:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
    278e:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
    2792:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
	timer0_overflow_count++;
    2796:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
    279a:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
    279e:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
    27a2:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
    27a6:	01 96       	adiw	r24, 0x01	; 1
    27a8:	a1 1d       	adc	r26, r1
    27aa:	b1 1d       	adc	r27, r1
    27ac:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
    27b0:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
    27b4:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
    27b8:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
}
    27bc:	bf 91       	pop	r27
    27be:	af 91       	pop	r26
    27c0:	9f 91       	pop	r25
    27c2:	8f 91       	pop	r24
    27c4:	3f 91       	pop	r19
    27c6:	2f 91       	pop	r18
    27c8:	0f 90       	pop	r0
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	0f 90       	pop	r0
    27ce:	1f 90       	pop	r1
    27d0:	18 95       	reti

000027d2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    27d2:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    27d4:	f8 94       	cli
	m = timer0_millis;
    27d6:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
    27da:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    27de:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    27e2:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	SREG = oldSREG;
    27e6:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    27e8:	08 95       	ret

000027ea <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    27ea:	84 b5       	in	r24, 0x24	; 36
    27ec:	82 60       	ori	r24, 0x02	; 2
    27ee:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    27f0:	84 b5       	in	r24, 0x24	; 36
    27f2:	81 60       	ori	r24, 0x01	; 1
    27f4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    27f6:	85 b5       	in	r24, 0x25	; 37
    27f8:	82 60       	ori	r24, 0x02	; 2
    27fa:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    27fc:	85 b5       	in	r24, 0x25	; 37
    27fe:	81 60       	ori	r24, 0x01	; 1
    2800:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    2802:	ee e6       	ldi	r30, 0x6E	; 110
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	81 60       	ori	r24, 0x01	; 1
    280a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    280c:	e1 e8       	ldi	r30, 0x81	; 129
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    2812:	80 81       	ld	r24, Z
    2814:	82 60       	ori	r24, 0x02	; 2
    2816:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    2818:	80 81       	ld	r24, Z
    281a:	81 60       	ori	r24, 0x01	; 1
    281c:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    281e:	e0 e8       	ldi	r30, 0x80	; 128
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	81 60       	ori	r24, 0x01	; 1
    2826:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    2828:	e1 eb       	ldi	r30, 0xB1	; 177
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	84 60       	ori	r24, 0x04	; 4
    2830:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    2832:	e0 eb       	ldi	r30, 0xB0	; 176
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	81 60       	ori	r24, 0x01	; 1
    283a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    283c:	e1 e9       	ldi	r30, 0x91	; 145
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	82 60       	ori	r24, 0x02	; 2
    2844:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    2846:	80 81       	ld	r24, Z
    2848:	81 60       	ori	r24, 0x01	; 1
    284a:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    284c:	e0 e9       	ldi	r30, 0x90	; 144
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	81 60       	ori	r24, 0x01	; 1
    2854:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    2856:	e1 ea       	ldi	r30, 0xA1	; 161
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	82 60       	ori	r24, 0x02	; 2
    285e:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    2860:	80 81       	ld	r24, Z
    2862:	81 60       	ori	r24, 0x01	; 1
    2864:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2866:	e0 ea       	ldi	r30, 0xA0	; 160
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	81 60       	ori	r24, 0x01	; 1
    286e:	80 83       	st	Z, r24
    2870:	08 95       	ret

00002872 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    2872:	08 95       	ret

00002874 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2874:	08 95       	ret

00002876 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    2876:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    twi0_sendStop = 1;		// default value
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi0_sendStop>
    twi0_inRepStart = 0;
    2880:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2884:	88 23       	and	r24, r24
    2886:	21 f0       	breq	.+8      	; 0x2890 <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    2888:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    288a:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    288c:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    288e:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    2890:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2894:	8e 7f       	andi	r24, 0xFE	; 254
    2896:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    289a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    289e:	8d 7f       	andi	r24, 0xFD	; 253
    28a0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    28a4:	84 e3       	ldi	r24, 0x34	; 52
    28a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    28aa:	85 e4       	ldi	r24, 0x45	; 69
    28ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    28b0:	08 95       	ret

000028b2 <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    28b2:	88 0f       	add	r24, r24
    28b4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    28b8:	08 95       	ret

000028ba <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    28ba:	61 32       	cpi	r22, 0x21	; 33
    28bc:	98 f4       	brcc	.+38     	; 0x28e4 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    28be:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <twi0_state>
    28c2:	24 30       	cpi	r18, 0x04	; 4
    28c4:	89 f4       	brne	.+34     	; 0x28e8 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    28c6:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi0_txBufferLength>
    28ca:	28 2f       	mov	r18, r24
    28cc:	a3 e1       	ldi	r26, 0x13	; 19
    28ce:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    28d0:	fc 01       	movw	r30, r24
    28d2:	8e 2f       	mov	r24, r30
    28d4:	82 1b       	sub	r24, r18
    28d6:	86 17       	cp	r24, r22
    28d8:	18 f4       	brcc	.+6      	; 0x28e0 <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    28da:	81 91       	ld	r24, Z+
    28dc:	8d 93       	st	X+, r24
    28de:	f9 cf       	rjmp	.-14     	; 0x28d2 <twi0_transmit+0x18>
    }
  
    return 0;
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    28ea:	08 95       	ret

000028ec <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    28ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    28f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    28f4:	08 95       	ret

000028f6 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    28f6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    28fa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    28fe:	08 95       	ret

00002900 <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2900:	85 ed       	ldi	r24, 0xD5	; 213
    2902:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    2906:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    290a:	84 fd       	sbrc	r24, 4
    290c:	fc cf       	rjmp	.-8      	; 0x2906 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    290e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    2912:	08 95       	ret

00002914 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2914:	85 ec       	ldi	r24, 0xC5	; 197
    2916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    291a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    291e:	08 95       	ret

00002920 <__vector_24>:
}

ISR(TWI0_vect)
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	2f 93       	push	r18
    292c:	3f 93       	push	r19
    292e:	4f 93       	push	r20
    2930:	5f 93       	push	r21
    2932:	6f 93       	push	r22
    2934:	7f 93       	push	r23
    2936:	8f 93       	push	r24
    2938:	9f 93       	push	r25
    293a:	af 93       	push	r26
    293c:	bf 93       	push	r27
    293e:	ef 93       	push	r30
    2940:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    2942:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2946:	88 7f       	andi	r24, 0xF8	; 248
    2948:	80 36       	cpi	r24, 0x60	; 96
    294a:	09 f4       	brne	.+2      	; 0x294e <__vector_24+0x2e>
    294c:	9e c0       	rjmp	.+316    	; 0x2a8a <__vector_24+0x16a>
    294e:	78 f5       	brcc	.+94     	; 0x29ae <__vector_24+0x8e>
    2950:	88 32       	cpi	r24, 0x28	; 40
    2952:	09 f4       	brne	.+2      	; 0x2956 <__vector_24+0x36>
    2954:	5d c0       	rjmp	.+186    	; 0x2a10 <__vector_24+0xf0>
    2956:	90 f4       	brcc	.+36     	; 0x297c <__vector_24+0x5c>
    2958:	80 31       	cpi	r24, 0x10	; 16
    295a:	09 f4       	brne	.+2      	; 0x295e <__vector_24+0x3e>
    295c:	56 c0       	rjmp	.+172    	; 0x2a0a <__vector_24+0xea>
    295e:	38 f4       	brcc	.+14     	; 0x296e <__vector_24+0x4e>
    2960:	88 23       	and	r24, r24
    2962:	09 f4       	brne	.+2      	; 0x2966 <__vector_24+0x46>
    2964:	f5 c0       	rjmp	.+490    	; 0x2b50 <__vector_24+0x230>
    2966:	88 30       	cpi	r24, 0x08	; 8
    2968:	09 f4       	brne	.+2      	; 0x296c <__vector_24+0x4c>
    296a:	4f c0       	rjmp	.+158    	; 0x2a0a <__vector_24+0xea>
    296c:	f5 c0       	rjmp	.+490    	; 0x2b58 <__vector_24+0x238>
    296e:	88 31       	cpi	r24, 0x18	; 24
    2970:	09 f4       	brne	.+2      	; 0x2974 <__vector_24+0x54>
    2972:	4e c0       	rjmp	.+156    	; 0x2a10 <__vector_24+0xf0>
    2974:	80 32       	cpi	r24, 0x20	; 32
    2976:	09 f4       	brne	.+2      	; 0x297a <__vector_24+0x5a>
    2978:	5f c0       	rjmp	.+190    	; 0x2a38 <__vector_24+0x118>
    297a:	ee c0       	rjmp	.+476    	; 0x2b58 <__vector_24+0x238>
    297c:	80 34       	cpi	r24, 0x40	; 64
    297e:	09 f4       	brne	.+2      	; 0x2982 <__vector_24+0x62>
    2980:	6a c0       	rjmp	.+212    	; 0x2a56 <__vector_24+0x136>
    2982:	58 f4       	brcc	.+22     	; 0x299a <__vector_24+0x7a>
    2984:	80 33       	cpi	r24, 0x30	; 48
    2986:	09 f4       	brne	.+2      	; 0x298a <__vector_24+0x6a>
    2988:	57 c0       	rjmp	.+174    	; 0x2a38 <__vector_24+0x118>
    298a:	88 33       	cpi	r24, 0x38	; 56
    298c:	09 f0       	breq	.+2      	; 0x2990 <__vector_24+0x70>
    298e:	e4 c0       	rjmp	.+456    	; 0x2b58 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    2990:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
            twi0_releaseBus();
    2994:	0e 94 8a 14 	call	0x2914	; 0x2914 <twi0_releaseBus>
            break;
    2998:	df c0       	rjmp	.+446    	; 0x2b58 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    299a:	80 35       	cpi	r24, 0x50	; 80
    299c:	09 f4       	brne	.+2      	; 0x29a0 <__vector_24+0x80>
    299e:	4f c0       	rjmp	.+158    	; 0x2a3e <__vector_24+0x11e>
    29a0:	88 35       	cpi	r24, 0x58	; 88
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <__vector_24+0x86>
    29a4:	5d c0       	rjmp	.+186    	; 0x2a60 <__vector_24+0x140>
    29a6:	88 34       	cpi	r24, 0x48	; 72
    29a8:	09 f0       	breq	.+2      	; 0x29ac <__vector_24+0x8c>
    29aa:	d6 c0       	rjmp	.+428    	; 0x2b58 <__vector_24+0x238>
    29ac:	d3 c0       	rjmp	.+422    	; 0x2b54 <__vector_24+0x234>
    29ae:	88 39       	cpi	r24, 0x98	; 152
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <__vector_24+0x94>
    29b2:	c4 c0       	rjmp	.+392    	; 0x2b3c <__vector_24+0x21c>
    29b4:	a8 f4       	brcc	.+42     	; 0x29e0 <__vector_24+0xc0>
    29b6:	88 37       	cpi	r24, 0x78	; 120
    29b8:	09 f4       	brne	.+2      	; 0x29bc <__vector_24+0x9c>
    29ba:	67 c0       	rjmp	.+206    	; 0x2a8a <__vector_24+0x16a>
    29bc:	38 f4       	brcc	.+14     	; 0x29cc <__vector_24+0xac>
    29be:	88 36       	cpi	r24, 0x68	; 104
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <__vector_24+0xa4>
    29c2:	63 c0       	rjmp	.+198    	; 0x2a8a <__vector_24+0x16a>
    29c4:	80 37       	cpi	r24, 0x70	; 112
    29c6:	09 f4       	brne	.+2      	; 0x29ca <__vector_24+0xaa>
    29c8:	60 c0       	rjmp	.+192    	; 0x2a8a <__vector_24+0x16a>
    29ca:	c6 c0       	rjmp	.+396    	; 0x2b58 <__vector_24+0x238>
    29cc:	88 38       	cpi	r24, 0x88	; 136
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <__vector_24+0xb2>
    29d0:	b5 c0       	rjmp	.+362    	; 0x2b3c <__vector_24+0x21c>
    29d2:	80 39       	cpi	r24, 0x90	; 144
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__vector_24+0xb8>
    29d6:	5f c0       	rjmp	.+190    	; 0x2a96 <__vector_24+0x176>
    29d8:	80 38       	cpi	r24, 0x80	; 128
    29da:	09 f0       	breq	.+2      	; 0x29de <__vector_24+0xbe>
    29dc:	bd c0       	rjmp	.+378    	; 0x2b58 <__vector_24+0x238>
    29de:	5b c0       	rjmp	.+182    	; 0x2a96 <__vector_24+0x176>
    29e0:	80 3b       	cpi	r24, 0xB0	; 176
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <__vector_24+0xc6>
    29e4:	83 c0       	rjmp	.+262    	; 0x2aec <__vector_24+0x1cc>
    29e6:	38 f4       	brcc	.+14     	; 0x29f6 <__vector_24+0xd6>
    29e8:	80 3a       	cpi	r24, 0xA0	; 160
    29ea:	09 f4       	brne	.+2      	; 0x29ee <__vector_24+0xce>
    29ec:	66 c0       	rjmp	.+204    	; 0x2aba <__vector_24+0x19a>
    29ee:	88 3a       	cpi	r24, 0xA8	; 168
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <__vector_24+0xd4>
    29f2:	7c c0       	rjmp	.+248    	; 0x2aec <__vector_24+0x1cc>
    29f4:	b1 c0       	rjmp	.+354    	; 0x2b58 <__vector_24+0x238>
    29f6:	80 3c       	cpi	r24, 0xC0	; 192
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__vector_24+0xdc>
    29fa:	a4 c0       	rjmp	.+328    	; 0x2b44 <__vector_24+0x224>
    29fc:	88 3c       	cpi	r24, 0xC8	; 200
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <__vector_24+0xe2>
    2a00:	a1 c0       	rjmp	.+322    	; 0x2b44 <__vector_24+0x224>
    2a02:	88 3b       	cpi	r24, 0xB8	; 184
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <__vector_24+0xe8>
    2a06:	87 c0       	rjmp	.+270    	; 0x2b16 <__vector_24+0x1f6>
    2a08:	a7 c0       	rjmp	.+334    	; 0x2b58 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    2a0a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi0_slarw>
    2a0e:	10 c0       	rjmp	.+32     	; 0x2a30 <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2a10:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2a14:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    2a18:	98 17       	cp	r25, r24
    2a1a:	70 f5       	brcc	.+92     	; 0x2a78 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    2a1c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	8e 0f       	add	r24, r30
    2a24:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	eb 5c       	subi	r30, 0xCB	; 203
    2a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2a34:	85 ec       	ldi	r24, 0xC5	; 197
    2a36:	83 c0       	rjmp	.+262    	; 0x2b3e <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    2a38:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
    2a3c:	8b c0       	rjmp	.+278    	; 0x2b54 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2a3e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	8e 0f       	add	r24, r30
    2a46:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2a4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	eb 5c       	subi	r30, 0xCB	; 203
    2a52:	fd 4f       	sbci	r31, 0xFD	; 253
    2a54:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2a56:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2a5a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    2a5e:	6b c0       	rjmp	.+214    	; 0x2b36 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2a60:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	8e 0f       	add	r24, r30
    2a68:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    2a6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	eb 5c       	subi	r30, 0xCB	; 203
    2a74:	fd 4f       	sbci	r31, 0xFD	; 253
    2a76:	80 83       	st	Z, r24
            if (twi0_sendStop)
    2a78:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_sendStop>
    2a7c:	81 11       	cpse	r24, r1
    2a7e:	6a c0       	rjmp	.+212    	; 0x2b54 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2a86:	84 ea       	ldi	r24, 0xA4	; 164
    2a88:	5e c0       	rjmp	.+188    	; 0x2b46 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    2a8a:	83 e0       	ldi	r24, 0x03	; 3
    2a8c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    2a90:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
    2a94:	cf cf       	rjmp	.-98     	; 0x2a34 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2a96:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2a9a:	80 32       	cpi	r24, 0x20	; 32
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <__vector_24+0x180>
    2a9e:	4e c0       	rjmp	.+156    	; 0x2b3c <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    2aa0:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	8e 0f       	add	r24, r30
    2aa8:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi0_rxBufferIndex>
    2aac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	ef 50       	subi	r30, 0x0F	; 15
    2ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab6:	80 83       	st	Z, r24
    2ab8:	bd cf       	rjmp	.-134    	; 0x2a34 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    2aba:	0e 94 8a 14 	call	0x2914	; 0x2914 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2abe:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2ac2:	80 32       	cpi	r24, 0x20	; 32
    2ac4:	30 f4       	brcc	.+12     	; 0x2ad2 <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    2ac6:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	ef 50       	subi	r30, 0x0F	; 15
    2ace:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad0:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    2ad2:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    2adc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    2ae0:	81 ef       	ldi	r24, 0xF1	; 241
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    2ae6:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
            break;
    2aea:	36 c0       	rjmp	.+108    	; 0x2b58 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    2aec:	84 e0       	ldi	r24, 0x04	; 4
    2aee:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    2af2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    2af6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    2afa:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    2afe:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    2b02:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    2b04:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2b08:	81 11       	cpse	r24, r1
    2b0a:	05 c0       	rjmp	.+10     	; 0x2b16 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    2b12:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    2b16:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	8e 0f       	add	r24, r30
    2b1e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi0_txBufferIndex>
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	ed 5e       	subi	r30, 0xED	; 237
    2b26:	fd 4f       	sbci	r31, 0xFD	; 253
    2b28:	80 81       	ld	r24, Z
    2b2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    2b2e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2b32:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2b36:	98 17       	cp	r25, r24
    2b38:	08 f4       	brcc	.+2      	; 0x2b3c <__vector_24+0x21c>
    2b3a:	7c cf       	rjmp	.-264    	; 0x2a34 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2b3c:	85 e8       	ldi	r24, 0x85	; 133
    2b3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b42:	0a c0       	rjmp	.+20     	; 0x2b58 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2b44:	85 ec       	ldi	r24, 0xC5	; 197
    2b46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    2b4a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
            break;
    2b4e:	04 c0       	rjmp	.+8      	; 0x2b58 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    2b50:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_error>
            twi0_stop();
    2b54:	0e 94 80 14 	call	0x2900	; 0x2900 <twi0_stop>
            break;
    }
}
    2b58:	ff 91       	pop	r31
    2b5a:	ef 91       	pop	r30
    2b5c:	bf 91       	pop	r27
    2b5e:	af 91       	pop	r26
    2b60:	9f 91       	pop	r25
    2b62:	8f 91       	pop	r24
    2b64:	7f 91       	pop	r23
    2b66:	6f 91       	pop	r22
    2b68:	5f 91       	pop	r21
    2b6a:	4f 91       	pop	r20
    2b6c:	3f 91       	pop	r19
    2b6e:	2f 91       	pop	r18
    2b70:	0f 90       	pop	r0
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	0f 90       	pop	r0
    2b76:	1f 90       	pop	r1
    2b78:	18 95       	reti

00002b7a <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    2b7a:	08 95       	ret

00002b7c <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2b7c:	08 95       	ret

00002b7e <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    2b7e:	2d e7       	ldi	r18, 0x7D	; 125
    2b80:	32 e0       	ldi	r19, 0x02	; 2
    2b82:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <twi1_rxBuffer+0x1>
    2b86:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    2b8a:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    twi1_sendStop = 1;		// default value
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi1_sendStop>
    twi1_inRepStart = 0;
    2b94:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2b98:	88 23       	and	r24, r24
    2b9a:	21 f0       	breq	.+8      	; 0x2ba4 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    2b9c:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    2b9e:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    2ba0:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    2ba2:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    2ba4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2ba8:	8e 7f       	andi	r24, 0xFE	; 254
    2baa:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    2bae:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2bb2:	8d 7f       	andi	r24, 0xFD	; 253
    2bb4:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    2bb8:	84 e3       	ldi	r24, 0x34	; 52
    2bba:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2bbe:	85 e4       	ldi	r24, 0x45	; 69
    2bc0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2bc4:	08 95       	ret

00002bc6 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    2bc6:	88 0f       	add	r24, r24
    2bc8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    2bcc:	08 95       	ret

00002bce <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    2bce:	61 32       	cpi	r22, 0x21	; 33
    2bd0:	98 f4       	brcc	.+38     	; 0x2bf8 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    2bd2:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <twi1_state>
    2bd6:	24 30       	cpi	r18, 0x04	; 4
    2bd8:	89 f4       	brne	.+34     	; 0x2bfc <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    2bda:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <twi1_txBufferLength>
    2bde:	28 2f       	mov	r18, r24
    2be0:	af e9       	ldi	r26, 0x9F	; 159
    2be2:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2be4:	fc 01       	movw	r30, r24
    2be6:	8e 2f       	mov	r24, r30
    2be8:	82 1b       	sub	r24, r18
    2bea:	86 17       	cp	r24, r22
    2bec:	18 f4       	brcc	.+6      	; 0x2bf4 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    2bee:	81 91       	ld	r24, Z+
    2bf0:	8d 93       	st	X+, r24
    2bf2:	f9 cf       	rjmp	.-14     	; 0x2be6 <twi1_transmit+0x18>
    }
  
    return 0;
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    2bfe:	08 95       	ret

00002c00 <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2c00:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    2c04:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    2c08:	08 95       	ret

00002c0a <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    2c0a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2c0e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    2c12:	08 95       	ret

00002c14 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2c14:	85 ed       	ldi	r24, 0xD5	; 213
    2c16:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    2c1a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2c1e:	84 fd       	sbrc	r24, 4
    2c20:	fc cf       	rjmp	.-8      	; 0x2c1a <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2c22:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2c26:	08 95       	ret

00002c28 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2c28:	85 ec       	ldi	r24, 0xC5	; 197
    2c2a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    2c2e:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2c32:	08 95       	ret

00002c34 <__vector_40>:
}

ISR(TWI1_vect)
{
    2c34:	1f 92       	push	r1
    2c36:	0f 92       	push	r0
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	0f 92       	push	r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	ef 93       	push	r30
    2c54:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2c56:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2c5a:	88 7f       	andi	r24, 0xF8	; 248
    2c5c:	80 36       	cpi	r24, 0x60	; 96
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <__vector_40+0x2e>
    2c60:	9e c0       	rjmp	.+316    	; 0x2d9e <__vector_40+0x16a>
    2c62:	78 f5       	brcc	.+94     	; 0x2cc2 <__vector_40+0x8e>
    2c64:	88 32       	cpi	r24, 0x28	; 40
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <__vector_40+0x36>
    2c68:	5d c0       	rjmp	.+186    	; 0x2d24 <__vector_40+0xf0>
    2c6a:	90 f4       	brcc	.+36     	; 0x2c90 <__vector_40+0x5c>
    2c6c:	80 31       	cpi	r24, 0x10	; 16
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <__vector_40+0x3e>
    2c70:	56 c0       	rjmp	.+172    	; 0x2d1e <__vector_40+0xea>
    2c72:	38 f4       	brcc	.+14     	; 0x2c82 <__vector_40+0x4e>
    2c74:	88 23       	and	r24, r24
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <__vector_40+0x46>
    2c78:	0a c1       	rjmp	.+532    	; 0x2e8e <__vector_40+0x25a>
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <__vector_40+0x4c>
    2c7e:	4f c0       	rjmp	.+158    	; 0x2d1e <__vector_40+0xea>
    2c80:	0a c1       	rjmp	.+532    	; 0x2e96 <__vector_40+0x262>
    2c82:	88 31       	cpi	r24, 0x18	; 24
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <__vector_40+0x54>
    2c86:	4e c0       	rjmp	.+156    	; 0x2d24 <__vector_40+0xf0>
    2c88:	80 32       	cpi	r24, 0x20	; 32
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <__vector_40+0x5a>
    2c8c:	5f c0       	rjmp	.+190    	; 0x2d4c <__vector_40+0x118>
    2c8e:	03 c1       	rjmp	.+518    	; 0x2e96 <__vector_40+0x262>
    2c90:	80 34       	cpi	r24, 0x40	; 64
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <__vector_40+0x62>
    2c94:	6a c0       	rjmp	.+212    	; 0x2d6a <__vector_40+0x136>
    2c96:	58 f4       	brcc	.+22     	; 0x2cae <__vector_40+0x7a>
    2c98:	80 33       	cpi	r24, 0x30	; 48
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <__vector_40+0x6a>
    2c9c:	57 c0       	rjmp	.+174    	; 0x2d4c <__vector_40+0x118>
    2c9e:	88 33       	cpi	r24, 0x38	; 56
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <__vector_40+0x70>
    2ca2:	f9 c0       	rjmp	.+498    	; 0x2e96 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    2ca4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
            twi1_releaseBus();
    2ca8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <twi1_releaseBus>
            break;
    2cac:	f4 c0       	rjmp	.+488    	; 0x2e96 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2cae:	80 35       	cpi	r24, 0x50	; 80
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <__vector_40+0x80>
    2cb2:	4f c0       	rjmp	.+158    	; 0x2d52 <__vector_40+0x11e>
    2cb4:	88 35       	cpi	r24, 0x58	; 88
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <__vector_40+0x86>
    2cb8:	5d c0       	rjmp	.+186    	; 0x2d74 <__vector_40+0x140>
    2cba:	88 34       	cpi	r24, 0x48	; 72
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <__vector_40+0x8c>
    2cbe:	eb c0       	rjmp	.+470    	; 0x2e96 <__vector_40+0x262>
    2cc0:	e8 c0       	rjmp	.+464    	; 0x2e92 <__vector_40+0x25e>
    2cc2:	88 39       	cpi	r24, 0x98	; 152
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <__vector_40+0x94>
    2cc6:	d9 c0       	rjmp	.+434    	; 0x2e7a <__vector_40+0x246>
    2cc8:	a8 f4       	brcc	.+42     	; 0x2cf4 <__vector_40+0xc0>
    2cca:	88 37       	cpi	r24, 0x78	; 120
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <__vector_40+0x9c>
    2cce:	67 c0       	rjmp	.+206    	; 0x2d9e <__vector_40+0x16a>
    2cd0:	38 f4       	brcc	.+14     	; 0x2ce0 <__vector_40+0xac>
    2cd2:	88 36       	cpi	r24, 0x68	; 104
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <__vector_40+0xa4>
    2cd6:	63 c0       	rjmp	.+198    	; 0x2d9e <__vector_40+0x16a>
    2cd8:	80 37       	cpi	r24, 0x70	; 112
    2cda:	09 f4       	brne	.+2      	; 0x2cde <__vector_40+0xaa>
    2cdc:	60 c0       	rjmp	.+192    	; 0x2d9e <__vector_40+0x16a>
    2cde:	db c0       	rjmp	.+438    	; 0x2e96 <__vector_40+0x262>
    2ce0:	88 38       	cpi	r24, 0x88	; 136
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <__vector_40+0xb2>
    2ce4:	ca c0       	rjmp	.+404    	; 0x2e7a <__vector_40+0x246>
    2ce6:	80 39       	cpi	r24, 0x90	; 144
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <__vector_40+0xb8>
    2cea:	5f c0       	rjmp	.+190    	; 0x2daa <__vector_40+0x176>
    2cec:	80 38       	cpi	r24, 0x80	; 128
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <__vector_40+0xbe>
    2cf0:	d2 c0       	rjmp	.+420    	; 0x2e96 <__vector_40+0x262>
    2cf2:	5b c0       	rjmp	.+182    	; 0x2daa <__vector_40+0x176>
    2cf4:	80 3b       	cpi	r24, 0xB0	; 176
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <__vector_40+0xc6>
    2cf8:	98 c0       	rjmp	.+304    	; 0x2e2a <__vector_40+0x1f6>
    2cfa:	38 f4       	brcc	.+14     	; 0x2d0a <__vector_40+0xd6>
    2cfc:	80 3a       	cpi	r24, 0xA0	; 160
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <__vector_40+0xce>
    2d00:	69 c0       	rjmp	.+210    	; 0x2dd4 <__vector_40+0x1a0>
    2d02:	88 3a       	cpi	r24, 0xA8	; 168
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <__vector_40+0xd4>
    2d06:	91 c0       	rjmp	.+290    	; 0x2e2a <__vector_40+0x1f6>
    2d08:	c6 c0       	rjmp	.+396    	; 0x2e96 <__vector_40+0x262>
    2d0a:	80 3c       	cpi	r24, 0xC0	; 192
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <__vector_40+0xdc>
    2d0e:	b9 c0       	rjmp	.+370    	; 0x2e82 <__vector_40+0x24e>
    2d10:	88 3c       	cpi	r24, 0xC8	; 200
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <__vector_40+0xe2>
    2d14:	b6 c0       	rjmp	.+364    	; 0x2e82 <__vector_40+0x24e>
    2d16:	88 3b       	cpi	r24, 0xB8	; 184
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <__vector_40+0xe8>
    2d1a:	9c c0       	rjmp	.+312    	; 0x2e54 <__vector_40+0x220>
    2d1c:	bc c0       	rjmp	.+376    	; 0x2e96 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    2d1e:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi1_slarw>
    2d22:	10 c0       	rjmp	.+32     	; 0x2d44 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2d24:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2d28:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2d2c:	98 17       	cp	r25, r24
    2d2e:	70 f5       	brcc	.+92     	; 0x2d8c <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2d30:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	8e 0f       	add	r24, r30
    2d38:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	ef 53       	subi	r30, 0x3F	; 63
    2d40:	fd 4f       	sbci	r31, 0xFD	; 253
    2d42:	80 81       	ld	r24, Z
    2d44:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2d48:	85 ec       	ldi	r24, 0xC5	; 197
    2d4a:	98 c0       	rjmp	.+304    	; 0x2e7c <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    2d4c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
    2d50:	a0 c0       	rjmp	.+320    	; 0x2e92 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2d52:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	8e 0f       	add	r24, r30
    2d5a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2d5e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	ef 53       	subi	r30, 0x3F	; 63
    2d66:	fd 4f       	sbci	r31, 0xFD	; 253
    2d68:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2d6a:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2d6e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2d72:	80 c0       	rjmp	.+256    	; 0x2e74 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2d74:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	8e 0f       	add	r24, r30
    2d7c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2d80:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	ef 53       	subi	r30, 0x3F	; 63
    2d88:	fd 4f       	sbci	r31, 0xFD	; 253
    2d8a:	80 83       	st	Z, r24
            if (twi1_sendStop)
    2d8c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_sendStop>
    2d90:	81 11       	cpse	r24, r1
    2d92:	7f c0       	rjmp	.+254    	; 0x2e92 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2d9a:	84 ea       	ldi	r24, 0xA4	; 164
    2d9c:	73 c0       	rjmp	.+230    	; 0x2e84 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2da4:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
    2da8:	cf cf       	rjmp	.-98     	; 0x2d48 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2daa:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2dae:	80 32       	cpi	r24, 0x20	; 32
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <__vector_40+0x180>
    2db2:	63 c0       	rjmp	.+198    	; 0x2e7a <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2db4:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi1_rxBuffer>
    2db8:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2dbc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2dc0:	91 e0       	ldi	r25, 0x01	; 1
    2dc2:	98 0f       	add	r25, r24
    2dc4:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi1_rxBufferIndex>
    2dc8:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2dcc:	e8 0f       	add	r30, r24
    2dce:	f1 1d       	adc	r31, r1
    2dd0:	90 83       	st	Z, r25
    2dd2:	ba cf       	rjmp	.-140    	; 0x2d48 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2dd4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2dd8:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2ddc:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2de0:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2de4:	20 32       	cpi	r18, 0x20	; 32
    2de6:	30 f4       	brcc	.+12     	; 0x2df4 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2de8:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2dec:	fc 01       	movw	r30, r24
    2dee:	e2 0f       	add	r30, r18
    2df0:	f1 1d       	adc	r31, r1
    2df2:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2df4:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2df8:	70 e0       	ldi	r23, 0x00	; 0
    2dfa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    2dfe:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    2e02:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2e04:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2e08:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2e0c:	8d 57       	subi	r24, 0x7D	; 125
    2e0e:	92 40       	sbci	r25, 0x02	; 2
    2e10:	19 f4       	brne	.+6      	; 0x2e18 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2e12:	8d e5       	ldi	r24, 0x5D	; 93
    2e14:	92 e0       	ldi	r25, 0x02	; 2
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2e18:	8d e7       	ldi	r24, 0x7D	; 125
    2e1a:	92 e0       	ldi	r25, 0x02	; 2
    2e1c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi1_rxBuffer+0x1>
    2e20:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2e24:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
            break;
    2e28:	36 c0       	rjmp	.+108    	; 0x2e96 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    2e2a:	84 e0       	ldi	r24, 0x04	; 4
    2e2c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2e30:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2e34:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2e38:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    2e3c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2e40:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2e42:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2e46:	81 11       	cpse	r24, r1
    2e48:	05 c0       	rjmp	.+10     	; 0x2e54 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2e50:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2e54:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	8e 0f       	add	r24, r30
    2e5c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi1_txBufferIndex>
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	e1 56       	subi	r30, 0x61	; 97
    2e64:	fd 4f       	sbci	r31, 0xFD	; 253
    2e66:	80 81       	ld	r24, Z
    2e68:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    2e6c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2e70:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2e74:	98 17       	cp	r25, r24
    2e76:	08 f4       	brcc	.+2      	; 0x2e7a <__vector_40+0x246>
    2e78:	67 cf       	rjmp	.-306    	; 0x2d48 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2e7a:	85 e8       	ldi	r24, 0x85	; 133
    2e7c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2e80:	0a c0       	rjmp	.+20     	; 0x2e96 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2e82:	85 ec       	ldi	r24, 0xC5	; 197
    2e84:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    2e88:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
            break;
    2e8c:	04 c0       	rjmp	.+8      	; 0x2e96 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2e8e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_error>
            twi1_stop();
    2e92:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <twi1_stop>
            break;
    }
}
    2e96:	ff 91       	pop	r31
    2e98:	ef 91       	pop	r30
    2e9a:	bf 91       	pop	r27
    2e9c:	af 91       	pop	r26
    2e9e:	9f 91       	pop	r25
    2ea0:	8f 91       	pop	r24
    2ea2:	7f 91       	pop	r23
    2ea4:	6f 91       	pop	r22
    2ea6:	5f 91       	pop	r21
    2ea8:	4f 91       	pop	r20
    2eaa:	3f 91       	pop	r19
    2eac:	2f 91       	pop	r18
    2eae:	0f 90       	pop	r0
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	0f 90       	pop	r0
    2eb4:	1f 90       	pop	r1
    2eb6:	18 95       	reti

00002eb8 <__divmodhi4>:
    2eb8:	97 fb       	bst	r25, 7
    2eba:	07 2e       	mov	r0, r23
    2ebc:	16 f4       	brtc	.+4      	; 0x2ec2 <__divmodhi4+0xa>
    2ebe:	00 94       	com	r0
    2ec0:	07 d0       	rcall	.+14     	; 0x2ed0 <__divmodhi4_neg1>
    2ec2:	77 fd       	sbrc	r23, 7
    2ec4:	09 d0       	rcall	.+18     	; 0x2ed8 <__divmodhi4_neg2>
    2ec6:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    2eca:	07 fc       	sbrc	r0, 7
    2ecc:	05 d0       	rcall	.+10     	; 0x2ed8 <__divmodhi4_neg2>
    2ece:	3e f4       	brtc	.+14     	; 0x2ede <__divmodhi4_exit>

00002ed0 <__divmodhi4_neg1>:
    2ed0:	90 95       	com	r25
    2ed2:	81 95       	neg	r24
    2ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed6:	08 95       	ret

00002ed8 <__divmodhi4_neg2>:
    2ed8:	70 95       	com	r23
    2eda:	61 95       	neg	r22
    2edc:	7f 4f       	sbci	r23, 0xFF	; 255

00002ede <__divmodhi4_exit>:
    2ede:	08 95       	ret

00002ee0 <__udivmodsi4>:
    2ee0:	a1 e2       	ldi	r26, 0x21	; 33
    2ee2:	1a 2e       	mov	r1, r26
    2ee4:	aa 1b       	sub	r26, r26
    2ee6:	bb 1b       	sub	r27, r27
    2ee8:	fd 01       	movw	r30, r26
    2eea:	0d c0       	rjmp	.+26     	; 0x2f06 <__udivmodsi4_ep>

00002eec <__udivmodsi4_loop>:
    2eec:	aa 1f       	adc	r26, r26
    2eee:	bb 1f       	adc	r27, r27
    2ef0:	ee 1f       	adc	r30, r30
    2ef2:	ff 1f       	adc	r31, r31
    2ef4:	a2 17       	cp	r26, r18
    2ef6:	b3 07       	cpc	r27, r19
    2ef8:	e4 07       	cpc	r30, r20
    2efa:	f5 07       	cpc	r31, r21
    2efc:	20 f0       	brcs	.+8      	; 0x2f06 <__udivmodsi4_ep>
    2efe:	a2 1b       	sub	r26, r18
    2f00:	b3 0b       	sbc	r27, r19
    2f02:	e4 0b       	sbc	r30, r20
    2f04:	f5 0b       	sbc	r31, r21

00002f06 <__udivmodsi4_ep>:
    2f06:	66 1f       	adc	r22, r22
    2f08:	77 1f       	adc	r23, r23
    2f0a:	88 1f       	adc	r24, r24
    2f0c:	99 1f       	adc	r25, r25
    2f0e:	1a 94       	dec	r1
    2f10:	69 f7       	brne	.-38     	; 0x2eec <__udivmodsi4_loop>
    2f12:	60 95       	com	r22
    2f14:	70 95       	com	r23
    2f16:	80 95       	com	r24
    2f18:	90 95       	com	r25
    2f1a:	9b 01       	movw	r18, r22
    2f1c:	ac 01       	movw	r20, r24
    2f1e:	bd 01       	movw	r22, r26
    2f20:	cf 01       	movw	r24, r30
    2f22:	08 95       	ret

00002f24 <__udivmodhi4>:
    2f24:	aa 1b       	sub	r26, r26
    2f26:	bb 1b       	sub	r27, r27
    2f28:	51 e1       	ldi	r21, 0x11	; 17
    2f2a:	07 c0       	rjmp	.+14     	; 0x2f3a <__udivmodhi4_ep>

00002f2c <__udivmodhi4_loop>:
    2f2c:	aa 1f       	adc	r26, r26
    2f2e:	bb 1f       	adc	r27, r27
    2f30:	a6 17       	cp	r26, r22
    2f32:	b7 07       	cpc	r27, r23
    2f34:	10 f0       	brcs	.+4      	; 0x2f3a <__udivmodhi4_ep>
    2f36:	a6 1b       	sub	r26, r22
    2f38:	b7 0b       	sbc	r27, r23

00002f3a <__udivmodhi4_ep>:
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	5a 95       	dec	r21
    2f40:	a9 f7       	brne	.-22     	; 0x2f2c <__udivmodhi4_loop>
    2f42:	80 95       	com	r24
    2f44:	90 95       	com	r25
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	08 95       	ret

00002f4c <__cmpsf2>:
    2f4c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__fp_cmp>
    2f50:	08 f4       	brcc	.+2      	; 0x2f54 <__cmpsf2+0x8>
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	08 95       	ret

00002f56 <__fp_cmp>:
    2f56:	99 0f       	add	r25, r25
    2f58:	00 08       	sbc	r0, r0
    2f5a:	55 0f       	add	r21, r21
    2f5c:	aa 0b       	sbc	r26, r26
    2f5e:	e0 e8       	ldi	r30, 0x80	; 128
    2f60:	fe ef       	ldi	r31, 0xFE	; 254
    2f62:	16 16       	cp	r1, r22
    2f64:	17 06       	cpc	r1, r23
    2f66:	e8 07       	cpc	r30, r24
    2f68:	f9 07       	cpc	r31, r25
    2f6a:	c0 f0       	brcs	.+48     	; 0x2f9c <__fp_cmp+0x46>
    2f6c:	12 16       	cp	r1, r18
    2f6e:	13 06       	cpc	r1, r19
    2f70:	e4 07       	cpc	r30, r20
    2f72:	f5 07       	cpc	r31, r21
    2f74:	98 f0       	brcs	.+38     	; 0x2f9c <__fp_cmp+0x46>
    2f76:	62 1b       	sub	r22, r18
    2f78:	73 0b       	sbc	r23, r19
    2f7a:	84 0b       	sbc	r24, r20
    2f7c:	95 0b       	sbc	r25, r21
    2f7e:	39 f4       	brne	.+14     	; 0x2f8e <__fp_cmp+0x38>
    2f80:	0a 26       	eor	r0, r26
    2f82:	61 f0       	breq	.+24     	; 0x2f9c <__fp_cmp+0x46>
    2f84:	23 2b       	or	r18, r19
    2f86:	24 2b       	or	r18, r20
    2f88:	25 2b       	or	r18, r21
    2f8a:	21 f4       	brne	.+8      	; 0x2f94 <__fp_cmp+0x3e>
    2f8c:	08 95       	ret
    2f8e:	0a 26       	eor	r0, r26
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <__fp_cmp+0x3e>
    2f92:	a1 40       	sbci	r26, 0x01	; 1
    2f94:	a6 95       	lsr	r26
    2f96:	8f ef       	ldi	r24, 0xFF	; 255
    2f98:	81 1d       	adc	r24, r1
    2f9a:	81 1d       	adc	r24, r1
    2f9c:	08 95       	ret

00002f9e <__gesf2>:
    2f9e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__fp_cmp>
    2fa2:	08 f4       	brcc	.+2      	; 0x2fa6 <__gesf2+0x8>
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	08 95       	ret

00002fa8 <fgetc>:
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	ec 01       	movw	r28, r24
    2fae:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb0:	20 ff       	sbrs	r18, 0
    2fb2:	33 c0       	rjmp	.+102    	; 0x301a <fgetc+0x72>
    2fb4:	26 ff       	sbrs	r18, 6
    2fb6:	0a c0       	rjmp	.+20     	; 0x2fcc <fgetc+0x24>
    2fb8:	2f 7b       	andi	r18, 0xBF	; 191
    2fba:	2b 83       	std	Y+3, r18	; 0x03
    2fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	9f 83       	std	Y+7, r25	; 0x07
    2fc4:	8e 83       	std	Y+6, r24	; 0x06
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	29 c0       	rjmp	.+82     	; 0x301e <fgetc+0x76>
    2fcc:	22 ff       	sbrs	r18, 2
    2fce:	0f c0       	rjmp	.+30     	; 0x2fee <fgetc+0x46>
    2fd0:	e8 81       	ld	r30, Y
    2fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2fd4:	80 81       	ld	r24, Z
    2fd6:	08 2e       	mov	r0, r24
    2fd8:	00 0c       	add	r0, r0
    2fda:	99 0b       	sbc	r25, r25
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	19 f4       	brne	.+6      	; 0x2fe6 <fgetc+0x3e>
    2fe0:	20 62       	ori	r18, 0x20	; 32
    2fe2:	2b 83       	std	Y+3, r18	; 0x03
    2fe4:	1a c0       	rjmp	.+52     	; 0x301a <fgetc+0x72>
    2fe6:	31 96       	adiw	r30, 0x01	; 1
    2fe8:	f9 83       	std	Y+1, r31	; 0x01
    2fea:	e8 83       	st	Y, r30
    2fec:	0e c0       	rjmp	.+28     	; 0x300a <fgetc+0x62>
    2fee:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ff0:	fb 85       	ldd	r31, Y+11	; 0x0b
    2ff2:	09 95       	icall
    2ff4:	97 ff       	sbrs	r25, 7
    2ff6:	09 c0       	rjmp	.+18     	; 0x300a <fgetc+0x62>
    2ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    2ffa:	01 96       	adiw	r24, 0x01	; 1
    2ffc:	11 f0       	breq	.+4      	; 0x3002 <fgetc+0x5a>
    2ffe:	80 e2       	ldi	r24, 0x20	; 32
    3000:	01 c0       	rjmp	.+2      	; 0x3004 <fgetc+0x5c>
    3002:	80 e1       	ldi	r24, 0x10	; 16
    3004:	82 2b       	or	r24, r18
    3006:	8b 83       	std	Y+3, r24	; 0x03
    3008:	08 c0       	rjmp	.+16     	; 0x301a <fgetc+0x72>
    300a:	2e 81       	ldd	r18, Y+6	; 0x06
    300c:	3f 81       	ldd	r19, Y+7	; 0x07
    300e:	2f 5f       	subi	r18, 0xFF	; 255
    3010:	3f 4f       	sbci	r19, 0xFF	; 255
    3012:	3f 83       	std	Y+7, r19	; 0x07
    3014:	2e 83       	std	Y+6, r18	; 0x06
    3016:	99 27       	eor	r25, r25
    3018:	02 c0       	rjmp	.+4      	; 0x301e <fgetc+0x76>
    301a:	8f ef       	ldi	r24, 0xFF	; 255
    301c:	9f ef       	ldi	r25, 0xFF	; 255
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <printf>:
    3024:	a0 e0       	ldi	r26, 0x00	; 0
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e8 e1       	ldi	r30, 0x18	; 24
    302a:	f8 e1       	ldi	r31, 0x18	; 24
    302c:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__prologue_saves__+0x20>
    3030:	ae 01       	movw	r20, r28
    3032:	4b 5f       	subi	r20, 0xFB	; 251
    3034:	5f 4f       	sbci	r21, 0xFF	; 255
    3036:	fa 01       	movw	r30, r20
    3038:	61 91       	ld	r22, Z+
    303a:	71 91       	ld	r23, Z+
    303c:	af 01       	movw	r20, r30
    303e:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <__iob+0x2>
    3042:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <__iob+0x3>
    3046:	0e 94 28 18 	call	0x3050	; 0x3050 <vfprintf>
    304a:	e2 e0       	ldi	r30, 0x02	; 2
    304c:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__epilogue_restores__+0x20>

00003050 <vfprintf>:
    3050:	ab e0       	ldi	r26, 0x0B	; 11
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	ee e2       	ldi	r30, 0x2E	; 46
    3056:	f8 e1       	ldi	r31, 0x18	; 24
    3058:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__prologue_saves__>
    305c:	6c 01       	movw	r12, r24
    305e:	7b 01       	movw	r14, r22
    3060:	8a 01       	movw	r16, r20
    3062:	fc 01       	movw	r30, r24
    3064:	17 82       	std	Z+7, r1	; 0x07
    3066:	16 82       	std	Z+6, r1	; 0x06
    3068:	83 81       	ldd	r24, Z+3	; 0x03
    306a:	81 ff       	sbrs	r24, 1
    306c:	cc c1       	rjmp	.+920    	; 0x3406 <vfprintf+0x3b6>
    306e:	ce 01       	movw	r24, r28
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	3c 01       	movw	r6, r24
    3074:	f6 01       	movw	r30, r12
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	f7 01       	movw	r30, r14
    307a:	93 fd       	sbrc	r25, 3
    307c:	85 91       	lpm	r24, Z+
    307e:	93 ff       	sbrs	r25, 3
    3080:	81 91       	ld	r24, Z+
    3082:	7f 01       	movw	r14, r30
    3084:	88 23       	and	r24, r24
    3086:	09 f4       	brne	.+2      	; 0x308a <vfprintf+0x3a>
    3088:	ba c1       	rjmp	.+884    	; 0x33fe <vfprintf+0x3ae>
    308a:	85 32       	cpi	r24, 0x25	; 37
    308c:	39 f4       	brne	.+14     	; 0x309c <vfprintf+0x4c>
    308e:	93 fd       	sbrc	r25, 3
    3090:	85 91       	lpm	r24, Z+
    3092:	93 ff       	sbrs	r25, 3
    3094:	81 91       	ld	r24, Z+
    3096:	7f 01       	movw	r14, r30
    3098:	85 32       	cpi	r24, 0x25	; 37
    309a:	29 f4       	brne	.+10     	; 0x30a6 <vfprintf+0x56>
    309c:	b6 01       	movw	r22, r12
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    30a4:	e7 cf       	rjmp	.-50     	; 0x3074 <vfprintf+0x24>
    30a6:	91 2c       	mov	r9, r1
    30a8:	21 2c       	mov	r2, r1
    30aa:	31 2c       	mov	r3, r1
    30ac:	ff e1       	ldi	r31, 0x1F	; 31
    30ae:	f3 15       	cp	r31, r3
    30b0:	d8 f0       	brcs	.+54     	; 0x30e8 <vfprintf+0x98>
    30b2:	8b 32       	cpi	r24, 0x2B	; 43
    30b4:	79 f0       	breq	.+30     	; 0x30d4 <vfprintf+0x84>
    30b6:	38 f4       	brcc	.+14     	; 0x30c6 <vfprintf+0x76>
    30b8:	80 32       	cpi	r24, 0x20	; 32
    30ba:	79 f0       	breq	.+30     	; 0x30da <vfprintf+0x8a>
    30bc:	83 32       	cpi	r24, 0x23	; 35
    30be:	a1 f4       	brne	.+40     	; 0x30e8 <vfprintf+0x98>
    30c0:	23 2d       	mov	r18, r3
    30c2:	20 61       	ori	r18, 0x10	; 16
    30c4:	1d c0       	rjmp	.+58     	; 0x3100 <vfprintf+0xb0>
    30c6:	8d 32       	cpi	r24, 0x2D	; 45
    30c8:	61 f0       	breq	.+24     	; 0x30e2 <vfprintf+0x92>
    30ca:	80 33       	cpi	r24, 0x30	; 48
    30cc:	69 f4       	brne	.+26     	; 0x30e8 <vfprintf+0x98>
    30ce:	23 2d       	mov	r18, r3
    30d0:	21 60       	ori	r18, 0x01	; 1
    30d2:	16 c0       	rjmp	.+44     	; 0x3100 <vfprintf+0xb0>
    30d4:	83 2d       	mov	r24, r3
    30d6:	82 60       	ori	r24, 0x02	; 2
    30d8:	38 2e       	mov	r3, r24
    30da:	e3 2d       	mov	r30, r3
    30dc:	e4 60       	ori	r30, 0x04	; 4
    30de:	3e 2e       	mov	r3, r30
    30e0:	2a c0       	rjmp	.+84     	; 0x3136 <vfprintf+0xe6>
    30e2:	f3 2d       	mov	r31, r3
    30e4:	f8 60       	ori	r31, 0x08	; 8
    30e6:	1d c0       	rjmp	.+58     	; 0x3122 <vfprintf+0xd2>
    30e8:	37 fc       	sbrc	r3, 7
    30ea:	2d c0       	rjmp	.+90     	; 0x3146 <vfprintf+0xf6>
    30ec:	20 ed       	ldi	r18, 0xD0	; 208
    30ee:	28 0f       	add	r18, r24
    30f0:	2a 30       	cpi	r18, 0x0A	; 10
    30f2:	40 f0       	brcs	.+16     	; 0x3104 <vfprintf+0xb4>
    30f4:	8e 32       	cpi	r24, 0x2E	; 46
    30f6:	b9 f4       	brne	.+46     	; 0x3126 <vfprintf+0xd6>
    30f8:	36 fc       	sbrc	r3, 6
    30fa:	81 c1       	rjmp	.+770    	; 0x33fe <vfprintf+0x3ae>
    30fc:	23 2d       	mov	r18, r3
    30fe:	20 64       	ori	r18, 0x40	; 64
    3100:	32 2e       	mov	r3, r18
    3102:	19 c0       	rjmp	.+50     	; 0x3136 <vfprintf+0xe6>
    3104:	36 fe       	sbrs	r3, 6
    3106:	06 c0       	rjmp	.+12     	; 0x3114 <vfprintf+0xc4>
    3108:	8a e0       	ldi	r24, 0x0A	; 10
    310a:	98 9e       	mul	r9, r24
    310c:	20 0d       	add	r18, r0
    310e:	11 24       	eor	r1, r1
    3110:	92 2e       	mov	r9, r18
    3112:	11 c0       	rjmp	.+34     	; 0x3136 <vfprintf+0xe6>
    3114:	ea e0       	ldi	r30, 0x0A	; 10
    3116:	2e 9e       	mul	r2, r30
    3118:	20 0d       	add	r18, r0
    311a:	11 24       	eor	r1, r1
    311c:	22 2e       	mov	r2, r18
    311e:	f3 2d       	mov	r31, r3
    3120:	f0 62       	ori	r31, 0x20	; 32
    3122:	3f 2e       	mov	r3, r31
    3124:	08 c0       	rjmp	.+16     	; 0x3136 <vfprintf+0xe6>
    3126:	8c 36       	cpi	r24, 0x6C	; 108
    3128:	21 f4       	brne	.+8      	; 0x3132 <vfprintf+0xe2>
    312a:	83 2d       	mov	r24, r3
    312c:	80 68       	ori	r24, 0x80	; 128
    312e:	38 2e       	mov	r3, r24
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <vfprintf+0xe6>
    3132:	88 36       	cpi	r24, 0x68	; 104
    3134:	41 f4       	brne	.+16     	; 0x3146 <vfprintf+0xf6>
    3136:	f7 01       	movw	r30, r14
    3138:	93 fd       	sbrc	r25, 3
    313a:	85 91       	lpm	r24, Z+
    313c:	93 ff       	sbrs	r25, 3
    313e:	81 91       	ld	r24, Z+
    3140:	7f 01       	movw	r14, r30
    3142:	81 11       	cpse	r24, r1
    3144:	b3 cf       	rjmp	.-154    	; 0x30ac <vfprintf+0x5c>
    3146:	98 2f       	mov	r25, r24
    3148:	9f 7d       	andi	r25, 0xDF	; 223
    314a:	95 54       	subi	r25, 0x45	; 69
    314c:	93 30       	cpi	r25, 0x03	; 3
    314e:	28 f4       	brcc	.+10     	; 0x315a <vfprintf+0x10a>
    3150:	0c 5f       	subi	r16, 0xFC	; 252
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	9f e3       	ldi	r25, 0x3F	; 63
    3156:	99 83       	std	Y+1, r25	; 0x01
    3158:	0d c0       	rjmp	.+26     	; 0x3174 <vfprintf+0x124>
    315a:	83 36       	cpi	r24, 0x63	; 99
    315c:	31 f0       	breq	.+12     	; 0x316a <vfprintf+0x11a>
    315e:	83 37       	cpi	r24, 0x73	; 115
    3160:	71 f0       	breq	.+28     	; 0x317e <vfprintf+0x12e>
    3162:	83 35       	cpi	r24, 0x53	; 83
    3164:	09 f0       	breq	.+2      	; 0x3168 <vfprintf+0x118>
    3166:	59 c0       	rjmp	.+178    	; 0x321a <vfprintf+0x1ca>
    3168:	21 c0       	rjmp	.+66     	; 0x31ac <vfprintf+0x15c>
    316a:	f8 01       	movw	r30, r16
    316c:	80 81       	ld	r24, Z
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	0e 5f       	subi	r16, 0xFE	; 254
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	88 24       	eor	r8, r8
    3176:	83 94       	inc	r8
    3178:	91 2c       	mov	r9, r1
    317a:	53 01       	movw	r10, r6
    317c:	13 c0       	rjmp	.+38     	; 0x31a4 <vfprintf+0x154>
    317e:	28 01       	movw	r4, r16
    3180:	f2 e0       	ldi	r31, 0x02	; 2
    3182:	4f 0e       	add	r4, r31
    3184:	51 1c       	adc	r5, r1
    3186:	f8 01       	movw	r30, r16
    3188:	a0 80       	ld	r10, Z
    318a:	b1 80       	ldd	r11, Z+1	; 0x01
    318c:	36 fe       	sbrs	r3, 6
    318e:	03 c0       	rjmp	.+6      	; 0x3196 <vfprintf+0x146>
    3190:	69 2d       	mov	r22, r9
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	02 c0       	rjmp	.+4      	; 0x319a <vfprintf+0x14a>
    3196:	6f ef       	ldi	r22, 0xFF	; 255
    3198:	7f ef       	ldi	r23, 0xFF	; 255
    319a:	c5 01       	movw	r24, r10
    319c:	0e 94 14 1a 	call	0x3428	; 0x3428 <strnlen>
    31a0:	4c 01       	movw	r8, r24
    31a2:	82 01       	movw	r16, r4
    31a4:	f3 2d       	mov	r31, r3
    31a6:	ff 77       	andi	r31, 0x7F	; 127
    31a8:	3f 2e       	mov	r3, r31
    31aa:	16 c0       	rjmp	.+44     	; 0x31d8 <vfprintf+0x188>
    31ac:	28 01       	movw	r4, r16
    31ae:	22 e0       	ldi	r18, 0x02	; 2
    31b0:	42 0e       	add	r4, r18
    31b2:	51 1c       	adc	r5, r1
    31b4:	f8 01       	movw	r30, r16
    31b6:	a0 80       	ld	r10, Z
    31b8:	b1 80       	ldd	r11, Z+1	; 0x01
    31ba:	36 fe       	sbrs	r3, 6
    31bc:	03 c0       	rjmp	.+6      	; 0x31c4 <vfprintf+0x174>
    31be:	69 2d       	mov	r22, r9
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <vfprintf+0x178>
    31c4:	6f ef       	ldi	r22, 0xFF	; 255
    31c6:	7f ef       	ldi	r23, 0xFF	; 255
    31c8:	c5 01       	movw	r24, r10
    31ca:	0e 94 09 1a 	call	0x3412	; 0x3412 <strnlen_P>
    31ce:	4c 01       	movw	r8, r24
    31d0:	f3 2d       	mov	r31, r3
    31d2:	f0 68       	ori	r31, 0x80	; 128
    31d4:	3f 2e       	mov	r3, r31
    31d6:	82 01       	movw	r16, r4
    31d8:	33 fc       	sbrc	r3, 3
    31da:	1b c0       	rjmp	.+54     	; 0x3212 <vfprintf+0x1c2>
    31dc:	82 2d       	mov	r24, r2
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	88 16       	cp	r8, r24
    31e2:	99 06       	cpc	r9, r25
    31e4:	b0 f4       	brcc	.+44     	; 0x3212 <vfprintf+0x1c2>
    31e6:	b6 01       	movw	r22, r12
    31e8:	80 e2       	ldi	r24, 0x20	; 32
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    31f0:	2a 94       	dec	r2
    31f2:	f4 cf       	rjmp	.-24     	; 0x31dc <vfprintf+0x18c>
    31f4:	f5 01       	movw	r30, r10
    31f6:	37 fc       	sbrc	r3, 7
    31f8:	85 91       	lpm	r24, Z+
    31fa:	37 fe       	sbrs	r3, 7
    31fc:	81 91       	ld	r24, Z+
    31fe:	5f 01       	movw	r10, r30
    3200:	b6 01       	movw	r22, r12
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    3208:	21 10       	cpse	r2, r1
    320a:	2a 94       	dec	r2
    320c:	21 e0       	ldi	r18, 0x01	; 1
    320e:	82 1a       	sub	r8, r18
    3210:	91 08       	sbc	r9, r1
    3212:	81 14       	cp	r8, r1
    3214:	91 04       	cpc	r9, r1
    3216:	71 f7       	brne	.-36     	; 0x31f4 <vfprintf+0x1a4>
    3218:	e8 c0       	rjmp	.+464    	; 0x33ea <vfprintf+0x39a>
    321a:	84 36       	cpi	r24, 0x64	; 100
    321c:	11 f0       	breq	.+4      	; 0x3222 <vfprintf+0x1d2>
    321e:	89 36       	cpi	r24, 0x69	; 105
    3220:	41 f5       	brne	.+80     	; 0x3272 <vfprintf+0x222>
    3222:	f8 01       	movw	r30, r16
    3224:	37 fe       	sbrs	r3, 7
    3226:	07 c0       	rjmp	.+14     	; 0x3236 <vfprintf+0x1e6>
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	0c 5f       	subi	r16, 0xFC	; 252
    3232:	1f 4f       	sbci	r17, 0xFF	; 255
    3234:	08 c0       	rjmp	.+16     	; 0x3246 <vfprintf+0x1f6>
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	07 2e       	mov	r0, r23
    323c:	00 0c       	add	r0, r0
    323e:	88 0b       	sbc	r24, r24
    3240:	99 0b       	sbc	r25, r25
    3242:	0e 5f       	subi	r16, 0xFE	; 254
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	f3 2d       	mov	r31, r3
    3248:	ff 76       	andi	r31, 0x6F	; 111
    324a:	3f 2e       	mov	r3, r31
    324c:	97 ff       	sbrs	r25, 7
    324e:	09 c0       	rjmp	.+18     	; 0x3262 <vfprintf+0x212>
    3250:	90 95       	com	r25
    3252:	80 95       	com	r24
    3254:	70 95       	com	r23
    3256:	61 95       	neg	r22
    3258:	7f 4f       	sbci	r23, 0xFF	; 255
    325a:	8f 4f       	sbci	r24, 0xFF	; 255
    325c:	9f 4f       	sbci	r25, 0xFF	; 255
    325e:	f0 68       	ori	r31, 0x80	; 128
    3260:	3f 2e       	mov	r3, r31
    3262:	2a e0       	ldi	r18, 0x0A	; 10
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	a3 01       	movw	r20, r6
    3268:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__ultoa_invert>
    326c:	88 2e       	mov	r8, r24
    326e:	86 18       	sub	r8, r6
    3270:	45 c0       	rjmp	.+138    	; 0x32fc <vfprintf+0x2ac>
    3272:	85 37       	cpi	r24, 0x75	; 117
    3274:	31 f4       	brne	.+12     	; 0x3282 <vfprintf+0x232>
    3276:	23 2d       	mov	r18, r3
    3278:	2f 7e       	andi	r18, 0xEF	; 239
    327a:	b2 2e       	mov	r11, r18
    327c:	2a e0       	ldi	r18, 0x0A	; 10
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	25 c0       	rjmp	.+74     	; 0x32cc <vfprintf+0x27c>
    3282:	93 2d       	mov	r25, r3
    3284:	99 7f       	andi	r25, 0xF9	; 249
    3286:	b9 2e       	mov	r11, r25
    3288:	8f 36       	cpi	r24, 0x6F	; 111
    328a:	c1 f0       	breq	.+48     	; 0x32bc <vfprintf+0x26c>
    328c:	18 f4       	brcc	.+6      	; 0x3294 <vfprintf+0x244>
    328e:	88 35       	cpi	r24, 0x58	; 88
    3290:	79 f0       	breq	.+30     	; 0x32b0 <vfprintf+0x260>
    3292:	b5 c0       	rjmp	.+362    	; 0x33fe <vfprintf+0x3ae>
    3294:	80 37       	cpi	r24, 0x70	; 112
    3296:	19 f0       	breq	.+6      	; 0x329e <vfprintf+0x24e>
    3298:	88 37       	cpi	r24, 0x78	; 120
    329a:	21 f0       	breq	.+8      	; 0x32a4 <vfprintf+0x254>
    329c:	b0 c0       	rjmp	.+352    	; 0x33fe <vfprintf+0x3ae>
    329e:	e9 2f       	mov	r30, r25
    32a0:	e0 61       	ori	r30, 0x10	; 16
    32a2:	be 2e       	mov	r11, r30
    32a4:	b4 fe       	sbrs	r11, 4
    32a6:	0d c0       	rjmp	.+26     	; 0x32c2 <vfprintf+0x272>
    32a8:	fb 2d       	mov	r31, r11
    32aa:	f4 60       	ori	r31, 0x04	; 4
    32ac:	bf 2e       	mov	r11, r31
    32ae:	09 c0       	rjmp	.+18     	; 0x32c2 <vfprintf+0x272>
    32b0:	34 fe       	sbrs	r3, 4
    32b2:	0a c0       	rjmp	.+20     	; 0x32c8 <vfprintf+0x278>
    32b4:	29 2f       	mov	r18, r25
    32b6:	26 60       	ori	r18, 0x06	; 6
    32b8:	b2 2e       	mov	r11, r18
    32ba:	06 c0       	rjmp	.+12     	; 0x32c8 <vfprintf+0x278>
    32bc:	28 e0       	ldi	r18, 0x08	; 8
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <vfprintf+0x27c>
    32c2:	20 e1       	ldi	r18, 0x10	; 16
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <vfprintf+0x27c>
    32c8:	20 e1       	ldi	r18, 0x10	; 16
    32ca:	32 e0       	ldi	r19, 0x02	; 2
    32cc:	f8 01       	movw	r30, r16
    32ce:	b7 fe       	sbrs	r11, 7
    32d0:	07 c0       	rjmp	.+14     	; 0x32e0 <vfprintf+0x290>
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	93 81       	ldd	r25, Z+3	; 0x03
    32da:	0c 5f       	subi	r16, 0xFC	; 252
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	06 c0       	rjmp	.+12     	; 0x32ec <vfprintf+0x29c>
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0e 5f       	subi	r16, 0xFE	; 254
    32ea:	1f 4f       	sbci	r17, 0xFF	; 255
    32ec:	a3 01       	movw	r20, r6
    32ee:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__ultoa_invert>
    32f2:	88 2e       	mov	r8, r24
    32f4:	86 18       	sub	r8, r6
    32f6:	fb 2d       	mov	r31, r11
    32f8:	ff 77       	andi	r31, 0x7F	; 127
    32fa:	3f 2e       	mov	r3, r31
    32fc:	36 fe       	sbrs	r3, 6
    32fe:	0d c0       	rjmp	.+26     	; 0x331a <vfprintf+0x2ca>
    3300:	23 2d       	mov	r18, r3
    3302:	2e 7f       	andi	r18, 0xFE	; 254
    3304:	a2 2e       	mov	r10, r18
    3306:	89 14       	cp	r8, r9
    3308:	58 f4       	brcc	.+22     	; 0x3320 <vfprintf+0x2d0>
    330a:	34 fe       	sbrs	r3, 4
    330c:	0b c0       	rjmp	.+22     	; 0x3324 <vfprintf+0x2d4>
    330e:	32 fc       	sbrc	r3, 2
    3310:	09 c0       	rjmp	.+18     	; 0x3324 <vfprintf+0x2d4>
    3312:	83 2d       	mov	r24, r3
    3314:	8e 7e       	andi	r24, 0xEE	; 238
    3316:	a8 2e       	mov	r10, r24
    3318:	05 c0       	rjmp	.+10     	; 0x3324 <vfprintf+0x2d4>
    331a:	b8 2c       	mov	r11, r8
    331c:	a3 2c       	mov	r10, r3
    331e:	03 c0       	rjmp	.+6      	; 0x3326 <vfprintf+0x2d6>
    3320:	b8 2c       	mov	r11, r8
    3322:	01 c0       	rjmp	.+2      	; 0x3326 <vfprintf+0x2d6>
    3324:	b9 2c       	mov	r11, r9
    3326:	a4 fe       	sbrs	r10, 4
    3328:	0f c0       	rjmp	.+30     	; 0x3348 <vfprintf+0x2f8>
    332a:	fe 01       	movw	r30, r28
    332c:	e8 0d       	add	r30, r8
    332e:	f1 1d       	adc	r31, r1
    3330:	80 81       	ld	r24, Z
    3332:	80 33       	cpi	r24, 0x30	; 48
    3334:	21 f4       	brne	.+8      	; 0x333e <vfprintf+0x2ee>
    3336:	9a 2d       	mov	r25, r10
    3338:	99 7e       	andi	r25, 0xE9	; 233
    333a:	a9 2e       	mov	r10, r25
    333c:	09 c0       	rjmp	.+18     	; 0x3350 <vfprintf+0x300>
    333e:	a2 fe       	sbrs	r10, 2
    3340:	06 c0       	rjmp	.+12     	; 0x334e <vfprintf+0x2fe>
    3342:	b3 94       	inc	r11
    3344:	b3 94       	inc	r11
    3346:	04 c0       	rjmp	.+8      	; 0x3350 <vfprintf+0x300>
    3348:	8a 2d       	mov	r24, r10
    334a:	86 78       	andi	r24, 0x86	; 134
    334c:	09 f0       	breq	.+2      	; 0x3350 <vfprintf+0x300>
    334e:	b3 94       	inc	r11
    3350:	a3 fc       	sbrc	r10, 3
    3352:	11 c0       	rjmp	.+34     	; 0x3376 <vfprintf+0x326>
    3354:	a0 fe       	sbrs	r10, 0
    3356:	06 c0       	rjmp	.+12     	; 0x3364 <vfprintf+0x314>
    3358:	b2 14       	cp	r11, r2
    335a:	88 f4       	brcc	.+34     	; 0x337e <vfprintf+0x32e>
    335c:	28 0c       	add	r2, r8
    335e:	92 2c       	mov	r9, r2
    3360:	9b 18       	sub	r9, r11
    3362:	0e c0       	rjmp	.+28     	; 0x3380 <vfprintf+0x330>
    3364:	b2 14       	cp	r11, r2
    3366:	60 f4       	brcc	.+24     	; 0x3380 <vfprintf+0x330>
    3368:	b6 01       	movw	r22, r12
    336a:	80 e2       	ldi	r24, 0x20	; 32
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    3372:	b3 94       	inc	r11
    3374:	f7 cf       	rjmp	.-18     	; 0x3364 <vfprintf+0x314>
    3376:	b2 14       	cp	r11, r2
    3378:	18 f4       	brcc	.+6      	; 0x3380 <vfprintf+0x330>
    337a:	2b 18       	sub	r2, r11
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <vfprintf+0x332>
    337e:	98 2c       	mov	r9, r8
    3380:	21 2c       	mov	r2, r1
    3382:	a4 fe       	sbrs	r10, 4
    3384:	10 c0       	rjmp	.+32     	; 0x33a6 <vfprintf+0x356>
    3386:	b6 01       	movw	r22, r12
    3388:	80 e3       	ldi	r24, 0x30	; 48
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    3390:	a2 fe       	sbrs	r10, 2
    3392:	17 c0       	rjmp	.+46     	; 0x33c2 <vfprintf+0x372>
    3394:	a1 fc       	sbrc	r10, 1
    3396:	03 c0       	rjmp	.+6      	; 0x339e <vfprintf+0x34e>
    3398:	88 e7       	ldi	r24, 0x78	; 120
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <vfprintf+0x352>
    339e:	88 e5       	ldi	r24, 0x58	; 88
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	b6 01       	movw	r22, r12
    33a4:	0c c0       	rjmp	.+24     	; 0x33be <vfprintf+0x36e>
    33a6:	8a 2d       	mov	r24, r10
    33a8:	86 78       	andi	r24, 0x86	; 134
    33aa:	59 f0       	breq	.+22     	; 0x33c2 <vfprintf+0x372>
    33ac:	a1 fe       	sbrs	r10, 1
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <vfprintf+0x364>
    33b0:	8b e2       	ldi	r24, 0x2B	; 43
    33b2:	01 c0       	rjmp	.+2      	; 0x33b6 <vfprintf+0x366>
    33b4:	80 e2       	ldi	r24, 0x20	; 32
    33b6:	a7 fc       	sbrc	r10, 7
    33b8:	8d e2       	ldi	r24, 0x2D	; 45
    33ba:	b6 01       	movw	r22, r12
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    33c2:	89 14       	cp	r8, r9
    33c4:	38 f4       	brcc	.+14     	; 0x33d4 <vfprintf+0x384>
    33c6:	b6 01       	movw	r22, r12
    33c8:	80 e3       	ldi	r24, 0x30	; 48
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    33d0:	9a 94       	dec	r9
    33d2:	f7 cf       	rjmp	.-18     	; 0x33c2 <vfprintf+0x372>
    33d4:	8a 94       	dec	r8
    33d6:	f3 01       	movw	r30, r6
    33d8:	e8 0d       	add	r30, r8
    33da:	f1 1d       	adc	r31, r1
    33dc:	80 81       	ld	r24, Z
    33de:	b6 01       	movw	r22, r12
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    33e6:	81 10       	cpse	r8, r1
    33e8:	f5 cf       	rjmp	.-22     	; 0x33d4 <vfprintf+0x384>
    33ea:	22 20       	and	r2, r2
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <vfprintf+0x3a0>
    33ee:	42 ce       	rjmp	.-892    	; 0x3074 <vfprintf+0x24>
    33f0:	b6 01       	movw	r22, r12
    33f2:	80 e2       	ldi	r24, 0x20	; 32
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 1f 1a 	call	0x343e	; 0x343e <fputc>
    33fa:	2a 94       	dec	r2
    33fc:	f6 cf       	rjmp	.-20     	; 0x33ea <vfprintf+0x39a>
    33fe:	f6 01       	movw	r30, r12
    3400:	86 81       	ldd	r24, Z+6	; 0x06
    3402:	97 81       	ldd	r25, Z+7	; 0x07
    3404:	02 c0       	rjmp	.+4      	; 0x340a <vfprintf+0x3ba>
    3406:	8f ef       	ldi	r24, 0xFF	; 255
    3408:	9f ef       	ldi	r25, 0xFF	; 255
    340a:	2b 96       	adiw	r28, 0x0b	; 11
    340c:	e2 e1       	ldi	r30, 0x12	; 18
    340e:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__epilogue_restores__>

00003412 <strnlen_P>:
    3412:	fc 01       	movw	r30, r24
    3414:	05 90       	lpm	r0, Z+
    3416:	61 50       	subi	r22, 0x01	; 1
    3418:	70 40       	sbci	r23, 0x00	; 0
    341a:	01 10       	cpse	r0, r1
    341c:	d8 f7       	brcc	.-10     	; 0x3414 <strnlen_P+0x2>
    341e:	80 95       	com	r24
    3420:	90 95       	com	r25
    3422:	8e 0f       	add	r24, r30
    3424:	9f 1f       	adc	r25, r31
    3426:	08 95       	ret

00003428 <strnlen>:
    3428:	fc 01       	movw	r30, r24
    342a:	61 50       	subi	r22, 0x01	; 1
    342c:	70 40       	sbci	r23, 0x00	; 0
    342e:	01 90       	ld	r0, Z+
    3430:	01 10       	cpse	r0, r1
    3432:	d8 f7       	brcc	.-10     	; 0x342a <strnlen+0x2>
    3434:	80 95       	com	r24
    3436:	90 95       	com	r25
    3438:	8e 0f       	add	r24, r30
    343a:	9f 1f       	adc	r25, r31
    343c:	08 95       	ret

0000343e <fputc>:
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	fb 01       	movw	r30, r22
    3448:	23 81       	ldd	r18, Z+3	; 0x03
    344a:	21 fd       	sbrc	r18, 1
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <fputc+0x16>
    344e:	8f ef       	ldi	r24, 0xFF	; 255
    3450:	9f ef       	ldi	r25, 0xFF	; 255
    3452:	2c c0       	rjmp	.+88     	; 0x34ac <fputc+0x6e>
    3454:	22 ff       	sbrs	r18, 2
    3456:	16 c0       	rjmp	.+44     	; 0x3484 <fputc+0x46>
    3458:	46 81       	ldd	r20, Z+6	; 0x06
    345a:	57 81       	ldd	r21, Z+7	; 0x07
    345c:	24 81       	ldd	r18, Z+4	; 0x04
    345e:	35 81       	ldd	r19, Z+5	; 0x05
    3460:	42 17       	cp	r20, r18
    3462:	53 07       	cpc	r21, r19
    3464:	44 f4       	brge	.+16     	; 0x3476 <fputc+0x38>
    3466:	a0 81       	ld	r26, Z
    3468:	b1 81       	ldd	r27, Z+1	; 0x01
    346a:	9d 01       	movw	r18, r26
    346c:	2f 5f       	subi	r18, 0xFF	; 255
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
    3470:	31 83       	std	Z+1, r19	; 0x01
    3472:	20 83       	st	Z, r18
    3474:	8c 93       	st	X, r24
    3476:	26 81       	ldd	r18, Z+6	; 0x06
    3478:	37 81       	ldd	r19, Z+7	; 0x07
    347a:	2f 5f       	subi	r18, 0xFF	; 255
    347c:	3f 4f       	sbci	r19, 0xFF	; 255
    347e:	37 83       	std	Z+7, r19	; 0x07
    3480:	26 83       	std	Z+6, r18	; 0x06
    3482:	14 c0       	rjmp	.+40     	; 0x34ac <fputc+0x6e>
    3484:	8b 01       	movw	r16, r22
    3486:	ec 01       	movw	r28, r24
    3488:	fb 01       	movw	r30, r22
    348a:	00 84       	ldd	r0, Z+8	; 0x08
    348c:	f1 85       	ldd	r31, Z+9	; 0x09
    348e:	e0 2d       	mov	r30, r0
    3490:	09 95       	icall
    3492:	89 2b       	or	r24, r25
    3494:	e1 f6       	brne	.-72     	; 0x344e <fputc+0x10>
    3496:	d8 01       	movw	r26, r16
    3498:	16 96       	adiw	r26, 0x06	; 6
    349a:	8d 91       	ld	r24, X+
    349c:	9c 91       	ld	r25, X
    349e:	17 97       	sbiw	r26, 0x07	; 7
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	17 96       	adiw	r26, 0x07	; 7
    34a4:	9c 93       	st	X, r25
    34a6:	8e 93       	st	-X, r24
    34a8:	16 97       	sbiw	r26, 0x06	; 6
    34aa:	ce 01       	movw	r24, r28
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	1f 91       	pop	r17
    34b2:	0f 91       	pop	r16
    34b4:	08 95       	ret

000034b6 <__ultoa_invert>:
    34b6:	fa 01       	movw	r30, r20
    34b8:	aa 27       	eor	r26, r26
    34ba:	28 30       	cpi	r18, 0x08	; 8
    34bc:	51 f1       	breq	.+84     	; 0x3512 <__ultoa_invert+0x5c>
    34be:	20 31       	cpi	r18, 0x10	; 16
    34c0:	81 f1       	breq	.+96     	; 0x3522 <__ultoa_invert+0x6c>
    34c2:	e8 94       	clt
    34c4:	6f 93       	push	r22
    34c6:	6e 7f       	andi	r22, 0xFE	; 254
    34c8:	6e 5f       	subi	r22, 0xFE	; 254
    34ca:	7f 4f       	sbci	r23, 0xFF	; 255
    34cc:	8f 4f       	sbci	r24, 0xFF	; 255
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	af 4f       	sbci	r26, 0xFF	; 255
    34d2:	b1 e0       	ldi	r27, 0x01	; 1
    34d4:	3e d0       	rcall	.+124    	; 0x3552 <__ultoa_invert+0x9c>
    34d6:	b4 e0       	ldi	r27, 0x04	; 4
    34d8:	3c d0       	rcall	.+120    	; 0x3552 <__ultoa_invert+0x9c>
    34da:	67 0f       	add	r22, r23
    34dc:	78 1f       	adc	r23, r24
    34de:	89 1f       	adc	r24, r25
    34e0:	9a 1f       	adc	r25, r26
    34e2:	a1 1d       	adc	r26, r1
    34e4:	68 0f       	add	r22, r24
    34e6:	79 1f       	adc	r23, r25
    34e8:	8a 1f       	adc	r24, r26
    34ea:	91 1d       	adc	r25, r1
    34ec:	a1 1d       	adc	r26, r1
    34ee:	6a 0f       	add	r22, r26
    34f0:	71 1d       	adc	r23, r1
    34f2:	81 1d       	adc	r24, r1
    34f4:	91 1d       	adc	r25, r1
    34f6:	a1 1d       	adc	r26, r1
    34f8:	20 d0       	rcall	.+64     	; 0x353a <__ultoa_invert+0x84>
    34fa:	09 f4       	brne	.+2      	; 0x34fe <__ultoa_invert+0x48>
    34fc:	68 94       	set
    34fe:	3f 91       	pop	r19
    3500:	2a e0       	ldi	r18, 0x0A	; 10
    3502:	26 9f       	mul	r18, r22
    3504:	11 24       	eor	r1, r1
    3506:	30 19       	sub	r19, r0
    3508:	30 5d       	subi	r19, 0xD0	; 208
    350a:	31 93       	st	Z+, r19
    350c:	de f6       	brtc	.-74     	; 0x34c4 <__ultoa_invert+0xe>
    350e:	cf 01       	movw	r24, r30
    3510:	08 95       	ret
    3512:	46 2f       	mov	r20, r22
    3514:	47 70       	andi	r20, 0x07	; 7
    3516:	40 5d       	subi	r20, 0xD0	; 208
    3518:	41 93       	st	Z+, r20
    351a:	b3 e0       	ldi	r27, 0x03	; 3
    351c:	0f d0       	rcall	.+30     	; 0x353c <__ultoa_invert+0x86>
    351e:	c9 f7       	brne	.-14     	; 0x3512 <__ultoa_invert+0x5c>
    3520:	f6 cf       	rjmp	.-20     	; 0x350e <__ultoa_invert+0x58>
    3522:	46 2f       	mov	r20, r22
    3524:	4f 70       	andi	r20, 0x0F	; 15
    3526:	40 5d       	subi	r20, 0xD0	; 208
    3528:	4a 33       	cpi	r20, 0x3A	; 58
    352a:	18 f0       	brcs	.+6      	; 0x3532 <__ultoa_invert+0x7c>
    352c:	49 5d       	subi	r20, 0xD9	; 217
    352e:	31 fd       	sbrc	r19, 1
    3530:	40 52       	subi	r20, 0x20	; 32
    3532:	41 93       	st	Z+, r20
    3534:	02 d0       	rcall	.+4      	; 0x353a <__ultoa_invert+0x84>
    3536:	a9 f7       	brne	.-22     	; 0x3522 <__ultoa_invert+0x6c>
    3538:	ea cf       	rjmp	.-44     	; 0x350e <__ultoa_invert+0x58>
    353a:	b4 e0       	ldi	r27, 0x04	; 4
    353c:	a6 95       	lsr	r26
    353e:	97 95       	ror	r25
    3540:	87 95       	ror	r24
    3542:	77 95       	ror	r23
    3544:	67 95       	ror	r22
    3546:	ba 95       	dec	r27
    3548:	c9 f7       	brne	.-14     	; 0x353c <__ultoa_invert+0x86>
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	61 05       	cpc	r22, r1
    354e:	71 05       	cpc	r23, r1
    3550:	08 95       	ret
    3552:	9b 01       	movw	r18, r22
    3554:	ac 01       	movw	r20, r24
    3556:	0a 2e       	mov	r0, r26
    3558:	06 94       	lsr	r0
    355a:	57 95       	ror	r21
    355c:	47 95       	ror	r20
    355e:	37 95       	ror	r19
    3560:	27 95       	ror	r18
    3562:	ba 95       	dec	r27
    3564:	c9 f7       	brne	.-14     	; 0x3558 <__ultoa_invert+0xa2>
    3566:	62 0f       	add	r22, r18
    3568:	73 1f       	adc	r23, r19
    356a:	84 1f       	adc	r24, r20
    356c:	95 1f       	adc	r25, r21
    356e:	a0 1d       	adc	r26, r0
    3570:	08 95       	ret

00003572 <eeprom_read_byte>:
    3572:	f9 99       	sbic	0x1f, 1	; 31
    3574:	fe cf       	rjmp	.-4      	; 0x3572 <eeprom_read_byte>
    3576:	92 bd       	out	0x22, r25	; 34
    3578:	81 bd       	out	0x21, r24	; 33
    357a:	f8 9a       	sbi	0x1f, 0	; 31
    357c:	99 27       	eor	r25, r25
    357e:	80 b5       	in	r24, 0x20	; 32
    3580:	08 95       	ret

00003582 <eeprom_read_dword>:
    3582:	a6 e1       	ldi	r26, 0x16	; 22
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	44 e0       	ldi	r20, 0x04	; 4
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <eeprom_read_blraw>

0000358e <eeprom_read_word>:
    358e:	a8 e1       	ldi	r26, 0x18	; 24
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	42 e0       	ldi	r20, 0x02	; 2
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <eeprom_read_blraw>

0000359a <eeprom_write_byte>:
    359a:	26 2f       	mov	r18, r22

0000359c <eeprom_write_r18>:
    359c:	f9 99       	sbic	0x1f, 1	; 31
    359e:	fe cf       	rjmp	.-4      	; 0x359c <eeprom_write_r18>
    35a0:	1f ba       	out	0x1f, r1	; 31
    35a2:	92 bd       	out	0x22, r25	; 34
    35a4:	81 bd       	out	0x21, r24	; 33
    35a6:	20 bd       	out	0x20, r18	; 32
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	fa 9a       	sbi	0x1f, 2	; 31
    35ae:	f9 9a       	sbi	0x1f, 1	; 31
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	08 95       	ret

000035b6 <eeprom_write_dword>:
    35b6:	24 2f       	mov	r18, r20
    35b8:	0e 94 ce 1a 	call	0x359c	; 0x359c <eeprom_write_r18>
    35bc:	25 2f       	mov	r18, r21
    35be:	0e 94 ce 1a 	call	0x359c	; 0x359c <eeprom_write_r18>
    35c2:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <eeprom_write_word>

000035c6 <eeprom_write_word>:
    35c6:	0e 94 cd 1a 	call	0x359a	; 0x359a <eeprom_write_byte>
    35ca:	27 2f       	mov	r18, r23
    35cc:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <eeprom_write_r18>

000035d0 <eeprom_read_block>:
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22

000035d4 <eeprom_read_blraw>:
    35d4:	fc 01       	movw	r30, r24
    35d6:	f9 99       	sbic	0x1f, 1	; 31
    35d8:	fe cf       	rjmp	.-4      	; 0x35d6 <eeprom_read_blraw+0x2>
    35da:	06 c0       	rjmp	.+12     	; 0x35e8 <eeprom_read_blraw+0x14>
    35dc:	f2 bd       	out	0x22, r31	; 34
    35de:	e1 bd       	out	0x21, r30	; 33
    35e0:	f8 9a       	sbi	0x1f, 0	; 31
    35e2:	31 96       	adiw	r30, 0x01	; 1
    35e4:	00 b4       	in	r0, 0x20	; 32
    35e6:	0d 92       	st	X+, r0
    35e8:	41 50       	subi	r20, 0x01	; 1
    35ea:	50 40       	sbci	r21, 0x00	; 0
    35ec:	b8 f7       	brcc	.-18     	; 0x35dc <eeprom_read_blraw+0x8>
    35ee:	08 95       	ret

000035f0 <__prologue_saves__>:
    35f0:	2f 92       	push	r2
    35f2:	3f 92       	push	r3
    35f4:	4f 92       	push	r4
    35f6:	5f 92       	push	r5
    35f8:	6f 92       	push	r6
    35fa:	7f 92       	push	r7
    35fc:	8f 92       	push	r8
    35fe:	9f 92       	push	r9
    3600:	af 92       	push	r10
    3602:	bf 92       	push	r11
    3604:	cf 92       	push	r12
    3606:	df 92       	push	r13
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	ca 1b       	sub	r28, r26
    361a:	db 0b       	sbc	r29, r27
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	09 94       	ijmp

00003628 <__epilogue_restores__>:
    3628:	2a 88       	ldd	r2, Y+18	; 0x12
    362a:	39 88       	ldd	r3, Y+17	; 0x11
    362c:	48 88       	ldd	r4, Y+16	; 0x10
    362e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3630:	6e 84       	ldd	r6, Y+14	; 0x0e
    3632:	7d 84       	ldd	r7, Y+13	; 0x0d
    3634:	8c 84       	ldd	r8, Y+12	; 0x0c
    3636:	9b 84       	ldd	r9, Y+11	; 0x0b
    3638:	aa 84       	ldd	r10, Y+10	; 0x0a
    363a:	b9 84       	ldd	r11, Y+9	; 0x09
    363c:	c8 84       	ldd	r12, Y+8	; 0x08
    363e:	df 80       	ldd	r13, Y+7	; 0x07
    3640:	ee 80       	ldd	r14, Y+6	; 0x06
    3642:	fd 80       	ldd	r15, Y+5	; 0x05
    3644:	0c 81       	ldd	r16, Y+4	; 0x04
    3646:	1b 81       	ldd	r17, Y+3	; 0x03
    3648:	aa 81       	ldd	r26, Y+2	; 0x02
    364a:	b9 81       	ldd	r27, Y+1	; 0x01
    364c:	ce 0f       	add	r28, r30
    364e:	d1 1d       	adc	r29, r1
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	ed 01       	movw	r28, r26
    365c:	08 95       	ret

0000365e <_exit>:
    365e:	f8 94       	cli

00003660 <__stop_program>:
    3660:	ff cf       	rjmp	.-2      	; 0x3660 <__stop_program>
