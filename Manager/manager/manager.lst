
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  000039ba  00003a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023d  008001a4  008001a4  00003af2  2**0
                  ALLOC
  3 .stab         0000cbc4  00000000  00000000  00003af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003122  00000000  00000000  000106b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000137da  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000137ec  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  00013830  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2d  00000000  00000000  00013910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  0001463d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000052c  00000000  00000000  00014f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  00015463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 17 12 	jmp	0x242e	; 0x242e <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 17 18 	jmp	0x302e	; 0x302e <__vector_18>
      4c:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 87 11 	jmp	0x230e	; 0x230e <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ea eb       	ldi	r30, 0xBA	; 186
      ce:	f9 e3       	ldi	r31, 0x39	; 57
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a4 3a       	cpi	r26, 0xA4	; 164
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	a4 ea       	ldi	r26, 0xA4	; 164
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a1 3e       	cpi	r26, 0xE1	; 225
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <main>
      f0:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
      f8:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <host_is_foreign>
      fc:	88 23       	and	r24, r24
      fe:	c1 f0       	breq	.+48     	; 0x130 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     104:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     110:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <local_mcu_is_rpu_aware>
     114:	88 23       	and	r24, r24
     116:	21 f0       	breq	.+8      	; 0x120 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	5d 9a       	sbi	0x0b, 5	; 11
     11e:	03 c0       	rjmp	.+6      	; 0x126 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
     122:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     124:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	42 9a       	sbi	0x08, 2	; 8
     12e:	17 c0       	rjmp	.+46     	; 0x15e <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     13c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     140:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <local_mcu_is_rpu_aware>
     144:	88 23       	and	r24, r24
     146:	21 f0       	breq	.+8      	; 0x150 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	5d 9a       	sbi	0x0b, 5	; 11
     14e:	03 c0       	rjmp	.+6      	; 0x156 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
     152:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     154:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     15c:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     160:	08 95       	ret

00000162 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     162:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <host_is_foreign>
     166:	88 23       	and	r24, r24
     168:	81 f0       	breq	.+32     	; 0x18a <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     16a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     16e:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     170:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     172:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     174:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     176:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     178:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     17a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17e:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     180:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     182:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     184:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     186:	42 9a       	sbi	0x08, 2	; 8
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     18a:	8f b7       	in	r24, 0x3f	; 63
     18c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18e:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     190:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     192:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     194:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     196:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     198:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     19a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     19e:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1a6:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     1aa:	08 95       	ret

000001ac <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     1ac:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <host_is_foreign>
     1b0:	88 23       	and	r24, r24
     1b2:	81 f0       	breq	.+32     	; 0x1d4 <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1b6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1b8:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ba:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1be:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1c0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1c2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1c4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1c6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1c8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1ce:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1d0:	42 9a       	sbi	0x08, 2	; 8
     1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <connect_lockout_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1d4:	8f b7       	in	r24, 0x3f	; 63
     1d6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1d8:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1da:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1de:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1e0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1e2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1e4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1e6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1e8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ea:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1ee:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1f0:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1f2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     1f4:	08 95       	ret

000001f6 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     1fa:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <shutdown_detected>
     1fe:	81 11       	cpse	r24, r1
     200:	a6 c0       	rjmp	.+332    	; 0x34e <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     202:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     206:	00 91 00 03 	lds	r16, 0x0300	; 0x800300 <blink_started_at>
     20a:	10 91 01 03 	lds	r17, 0x0301	; 0x800301 <blink_started_at+0x1>
     20e:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <blink_started_at+0x2>
     212:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <blink_started_at+0x3>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	80 1b       	sub	r24, r16
     21c:	91 0b       	sbc	r25, r17
     21e:	a2 0b       	sbc	r26, r18
     220:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     222:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <status_byt>
     226:	27 7f       	andi	r18, 0xF7	; 247
     228:	09 f0       	breq	.+2      	; 0x22c <blink_on_activate+0x36>
     22a:	6d c0       	rjmp	.+218    	; 0x306 <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     22c:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <host_is_foreign>
     230:	22 23       	and	r18, r18
     232:	21 f0       	breq	.+8      	; 0x23c <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     234:	b6 95       	lsr	r27
     236:	a7 95       	ror	r26
     238:	97 95       	ror	r25
     23a:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     23c:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <bootloader_started>
     240:	22 23       	and	r18, r18
     242:	e9 f0       	breq	.+58     	; 0x27e <blink_on_activate+0x88>
     244:	8c 34       	cpi	r24, 0x4C	; 76
     246:	91 05       	cpc	r25, r1
     248:	a1 05       	cpc	r26, r1
     24a:	b1 05       	cpc	r27, r1
     24c:	c0 f0       	brcs	.+48     	; 0x27e <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     24e:	25 9b       	sbis	0x04, 5	; 4
     250:	09 c0       	rjmp	.+18     	; 0x264 <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     252:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     254:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     256:	f8 94       	cli
    {
        if (value_for_bit) 
     258:	95 fd       	sbrc	r25, 5
     25a:	02 c0       	rjmp	.+4      	; 0x260 <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     25c:	2d 9a       	sbi	0x05, 5	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     260:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     262:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     264:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <blink_started_at>
     268:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <blink_started_at+0x1>
     26c:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <blink_started_at+0x2>
     270:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <blink_started_at+0x3>
     274:	85 5b       	subi	r24, 0xB5	; 181
     276:	9f 4f       	sbci	r25, 0xFF	; 255
     278:	af 4f       	sbci	r26, 0xFF	; 255
     27a:	bf 4f       	sbci	r27, 0xFF	; 255
     27c:	60 c0       	rjmp	.+192    	; 0x33e <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     27e:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <lockout_active>
     282:	22 23       	and	r18, r18
     284:	f1 f0       	breq	.+60     	; 0x2c2 <blink_on_activate+0xcc>
     286:	81 3d       	cpi	r24, 0xD1	; 209
     288:	27 e0       	ldi	r18, 0x07	; 7
     28a:	92 07       	cpc	r25, r18
     28c:	a1 05       	cpc	r26, r1
     28e:	b1 05       	cpc	r27, r1
     290:	c0 f0       	brcs	.+48     	; 0x2c2 <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     292:	25 9b       	sbis	0x04, 5	; 4
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     296:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     298:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     29a:	f8 94       	cli
    {
        if (value_for_bit) 
     29c:	95 fd       	sbrc	r25, 5
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     2a0:	2d 9a       	sbi	0x05, 5	; 5
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     2a4:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2a6:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     2a8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <blink_started_at>
     2ac:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <blink_started_at+0x1>
     2b0:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <blink_started_at+0x2>
     2b4:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <blink_started_at+0x3>
     2b8:	80 53       	subi	r24, 0x30	; 48
     2ba:	98 4f       	sbci	r25, 0xF8	; 248
     2bc:	af 4f       	sbci	r26, 0xFF	; 255
     2be:	bf 4f       	sbci	r27, 0xFF	; 255
     2c0:	3e c0       	rjmp	.+124    	; 0x33e <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     2c2:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <host_active>
     2c6:	22 23       	and	r18, r18
     2c8:	09 f4       	brne	.+2      	; 0x2cc <blink_on_activate+0xd6>
     2ca:	41 c0       	rjmp	.+130    	; 0x34e <blink_on_activate+0x158>
     2cc:	85 3f       	cpi	r24, 0xF5	; 245
     2ce:	91 40       	sbci	r25, 0x01	; 1
     2d0:	a1 05       	cpc	r26, r1
     2d2:	b1 05       	cpc	r27, r1
     2d4:	e0 f1       	brcs	.+120    	; 0x34e <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     2d6:	25 9b       	sbis	0x04, 5	; 4
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     2da:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     2dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2de:	f8 94       	cli
    {
        if (value_for_bit) 
     2e0:	95 fd       	sbrc	r25, 5
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     2e4:	2d 9a       	sbi	0x05, 5	; 5
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     2e8:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ea:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     2ec:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <blink_started_at>
     2f0:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <blink_started_at+0x1>
     2f4:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <blink_started_at+0x2>
     2f8:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <blink_started_at+0x3>
     2fc:	8c 50       	subi	r24, 0x0C	; 12
     2fe:	9e 4f       	sbci	r25, 0xFE	; 254
     300:	af 4f       	sbci	r26, 0xFF	; 255
     302:	bf 4f       	sbci	r27, 0xFF	; 255
     304:	1c c0       	rjmp	.+56     	; 0x33e <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     306:	89 3c       	cpi	r24, 0xC9	; 201
     308:	91 05       	cpc	r25, r1
     30a:	a1 05       	cpc	r26, r1
     30c:	b1 05       	cpc	r27, r1
     30e:	f8 f0       	brcs	.+62     	; 0x34e <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     310:	25 9b       	sbis	0x04, 5	; 4
     312:	09 c0       	rjmp	.+18     	; 0x326 <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     314:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     316:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     318:	f8 94       	cli
    {
        if (value_for_bit) 
     31a:	95 fd       	sbrc	r25, 5
     31c:	02 c0       	rjmp	.+4      	; 0x322 <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     31e:	2d 9a       	sbi	0x05, 5	; 5
     320:	01 c0       	rjmp	.+2      	; 0x324 <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     322:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     324:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     326:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <blink_started_at>
     32a:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <blink_started_at+0x1>
     32e:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <blink_started_at+0x2>
     332:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <blink_started_at+0x3>
     336:	88 53       	subi	r24, 0x38	; 56
     338:	9f 4f       	sbci	r25, 0xFF	; 255
     33a:	af 4f       	sbci	r26, 0xFF	; 255
     33c:	bf 4f       	sbci	r27, 0xFF	; 255
     33e:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <blink_started_at>
     342:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <blink_started_at+0x1>
     346:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <blink_started_at+0x2>
     34a:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <blink_started_at+0x3>
        }
    }
}
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
    if (bootloader_started)
     358:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <bootloader_started>
     35c:	88 23       	and	r24, r24
     35e:	01 f1       	breq	.+64     	; 0x3a0 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     360:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     364:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode>
     368:	21 11       	cpse	r18, r1
     36a:	1a c0       	rjmp	.+52     	; 0x3a0 <check_Bootload_Time+0x4c>
     36c:	00 91 ed 02 	lds	r16, 0x02ED	; 0x8002ed <bootloader_started_at>
     370:	10 91 ee 02 	lds	r17, 0x02EE	; 0x8002ee <bootloader_started_at+0x1>
     374:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started_at+0x2>
     378:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <bootloader_started_at+0x3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	80 1b       	sub	r24, r16
     382:	91 0b       	sbc	r25, r17
     384:	a2 0b       	sbc	r26, r18
     386:	b3 0b       	sbc	r27, r19
     388:	89 33       	cpi	r24, 0x39	; 57
     38a:	91 4c       	sbci	r25, 0xC1	; 193
     38c:	a1 40       	sbci	r26, 0x01	; 1
     38e:	b1 05       	cpc	r27, r1
     390:	38 f0       	brcs	.+14     	; 0x3a0 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     392:	0e 94 7c 00 	call	0xf8	; 0xf8 <connect_normal_mode>
            host_active =1;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <host_active>
            bootloader_started = 0;
     39c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <bootloader_started>
        }
    }
}
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     3aa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     3ae:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode>
     3b2:	21 11       	cpse	r18, r1
     3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <check_lockout+0x4c>
     3b6:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <lockout_active>
     3ba:	22 23       	and	r18, r18
     3bc:	d1 f0       	breq	.+52     	; 0x3f2 <check_lockout+0x4c>
     3be:	00 91 f1 02 	lds	r16, 0x02F1	; 0x8002f1 <lockout_started_at>
     3c2:	10 91 f2 02 	lds	r17, 0x02F2	; 0x8002f2 <lockout_started_at+0x1>
     3c6:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <lockout_started_at+0x2>
     3ca:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <lockout_started_at+0x3>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	80 1b       	sub	r24, r16
     3d4:	91 0b       	sbc	r25, r17
     3d6:	a2 0b       	sbc	r26, r18
     3d8:	b3 0b       	sbc	r27, r19
     3da:	81 3c       	cpi	r24, 0xC1	; 193
     3dc:	94 4d       	sbci	r25, 0xD4	; 212
     3de:	a1 40       	sbci	r26, 0x01	; 1
     3e0:	b1 05       	cpc	r27, r1
     3e2:	38 f0       	brcs	.+14     	; 0x3f2 <check_lockout+0x4c>
    {
        connect_normal_mode();
     3e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <connect_normal_mode>

        host_active = 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <host_active>
        lockout_active =0;
     3ee:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <lockout_active>
    }
}
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <check_shutdown>:


void check_shutdown(void)
{
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
    if (shutdown_started)
     3fc:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <shutdown_started>
     400:	88 23       	and	r24, r24
     402:	19 f1       	breq	.+70     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     404:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     408:	00 91 05 03 	lds	r16, 0x0305	; 0x800305 <shutdown_started_at>
     40c:	10 91 06 03 	lds	r17, 0x0306	; 0x800306 <shutdown_started_at+0x1>
     410:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <shutdown_started_at+0x2>
     414:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <shutdown_started_at+0x3>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	80 1b       	sub	r24, r16
     41e:	91 0b       	sbc	r25, r17
     420:	a2 0b       	sbc	r26, r18
     422:	b3 0b       	sbc	r27, r19
     424:	89 3e       	cpi	r24, 0xE9	; 233
     426:	93 40       	sbci	r25, 0x03	; 3
     428:	a1 05       	cpc	r26, r1
     42a:	b1 05       	cpc	r27, r1
     42c:	98 f1       	brcs	.+102    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     42e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     430:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     432:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     434:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     436:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     438:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     43a:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     43c:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     43e:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <shutdown_detected>
     448:	25 c0       	rjmp	.+74     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
        }
    }
    else
        if (!shutdown_detected) 
     44a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <shutdown_detected>
     44e:	81 11       	cpse	r24, r1
     450:	21 c0       	rjmp	.+66     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     452:	18 99       	sbic	0x03, 0	; 3
     454:	1f c0       	rjmp	.+62     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     456:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     458:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     45a:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     45c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     45e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     460:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     462:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     464:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     466:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     468:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     46a:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     46c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     46e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     470:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     472:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     474:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     476:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <shutdown_started>
                shutdown_started_at = millis();
     480:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     484:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <shutdown_started_at>
     488:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <shutdown_started_at+0x1>
     48c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <shutdown_started_at+0x2>
     490:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <shutdown_started_at+0x3>
            }
        }
}
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <check_DTR>:
uint8_t uart_previous_byte;
uint8_t my_mcu_is_target_and_i_have_it_reset;

void check_DTR(void)
{
    if (!host_is_foreign) 
     49a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <host_is_foreign>
     49e:	81 11       	cpse	r24, r1
     4a0:	b5 c0       	rjmp	.+362    	; 0x60c <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     4a2:	4b 99       	sbic	0x09, 3	; 9
     4a4:	56 c0       	rjmp	.+172    	; 0x552 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     4a6:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <status_byt>
     4aa:	83 fd       	sbrc	r24, 3
     4ac:	af c0       	rjmp	.+350    	; 0x60c <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     4ae:	4a 9b       	sbis	0x09, 2	; 9
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4b2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4b4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4b6:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4b8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     4ba:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     4bc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <bootloader_started>
     4c0:	81 11       	cpse	r24, r1
     4c2:	a4 c0       	rjmp	.+328    	; 0x60c <check_DTR+0x172>
     4c4:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <lockout_active>
     4c8:	81 11       	cpse	r24, r1
     4ca:	a0 c0       	rjmp	.+320    	; 0x60c <check_DTR+0x172>
     4cc:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <host_active>
     4d0:	81 11       	cpse	r24, r1
     4d2:	9c c0       	rjmp	.+312    	; 0x60c <check_DTR+0x172>
     4d4:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <uart_has_TTL>
     4d8:	81 11       	cpse	r24, r1
     4da:	98 c0       	rjmp	.+304    	; 0x60c <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     4dc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     4e0:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
     4e4:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
     4e8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
     4ec:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     4f0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <bootloader_address>
     4f4:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     4f8:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
     4fc:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
     500:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <uart_output>
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	20 95       	com	r18
     508:	30 95       	com	r19
     50a:	2a 70       	andi	r18, 0x0A	; 10
     50c:	33 27       	eor	r19, r19
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	6a 95       	dec	r22
     516:	e1 f7       	brne	.-8      	; 0x510 <check_DTR+0x76>
     518:	89 2f       	mov	r24, r25
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	80 95       	com	r24
     51e:	90 95       	com	r25
     520:	80 75       	andi	r24, 0x50	; 80
     522:	99 27       	eor	r25, r25
     524:	74 e0       	ldi	r23, 0x04	; 4
     526:	95 95       	asr	r25
     528:	87 95       	ror	r24
     52a:	7a 95       	dec	r23
     52c:	e1 f7       	brne	.-8      	; 0x526 <check_DTR+0x8c>
     52e:	82 2b       	or	r24, r18
     530:	93 2b       	or	r25, r19
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	1f 92       	push	r1
     538:	4f 93       	push	r20
     53a:	86 e1       	ldi	r24, 0x16	; 22
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
                        uart_has_TTL = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <uart_has_TTL>
                        localhost_active = 1;
     54c:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <localhost_active>
     550:	57 c0       	rjmp	.+174    	; 0x600 <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     552:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <host_active>
     556:	88 23       	and	r24, r24
     558:	09 f4       	brne	.+2      	; 0x55c <check_DTR+0xc2>
     55a:	58 c0       	rjmp	.+176    	; 0x60c <check_DTR+0x172>
     55c:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <localhost_active>
     560:	88 23       	and	r24, r24
     562:	09 f4       	brne	.+2      	; 0x566 <check_DTR+0xcc>
     564:	53 c0       	rjmp	.+166    	; 0x60c <check_DTR+0x172>
     566:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <uart_has_TTL>
     56a:	81 11       	cpse	r24, r1
     56c:	4f c0       	rjmp	.+158    	; 0x60c <check_DTR+0x172>
     56e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <bootloader_started>
     572:	81 11       	cpse	r24, r1
     574:	4b c0       	rjmp	.+150    	; 0x60c <check_DTR+0x172>
     576:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <lockout_active>
     57a:	81 11       	cpse	r24, r1
     57c:	47 c0       	rjmp	.+142    	; 0x60c <check_DTR+0x172>
            {
                // send a byte on the DTR pair when local host serial nRTS becomes non-active
                uart_started_at = millis();
     57e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     582:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
     586:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
     58a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
     58e:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     592:	8f ec       	ldi	r24, 0xCF	; 207
     594:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     598:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
     59c:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
     5a0:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <uart_output>
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	20 95       	com	r18
     5a8:	30 95       	com	r19
     5aa:	2a 70       	andi	r18, 0x0A	; 10
     5ac:	33 27       	eor	r19, r19
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	22 0f       	add	r18, r18
     5b2:	33 1f       	adc	r19, r19
     5b4:	8a 95       	dec	r24
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <check_DTR+0x116>
     5b8:	89 2f       	mov	r24, r25
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	80 95       	com	r24
     5be:	90 95       	com	r25
     5c0:	80 75       	andi	r24, 0x50	; 80
     5c2:	99 27       	eor	r25, r25
     5c4:	54 e0       	ldi	r21, 0x04	; 4
     5c6:	95 95       	asr	r25
     5c8:	87 95       	ror	r24
     5ca:	5a 95       	dec	r21
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <check_DTR+0x12c>
     5ce:	82 2b       	or	r24, r18
     5d0:	93 2b       	or	r25, r19
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	1f 92       	push	r1
     5d8:	4f 93       	push	r20
     5da:	86 e1       	ldi	r24, 0x16	; 22
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
                uart_has_TTL = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     5ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ee:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     5f0:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5f2:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     5f4:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     5f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     5fc:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5fe:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	08 95       	ret

0000060e <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     62e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     632:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <uart_has_TTL>
     636:	22 23       	and	r18, r18
     638:	d9 f0       	breq	.+54     	; 0x670 <check_uart+0x62>
     63a:	40 90 12 03 	lds	r4, 0x0312	; 0x800312 <uart_started_at>
     63e:	50 90 13 03 	lds	r5, 0x0313	; 0x800313 <uart_started_at+0x1>
     642:	60 90 14 03 	lds	r6, 0x0314	; 0x800314 <uart_started_at+0x2>
     646:	70 90 15 03 	lds	r7, 0x0315	; 0x800315 <uart_started_at+0x3>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	84 19       	sub	r24, r4
     650:	95 09       	sbc	r25, r5
     652:	a6 09       	sbc	r26, r6
     654:	b7 09       	sbc	r27, r7
     656:	85 3f       	cpi	r24, 0xF5	; 245
     658:	91 40       	sbci	r25, 0x01	; 1
     65a:	a1 05       	cpc	r26, r1
     65c:	b1 05       	cpc	r27, r1
     65e:	40 f0       	brcs	.+16     	; 0x670 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     660:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <status_byt>
     664:	81 70       	andi	r24, 0x01	; 1
     666:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <status_byt>
        uart_has_TTL = 0;
     66a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <uart_has_TTL>
     66e:	f0 c1       	rjmp	.+992    	; 0xa50 <__stack+0x151>
    }
    else
    {
        if ( uart0_available() )
     670:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart0_available>
     674:	89 2b       	or	r24, r25
     676:	09 f4       	brne	.+2      	; 0x67a <check_uart+0x6c>
     678:	eb c1       	rjmp	.+982    	; 0xa50 <__stack+0x151>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     67a:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <__iob>
     67e:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <__iob+0x1>
     682:	0e 94 77 19 	call	0x32ee	; 0x32ee <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     686:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <uart_previous_byte>
     68a:	26 2f       	mov	r18, r22
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	20 95       	com	r18
     690:	30 95       	com	r19
     692:	a9 01       	movw	r20, r18
     694:	4a 70       	andi	r20, 0x0A	; 10
     696:	55 27       	eor	r21, r21
     698:	74 e0       	ldi	r23, 0x04	; 4
     69a:	44 0f       	add	r20, r20
     69c:	55 1f       	adc	r21, r21
     69e:	7a 95       	dec	r23
     6a0:	e1 f7       	brne	.-8      	; 0x69a <check_uart+0x8c>
     6a2:	20 75       	andi	r18, 0x50	; 80
     6a4:	33 27       	eor	r19, r19
     6a6:	e4 e0       	ldi	r30, 0x04	; 4
     6a8:	35 95       	asr	r19
     6aa:	27 95       	ror	r18
     6ac:	ea 95       	dec	r30
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <check_uart+0x9a>
     6b0:	24 2b       	or	r18, r20
     6b2:	35 2b       	or	r19, r21
     6b4:	ac 01       	movw	r20, r24
     6b6:	55 27       	eor	r21, r21
     6b8:	24 17       	cp	r18, r20
     6ba:	35 07       	cpc	r19, r21
     6bc:	39 f4       	brne	.+14     	; 0x6cc <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     6be:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently since I 
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     6c2:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <uart_has_TTL>
     6c6:	81 11       	cpse	r24, r1
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <check_uart+0xc4>
     6ca:	0f c0       	rjmp	.+30     	; 0x6ea <check_uart+0xdc>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     6cc:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <uart_previous_byte>
                return;
     6d0:	bf c1       	rjmp	.+894    	; 0xa50 <__stack+0x151>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently since I 
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     6d2:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <uart_output>
     6d6:	68 17       	cp	r22, r24
     6d8:	29 f0       	breq	.+10     	; 0x6e4 <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     6da:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <status_byt>
     6de:	84 70       	andi	r24, 0x04	; 4
     6e0:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <status_byt>
                }
                uart_has_TTL = 0;
     6e4:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <uart_has_TTL>
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <check_uart+0xe4>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     6ea:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <localhost_active>
     6ee:	88 23       	and	r24, r24
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <check_uart+0xea>
                {
                    host_is_foreign = 0; // used to connect the host
     6f2:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <host_is_foreign>
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <check_uart+0xf0>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     6fe:	61 11       	cpse	r22, r1
     700:	27 c0       	rjmp	.+78     	; 0x750 <check_uart+0x142>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     702:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	80 5c       	subi	r24, 0xC0	; 192
     70c:	94 4d       	sbci	r25, 0xD4	; 212
     70e:	a1 40       	sbci	r26, 0x01	; 1
     710:	b1 09       	sbc	r27, r1
     712:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <lockout_started_at>
     716:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <lockout_started_at+0x1>
     71a:	a0 93 f3 02 	sts	0x02F3, r26	; 0x8002f3 <lockout_started_at+0x2>
     71e:	b0 93 f4 02 	sts	0x02F4, r27	; 0x8002f4 <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     722:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     726:	dc 01       	movw	r26, r24
     728:	cb 01       	movw	r24, r22
     72a:	88 53       	subi	r24, 0x38	; 56
     72c:	91 4c       	sbci	r25, 0xC1	; 193
     72e:	a1 40       	sbci	r26, 0x01	; 1
     730:	b1 09       	sbc	r27, r1
     732:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <bootloader_started_at>
     736:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <bootloader_started_at+0x1>
     73a:	a0 93 ef 02 	sts	0x02EF, r26	; 0x8002ef <bootloader_started_at+0x2>
     73e:	b0 93 f0 02 	sts	0x02F0, r27	; 0x8002f0 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     742:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     744:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     746:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     748:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     74a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode>
     74e:	59 c1       	rjmp	.+690    	; 0xa02 <__stack+0x103>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     750:	6f 3f       	cpi	r22, 0xFF	; 255
     752:	31 f4       	brne	.+12     	; 0x760 <check_uart+0x152>
            {
                arduino_mode_started = 0;
     754:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <arduino_mode_started>
                arduino_mode = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <arduino_mode>
                return;
     75e:	78 c1       	rjmp	.+752    	; 0xa50 <__stack+0x151>
            }
            if (input == RPU_START_TEST_MODE) 
     760:	61 30       	cpi	r22, 0x01	; 1
     762:	09 f0       	breq	.+2      	; 0x766 <check_uart+0x158>
     764:	6f c0       	rjmp	.+222    	; 0x844 <check_uart+0x236>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     766:	f9 b1       	in	r31, 0x09	; 9
     768:	e9 b1       	in	r30, 0x09	; 9
     76a:	56 b1       	in	r21, 0x06	; 6
     76c:	49 b1       	in	r20, 0x09	; 9
     76e:	39 b1       	in	r19, 0x09	; 9
     770:	89 b1       	in	r24, 0x09	; 9
     772:	29 b1       	in	r18, 0x09	; 9
     774:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	88 0f       	add	r24, r24
     77a:	89 2f       	mov	r24, r25
     77c:	88 1f       	adc	r24, r24
     77e:	99 0b       	sbc	r25, r25
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	73 fb       	bst	r23, 3
     78a:	99 27       	eor	r25, r25
     78c:	90 f9       	bld	r25, 0
     78e:	89 2b       	or	r24, r25
     790:	f3 fb       	bst	r31, 3
     792:	aa 24       	eor	r10, r10
     794:	a0 f8       	bld	r10, 0
     796:	b1 2c       	mov	r11, r1
     798:	b6 94       	lsr	r11
     79a:	ba 2c       	mov	r11, r10
     79c:	aa 24       	eor	r10, r10
     79e:	b7 94       	ror	r11
     7a0:	a7 94       	ror	r10
     7a2:	a8 2a       	or	r10, r24
     7a4:	e2 fb       	bst	r30, 2
     7a6:	cc 24       	eor	r12, r12
     7a8:	c0 f8       	bld	r12, 0
     7aa:	d1 2c       	mov	r13, r1
     7ac:	d6 e0       	ldi	r29, 0x06	; 6
     7ae:	cc 0c       	add	r12, r12
     7b0:	dd 1c       	adc	r13, r13
     7b2:	da 95       	dec	r29
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <check_uart+0x1a0>
     7b6:	ca 28       	or	r12, r10
     7b8:	52 fb       	bst	r21, 2
     7ba:	ee 24       	eor	r14, r14
     7bc:	e0 f8       	bld	r14, 0
     7be:	f1 2c       	mov	r15, r1
     7c0:	15 e0       	ldi	r17, 0x05	; 5
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	1a 95       	dec	r17
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <check_uart+0x1b4>
     7ca:	ec 28       	or	r14, r12
     7cc:	45 fb       	bst	r20, 5
     7ce:	00 27       	eor	r16, r16
     7d0:	00 f9       	bld	r16, 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	00 0f       	add	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <check_uart+0x1c8>
     7de:	0e 29       	or	r16, r14
     7e0:	36 fb       	bst	r19, 6
     7e2:	33 27       	eor	r19, r19
     7e4:	30 f9       	bld	r19, 0
     7e6:	c3 2f       	mov	r28, r19
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	d8 2f       	mov	r29, r24
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	cc 0f       	add	r28, r28
     7f0:	dd 1f       	adc	r29, r29
     7f2:	9a 95       	dec	r25
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <check_uart+0x1e0>
     7f6:	c0 2b       	or	r28, r16
     7f8:	24 fb       	bst	r18, 4
     7fa:	88 24       	eor	r8, r8
     7fc:	80 f8       	bld	r8, 0
     7fe:	91 2c       	mov	r9, r1
     800:	88 0c       	add	r8, r8
     802:	99 1c       	adc	r9, r9
     804:	8c 2a       	or	r8, r28
     806:	80 92 fc 02 	sts	0x02FC, r8	; 0x8002fc <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     80a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     80c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     80e:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     810:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     812:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     814:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     816:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     818:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     81a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     81c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     81e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     820:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     822:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     824:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     826:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     828:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     82a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     82c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     82e:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     830:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     832:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     834:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     836:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     838:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     83a:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <test_mode_started>
                test_mode = 1;
     83e:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <test_mode>
                return;
     842:	06 c1       	rjmp	.+524    	; 0xa50 <__stack+0x151>
            }
            if (input == RPU_END_TEST_MODE) 
     844:	6e 3f       	cpi	r22, 0xFE	; 254
     846:	09 f0       	breq	.+2      	; 0x84a <check_uart+0x23c>
     848:	76 c0       	rjmp	.+236    	; 0x936 <__stack+0x37>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     84a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     84e:	88 1f       	adc	r24, r24
     850:	88 27       	eor	r24, r24
     852:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     854:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     856:	f8 94       	cli
    {
        if (value_for_bit) 
     858:	88 23       	and	r24, r24
     85a:	11 f0       	breq	.+4      	; 0x860 <check_uart+0x252>
        {
            *register_addr |= 1 << bit_offset;
     85c:	5b 9a       	sbi	0x0b, 3	; 11
     85e:	01 c0       	rjmp	.+2      	; 0x862 <check_uart+0x254>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     860:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     862:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     864:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     868:	86 fb       	bst	r24, 6
     86a:	88 27       	eor	r24, r24
     86c:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     86e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     870:	f8 94       	cli
    {
        if (value_for_bit) 
     872:	88 23       	and	r24, r24
     874:	11 f0       	breq	.+4      	; 0x87a <check_uart+0x26c>
        {
            *register_addr |= 1 << bit_offset;
     876:	5a 9a       	sbi	0x0b, 2	; 11
     878:	01 c0       	rjmp	.+2      	; 0x87c <check_uart+0x26e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     87a:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     87c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     87e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     882:	85 fb       	bst	r24, 5
     884:	88 27       	eor	r24, r24
     886:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     888:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     88a:	f8 94       	cli
    {
        if (value_for_bit) 
     88c:	88 23       	and	r24, r24
     88e:	11 f0       	breq	.+4      	; 0x894 <check_uart+0x286>
        {
            *register_addr |= 1 << bit_offset;
     890:	42 9a       	sbi	0x08, 2	; 8
     892:	01 c0       	rjmp	.+2      	; 0x896 <check_uart+0x288>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     894:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     896:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     898:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     89c:	82 95       	swap	r24
     89e:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8a0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8a2:	f8 94       	cli
    {
        if (value_for_bit) 
     8a4:	88 23       	and	r24, r24
     8a6:	11 f0       	breq	.+4      	; 0x8ac <check_uart+0x29e>
        {
            *register_addr |= 1 << bit_offset;
     8a8:	5d 9a       	sbi	0x0b, 5	; 11
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <check_uart+0x2a0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8ac:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8ae:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8b0:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     8b4:	83 fb       	bst	r24, 3
     8b6:	88 27       	eor	r24, r24
     8b8:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8ba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8bc:	f8 94       	cli
    {
        if (value_for_bit) 
     8be:	88 23       	and	r24, r24
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <check_uart+0x2b8>
        {
            *register_addr |= 1 << bit_offset;
     8c2:	5e 9a       	sbi	0x0b, 6	; 11
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <check_uart+0x2ba>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8c6:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8c8:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8cc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     8ce:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8d0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8d4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8d6:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8d8:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     8da:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     8de:	88 61       	ori	r24, 0x18	; 24
     8e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     8e4:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     8e8:	82 fb       	bst	r24, 2
     8ea:	88 27       	eor	r24, r24
     8ec:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8ee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8f0:	f8 94       	cli
    {
        if (value_for_bit) 
     8f2:	88 23       	and	r24, r24
     8f4:	11 f0       	breq	.+4      	; 0x8fa <check_uart+0x2ec>
        {
            *register_addr |= 1 << bit_offset;
     8f6:	5f 9a       	sbi	0x0b, 7	; 11
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <check_uart+0x2ee>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8fa:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8fc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8fe:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     902:	86 95       	lsr	r24
     904:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     906:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     908:	f8 94       	cli
    {
        if (value_for_bit) 
     90a:	88 23       	and	r24, r24
     90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
        {
            *register_addr |= 1 << bit_offset;
     90e:	5c 9a       	sbi	0x0b, 4	; 11
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     912:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     914:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     916:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
     91a:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     91c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     91e:	f8 94       	cli
    {
        if (value_for_bit) 
     920:	88 23       	and	r24, r24
     922:	11 f0       	breq	.+4      	; 0x928 <__stack+0x29>
        {
            *register_addr |= 1 << bit_offset;
     924:	43 9a       	sbi	0x08, 3	; 8
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     928:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     92a:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     92c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <test_mode_started>
                test_mode = 0;
     930:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <test_mode>
                return;
     934:	8d c0       	rjmp	.+282    	; 0xa50 <__stack+0x151>
            }
            if (input == rpu_address) // that is my local address
     936:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rpu_address>
     93a:	68 13       	cpse	r22, r24
     93c:	4d c0       	rjmp	.+154    	; 0x9d8 <__stack+0xd9>
            {
                if(!my_mcu_is_target_and_i_have_it_reset)
     93e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <my_mcu_is_target_and_i_have_it_reset>
     942:	81 11       	cpse	r24, r1
     944:	14 c0       	rjmp	.+40     	; 0x96e <__stack+0x6f>
                {
                    connect_bootload_mode();
     946:	0e 94 b1 00 	call	0x162	; 0x162 <connect_bootload_mode>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     94a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     94c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     94e:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     950:	8f bf       	out	0x3f, r24	; 63

                    // start the bootloader
                    digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                    target_reset_started_at = millis();
     952:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     956:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <target_reset_started_at>
     95a:	70 93 17 03 	sts	0x0317, r23	; 0x800317 <target_reset_started_at+0x1>
     95e:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <target_reset_started_at+0x2>
     962:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <target_reset_started_at+0x3>
                    my_mcu_is_target_and_i_have_it_reset = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <my_mcu_is_target_and_i_have_it_reset>
                    return; 
     96c:	71 c0       	rjmp	.+226    	; 0xa50 <__stack+0x151>
                }
                unsigned long kRuntime= millis() - target_reset_started_at;
     96e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
                if (kRuntime < 20UL) // hold reset low for a short time but don't delay (the mcu runs 200k instruction in 20 mSec)
     972:	00 91 16 03 	lds	r16, 0x0316	; 0x800316 <target_reset_started_at>
     976:	10 91 17 03 	lds	r17, 0x0317	; 0x800317 <target_reset_started_at+0x1>
     97a:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <target_reset_started_at+0x2>
     97e:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <target_reset_started_at+0x3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	80 1b       	sub	r24, r16
     988:	91 0b       	sbc	r25, r17
     98a:	a2 0b       	sbc	r26, r18
     98c:	b3 0b       	sbc	r27, r19
     98e:	44 97       	sbiw	r24, 0x14	; 20
     990:	a1 05       	cpc	r26, r1
     992:	b1 05       	cpc	r27, r1
     994:	08 f4       	brcc	.+2      	; 0x998 <__stack+0x99>
     996:	5c c0       	rjmp	.+184    	; 0xa50 <__stack+0x151>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     998:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     99a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     99c:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     99e:	8f bf       	out	0x3f, r24	; 63
                {
                    return;
                } 
                //_delay_ms(20);  // hold reset low for a short time, but this locks the mcu which which blocks i2c, SMBus, and ADC burst. 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                my_mcu_is_target_and_i_have_it_reset = 0;
     9a0:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <my_mcu_is_target_and_i_have_it_reset>
                bootloader_started = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <bootloader_started>
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     9aa:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     9ae:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     9b2:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <blink_started_at>
     9b6:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <blink_started_at+0x1>
     9ba:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <blink_started_at+0x2>
     9be:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <blink_started_at+0x3>
                bootloader_started_at = millis();
     9c2:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     9c6:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <bootloader_started_at>
     9ca:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <bootloader_started_at+0x1>
     9ce:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started_at+0x2>
     9d2:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <bootloader_started_at+0x3>
                return;
     9d6:	3c c0       	rjmp	.+120    	; 0xa50 <__stack+0x151>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     9d8:	67 fd       	sbrc	r22, 7
     9da:	1e c0       	rjmp	.+60     	; 0xa18 <__stack+0x119>
            {  
                lockout_active =1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <lockout_active>
                bootloader_started = 0;
     9e2:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <bootloader_started>
                host_active =0;
     9e6:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <host_active>

                connect_lockout_mode();
     9ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <connect_lockout_mode>

                lockout_started_at = millis();
     9ee:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     9f2:	60 93 f1 02 	sts	0x02F1, r22	; 0x8002f1 <lockout_started_at>
     9f6:	70 93 f2 02 	sts	0x02F2, r23	; 0x8002f2 <lockout_started_at+0x1>
     9fa:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <lockout_started_at+0x2>
     9fe:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <lockout_started_at+0x3>
                blink_started_at = millis();
     a02:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     a06:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <blink_started_at>
     a0a:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <blink_started_at+0x1>
     a0e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <blink_started_at+0x2>
     a12:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <blink_started_at+0x3>
                return;
     a16:	1c c0       	rjmp	.+56     	; 0xa50 <__stack+0x151>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     a18:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <host_is_foreign>
                lockout_active =0;
     a1c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <lockout_active>
                host_active =0;
     a20:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <host_active>
                bootloader_started = 0;
     a24:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a2a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a2c:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a2e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a30:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a32:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a34:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a36:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a3c:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a42:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a44:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a46:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a48:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a4c:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4e:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	08 95       	ret

00000a72 <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     a72:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <bootloader_address>
     a76:	fc 01       	movw	r30, r24
     a78:	21 83       	std	Z+1, r18	; 0x01
     a7a:	08 95       	ret

00000a7c <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     a7c:	fc 01       	movw	r30, r24
     a7e:	81 81       	ldd	r24, Z+1	; 0x01
     a80:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <bootloader_address>
     a84:	08 95       	ret

00000a86 <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     a86:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <shutdown_detected>
     a8a:	fc 01       	movw	r30, r24
     a8c:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     a8e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <shutdown_detected>
     a92:	08 95       	ret

00000a94 <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     a94:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     a96:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <status_byt>
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	81 83       	std	Z+1, r24	; 0x01
    if (digitalRead(ALT_EN)) i2cBuffer[1] += (1<<4); // include bit 4 if alternat power is enabled
     a9e:	1b 9b       	sbis	0x03, 3	; 3
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <fnRdStatus+0x12>
     aa2:	80 5f       	subi	r24, 0xF0	; 240
     aa4:	81 83       	std	Z+1, r24	; 0x01
    if (digitalRead(PIPWR_EN)) i2cBuffer[1] += (1<<5); // include bit 5 if sbc has power
     aa6:	19 9b       	sbis	0x03, 1	; 3
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <fnRdStatus+0x1c>
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	80 5e       	subi	r24, 0xE0	; 224
     aae:	81 83       	std	Z+1, r24	; 0x01
    if (daynight_state==DAYNIGHT_FAIL_STATE) i2cBuffer[1] += (1<<6); //  include bit 6 if daynight state has failed
     ab0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <daynight_state>
     ab4:	87 30       	cpi	r24, 0x07	; 7
     ab6:	19 f4       	brne	.+6      	; 0xabe <fnRdStatus+0x2a>
     ab8:	81 81       	ldd	r24, Z+1	; 0x01
     aba:	80 5c       	subi	r24, 0xC0	; 192
     abc:	81 83       	std	Z+1, r24	; 0x01
     abe:	08 95       	ret

00000ac0 <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
     ac0:	fc 01       	movw	r30, r24
    if ( (i2cBuffer[1] & 0x10) ) 
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
     ac4:	84 ff       	sbrs	r24, 4
     ac6:	0b c0       	rjmp	.+22     	; 0xade <fnWtStatus+0x1e>
    {
        enable_alternate_power = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <enable_alternate_power>
        alt_pwm_accum_charge_time = 0; // clear charge time
     ace:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <alt_pwm_accum_charge_time>
     ad2:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <alt_pwm_accum_charge_time+0x1>
     ad6:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <alt_pwm_accum_charge_time+0x2>
     ada:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <alt_pwm_accum_charge_time+0x3>
    }
    if ( ( i2cBuffer[1] & (1<<5) ) && !shutdown_started && !shutdown_detected )
     ade:	81 81       	ldd	r24, Z+1	; 0x01
     ae0:	85 ff       	sbrs	r24, 5
     ae2:	0c c0       	rjmp	.+24     	; 0xafc <fnWtStatus+0x3c>
     ae4:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <shutdown_started>
     ae8:	81 11       	cpse	r24, r1
     aea:	08 c0       	rjmp	.+16     	; 0xafc <fnWtStatus+0x3c>
     aec:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <shutdown_detected>
     af0:	81 11       	cpse	r24, r1
     af2:	04 c0       	rjmp	.+8      	; 0xafc <fnWtStatus+0x3c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     af4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     af6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     af8:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     afa:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(PIPWR_EN,HIGH); //restart SBC 
    } 
    if ( ( i2cBuffer[1] & (1<<6) ) ) daynight_state = DAYNIGHT_START_STATE; // restart the state machine
     afc:	81 81       	ldd	r24, Z+1	; 0x01
     afe:	86 fd       	sbrc	r24, 6
     b00:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <daynight_state>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     b04:	8f 70       	andi	r24, 0x0F	; 15
     b06:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <status_byt>
     b0a:	08 95       	ret

00000b0c <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     b0c:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode>
     b10:	fc 01       	movw	r30, r24
     b12:	21 83       	std	Z+1, r18	; 0x01
     b14:	08 95       	ret

00000b16 <fnBatStartChrg>:
}

// I2C command for Battery charge start limit (uint16_t)
void fnBatStartChrg(uint8_t* i2cBuffer)
{
     b16:	fc 01       	movw	r30, r24
    // battery_low_limit is a uint16_t e.g., two bytes
    uint16_t old = battery_low_limit;
     b18:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <battery_low_limit>
     b1c:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <battery_low_limit+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     b20:	21 81       	ldd	r18, Z+1	; 0x01
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	32 2f       	mov	r19, r18
     b26:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     b28:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     b2a:	92 81       	ldd	r25, Z+2	; 0x02
     b2c:	29 0f       	add	r18, r25
     b2e:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     b30:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    battery_low_limit = new;
     b32:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <battery_low_limit+0x1>
     b36:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <battery_low_limit>

    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <bat_limit_loaded>
     b40:	08 95       	ret

00000b42 <fnBatDoneChrg>:
}

// I2C command for Battery charge done limit (uint16_t)
void fnBatDoneChrg(uint8_t* i2cBuffer)
{
     b42:	fc 01       	movw	r30, r24
    // battery_high_limit is a uint16_t e.g., two bytes
    uint16_t old = battery_high_limit;
     b44:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <battery_high_limit>
     b48:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <battery_high_limit+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     b4c:	21 81       	ldd	r18, Z+1	; 0x01
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	32 2f       	mov	r19, r18
     b52:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     b54:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     b56:	92 81       	ldd	r25, Z+2	; 0x02
     b58:	29 0f       	add	r18, r25
     b5a:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     b5c:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    battery_high_limit = new;
     b5e:	30 93 9d 03 	sts	0x039D, r19	; 0x80039d <battery_high_limit+0x1>
     b62:	20 93 9c 03 	sts	0x039C, r18	; 0x80039c <battery_high_limit>

    bat_limit_loaded = BAT_HIGH_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <bat_limit_loaded>
     b6c:	08 95       	ret

00000b6e <fnRdBatChrgTime>:
}

// I2C command to read battery charging time while doing pwm e.g., absorption time
void fnRdBatChrgTime(uint8_t* i2cBuffer)
{
     b6e:	fc 01       	movw	r30, r24
    // there are four bytes in an unsigned long
    unsigned long my_copy = alt_pwm_accum_charge_time; //updates in ISR so copy first (when SMBus is done this is not used as an ISR callback)
     b70:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <alt_pwm_accum_charge_time>
     b74:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <alt_pwm_accum_charge_time+0x1>
     b78:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <alt_pwm_accum_charge_time+0x2>
     b7c:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <alt_pwm_accum_charge_time+0x3>

    i2cBuffer[1] = ( (0xFF000000UL & my_copy) >>24 ); 
     b80:	31 83       	std	Z+1, r19	; 0x01
    i2cBuffer[2] = ( (0x00FF0000UL & my_copy) >>16 ); 
     b82:	22 83       	std	Z+2, r18	; 0x02
    i2cBuffer[3] = ( (0x0000FF00UL & my_copy) >>8 ); 
     b84:	93 83       	std	Z+3, r25	; 0x03
    i2cBuffer[4] = ( (0x000000FFUL & my_copy) );
     b86:	84 83       	std	Z+4, r24	; 0x04
     b88:	08 95       	ret

00000b8a <fnMorningThreshold>:
}

// I2C command for day-night Morning Threshold (uint16_t)
void fnMorningThreshold(uint8_t* i2cBuffer)
{
     b8a:	fc 01       	movw	r30, r24
    // daynight_morning_threshold is a uint16_t e.g., two bytes
    uint16_t old = daynight_morning_threshold;
     b8c:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <daynight_morning_threshold>
     b90:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <daynight_morning_threshold+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     b94:	21 81       	ldd	r18, Z+1	; 0x01
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	32 2f       	mov	r19, r18
     b9a:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     b9c:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     b9e:	92 81       	ldd	r25, Z+2	; 0x02
     ba0:	29 0f       	add	r18, r25
     ba2:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     ba4:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    daynight_morning_threshold = new;
     ba6:	30 93 a6 03 	sts	0x03A6, r19	; 0x8003a6 <daynight_morning_threshold+0x1>
     baa:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <daynight_morning_threshold>
    
    daynight_values_loaded = DAYNIGHT_MORNING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_values_loaded>
     bb4:	08 95       	ret

00000bb6 <fnEveningThreshold>:
}

// I2C command for day-night Evening Threshold (uint16_t)
void fnEveningThreshold(uint8_t* i2cBuffer)
{
     bb6:	fc 01       	movw	r30, r24
    // daynight_evening_threshold is a uint16_t e.g., two bytes
    uint16_t old = daynight_evening_threshold;
     bb8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <daynight_evening_threshold>
     bbc:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <daynight_evening_threshold+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     bc0:	21 81       	ldd	r18, Z+1	; 0x01
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	32 2f       	mov	r19, r18
     bc6:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     bc8:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     bca:	92 81       	ldd	r25, Z+2	; 0x02
     bcc:	29 0f       	add	r18, r25
     bce:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     bd0:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    daynight_evening_threshold = new;
     bd2:	30 93 a9 03 	sts	0x03A9, r19	; 0x8003a9 <daynight_evening_threshold+0x1>
     bd6:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <daynight_evening_threshold>

    daynight_values_loaded = DAYNIGHT_EVENING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_values_loaded>
     be0:	08 95       	ret

00000be2 <fnRdTimedAccum>:
    }
}

// I2C command to read timed accumulation of analog channel ALT_I or PWR_I sent
void fnRdTimedAccum(uint8_t* i2cBuffer)
{
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	01 81       	ldd	r16, Z+1	; 0x01
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	30 2f       	mov	r19, r16
     bf2:	22 27       	eor	r18, r18
     bf4:	11 27       	eor	r17, r17
     bf6:	00 27       	eor	r16, r16
     bf8:	92 81       	ldd	r25, Z+2	; 0x02
     bfa:	49 2f       	mov	r20, r25
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	ba 01       	movw	r22, r20
     c04:	55 27       	eor	r21, r21
     c06:	44 27       	eor	r20, r20
     c08:	40 0f       	add	r20, r16
     c0a:	51 1f       	adc	r21, r17
     c0c:	62 1f       	adc	r22, r18
     c0e:	73 1f       	adc	r23, r19
     c10:	84 81       	ldd	r24, Z+4	; 0x04
     c12:	8a 01       	movw	r16, r20
     c14:	9b 01       	movw	r18, r22
     c16:	08 0f       	add	r16, r24
     c18:	11 1d       	adc	r17, r1
     c1a:	21 1d       	adc	r18, r1
     c1c:	31 1d       	adc	r19, r1
    uint32_t channel = 0;
    channel += ((uint32_t)i2cBuffer[1])<<24;
    channel += ((uint32_t)i2cBuffer[2])<<16;
    channel += ((uint32_t)i2cBuffer[3])<<8;
    channel += ((uint32_t)i2cBuffer[4]);
     c1e:	43 81       	ldd	r20, Z+3	; 0x03
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	76 2f       	mov	r23, r22
     c28:	65 2f       	mov	r22, r21
     c2a:	54 2f       	mov	r21, r20
     c2c:	44 27       	eor	r20, r20
     c2e:	40 0f       	add	r20, r16
     c30:	51 1f       	adc	r21, r17
     c32:	62 1f       	adc	r22, r18
     c34:	73 1f       	adc	r23, r19
    unsigned long my_copy; //I2C runs this in ISR but durring SMBus this is not run in ISR context
    if (channel == ALT_I)
     c36:	41 15       	cp	r20, r1
     c38:	51 05       	cpc	r21, r1
     c3a:	61 05       	cpc	r22, r1
     c3c:	71 05       	cpc	r23, r1
     c3e:	49 f4       	brne	.+18     	; 0xc52 <fnRdTimedAccum+0x70>
    {
        my_copy = accumulate_alt_ti;
     c40:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <accumulate_alt_ti>
     c44:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <accumulate_alt_ti+0x1>
     c48:	20 91 80 03 	lds	r18, 0x0380	; 0x800380 <accumulate_alt_ti+0x2>
     c4c:	30 91 81 03 	lds	r19, 0x0381	; 0x800381 <accumulate_alt_ti+0x3>
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <fnRdTimedAccum+0x94>
    }
    else if (channel == PWR_I)
     c52:	46 30       	cpi	r20, 0x06	; 6
     c54:	51 05       	cpc	r21, r1
     c56:	61 05       	cpc	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	49 f4       	brne	.+18     	; 0xc6e <fnRdTimedAccum+0x8c>
    {
        my_copy = accumulate_pwr_ti;
     c5c:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <accumulate_pwr_ti>
     c60:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <accumulate_pwr_ti+0x1>
     c64:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <accumulate_pwr_ti+0x2>
     c68:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <accumulate_pwr_ti+0x3>
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <fnRdTimedAccum+0x94>
    }
    else
    {
        my_copy = 0; 
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
    }

    // there are four bytes in the unsigned long to send back
    i2cBuffer[1] = ( (0xFF000000UL & my_copy) >>24 ); 
     c76:	31 83       	std	Z+1, r19	; 0x01
    i2cBuffer[2] = ( (0x00FF0000UL & my_copy) >>16 ); 
     c78:	22 83       	std	Z+2, r18	; 0x02
    i2cBuffer[3] = ( (0x0000FF00UL & my_copy) >>8 ); 
     c7a:	93 83       	std	Z+3, r25	; 0x03
    i2cBuffer[4] = ( (0x000000FFUL & my_copy) );
     c7c:	84 83       	std	Z+4, r24	; 0x04
}
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <fnAnalogRefExternAVCC>:
// I2C command for Analog referance EXTERNAL_AVCC
// swap the I2C buffer with the ref_extern_avcc_uV in use
// set ref_loaded so main loop will try to save it to EEPROM
// the main loop will reload EEPROM or default value if new is out of range
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_extern_avcc_uV;
     c8e:	c0 91 8b 03 	lds	r28, 0x038B	; 0x80038b <ref_extern_avcc_uV>
     c92:	d0 91 8c 03 	lds	r29, 0x038C	; 0x80038c <ref_extern_avcc_uV+0x1>
     c96:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <ref_extern_avcc_uV+0x2>
     c9a:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <ref_extern_avcc_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     c9e:	41 81       	ldd	r20, Z+1	; 0x01
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	34 2f       	mov	r19, r20
     ca8:	22 27       	eor	r18, r18
     caa:	11 27       	eor	r17, r17
     cac:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     cae:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     cb0:	42 81       	ldd	r20, Z+2	; 0x02
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	ba 01       	movw	r22, r20
     cba:	55 27       	eor	r21, r21
     cbc:	44 27       	eor	r20, r20
     cbe:	40 0f       	add	r20, r16
     cc0:	51 1f       	adc	r21, r17
     cc2:	62 1f       	adc	r22, r18
     cc4:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     cc6:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	ba 2f       	mov	r27, r26
     cd2:	a9 2f       	mov	r26, r25
     cd4:	98 2f       	mov	r25, r24
     cd6:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     cd8:	d3 83       	std	Z+3, r29	; 0x03
     cda:	24 81       	ldd	r18, Z+4	; 0x04
     cdc:	42 0f       	add	r20, r18
     cde:	51 1d       	adc	r21, r1
     ce0:	61 1d       	adc	r22, r1
     ce2:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     ce4:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_extern_avcc_uV = new;
     ce6:	84 0f       	add	r24, r20
     ce8:	95 1f       	adc	r25, r21
     cea:	a6 1f       	adc	r26, r22
     cec:	b7 1f       	adc	r27, r23
     cee:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <ref_extern_avcc_uV>
     cf2:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <ref_extern_avcc_uV+0x1>
     cf6:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <ref_extern_avcc_uV+0x2>
     cfa:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <ref_extern_avcc_uV+0x3>

    ref_loaded = REF_AVCC_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <ref_loaded>
}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <fnAnalogRefIntern1V1>:

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_intern_1v1_uV;
     d18:	c0 91 8f 03 	lds	r28, 0x038F	; 0x80038f <ref_intern_1v1_uV>
     d1c:	d0 91 90 03 	lds	r29, 0x0390	; 0x800390 <ref_intern_1v1_uV+0x1>
     d20:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <ref_intern_1v1_uV+0x2>
     d24:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <ref_intern_1v1_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     d28:	41 81       	ldd	r20, Z+1	; 0x01
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	34 2f       	mov	r19, r20
     d32:	22 27       	eor	r18, r18
     d34:	11 27       	eor	r17, r17
     d36:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     d38:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     d3a:	42 81       	ldd	r20, Z+2	; 0x02
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	ba 01       	movw	r22, r20
     d44:	55 27       	eor	r21, r21
     d46:	44 27       	eor	r20, r20
     d48:	40 0f       	add	r20, r16
     d4a:	51 1f       	adc	r21, r17
     d4c:	62 1f       	adc	r22, r18
     d4e:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     d50:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     d52:	83 81       	ldd	r24, Z+3	; 0x03
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ba 2f       	mov	r27, r26
     d5c:	a9 2f       	mov	r26, r25
     d5e:	98 2f       	mov	r25, r24
     d60:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     d62:	d3 83       	std	Z+3, r29	; 0x03
     d64:	24 81       	ldd	r18, Z+4	; 0x04
     d66:	42 0f       	add	r20, r18
     d68:	51 1d       	adc	r21, r1
     d6a:	61 1d       	adc	r22, r1
     d6c:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     d6e:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_intern_1v1_uV = new;
     d70:	84 0f       	add	r24, r20
     d72:	95 1f       	adc	r25, r21
     d74:	a6 1f       	adc	r26, r22
     d76:	b7 1f       	adc	r27, r23
     d78:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ref_intern_1v1_uV>
     d7c:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ref_intern_1v1_uV+0x1>
     d80:	a0 93 91 03 	sts	0x0391, r26	; 0x800391 <ref_intern_1v1_uV+0x2>
     d84:	b0 93 92 03 	sts	0x0392, r27	; 0x800392 <ref_intern_1v1_uV+0x3>
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <ref_loaded>
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <fnMorningDebounce>:
    }
}

// I2C command for day-night morning debounce time (unsigned long)
void fnMorningDebounce(uint8_t* i2cBuffer)
{
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	fc 01       	movw	r30, r24
    // daynight_morning_debounce is a unsigned long and has four bytes
    uint32_t old = daynight_morning_debounce;
     da2:	c0 91 aa 03 	lds	r28, 0x03AA	; 0x8003aa <daynight_morning_debounce>
     da6:	d0 91 ab 03 	lds	r29, 0x03AB	; 0x8003ab <daynight_morning_debounce+0x1>
     daa:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <daynight_morning_debounce+0x2>
     dae:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <daynight_morning_debounce+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     db2:	41 81       	ldd	r20, Z+1	; 0x01
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	34 2f       	mov	r19, r20
     dbc:	22 27       	eor	r18, r18
     dbe:	11 27       	eor	r17, r17
     dc0:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     dc2:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     dc4:	42 81       	ldd	r20, Z+2	; 0x02
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	ba 01       	movw	r22, r20
     dce:	55 27       	eor	r21, r21
     dd0:	44 27       	eor	r20, r20
     dd2:	40 0f       	add	r20, r16
     dd4:	51 1f       	adc	r21, r17
     dd6:	62 1f       	adc	r22, r18
     dd8:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     dda:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     ddc:	83 81       	ldd	r24, Z+3	; 0x03
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ba 2f       	mov	r27, r26
     de6:	a9 2f       	mov	r26, r25
     de8:	98 2f       	mov	r25, r24
     dea:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     dec:	d3 83       	std	Z+3, r29	; 0x03
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	42 0f       	add	r20, r18
     df2:	51 1d       	adc	r21, r1
     df4:	61 1d       	adc	r22, r1
     df6:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     df8:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    daynight_morning_debounce = new;
     dfa:	84 0f       	add	r24, r20
     dfc:	95 1f       	adc	r25, r21
     dfe:	a6 1f       	adc	r26, r22
     e00:	b7 1f       	adc	r27, r23
     e02:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <daynight_morning_debounce>
     e06:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <daynight_morning_debounce+0x1>
     e0a:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <daynight_morning_debounce+0x2>
     e0e:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <daynight_morning_debounce+0x3>

    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     e12:	84 e0       	ldi	r24, 0x04	; 4
     e14:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_values_loaded>
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <fnEveningDebounce>:

// I2C command for day-night evening debounce time (unsigned long)
void fnEveningDebounce(uint8_t* i2cBuffer)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	fc 01       	movw	r30, r24
    // daynight_evening_debounce is a unsigned long and has four bytes
    uint32_t old = daynight_evening_debounce;
     e2c:	c0 91 a1 03 	lds	r28, 0x03A1	; 0x8003a1 <daynight_evening_debounce>
     e30:	d0 91 a2 03 	lds	r29, 0x03A2	; 0x8003a2 <daynight_evening_debounce+0x1>
     e34:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <daynight_evening_debounce+0x2>
     e38:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <daynight_evening_debounce+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     e3c:	41 81       	ldd	r20, Z+1	; 0x01
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	34 2f       	mov	r19, r20
     e46:	22 27       	eor	r18, r18
     e48:	11 27       	eor	r17, r17
     e4a:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     e4c:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     e4e:	42 81       	ldd	r20, Z+2	; 0x02
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	ba 01       	movw	r22, r20
     e58:	55 27       	eor	r21, r21
     e5a:	44 27       	eor	r20, r20
     e5c:	40 0f       	add	r20, r16
     e5e:	51 1f       	adc	r21, r17
     e60:	62 1f       	adc	r22, r18
     e62:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     e64:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     e66:	83 81       	ldd	r24, Z+3	; 0x03
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ba 2f       	mov	r27, r26
     e70:	a9 2f       	mov	r26, r25
     e72:	98 2f       	mov	r25, r24
     e74:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     e76:	d3 83       	std	Z+3, r29	; 0x03
     e78:	24 81       	ldd	r18, Z+4	; 0x04
     e7a:	42 0f       	add	r20, r18
     e7c:	51 1d       	adc	r21, r1
     e7e:	61 1d       	adc	r22, r1
     e80:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     e82:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    daynight_evening_debounce = new;
     e84:	84 0f       	add	r24, r20
     e86:	95 1f       	adc	r25, r21
     e88:	a6 1f       	adc	r26, r22
     e8a:	b7 1f       	adc	r27, r23
     e8c:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <daynight_evening_debounce>
     e90:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <daynight_evening_debounce+0x1>
     e94:	a0 93 a3 03 	sts	0x03A3, r26	; 0x8003a3 <daynight_evening_debounce+0x2>
     e98:	b0 93 a4 03 	sts	0x03A4, r27	; 0x8003a4 <daynight_evening_debounce+0x3>

    daynight_values_loaded = DAYNIGHT_EVENING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     e9c:	85 e0       	ldi	r24, 0x05	; 5
     e9e:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_values_loaded>
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <fnNull>:
    i2cBuffer[4] =  ( (0x000000FFUL & daynight_timer) );
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     eac:	08 95       	ret

00000eae <fnDayNightTimer>:
    daynight_values_loaded = DAYNIGHT_EVENING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
}

// I2C command to read day daynight timer offset
void fnDayNightTimer(uint8_t* i2cBuffer)
{
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ec 01       	movw	r28, r24
    unsigned long daynight_timer = millis() - dayTmrStarted;
     eb8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
     ebc:	00 91 b0 03 	lds	r16, 0x03B0	; 0x8003b0 <dayTmrStarted>
     ec0:	10 91 b1 03 	lds	r17, 0x03B1	; 0x8003b1 <dayTmrStarted+0x1>
     ec4:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <dayTmrStarted+0x2>
     ec8:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <dayTmrStarted+0x3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	80 1b       	sub	r24, r16
     ed2:	91 0b       	sbc	r25, r17
     ed4:	a2 0b       	sbc	r26, r18
     ed6:	b3 0b       	sbc	r27, r19
    // there are four bytes in an unsigned long
    i2cBuffer[1] = ( (0xFF000000UL & daynight_timer) >>24 ); 
     ed8:	b9 83       	std	Y+1, r27	; 0x01
    i2cBuffer[2] =  ( (0x00FF0000UL & daynight_timer) >>16 ); 
     eda:	aa 83       	std	Y+2, r26	; 0x02
    i2cBuffer[3] =  ( (0x0000FF00UL & daynight_timer) >>8 ); 
     edc:	9b 83       	std	Y+3, r25	; 0x03
    i2cBuffer[4] =  ( (0x000000FFUL & daynight_timer) );
     ede:	8c 83       	std	Y+4, r24	; 0x04
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

00000eea <fnAnalogRead>:
// I2C command to read the analog channel sent.
// returns analogRead with high byte after command byte, then low byte next.
// Most AVR have ten analog bits, thus range is: 0..1023
// returns zero when given an invalid channel
void fnAnalogRead(uint8_t* i2cBuffer)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
    uint16_t channel = 0;
    channel += ((uint16_t)i2cBuffer[1])<<8;
    channel += ((uint16_t)i2cBuffer[2]);
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	98 2f       	mov	r25, r24
     ef6:	88 27       	eor	r24, r24
     ef8:	2a 81       	ldd	r18, Y+2	; 0x02
     efa:	82 0f       	add	r24, r18
     efc:	91 1d       	adc	r25, r1
    uint16_t adc_reading;
    if ( (channel == ALT_I) || (channel == ALT_V) || (channel == PWR_I) || (channel == PWR_V) )
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	91 05       	cpc	r25, r1
     f02:	30 f0       	brcs	.+12     	; 0xf10 <fnAnalogRead+0x26>
     f04:	9c 01       	movw	r18, r24
     f06:	26 50       	subi	r18, 0x06	; 6
     f08:	31 09       	sbc	r19, r1
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	18 f4       	brcc	.+6      	; 0xf16 <fnAnalogRead+0x2c>
    {
        adc_reading = analogRead((uint8_t)channel);
     f10:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <analogRead>
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <fnAnalogRead+0x30>
    }
    else
    {
        adc_reading = 0; 
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
    }
    i2cBuffer[1] = ( (0xFF00 & adc_reading) >>8 ); 
     f1a:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] = ( (0x00FF & adc_reading) ); 
     f1c:	8a 83       	std	Y+2, r24	; 0x02
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <fnDayNightState>:
// I2C command to read Day-Night state. It is one byte,
// the low nimmble has daynight_state, the high nimmble has daynight_work
// bit 4 set from master will clear daynight_work (readback depends on if bit 5 is set)
// bit 5 set from master will include daynight_work otherwise only daynight_state is in readback.
void fnDayNightState(uint8_t* i2cBuffer)
{ 
     f24:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] & (1<<4) )
     f26:	81 81       	ldd	r24, Z+1	; 0x01
     f28:	84 fd       	sbrc	r24, 4
    {
        daynight_work = 0;  // clear daynight_work
     f2a:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <daynight_work>
     f2e:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <daynight_state>
    }
    if (i2cBuffer[1] & (1<<5) ) 
     f32:	85 ff       	sbrs	r24, 5
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <fnDayNightState+0x1c>
    {
        i2cBuffer[1] = daynight_state + daynight_work;  // send back daynight_state + daynignt_work
     f36:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <daynight_work>
     f3a:	89 0f       	add	r24, r25
     f3c:	81 83       	std	Z+1, r24	; 0x01
     f3e:	08 95       	ret
    }
    else
    {
        i2cBuffer[1] = daynight_state;  // send back only daynight_state
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	08 95       	ret

00000f44 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
    if (test_mode)
     f5e:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <test_mode>
     f62:	ee 23       	and	r30, r30
     f64:	09 f4       	brne	.+2      	; 0xf68 <fnRdXcvrCntlInTestMode+0x24>
     f66:	55 c0       	rjmp	.+170    	; 0x1012 <fnRdXcvrCntlInTestMode+0xce>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     f68:	e9 b1       	in	r30, 0x09	; 9
     f6a:	b9 b1       	in	r27, 0x09	; 9
     f6c:	f6 b1       	in	r31, 0x06	; 6
     f6e:	79 b0       	in	r7, 0x09	; 9
     f70:	a9 b0       	in	r10, 0x09	; 9
     f72:	09 b1       	in	r16, 0x09	; 9
     f74:	b9 b0       	in	r11, 0x09	; 9
     f76:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	00 0f       	add	r16, r16
     f7c:	01 2f       	mov	r16, r17
     f7e:	00 1f       	adc	r16, r16
     f80:	11 0b       	sbc	r17, r17
     f82:	00 0f       	add	r16, r16
     f84:	11 1f       	adc	r17, r17
     f86:	00 0f       	add	r16, r16
     f88:	11 1f       	adc	r17, r17
     f8a:	c3 fb       	bst	r28, 3
     f8c:	cc 27       	eor	r28, r28
     f8e:	c0 f9       	bld	r28, 0
     f90:	ac 2f       	mov	r26, r28
     f92:	a0 2b       	or	r26, r16
     f94:	e3 fb       	bst	r30, 3
     f96:	88 24       	eor	r8, r8
     f98:	80 f8       	bld	r8, 0
     f9a:	91 2c       	mov	r9, r1
     f9c:	e4 01       	movw	r28, r8
     f9e:	d6 95       	lsr	r29
     fa0:	dc 2f       	mov	r29, r28
     fa2:	cc 27       	eor	r28, r28
     fa4:	d7 95       	ror	r29
     fa6:	c7 95       	ror	r28
     fa8:	ca 2b       	or	r28, r26
     faa:	b2 fb       	bst	r27, 2
     fac:	cc 24       	eor	r12, r12
     fae:	c0 f8       	bld	r12, 0
     fb0:	d1 2c       	mov	r13, r1
     fb2:	d6 01       	movw	r26, r12
     fb4:	56 e0       	ldi	r21, 0x06	; 6
     fb6:	aa 0f       	add	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	5a 95       	dec	r21
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <fnRdXcvrCntlInTestMode+0x72>
     fbe:	ac 2b       	or	r26, r28
     fc0:	f2 fb       	bst	r31, 2
     fc2:	ee 24       	eor	r14, r14
     fc4:	e0 f8       	bld	r14, 0
     fc6:	f1 2c       	mov	r15, r1
     fc8:	f7 01       	movw	r30, r14
     fca:	65 e0       	ldi	r22, 0x05	; 5
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	6a 95       	dec	r22
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <fnRdXcvrCntlInTestMode+0x88>
     fd4:	ea 2b       	or	r30, r26
     fd6:	75 fa       	bst	r7, 5
     fd8:	66 27       	eor	r22, r22
     fda:	60 f9       	bld	r22, 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	f4 e0       	ldi	r31, 0x04	; 4
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	fa 95       	dec	r31
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <fnRdXcvrCntlInTestMode+0x9c>
     fe8:	6e 2b       	or	r22, r30
     fea:	a6 fa       	bst	r10, 6
     fec:	44 27       	eor	r20, r20
     fee:	40 f9       	bld	r20, 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	a3 e0       	ldi	r26, 0x03	; 3
     ff4:	44 0f       	add	r20, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	aa 95       	dec	r26
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <fnRdXcvrCntlInTestMode+0xb0>
     ffc:	46 2b       	or	r20, r22
     ffe:	b4 fa       	bst	r11, 4
    1000:	22 27       	eor	r18, r18
    1002:	20 f9       	bld	r18, 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	24 2b       	or	r18, r20
    100c:	fc 01       	movw	r30, r24
    100e:	21 83       	std	Z+1, r18	; 0x01
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    1012:	fc 01       	movw	r30, r24
    1014:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	9f 90       	pop	r9
    102c:	8f 90       	pop	r8
    102e:	7f 90       	pop	r7
    1030:	08 95       	ret

00001032 <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	fc 01       	movw	r30, r24
    if (test_mode)
    1038:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <test_mode>
    103c:	88 23       	and	r24, r24
    103e:	09 f4       	brne	.+2      	; 0x1042 <fnWtXcvrCntlInTestMode+0x10>
    1040:	6e c0       	rjmp	.+220    	; 0x111e <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    1042:	81 81       	ldd	r24, Z+1	; 0x01
    1044:	88 1f       	adc	r24, r24
    1046:	88 27       	eor	r24, r24
    1048:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    104a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    104c:	f8 94       	cli
    {
        if (value_for_bit) 
    104e:	88 23       	and	r24, r24
    1050:	11 f0       	breq	.+4      	; 0x1056 <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    1052:	5b 9a       	sbi	0x0b, 3	; 11
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1056:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1058:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    105a:	81 81       	ldd	r24, Z+1	; 0x01
    105c:	86 fb       	bst	r24, 6
    105e:	88 27       	eor	r24, r24
    1060:	80 f9       	bld	r24, 0
    1062:	c8 2f       	mov	r28, r24
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1068:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    106a:	f8 94       	cli
    {
        if (value_for_bit) 
    106c:	cd 2b       	or	r28, r29
    106e:	11 f0       	breq	.+4      	; 0x1074 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    1070:	5a 9a       	sbi	0x0b, 2	; 11
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1074:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1076:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    1078:	81 81       	ldd	r24, Z+1	; 0x01
    107a:	85 fb       	bst	r24, 5
    107c:	aa 27       	eor	r26, r26
    107e:	a0 f9       	bld	r26, 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1082:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1084:	f8 94       	cli
    {
        if (value_for_bit) 
    1086:	ab 2b       	or	r26, r27
    1088:	11 f0       	breq	.+4      	; 0x108e <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    108a:	42 9a       	sbi	0x08, 2	; 8
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    108e:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1090:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    1092:	81 81       	ldd	r24, Z+1	; 0x01
    1094:	84 fb       	bst	r24, 4
    1096:	66 27       	eor	r22, r22
    1098:	60 f9       	bld	r22, 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    109c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    109e:	f8 94       	cli
    {
        if (value_for_bit) 
    10a0:	67 2b       	or	r22, r23
    10a2:	11 f0       	breq	.+4      	; 0x10a8 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    10a4:	5d 9a       	sbi	0x0b, 5	; 11
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10a8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10aa:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    10ac:	81 81       	ldd	r24, Z+1	; 0x01
    10ae:	83 fb       	bst	r24, 3
    10b0:	44 27       	eor	r20, r20
    10b2:	40 f9       	bld	r20, 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10b6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10b8:	f8 94       	cli
    {
        if (value_for_bit) 
    10ba:	45 2b       	or	r20, r21
    10bc:	11 f0       	breq	.+4      	; 0x10c2 <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    10be:	5e 9a       	sbi	0x0b, 6	; 11
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10c2:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10c4:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	82 ff       	sbrs	r24, 2
    10ca:	11 c0       	rjmp	.+34     	; 0x10ee <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    10cc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10d0:	87 7e       	andi	r24, 0xE7	; 231
    10d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10d6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10d8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    10da:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10dc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10e0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10e2:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10e4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10e6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10e8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    10ea:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ec:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    10ee:	81 81       	ldd	r24, Z+1	; 0x01
    10f0:	81 fb       	bst	r24, 1
    10f2:	22 27       	eor	r18, r18
    10f4:	20 f9       	bld	r18, 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10fa:	f8 94       	cli
    {
        if (value_for_bit) 
    10fc:	23 2b       	or	r18, r19
    10fe:	11 f0       	breq	.+4      	; 0x1104 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    1100:	5c 9a       	sbi	0x0b, 4	; 11
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1104:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1106:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    1108:	81 81       	ldd	r24, Z+1	; 0x01
    110a:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    110c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    110e:	f8 94       	cli
    {
        if (value_for_bit) 
    1110:	88 23       	and	r24, r24
    1112:	11 f0       	breq	.+4      	; 0x1118 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    1114:	43 9a       	sbi	0x08, 3	; 8
    1116:	01 c0       	rjmp	.+2      	; 0x111a <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1118:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    111a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    111e:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    1126:	fc 01       	movw	r30, r24
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	f1 f4       	brne	.+60     	; 0x116a <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    112e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1130:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1132:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1134:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1136:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1138:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    113a:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    113c:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    113e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1140:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1142:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1144:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1146:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1148:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    114a:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    114c:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    114e:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    1152:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <shutdown_detected>
        shutdown_started_at = millis();
    1156:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    115a:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <shutdown_started_at>
    115e:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <shutdown_started_at+0x1>
    1162:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <shutdown_started_at+0x2>
    1166:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <shutdown_started_at+0x3>
    116a:	08 95       	ret

0000116c <fnRdMgrAddr>:
  *    all managers lockout serial except the address to bootload and the host */

// I2C command to access manager address and set RPU_NORMAL_MODE
// if given a valid address (ASCII 48..122) it will save that rather than setting normal mode.
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
    116c:	cf 93       	push	r28
    116e:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
    1172:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rpu_address>
    1176:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
    1178:	80 ed       	ldi	r24, 0xD0	; 208
    117a:	89 0f       	add	r24, r25
    117c:	8b 34       	cpi	r24, 0x4B	; 75
    117e:	30 f4       	brcc	.+12     	; 0x118c <fnRdMgrAddr+0x20>
    {
        rpu_address = tmp_addr;
    1180:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <rpu_address>
        write_rpu_address_to_eeprom = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <write_rpu_address_to_eeprom>
        return;
    118a:	9d c0       	rjmp	.+314    	; 0x12c6 <fnRdMgrAddr+0x15a>
    }
    local_mcu_is_rpu_aware =1; 
    118c:	c1 e0       	ldi	r28, 0x01	; 1
    118e:	c0 93 fe 02 	sts	0x02FE, r28	; 0x8002fe <local_mcu_is_rpu_aware>
    // end the local mcu lockout. 
    if (localhost_active) 
    1192:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <localhost_active>
    1196:	88 23       	and	r24, r24
    1198:	b1 f1       	breq	.+108    	; 0x1206 <fnRdMgrAddr+0x9a>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
    119a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    119e:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
    11a2:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
    11a6:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
    11aa:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
    11ae:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    11b2:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
    11b6:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
    11ba:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <uart_output>
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	20 95       	com	r18
    11c2:	30 95       	com	r19
    11c4:	2a 70       	andi	r18, 0x0A	; 10
    11c6:	33 27       	eor	r19, r19
    11c8:	64 e0       	ldi	r22, 0x04	; 4
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	6a 95       	dec	r22
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <fnRdMgrAddr+0x5e>
    11d2:	89 2f       	mov	r24, r25
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	80 95       	com	r24
    11d8:	90 95       	com	r25
    11da:	80 75       	andi	r24, 0x50	; 80
    11dc:	99 27       	eor	r25, r25
    11de:	74 e0       	ldi	r23, 0x04	; 4
    11e0:	95 95       	asr	r25
    11e2:	87 95       	ror	r24
    11e4:	7a 95       	dec	r23
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <fnRdMgrAddr+0x74>
    11e8:	82 2b       	or	r24, r18
    11ea:	93 2b       	or	r25, r19
    11ec:	9f 93       	push	r25
    11ee:	8f 93       	push	r24
    11f0:	1f 92       	push	r1
    11f2:	4f 93       	push	r20
    11f4:	86 e1       	ldi	r24, 0x16	; 22
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
    1200:	c0 93 0d 03 	sts	0x030D, r28	; 0x80030d <uart_has_TTL>
    1204:	39 c0       	rjmp	.+114    	; 0x1278 <fnRdMgrAddr+0x10c>
    }
    else 
        if (bootloader_started)
    1206:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <bootloader_started>
    120a:	88 23       	and	r24, r24
    120c:	e1 f1       	breq	.+120    	; 0x1286 <fnRdMgrAddr+0x11a>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
    120e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    1212:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
    1216:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
    121a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
    121e:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
    1222:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1226:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
    122a:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
    122e:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <uart_output>
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	20 95       	com	r18
    1236:	30 95       	com	r19
    1238:	2a 70       	andi	r18, 0x0A	; 10
    123a:	33 27       	eor	r19, r19
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	8a 95       	dec	r24
    1244:	e1 f7       	brne	.-8      	; 0x123e <fnRdMgrAddr+0xd2>
    1246:	89 2f       	mov	r24, r25
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	80 95       	com	r24
    124c:	90 95       	com	r25
    124e:	80 75       	andi	r24, 0x50	; 80
    1250:	99 27       	eor	r25, r25
    1252:	54 e0       	ldi	r21, 0x04	; 4
    1254:	95 95       	asr	r25
    1256:	87 95       	ror	r24
    1258:	5a 95       	dec	r21
    125a:	e1 f7       	brne	.-8      	; 0x1254 <fnRdMgrAddr+0xe8>
    125c:	82 2b       	or	r24, r18
    125e:	93 2b       	or	r25, r19
    1260:	9f 93       	push	r25
    1262:	8f 93       	push	r24
    1264:	1f 92       	push	r1
    1266:	4f 93       	push	r20
    1268:	86 e1       	ldi	r24, 0x16	; 22
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	9f 93       	push	r25
    126e:	8f 93       	push	r24
    1270:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
    1274:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <uart_has_TTL>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	20 c0       	rjmp	.+64     	; 0x12c6 <fnRdMgrAddr+0x15a>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
    1286:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	80 5c       	subi	r24, 0xC0	; 192
    1290:	94 4d       	sbci	r25, 0xD4	; 212
    1292:	a1 40       	sbci	r26, 0x01	; 1
    1294:	b1 09       	sbc	r27, r1
    1296:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <lockout_started_at>
    129a:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <lockout_started_at+0x1>
    129e:	a0 93 f3 02 	sts	0x02F3, r26	; 0x8002f3 <lockout_started_at+0x2>
    12a2:	b0 93 f4 02 	sts	0x02F4, r27	; 0x8002f4 <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
    12a6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	88 53       	subi	r24, 0x38	; 56
    12b0:	91 4c       	sbci	r25, 0xC1	; 193
    12b2:	a1 40       	sbci	r26, 0x01	; 1
    12b4:	b1 09       	sbc	r27, r1
    12b6:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <bootloader_started_at>
    12ba:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <bootloader_started_at+0x1>
    12be:	a0 93 ef 02 	sts	0x02EF, r26	; 0x8002ef <bootloader_started_at+0x2>
    12c2:	b0 93 f0 02 	sts	0x02F0, r27	; 0x8002f0 <bootloader_started_at+0x3>
        }
        
}
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    12ca:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    12cc:	fc 01       	movw	r30, r24
    12ce:	c1 81       	ldd	r28, Z+1	; 0x01
    12d0:	c1 30       	cpi	r28, 0x01	; 1
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <fnWtArduinMode+0xc>
    12d4:	45 c0       	rjmp	.+138    	; 0x1360 <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    12d6:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <arduino_mode_started>
    12da:	21 11       	cpse	r18, r1
    12dc:	41 c0       	rjmp	.+130    	; 0x1360 <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    12de:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    12e2:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
    12e6:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
    12ea:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
    12ee:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    12f8:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
    12fc:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
    1300:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <uart_output>
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	20 95       	com	r18
    1308:	30 95       	com	r19
    130a:	2a 70       	andi	r18, 0x0A	; 10
    130c:	33 27       	eor	r19, r19
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	8a 95       	dec	r24
    1316:	e1 f7       	brne	.-8      	; 0x1310 <fnWtArduinMode+0x46>
    1318:	89 2f       	mov	r24, r25
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	80 75       	andi	r24, 0x50	; 80
    1322:	99 27       	eor	r25, r25
    1324:	54 e0       	ldi	r21, 0x04	; 4
    1326:	95 95       	asr	r25
    1328:	87 95       	ror	r24
    132a:	5a 95       	dec	r21
    132c:	e1 f7       	brne	.-8      	; 0x1326 <fnWtArduinMode+0x5c>
    132e:	82 2b       	or	r24, r18
    1330:	93 2b       	or	r25, r19
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	1f 92       	push	r1
    1338:	4f 93       	push	r20
    133a:	86 e1       	ldi	r24, 0x16	; 22
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1346:	c0 93 0d 03 	sts	0x030D, r28	; 0x80030d <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    134a:	c0 93 0c 03 	sts	0x030C, r28	; 0x80030c <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    134e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode>
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    1360:	fc 01       	movw	r30, r24
    1362:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    1368:	cf 93       	push	r28
    136a:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    136c:	c1 81       	ldd	r28, Z+1	; 0x01
    136e:	c1 30       	cpi	r28, 0x01	; 1
    1370:	09 f0       	breq	.+2      	; 0x1374 <fnStartTestMode+0xc>
    1372:	48 c0       	rjmp	.+144    	; 0x1404 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    1374:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <test_mode_started>
    1378:	81 11       	cpse	r24, r1
    137a:	42 c0       	rjmp	.+132    	; 0x1400 <fnStartTestMode+0x98>
    137c:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <test_mode>
    1380:	81 11       	cpse	r24, r1
    1382:	3e c0       	rjmp	.+124    	; 0x1400 <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    1384:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    1388:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
    138c:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
    1390:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
    1394:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1398:	c0 93 0f 03 	sts	0x030F, r28	; 0x80030f <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    139c:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
    13a0:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
    13a4:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <uart_output>
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	20 95       	com	r18
    13ac:	30 95       	com	r19
    13ae:	2a 70       	andi	r18, 0x0A	; 10
    13b0:	33 27       	eor	r19, r19
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	8a 95       	dec	r24
    13ba:	e1 f7       	brne	.-8      	; 0x13b4 <fnStartTestMode+0x4c>
    13bc:	89 2f       	mov	r24, r25
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	80 95       	com	r24
    13c2:	90 95       	com	r25
    13c4:	80 75       	andi	r24, 0x50	; 80
    13c6:	99 27       	eor	r25, r25
    13c8:	54 e0       	ldi	r21, 0x04	; 4
    13ca:	95 95       	asr	r25
    13cc:	87 95       	ror	r24
    13ce:	5a 95       	dec	r21
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <fnStartTestMode+0x62>
    13d2:	82 2b       	or	r24, r18
    13d4:	93 2b       	or	r25, r19
    13d6:	9f 93       	push	r25
    13d8:	8f 93       	push	r24
    13da:	1f 92       	push	r1
    13dc:	4f 93       	push	r20
    13de:	86 e1       	ldi	r24, 0x16	; 22
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	9f 93       	push	r25
    13e4:	8f 93       	push	r24
    13e6:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    13ea:	c0 93 0d 03 	sts	0x030D, r28	; 0x80030d <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    13ee:	c0 93 f5 02 	sts	0x02F5, r28	; 0x8002f5 <test_mode_started>
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	81 83       	std	Z+1, r24	; 0x01
    }
}
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    1414:	19 81       	ldd	r17, Y+1	; 0x01
    1416:	11 30       	cpi	r17, 0x01	; 1
    1418:	09 f0       	breq	.+2      	; 0x141c <fnEndTestMode+0x10>
    141a:	61 c0       	rjmp	.+194    	; 0x14de <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    141c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <test_mode_started>
    1420:	81 11       	cpse	r24, r1
    1422:	5d c0       	rjmp	.+186    	; 0x14de <fnEndTestMode+0xd2>
    1424:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <test_mode>
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <fnEndTestMode+0x22>
    142c:	58 c0       	rjmp	.+176    	; 0x14de <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    142e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1430:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1432:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1434:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1436:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1438:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    143a:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    143c:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    143e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1442:	88 61       	ori	r24, 0x18	; 24
    1444:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1448:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    144a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    144c:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    144e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1450:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1452:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1454:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1456:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    1458:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    145c:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <uart_started_at>
    1460:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <uart_started_at+0x1>
    1464:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uart_started_at+0x2>
    1468:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    146c:	8e ef       	ldi	r24, 0xFE	; 254
    146e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1472:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <uart_output>
    1476:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <uart_output>
    147a:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <uart_output>
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	20 95       	com	r18
    1482:	30 95       	com	r19
    1484:	2a 70       	andi	r18, 0x0A	; 10
    1486:	33 27       	eor	r19, r19
    1488:	a9 01       	movw	r20, r18
    148a:	24 e0       	ldi	r18, 0x04	; 4
    148c:	44 0f       	add	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	2a 95       	dec	r18
    1492:	e1 f7       	brne	.-8      	; 0x148c <fnEndTestMode+0x80>
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	20 95       	com	r18
    149a:	30 95       	com	r19
    149c:	20 75       	andi	r18, 0x50	; 80
    149e:	33 27       	eor	r19, r19
    14a0:	64 e0       	ldi	r22, 0x04	; 4
    14a2:	35 95       	asr	r19
    14a4:	27 95       	ror	r18
    14a6:	6a 95       	dec	r22
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <fnEndTestMode+0x96>
    14aa:	24 2b       	or	r18, r20
    14ac:	35 2b       	or	r19, r21
    14ae:	3f 93       	push	r19
    14b0:	2f 93       	push	r18
    14b2:	1f 92       	push	r1
    14b4:	9f 93       	push	r25
    14b6:	86 e1       	ldi	r24, 0x16	; 22
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	0e 94 b5 19 	call	0x336a	; 0x336a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    14c2:	10 93 0d 03 	sts	0x030D, r17	; 0x80030d <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    14c6:	10 93 f5 02 	sts	0x02F5, r17	; 0x8002f5 <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    14ca:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <transceiver_state>
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    14de:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	08 95       	ret

000014e8 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    14e8:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnDayNightTimer, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	29 2f       	mov	r18, r25
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	26 17       	cp	r18, r22
    14f2:	37 07       	cpc	r19, r23
    14f4:	54 f4       	brge	.+20     	; 0x150a <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    14f6:	fa 01       	movw	r30, r20
    14f8:	e2 0f       	add	r30, r18
    14fa:	f3 1f       	adc	r31, r19
    14fc:	80 81       	ld	r24, Z
    14fe:	f9 01       	movw	r30, r18
    1500:	e6 5e       	subi	r30, 0xE6	; 230
    1502:	fc 4f       	sbci	r31, 0xFC	; 252
    1504:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnDayNightTimer, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1506:	9f 5f       	subi	r25, 0xFF	; 255
    1508:	f1 cf       	rjmp	.-30     	; 0x14ec <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    150a:	90 32       	cpi	r25, 0x20	; 32
    150c:	20 f4       	brcc	.+8      	; 0x1516 <receive_i2c_event+0x2e>
    150e:	f9 01       	movw	r30, r18
    1510:	e6 5e       	subi	r30, 0xE6	; 230
    1512:	fc 4f       	sbci	r31, 0xFC	; 252
    1514:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    1516:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    151a:	62 30       	cpi	r22, 0x02	; 2
    151c:	10 f4       	brcc	.+4      	; 0x1522 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	0d c0       	rjmp	.+26     	; 0x153c <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    1522:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <i2c0Buffer>
    1526:	e8 2f       	mov	r30, r24
    1528:	e2 95       	swap	r30
    152a:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    152c:	e4 30       	cpi	r30, 0x04	; 4
    152e:	10 f0       	brcs	.+4      	; 0x1534 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    1530:	8e ef       	ldi	r24, 0xFE	; 254
    1532:	04 c0       	rjmp	.+8      	; 0x153c <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    1534:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	20 f0       	brcs	.+8      	; 0x1542 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    153a:	8d ef       	ldi	r24, 0xFD	; 253
    153c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    1540:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    1542:	98 e0       	ldi	r25, 0x08	; 8
    1544:	e9 9f       	mul	r30, r25
    1546:	f0 01       	movw	r30, r0
    1548:	11 24       	eor	r1, r1
    154a:	e8 0f       	add	r30, r24
    154c:	f1 1d       	adc	r31, r1
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	e5 5e       	subi	r30, 0xE5	; 229
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	01 90       	ld	r0, Z+
    1558:	f0 81       	ld	r31, Z
    155a:	e0 2d       	mov	r30, r0
    155c:	8a e1       	ldi	r24, 0x1A	; 26
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	09 94       	ijmp

00001562 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    1562:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <__data_end>
    1566:	8a e1       	ldi	r24, 0x1A	; 26
    1568:	93 e0       	ldi	r25, 0x03	; 3
    156a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <twi0_transmit>
    if (return_code != 0)
    156e:	88 23       	and	r24, r24
    1570:	29 f0       	breq	.+10     	; 0x157c <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    1572:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <status_byt>
    1576:	82 70       	andi	r24, 0x02	; 2
    1578:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <status_byt>
    157c:	08 95       	ret

0000157e <fnRdMgrAddrQuietly>:
        
}

//I2C command to access manager address (used with SMBus in place of above)
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    157e:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
    1582:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rpu_address>
    1586:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
    1588:	80 ed       	ldi	r24, 0xD0	; 208
    158a:	89 0f       	add	r24, r25
    158c:	8b 34       	cpi	r24, 0x4B	; 75
    158e:	28 f4       	brcc	.+10     	; 0x159a <fnRdMgrAddrQuietly+0x1c>
    {
        rpu_address = tmp_addr;
    1590:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <rpu_address>
        write_rpu_address_to_eeprom = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <write_rpu_address_to_eeprom>
    159a:	08 95       	ret

0000159c <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    159c:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <inBytes_to_handle+0x1>
    15a0:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    15a4:	70 93 5d 03 	sts	0x035D, r23	; 0x80035d <smbus_has_numBytes_to_handle+0x1>
    15a8:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <smbus_has_numBytes_to_handle>
    15ac:	08 95       	ret

000015ae <handle_smbus_receive>:

// twi1.c has been modified, so it has an interleaved buffer that allows  
// the event to put a copy of the pointer where I can use it outside the ISR.
void handle_smbus_receive(void)
{
    if (smbus_has_numBytes_to_handle)
    15ae:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <smbus_has_numBytes_to_handle>
    15b2:	30 91 5d 03 	lds	r19, 0x035D	; 0x80035d <smbus_has_numBytes_to_handle+0x1>
    15b6:	21 15       	cp	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <handle_smbus_receive+0x10>
    15bc:	6b c0       	rjmp	.+214    	; 0x1694 <handle_smbus_receive+0xe6>
            {fnAnalogRead, fnNull, fnNull, fnNull, fnRdTimedAccum, fnNull, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
            {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnDayNightTimer, fnNull}
        };

        int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
        smbus_has_numBytes_to_handle = 0; 
    15be:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <smbus_has_numBytes_to_handle+0x1>
    15c2:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <smbus_has_numBytes_to_handle>
    15c6:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <inBytes_to_handle>
    15ca:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <inBytes_to_handle+0x1>
        // read_i2c_block_data has a single command byte in its data set
        // it will write i2c address, the command* byte, and then cause a repeated start
        // followed by the i2c address (again) and then reading** the data
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
    15ce:	21 30       	cpi	r18, 0x01	; 1
    15d0:	31 05       	cpc	r19, r1
    15d2:	11 f0       	breq	.+4      	; 0x15d8 <handle_smbus_receive+0x2a>
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	23 c0       	rjmp	.+70     	; 0x161e <handle_smbus_receive+0x70>
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    15d8:	90 81       	ld	r25, Z
    15da:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <smbusBuffer>
    15de:	98 13       	cpse	r25, r24
    15e0:	59 c0       	rjmp	.+178    	; 0x1694 <handle_smbus_receive+0xe6>
    15e2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <transmit_data_ready>
    15e6:	81 11       	cpse	r24, r1
    15e8:	55 c0       	rjmp	.+170    	; 0x1694 <handle_smbus_receive+0xe6>
            {
                for(i = 0; i < smbusBufferLength; ++i)
    15ea:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <smbusBufferLength>
    15ee:	aa e3       	ldi	r26, 0x3A	; 58
    15f0:	b3 e0       	ldi	r27, 0x03	; 3
    15f2:	ee e5       	ldi	r30, 0x5E	; 94
    15f4:	f3 e0       	ldi	r31, 0x03	; 3
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	98 17       	cp	r25, r24
    15fa:	21 f0       	breq	.+8      	; 0x1604 <handle_smbus_receive+0x56>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
    15fc:	2d 91       	ld	r18, X+
    15fe:	21 93       	st	Z+, r18
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
            {
                for(i = 0; i < smbusBufferLength; ++i)
    1600:	9f 5f       	subi	r25, 0xFF	; 255
    1602:	fa cf       	rjmp	.-12     	; 0x15f8 <handle_smbus_receive+0x4a>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
                }
                if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    1604:	80 32       	cpi	r24, 0x20	; 32
    1606:	28 f4       	brcc	.+10     	; 0x1612 <handle_smbus_receive+0x64>
    1608:	e8 2f       	mov	r30, r24
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	e2 5a       	subi	r30, 0xA2	; 162
    160e:	fc 4f       	sbci	r31, 0xFC	; 252
    1610:	11 82       	std	Z+1, r1	; 0x01
                smbus_oldBufferLength = smbusBufferLength;
    1612:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <smbus_oldBufferLength>
                transmit_data_ready = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <transmit_data_ready>
    161c:	08 95       	ret
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    161e:	84 2f       	mov	r24, r20
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	82 17       	cp	r24, r18
    1624:	93 07       	cpc	r25, r19
    1626:	54 f4       	brge	.+20     	; 0x163c <handle_smbus_receive+0x8e>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    1628:	df 01       	movw	r26, r30
    162a:	a8 0f       	add	r26, r24
    162c:	b9 1f       	adc	r27, r25
    162e:	5c 91       	ld	r21, X
    1630:	dc 01       	movw	r26, r24
    1632:	a6 5c       	subi	r26, 0xC6	; 198
    1634:	bc 4f       	sbci	r27, 0xFC	; 252
    1636:	5c 93       	st	X, r21
                smbus_oldBufferLength = smbusBufferLength;
                transmit_data_ready = 1;
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    1638:	4f 5f       	subi	r20, 0xFF	; 255
    163a:	f1 cf       	rjmp	.-30     	; 0x161e <handle_smbus_receive+0x70>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
        }
        if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    163c:	40 32       	cpi	r20, 0x20	; 32
    163e:	20 f4       	brcc	.+8      	; 0x1648 <handle_smbus_receive+0x9a>
    1640:	fc 01       	movw	r30, r24
    1642:	e6 5c       	subi	r30, 0xC6	; 198
    1644:	fc 4f       	sbci	r31, 0xFC	; 252
    1646:	11 82       	std	Z+1, r1	; 0x01
        smbusBufferLength = numBytes;
    1648:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <smbusBufferLength>

        // an read_i2c_block_data has a command byte 
        if( !(smbusBufferLength > 0) ) 
    164c:	21 11       	cpse	r18, r1
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <handle_smbus_receive+0xa6>
        {
            smbusBuffer[0] = 0xFF; // error code for small size.
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	0d c0       	rjmp	.+26     	; 0x166e <handle_smbus_receive+0xc0>
            return; // not valid, do nothing just echo an error code.
        }

        // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
        uint8_t group;
        group = (smbusBuffer[0] & 0xF0) >> 4;
    1654:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <smbusBuffer>
    1658:	e8 2f       	mov	r30, r24
    165a:	e2 95       	swap	r30
    165c:	ef 70       	andi	r30, 0x0F	; 15
        if(group >= GROUP) 
    165e:	e4 30       	cpi	r30, 0x04	; 4
    1660:	10 f0       	brcs	.+4      	; 0x1666 <handle_smbus_receive+0xb8>
        {
            smbusBuffer[0] = 0xFE; // error code for bad group.
    1662:	8e ef       	ldi	r24, 0xFE	; 254
    1664:	04 c0       	rjmp	.+8      	; 0x166e <handle_smbus_receive+0xc0>
            return; 
        }

        // mask the command bits (0..3) so they can be used as an index.
        uint8_t command;
        command = smbusBuffer[0] & 0x0F;
    1666:	8f 70       	andi	r24, 0x0F	; 15
        if(command >= MGR_CMDS) 
    1668:	88 30       	cpi	r24, 0x08	; 8
    166a:	20 f0       	brcs	.+8      	; 0x1674 <handle_smbus_receive+0xc6>
        {
            smbusBuffer[0] = 0xFD; // error code for bad command.
    166c:	8d ef       	ldi	r24, 0xFD	; 253
    166e:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <smbusBuffer>
            return; // not valid, do nothing but echo error code.
    1672:	08 95       	ret
        }

        // Call the i2c command function and return
        (* pf[group][command])(smbusBuffer);
    1674:	98 e0       	ldi	r25, 0x08	; 8
    1676:	e9 9f       	mul	r30, r25
    1678:	f0 01       	movw	r30, r0
    167a:	11 24       	eor	r1, r1
    167c:	e8 0f       	add	r30, r24
    167e:	f1 1d       	adc	r31, r1
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	e5 5a       	subi	r30, 0xA5	; 165
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	01 90       	ld	r0, Z+
    168a:	f0 81       	ld	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	8a e3       	ldi	r24, 0x3A	; 58
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	09 94       	ijmp
    1694:	08 95       	ret

00001696 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    1696:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <smbus_oldBufferLength>
    169a:	8e e5       	ldi	r24, 0x5E	; 94
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	0e 94 77 14 	call	0x28ee	; 0x28ee <twi1_transmit>
    transmit_data_ready = 0;
    16a2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <transmit_data_ready>
    16a6:	08 95       	ret

000016a8 <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    16a8:	cf 93       	push	r28
    if (write_rpu_address_to_eeprom && eeprom_is_ready())
    16aa:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <write_rpu_address_to_eeprom>
    16ae:	88 23       	and	r24, r24
    16b0:	21 f1       	breq	.+72     	; 0x16fa <save_rpu_addr_state+0x52>
    16b2:	f9 99       	sbic	0x1f, 1	; 31
    16b4:	22 c0       	rjmp	.+68     	; 0x16fa <save_rpu_addr_state+0x52>
    {
        // up to first EE_RPU_IDMAX locations may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    16b6:	9f ef       	ldi	r25, 0xFF	; 255
    16b8:	98 0f       	add	r25, r24
    16ba:	9a 30       	cpi	r25, 0x0A	; 10
    16bc:	90 f4       	brcc	.+36     	; 0x16e2 <save_rpu_addr_state+0x3a>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	ed 54       	subi	r30, 0x4D	; 77
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	c4 91       	lpm	r28, Z
            eeprom_update_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    16c8:	6c 2f       	mov	r22, r28
    16ca:	87 96       	adiw	r24, 0x27	; 39
    16cc:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <eeprom_update_byte>
            
            if (value == '\0') 
    16d0:	c1 11       	cpse	r28, r1
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <save_rpu_addr_state+0x30>
            {
                write_rpu_address_to_eeprom = 11;
    16d4:	8b e0       	ldi	r24, 0x0B	; 11
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <save_rpu_addr_state+0x36>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    16d8:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <write_rpu_address_to_eeprom>
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    16e2:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <write_rpu_address_to_eeprom>
    16e6:	8b 30       	cpi	r24, 0x0B	; 11
    16e8:	41 f4       	brne	.+16     	; 0x16fa <save_rpu_addr_state+0x52>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_update_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    16ea:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <rpu_address>
    16ee:	82 e3       	ldi	r24, 0x32	; 50
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <eeprom_update_byte>
            write_rpu_address_to_eeprom = 0;
    16f6:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <write_rpu_address_to_eeprom>
        }
    }
}
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	c8 e2       	ldi	r28, 0x28	; 40
    1706:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    1708:	fe 01       	movw	r30, r28
    170a:	e4 57       	subi	r30, 0x74	; 116
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    1710:	ce 01       	movw	r24, r28
    1712:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <eeprom_read_byte>
        if (id != ee_id) 
    1716:	18 13       	cpse	r17, r24
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    171a:	11 23       	and	r17, r17
    171c:	31 f0       	breq	.+12     	; 0x172a <check_for_eeprom_id+0x2c>
    171e:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    1720:	c2 33       	cpi	r28, 0x32	; 50
    1722:	d1 05       	cpc	r29, r1
    1724:	89 f7       	brne	.-30     	; 0x1708 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	01 c0       	rjmp	.+2      	; 0x172c <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	08 95       	ret

00001734 <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    1738:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    173c:	00 91 86 03 	lds	r16, 0x0386	; 0x800386 <adc_started_at>
    1740:	10 91 87 03 	lds	r17, 0x0387	; 0x800387 <adc_started_at+0x1>
    1744:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <adc_started_at+0x2>
    1748:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <adc_started_at+0x3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	80 1b       	sub	r24, r16
    1752:	91 0b       	sbc	r25, r17
    1754:	a2 0b       	sbc	r26, r18
    1756:	b3 0b       	sbc	r27, r19
    1758:	0b 97       	sbiw	r24, 0x0b	; 11
    175a:	a1 05       	cpc	r26, r1
    175c:	b1 05       	cpc	r27, r1
    175e:	08 f4       	brcc	.+2      	; 0x1762 <adc_burst+0x2e>
    1760:	4c c0       	rjmp	.+152    	; 0x17fa <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <analogRead>
    1768:	09 2e       	mov	r0, r25
    176a:	00 0c       	add	r0, r0
    176c:	aa 0b       	sbc	r26, r26
    176e:	bb 0b       	sbc	r27, r27
    1770:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <accumulate_alt_ti>
    1774:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <accumulate_alt_ti+0x1>
    1778:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <accumulate_alt_ti+0x2>
    177c:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <accumulate_alt_ti+0x3>
    1780:	84 0f       	add	r24, r20
    1782:	95 1f       	adc	r25, r21
    1784:	a6 1f       	adc	r26, r22
    1786:	b7 1f       	adc	r27, r23
    1788:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <accumulate_alt_ti>
    178c:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <accumulate_alt_ti+0x1>
    1790:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <accumulate_alt_ti+0x2>
    1794:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    1798:	86 e0       	ldi	r24, 0x06	; 6
    179a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <analogRead>
    179e:	09 2e       	mov	r0, r25
    17a0:	00 0c       	add	r0, r0
    17a2:	aa 0b       	sbc	r26, r26
    17a4:	bb 0b       	sbc	r27, r27
    17a6:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <accumulate_pwr_ti>
    17aa:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <accumulate_pwr_ti+0x1>
    17ae:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <accumulate_pwr_ti+0x2>
    17b2:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <accumulate_pwr_ti+0x3>
    17b6:	84 0f       	add	r24, r20
    17b8:	95 1f       	adc	r25, r21
    17ba:	a6 1f       	adc	r26, r22
    17bc:	b7 1f       	adc	r27, r23
    17be:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <accumulate_pwr_ti>
    17c2:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <accumulate_pwr_ti+0x1>
    17c6:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <accumulate_pwr_ti+0x2>
    17ca:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 04 12 	call	0x2408	; 0x2408 <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    17d4:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <adc_started_at>
    17d8:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <adc_started_at+0x1>
    17dc:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <adc_started_at+0x2>
    17e0:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <adc_started_at+0x3>
    17e4:	0a 96       	adiw	r24, 0x0a	; 10
    17e6:	a1 1d       	adc	r26, r1
    17e8:	b1 1d       	adc	r27, r1
    17ea:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <adc_started_at>
    17ee:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <adc_started_at+0x1>
    17f2:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <adc_started_at+0x2>
    17f6:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <adc_started_at+0x3>
    } 
}
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	08 95       	ret

00001800 <IsValidValForAvccRef>:
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

// 
uint8_t IsValidValForAvccRef() 
{
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    float tmp_avcc;
    memcpy(&tmp_avcc, &ref_extern_avcc_uV, sizeof tmp_avcc);
    1808:	c0 90 8b 03 	lds	r12, 0x038B	; 0x80038b <ref_extern_avcc_uV>
    180c:	d0 90 8c 03 	lds	r13, 0x038C	; 0x80038c <ref_extern_avcc_uV+0x1>
    1810:	e0 90 8d 03 	lds	r14, 0x038D	; 0x80038d <ref_extern_avcc_uV+0x2>
    1814:	f0 90 8e 03 	lds	r15, 0x038E	; 0x80038e <ref_extern_avcc_uV+0x3>
    if ( ((tmp_avcc > REF_EXTERN_AVCC_MIN) && (tmp_avcc < REF_EXTERN_AVCC_MAX)) )
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e9       	ldi	r20, 0x90	; 144
    181e:	50 e4       	ldi	r21, 0x40	; 64
    1820:	c7 01       	movw	r24, r14
    1822:	b6 01       	movw	r22, r12
    1824:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__gesf2>
    1828:	18 16       	cp	r1, r24
    182a:	64 f4       	brge	.+24     	; 0x1844 <IsValidValForAvccRef+0x44>
    {
        return 1;
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 eb       	ldi	r20, 0xB0	; 176
    1832:	50 e4       	ldi	r21, 0x40	; 64
    1834:	c7 01       	movw	r24, r14
    1836:	b6 01       	movw	r22, r12
    1838:	0e 94 49 19 	call	0x3292	; 0x3292 <__cmpsf2>
    183c:	88 1f       	adc	r24, r24
    183e:	88 27       	eor	r24, r24
    1840:	88 1f       	adc	r24, r24
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <IsValidValForAvccRef+0x46>
    }
    else
    {
        return 0;
    1844:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	08 95       	ret

00001850 <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref() 
{
    1850:	cf 92       	push	r12
    1852:	df 92       	push	r13
    1854:	ef 92       	push	r14
    1856:	ff 92       	push	r15
    float tmp_1v1;
    memcpy(&tmp_1v1, &ref_intern_1v1_uV, sizeof tmp_1v1);
    1858:	c0 90 8f 03 	lds	r12, 0x038F	; 0x80038f <ref_intern_1v1_uV>
    185c:	d0 90 90 03 	lds	r13, 0x0390	; 0x800390 <ref_intern_1v1_uV+0x1>
    1860:	e0 90 91 03 	lds	r14, 0x0391	; 0x800391 <ref_intern_1v1_uV+0x2>
    1864:	f0 90 92 03 	lds	r15, 0x0392	; 0x800392 <ref_intern_1v1_uV+0x3>
    if ( ((tmp_1v1 > REF_INTERN_1V1_MIN) && (tmp_1v1 < REF_INTERN_1V1_MAX)) )
    1868:	26 e6       	ldi	r18, 0x66	; 102
    186a:	36 e6       	ldi	r19, 0x66	; 102
    186c:	46 e6       	ldi	r20, 0x66	; 102
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	c7 01       	movw	r24, r14
    1872:	b6 01       	movw	r22, r12
    1874:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__gesf2>
    1878:	18 16       	cp	r1, r24
    187a:	64 f4       	brge	.+24     	; 0x1894 <IsValidValFor1V1Ref+0x44>
    {
        return 1;
    187c:	26 e6       	ldi	r18, 0x66	; 102
    187e:	36 e6       	ldi	r19, 0x66	; 102
    1880:	46 ea       	ldi	r20, 0xA6	; 166
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	c7 01       	movw	r24, r14
    1886:	b6 01       	movw	r22, r12
    1888:	0e 94 49 19 	call	0x3292	; 0x3292 <__cmpsf2>
    188c:	88 1f       	adc	r24, r24
    188e:	88 27       	eor	r24, r24
    1890:	88 1f       	adc	r24, r24
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <IsValidValFor1V1Ref+0x46>
    }
    else
    {
        return 0;
    1894:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1896:	ff 90       	pop	r15
    1898:	ef 90       	pop	r14
    189a:	df 90       	pop	r13
    189c:	cf 90       	pop	r12
    189e:	08 95       	ret

000018a0 <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    18a0:	8e e1       	ldi	r24, 0x1E	; 30
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    if ( eeprom_is_ready() )
    18a8:	f9 99       	sbic	0x1f, 1	; 31
    18aa:	0a c0       	rjmp	.+20     	; 0x18c0 <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    18ac:	84 34       	cpi	r24, 0x44	; 68
    18ae:	91 44       	sbci	r25, 0x41	; 65
    18b0:	49 f0       	breq	.+18     	; 0x18c4 <WriteEeReferenceId+0x24>
        {
            eeprom_update_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    18b2:	64 e4       	ldi	r22, 0x44	; 68
    18b4:	71 e4       	ldi	r23, 0x41	; 65
    18b6:	8e e1       	ldi	r24, 0x1E	; 30
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 8e 1c 	call	0x391c	; 0x391c <eeprom_update_word>
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_update_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    18c6:	08 95       	ret

000018c8 <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    18d4:	f9 99       	sbic	0x1f, 1	; 31
    18d6:	12 c0       	rjmp	.+36     	; 0x18fc <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    18d8:	40 91 8b 03 	lds	r20, 0x038B	; 0x80038b <ref_extern_avcc_uV>
    18dc:	50 91 8c 03 	lds	r21, 0x038C	; 0x80038c <ref_extern_avcc_uV+0x1>
    18e0:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <ref_extern_avcc_uV+0x2>
    18e4:	70 91 8e 03 	lds	r23, 0x038E	; 0x80038e <ref_extern_avcc_uV+0x3>
    18e8:	84 17       	cp	r24, r20
    18ea:	95 07       	cpc	r25, r21
    18ec:	a6 07       	cpc	r26, r22
    18ee:	b7 07       	cpc	r27, r23
    18f0:	39 f0       	breq	.+14     	; 0x1900 <WriteEeReferenceAvcc+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 82 1c 	call	0x3904	; 0x3904 <eeprom_update_dword>
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1902:	08 95       	ret

00001904 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    1904:	84 e2       	ldi	r24, 0x24	; 36
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1910:	f9 99       	sbic	0x1f, 1	; 31
    1912:	12 c0       	rjmp	.+36     	; 0x1938 <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    1914:	40 91 8f 03 	lds	r20, 0x038F	; 0x80038f <ref_intern_1v1_uV>
    1918:	50 91 90 03 	lds	r21, 0x0390	; 0x800390 <ref_intern_1v1_uV+0x1>
    191c:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <ref_intern_1v1_uV+0x2>
    1920:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <ref_intern_1v1_uV+0x3>
    1924:	84 17       	cp	r24, r20
    1926:	95 07       	cpc	r25, r21
    1928:	a6 07       	cpc	r26, r22
    192a:	b7 07       	cpc	r27, r23
    192c:	39 f0       	breq	.+14     	; 0x193c <WriteEeReference1V1+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    192e:	84 e2       	ldi	r24, 0x24	; 36
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 82 1c 	call	0x3904	; 0x3904 <eeprom_update_dword>
    1936:	02 c0       	rjmp	.+4      	; 0x193c <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    193e:	08 95       	ret

00001940 <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1940:	8e e1       	ldi	r24, 0x1E	; 30
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1948:	84 34       	cpi	r24, 0x44	; 68
    194a:	91 44       	sbci	r25, 0x41	; 65
    194c:	81 f5       	brne	.+96     	; 0x19ae <LoadAnalogRefFromEEPROM+0x6e>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC));
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    1956:	60 93 8b 03 	sts	0x038B, r22	; 0x80038b <ref_extern_avcc_uV>
    195a:	70 93 8c 03 	sts	0x038C, r23	; 0x80038c <ref_extern_avcc_uV+0x1>
    195e:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <ref_extern_avcc_uV+0x2>
    1962:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <ref_extern_avcc_uV+0x3>
        if ( IsValidValForAvccRef() ) 
    1966:	0e 94 00 0c 	call	0x1800	; 0x1800 <IsValidValForAvccRef>
    196a:	88 23       	and	r24, r24
    196c:	01 f1       	breq	.+64     	; 0x19ae <LoadAnalogRefFromEEPROM+0x6e>
        {
            ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    196e:	84 e2       	ldi	r24, 0x24	; 36
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    1976:	60 93 8f 03 	sts	0x038F, r22	; 0x80038f <ref_intern_1v1_uV>
    197a:	70 93 90 03 	sts	0x0390, r23	; 0x800390 <ref_intern_1v1_uV+0x1>
    197e:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <ref_intern_1v1_uV+0x2>
    1982:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <ref_intern_1v1_uV+0x3>
            if ( IsValidValFor1V1Ref() )
    1986:	0e 94 28 0c 	call	0x1850	; 0x1850 <IsValidValFor1V1Ref>
    198a:	81 11       	cpse	r24, r1
    198c:	0c c0       	rjmp	.+24     	; 0x19a6 <LoadAnalogRefFromEEPROM+0x66>
                return 1;
            }
            else
            { // 1v1 is not used (should it be removed?)
                float tmp_1v1 = 1.08;
                memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    198e:	81 e7       	ldi	r24, 0x71	; 113
    1990:	9d e3       	ldi	r25, 0x3D	; 61
    1992:	aa e8       	ldi	r26, 0x8A	; 138
    1994:	bf e3       	ldi	r27, 0x3F	; 63
    1996:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ref_intern_1v1_uV>
    199a:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ref_intern_1v1_uV+0x1>
    199e:	a0 93 91 03 	sts	0x0391, r26	; 0x800391 <ref_intern_1v1_uV+0x2>
    19a2:	b0 93 92 03 	sts	0x0392, r27	; 0x800392 <ref_intern_1v1_uV+0x3>
                ref_loaded = REF_LOADED;
    19a6:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <ref_loaded>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	08 95       	ret
    }

    // use defaults
    // on AVR sizeof(float) == sizeof(uint32_t)
    float tmp_avcc = 5.0;
    memcpy(&ref_extern_avcc_uV, &tmp_avcc, sizeof ref_extern_avcc_uV);
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 ea       	ldi	r26, 0xA0	; 160
    19b4:	b0 e4       	ldi	r27, 0x40	; 64
    19b6:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <ref_extern_avcc_uV>
    19ba:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <ref_extern_avcc_uV+0x1>
    19be:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <ref_extern_avcc_uV+0x2>
    19c2:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <ref_extern_avcc_uV+0x3>
    float tmp_1v1 = 1.08;
    memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    19c6:	81 e7       	ldi	r24, 0x71	; 113
    19c8:	9d e3       	ldi	r25, 0x3D	; 61
    19ca:	aa e8       	ldi	r26, 0x8A	; 138
    19cc:	bf e3       	ldi	r27, 0x3F	; 63
    19ce:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ref_intern_1v1_uV>
    19d2:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ref_intern_1v1_uV+0x1>
    19d6:	a0 93 91 03 	sts	0x0391, r26	; 0x800391 <ref_intern_1v1_uV+0x2>
    19da:	b0 93 92 03 	sts	0x0392, r27	; 0x800392 <ref_intern_1v1_uV+0x3>
    ref_loaded = REF_DEFAULT;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <ref_loaded>
    return 0;
    19e4:	80 e0       	ldi	r24, 0x00	; 0
}
    19e6:	08 95       	ret

000019e8 <ReferancesFromI2CtoEE>:

// save referances from I2C to EEPROM (if valid)
void ReferancesFromI2CtoEE(void)
{
    19e8:	cf 93       	push	r28
    if (ref_loaded > REF_DEFAULT)
    19ea:	c0 91 8a 03 	lds	r28, 0x038A	; 0x80038a <ref_loaded>
    19ee:	c2 30       	cpi	r28, 0x02	; 2
    19f0:	38 f1       	brcs	.+78     	; 0x1a40 <ReferancesFromI2CtoEE+0x58>
    {
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
    19f2:	0e 94 00 0c 	call	0x1800	; 0x1800 <IsValidValForAvccRef>
    19f6:	88 23       	and	r24, r24
    19f8:	01 f1       	breq	.+64     	; 0x1a3a <ReferancesFromI2CtoEE+0x52>
    19fa:	0e 94 28 0c 	call	0x1850	; 0x1850 <IsValidValFor1V1Ref>
    19fe:	88 23       	and	r24, r24
    1a00:	e1 f0       	breq	.+56     	; 0x1a3a <ReferancesFromI2CtoEE+0x52>
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1a02:	8e e1       	ldi	r24, 0x1E	; 30
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1a0a:	84 34       	cpi	r24, 0x44	; 68
    1a0c:	91 44       	sbci	r25, 0x41	; 65
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <ReferancesFromI2CtoEE+0x2e>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1a10:	cf 91       	pop	r28
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
            {
                WriteEeReferenceId();
    1a12:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <WriteEeReferenceId>
                return; // that is enough for this loop
            }
            else 
            {
                if (ref_loaded == REF_1V1_TOSAVE)
    1a16:	c3 30       	cpi	r28, 0x03	; 3
    1a18:	39 f4       	brne	.+14     	; 0x1a28 <ReferancesFromI2CtoEE+0x40>
                {
                    if (WriteEeReference1V1())
    1a1a:	0e 94 82 0c 	call	0x1904	; 0x1904 <WriteEeReference1V1>
    1a1e:	88 23       	and	r24, r24
    1a20:	19 f0       	breq	.+6      	; 0x1a28 <ReferancesFromI2CtoEE+0x40>
                    {
                        ref_loaded = REF_LOADED;
    1a22:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <ref_loaded>
                        return; // all done
    1a26:	0c c0       	rjmp	.+24     	; 0x1a40 <ReferancesFromI2CtoEE+0x58>
                    }
                }
                if (ref_loaded == REF_AVCC_TOSAVE)
    1a28:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <ref_loaded>
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	41 f4       	brne	.+16     	; 0x1a40 <ReferancesFromI2CtoEE+0x58>
                {
                    if (WriteEeReferenceAvcc())
    1a30:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <WriteEeReferenceAvcc>
    1a34:	81 11       	cpse	r24, r1
    1a36:	f5 cf       	rjmp	.-22     	; 0x1a22 <ReferancesFromI2CtoEE+0x3a>
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <ReferancesFromI2CtoEE+0x58>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1a3a:	cf 91       	pop	r28
                }
            }       
        }
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1a3c:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <LoadAnalogRefFromEEPROM>
        }
    }
}
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <check_if_alt_should_be_on>:


// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    if (enable_alternate_power)
    1a58:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <enable_alternate_power>
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <check_if_alt_should_be_on+0x1e>
    1a60:	d1 c0       	rjmp	.+418    	; 0x1c04 <check_if_alt_should_be_on+0x1c0>
    {
        int battery = analogRead(PWR_V);
    1a62:	87 e0       	ldi	r24, 0x07	; 7
    1a64:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <analogRead>
    1a68:	7c 01       	movw	r14, r24
        if (battery >= battery_high_limit)
    1a6a:	c0 91 9c 03 	lds	r28, 0x039C	; 0x80039c <battery_high_limit>
    1a6e:	d0 91 9d 03 	lds	r29, 0x039D	; 0x80039d <battery_high_limit+0x1>
    1a72:	8c 17       	cp	r24, r28
    1a74:	9d 07       	cpc	r25, r29
    1a76:	4c f0       	brlt	.+18     	; 0x1a8a <check_if_alt_should_be_on+0x46>
        {
            if (digitalRead(ALT_EN))
    1a78:	1b 9b       	sbis	0x03, 3	; 3
    1a7a:	c8 c0       	rjmp	.+400    	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1a7c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a7e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1a80:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a82:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                enable_alternate_power = 0; // charge is done
    1a84:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <enable_alternate_power>
    1a88:	c1 c0       	rjmp	.+386    	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
            }
            return; // if alt_en is not on do nothing
        }
        int pwm_range = ( (battery_high_limit - battery_low_limit)>>1 ); // half the diff between high and low limit
    1a8a:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <battery_low_limit>
    1a8e:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <battery_low_limit+0x1>
    1a92:	c8 1b       	sub	r28, r24
    1a94:	d9 0b       	sbc	r29, r25
    1a96:	d5 95       	asr	r29
    1a98:	c7 95       	ror	r28
        unsigned long kRuntime = millis() - alt_pwm_started_at;
    1a9a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    1a9e:	00 91 94 03 	lds	r16, 0x0394	; 0x800394 <alt_pwm_started_at>
    1aa2:	10 91 95 03 	lds	r17, 0x0395	; 0x800395 <alt_pwm_started_at+0x1>
    1aa6:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <alt_pwm_started_at+0x2>
    1aaa:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <alt_pwm_started_at+0x3>
    1aae:	5b 01       	movw	r10, r22
    1ab0:	6c 01       	movw	r12, r24
    1ab2:	a0 1a       	sub	r10, r16
    1ab4:	b1 0a       	sbc	r11, r17
    1ab6:	c2 0a       	sbc	r12, r18
    1ab8:	d3 0a       	sbc	r13, r19
    1aba:	96 01       	movw	r18, r12
    1abc:	85 01       	movw	r16, r10
        if (battery < (battery_low_limit + pwm_range ) )
    1abe:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <battery_low_limit>
    1ac2:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <battery_low_limit+0x1>
    1ac6:	8c 0f       	add	r24, r28
    1ac8:	9d 1f       	adc	r25, r29
    1aca:	e8 16       	cp	r14, r24
    1acc:	f9 06       	cpc	r15, r25
    1ace:	0c f0       	brlt	.+2      	; 0x1ad2 <check_if_alt_should_be_on+0x8e>
    1ad0:	5b c0       	rjmp	.+182    	; 0x1b88 <check_if_alt_should_be_on+0x144>
        { // half way between high and low limit pwm will occure at 2 sec intervals
            unsigned long offtime = ALT_PWM_PERIOD * ( (battery_high_limit - battery) / pwm_range );
            if (digitalRead(ALT_EN))
    1ad2:	1b 9b       	sbis	0x03, 3	; 3
    1ad4:	39 c0       	rjmp	.+114    	; 0x1b48 <check_if_alt_should_be_on+0x104>
            {
                if ( (kRuntime + offtime) > ALT_PWM_PERIOD )
    1ad6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <battery_high_limit>
    1ada:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <battery_high_limit+0x1>
    1ade:	8e 19       	sub	r24, r14
    1ae0:	9f 09       	sbc	r25, r15
    1ae2:	be 01       	movw	r22, r28
    1ae4:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__divmodhi4>
    1ae8:	40 ed       	ldi	r20, 0xD0	; 208
    1aea:	57 e0       	ldi	r21, 0x07	; 7
    1aec:	64 9f       	mul	r22, r20
    1aee:	c0 01       	movw	r24, r0
    1af0:	65 9f       	mul	r22, r21
    1af2:	90 0d       	add	r25, r0
    1af4:	74 9f       	mul	r23, r20
    1af6:	90 0d       	add	r25, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	09 2e       	mov	r0, r25
    1afc:	00 0c       	add	r0, r0
    1afe:	aa 0b       	sbc	r26, r26
    1b00:	bb 0b       	sbc	r27, r27
    1b02:	8a 0d       	add	r24, r10
    1b04:	9b 1d       	adc	r25, r11
    1b06:	ac 1d       	adc	r26, r12
    1b08:	bd 1d       	adc	r27, r13
    1b0a:	81 3d       	cpi	r24, 0xD1	; 209
    1b0c:	97 40       	sbci	r25, 0x07	; 7
    1b0e:	a1 05       	cpc	r26, r1
    1b10:	b1 05       	cpc	r27, r1
    1b12:	08 f4       	brcc	.+2      	; 0x1b16 <check_if_alt_should_be_on+0xd2>
    1b14:	7b c0       	rjmp	.+246    	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b16:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b18:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1b1a:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b1c:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,LOW);
                    alt_pwm_accum_charge_time += kRuntime;
    1b1e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <alt_pwm_accum_charge_time>
    1b22:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <alt_pwm_accum_charge_time+0x1>
    1b26:	a0 91 9a 03 	lds	r26, 0x039A	; 0x80039a <alt_pwm_accum_charge_time+0x2>
    1b2a:	b0 91 9b 03 	lds	r27, 0x039B	; 0x80039b <alt_pwm_accum_charge_time+0x3>
    1b2e:	08 0f       	add	r16, r24
    1b30:	19 1f       	adc	r17, r25
    1b32:	2a 1f       	adc	r18, r26
    1b34:	3b 1f       	adc	r19, r27
    1b36:	00 93 98 03 	sts	0x0398, r16	; 0x800398 <alt_pwm_accum_charge_time>
    1b3a:	10 93 99 03 	sts	0x0399, r17	; 0x800399 <alt_pwm_accum_charge_time+0x1>
    1b3e:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <alt_pwm_accum_charge_time+0x2>
    1b42:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <alt_pwm_accum_charge_time+0x3>
    1b46:	62 c0       	rjmp	.+196    	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
                }
            }
            else 
            {
                if ( kRuntime > ALT_PWM_PERIOD )
    1b48:	81 ed       	ldi	r24, 0xD1	; 209
    1b4a:	a8 16       	cp	r10, r24
    1b4c:	87 e0       	ldi	r24, 0x07	; 7
    1b4e:	b8 06       	cpc	r11, r24
    1b50:	c1 04       	cpc	r12, r1
    1b52:	d1 04       	cpc	r13, r1
    1b54:	08 f4       	brcc	.+2      	; 0x1b58 <check_if_alt_should_be_on+0x114>
    1b56:	5a c0       	rjmp	.+180    	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b58:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b5a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1b5c:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b5e:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,HIGH);
                    if (kRuntime > (ALT_PWM_PERIOD<<1) )
    1b60:	41 ea       	ldi	r20, 0xA1	; 161
    1b62:	a4 16       	cp	r10, r20
    1b64:	4f e0       	ldi	r20, 0x0F	; 15
    1b66:	b4 06       	cpc	r11, r20
    1b68:	c1 04       	cpc	r12, r1
    1b6a:	d1 04       	cpc	r13, r1
    1b6c:	58 f5       	brcc	.+86     	; 0x1bc4 <check_if_alt_should_be_on+0x180>
                    {
                        alt_pwm_started_at = millis();
                    }
                    else
                    {
                        alt_pwm_started_at += ALT_PWM_PERIOD;
    1b6e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <alt_pwm_started_at>
    1b72:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <alt_pwm_started_at+0x1>
    1b76:	a0 91 96 03 	lds	r26, 0x0396	; 0x800396 <alt_pwm_started_at+0x2>
    1b7a:	b0 91 97 03 	lds	r27, 0x0397	; 0x800397 <alt_pwm_started_at+0x3>
    1b7e:	80 53       	subi	r24, 0x30	; 48
    1b80:	98 4f       	sbci	r25, 0xF8	; 248
    1b82:	af 4f       	sbci	r26, 0xFF	; 255
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	35 c0       	rjmp	.+106    	; 0x1bf2 <check_if_alt_should_be_on+0x1ae>
                    }
                }
            }
            return;
        }
        else if (digitalRead(ALT_EN))
    1b88:	1b 9b       	sbis	0x03, 3	; 3
    1b8a:	0a c0       	rjmp	.+20     	; 0x1ba0 <check_if_alt_should_be_on+0x15c>
        { // if pwm is not occuring we still need to rest every so often to measure the battery
            if ( (kRuntime + ALT_REST) > ALT_REST_PERIOD )
    1b8c:	06 50       	subi	r16, 0x06	; 6
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	2f 4f       	sbci	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	01 31       	cpi	r16, 0x11	; 17
    1b96:	17 42       	sbci	r17, 0x27	; 39
    1b98:	21 05       	cpc	r18, r1
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	b8 f1       	brcs	.+110    	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
    1b9e:	32 c0       	rjmp	.+100    	; 0x1c04 <check_if_alt_should_be_on+0x1c0>
            }
            return;
        }
        else 
        {
            if ( kRuntime > ALT_REST_PERIOD)
    1ba0:	41 e1       	ldi	r20, 0x11	; 17
    1ba2:	a4 16       	cp	r10, r20
    1ba4:	47 e2       	ldi	r20, 0x27	; 39
    1ba6:	b4 06       	cpc	r11, r20
    1ba8:	c1 04       	cpc	r12, r1
    1baa:	d1 04       	cpc	r13, r1
    1bac:	78 f1       	brcs	.+94     	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1bae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bb0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1bb2:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bb4:	8f bf       	out	0x3f, r24	; 63
            { // end of resting time, start charging
                digitalWrite(ALT_EN,HIGH);
                if (kRuntime > (ALT_REST_PERIOD<<1) )
    1bb6:	81 e2       	ldi	r24, 0x21	; 33
    1bb8:	a8 16       	cp	r10, r24
    1bba:	8e e4       	ldi	r24, 0x4E	; 78
    1bbc:	b8 06       	cpc	r11, r24
    1bbe:	c1 04       	cpc	r12, r1
    1bc0:	d1 04       	cpc	r13, r1
    1bc2:	58 f0       	brcs	.+22     	; 0x1bda <check_if_alt_should_be_on+0x196>
                {
                    alt_pwm_started_at = millis();
    1bc4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    1bc8:	60 93 94 03 	sts	0x0394, r22	; 0x800394 <alt_pwm_started_at>
    1bcc:	70 93 95 03 	sts	0x0395, r23	; 0x800395 <alt_pwm_started_at+0x1>
    1bd0:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <alt_pwm_started_at+0x2>
    1bd4:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <alt_pwm_started_at+0x3>
    1bd8:	19 c0       	rjmp	.+50     	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
                }
                else
                {
                    alt_pwm_started_at += ALT_REST_PERIOD;
    1bda:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <alt_pwm_started_at>
    1bde:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <alt_pwm_started_at+0x1>
    1be2:	a0 91 96 03 	lds	r26, 0x0396	; 0x800396 <alt_pwm_started_at+0x2>
    1be6:	b0 91 97 03 	lds	r27, 0x0397	; 0x800397 <alt_pwm_started_at+0x3>
    1bea:	80 5f       	subi	r24, 0xF0	; 240
    1bec:	98 4d       	sbci	r25, 0xD8	; 216
    1bee:	af 4f       	sbci	r26, 0xFF	; 255
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <alt_pwm_started_at>
    1bf6:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <alt_pwm_started_at+0x1>
    1bfa:	a0 93 96 03 	sts	0x0396, r26	; 0x800396 <alt_pwm_started_at+0x2>
    1bfe:	b0 93 97 03 	sts	0x0397, r27	; 0x800397 <alt_pwm_started_at+0x3>
    1c02:	04 c0       	rjmp	.+8      	; 0x1c0c <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c04:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c06:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1c08:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c0a:	8f bf       	out	0x3f, r24	; 63
    }
    else 
    {
        digitalWrite(ALT_EN,LOW);
    }
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	bf 90       	pop	r11
    1c1e:	af 90       	pop	r10
    1c20:	08 95       	ret

00001c22 <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 81       	ld	r18, Z
    1c26:	31 81       	ldd	r19, Z+1	; 0x01
    1c28:	2b 54       	subi	r18, 0x4B	; 75
    1c2a:	31 40       	sbci	r19, 0x01	; 1
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	27 38       	cpi	r18, 0x87	; 135
    1c30:	31 05       	cpc	r19, r1
    1c32:	08 f0       	brcs	.+2      	; 0x1c36 <IsValidBatHighLimFor12V+0x14>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c36:	08 95       	ret

00001c38 <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 81       	ld	r18, Z
    1c3c:	31 81       	ldd	r19, Z+1	; 0x01
    1c3e:	2e 53       	subi	r18, 0x3E	; 62
    1c40:	31 40       	sbci	r19, 0x01	; 1
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	26 36       	cpi	r18, 0x66	; 102
    1c46:	31 05       	cpc	r19, r1
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <IsValidBatLowLimFor12V+0x14>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c4c:	08 95       	ret

00001c4e <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 81       	ld	r18, Z
    1c52:	31 81       	ldd	r19, Z+1	; 0x01
    1c54:	25 59       	subi	r18, 0x95	; 149
    1c56:	32 40       	sbci	r19, 0x02	; 2
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	2f 30       	cpi	r18, 0x0F	; 15
    1c5c:	31 40       	sbci	r19, 0x01	; 1
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <IsValidBatHighLimFor24V+0x14>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c62:	08 95       	ret

00001c64 <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 81       	ld	r18, Z
    1c68:	31 81       	ldd	r19, Z+1	; 0x01
    1c6a:	2c 57       	subi	r18, 0x7C	; 124
    1c6c:	32 40       	sbci	r19, 0x02	; 2
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	2b 3c       	cpi	r18, 0xCB	; 203
    1c72:	31 05       	cpc	r19, r1
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <IsValidBatLowLimFor24V+0x14>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c78:	08 95       	ret

00001c7a <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1c7a:	8c e3       	ldi	r24, 0x3C	; 60
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1c82:	f9 99       	sbic	0x1f, 1	; 31
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1c86:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <battery_high_limit>
    1c8a:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <battery_high_limit+0x1>
    1c8e:	86 17       	cp	r24, r22
    1c90:	97 07       	cpc	r25, r23
    1c92:	39 f0       	breq	.+14     	; 0x1ca2 <WriteEEBatHighLim+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    1c94:	8c e3       	ldi	r24, 0x3C	; 60
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 8e 1c 	call	0x391c	; 0x391c <eeprom_update_word>
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1ca4:	08 95       	ret

00001ca6 <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1ca6:	8e e3       	ldi	r24, 0x3E	; 62
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1cae:	f9 99       	sbic	0x1f, 1	; 31
    1cb0:	0c c0       	rjmp	.+24     	; 0x1cca <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    1cb2:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <battery_low_limit>
    1cb6:	70 91 a0 03 	lds	r23, 0x03A0	; 0x8003a0 <battery_low_limit+0x1>
    1cba:	86 17       	cp	r24, r22
    1cbc:	97 07       	cpc	r25, r23
    1cbe:	39 f0       	breq	.+14     	; 0x1cce <WriteEEBatLowLim+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    1cc0:	8e e3       	ldi	r24, 0x3E	; 62
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 8e 1c 	call	0x391c	; 0x391c <eeprom_update_word>
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1cd0:	08 95       	ret

00001cd2 <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <LoadBatLimitsFromEEPROM+0xe>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <LoadBatLimitsFromEEPROM+0x10>
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1ce6:	8c e3       	ldi	r24, 0x3C	; 60
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    1cee:	7c 01       	movw	r14, r24
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    1cf4:	8e e3       	ldi	r24, 0x3E	; 62
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    1cfc:	8c 01       	movw	r16, r24
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    1d02:	ce 01       	movw	r24, r28
    1d04:	03 96       	adiw	r24, 0x03	; 3
    1d06:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <IsValidBatHighLimFor12V>
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <LoadBatLimitsFromEEPROM+0x48>
    1d0e:	ce 01       	movw	r24, r28
    1d10:	03 96       	adiw	r24, 0x03	; 3
    1d12:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <IsValidBatHighLimFor24V>
    1d16:	88 23       	and	r24, r24
    1d18:	c1 f0       	breq	.+48     	; 0x1d4a <LoadBatLimitsFromEEPROM+0x78>
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <IsValidBatLowLimFor12V>
    1d22:	81 11       	cpse	r24, r1
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <LoadBatLimitsFromEEPROM+0x60>
    1d26:	ce 01       	movw	r24, r28
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <IsValidBatLowLimFor24V>
    1d2e:	88 23       	and	r24, r24
    1d30:	61 f0       	breq	.+24     	; 0x1d4a <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    1d32:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <battery_high_limit+0x1>
    1d36:	e0 92 9c 03 	sts	0x039C, r14	; 0x80039c <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    1d3a:	10 93 a0 03 	sts	0x03A0, r17	; 0x8003a0 <battery_low_limit+0x1>
    1d3e:	00 93 9f 03 	sts	0x039F, r16	; 0x80039f <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    1d42:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <bat_limit_loaded>
        return 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    1d4a:	8d e8       	ldi	r24, 0x8D	; 141
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <battery_high_limit+0x1>
    1d52:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1d56:	86 e7       	ldi	r24, 0x76	; 118
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <battery_low_limit+0x1>
    1d5e:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <bat_limit_loaded>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	08 95       	ret

00001d80 <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if (bat_limit_loaded > BAT_LIM_DEFAULT)
    1d80:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bat_limit_loaded>
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	58 f1       	brcs	.+86     	; 0x1dde <BatLimitsFromI2CtoEE+0x5e>
    {
        if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	99 f4       	brne	.+38     	; 0x1db2 <BatLimitsFromI2CtoEE+0x32>
        {
            if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1d8c:	8c e9       	ldi	r24, 0x9C	; 156
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <IsValidBatHighLimFor12V>
    1d94:	81 11       	cpse	r24, r1
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <BatLimitsFromI2CtoEE+0x24>
    1d98:	8c e9       	ldi	r24, 0x9C	; 156
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <IsValidBatHighLimFor24V>
    1da0:	88 23       	and	r24, r24
    1da2:	39 f0       	breq	.+14     	; 0x1db2 <BatLimitsFromI2CtoEE+0x32>
            {
                if (WriteEEBatHighLim())
    1da4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <WriteEEBatHighLim>
    1da8:	88 23       	and	r24, r24
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <BatLimitsFromI2CtoEE+0x32>
                {
                    bat_limit_loaded = BAT_LIM_LOADED;
    1dac:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <bat_limit_loaded>
                    return; // all done
    1db0:	08 95       	ret
                }
            }
        }
        if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1db2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <bat_limit_loaded>
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	81 f4       	brne	.+32     	; 0x1dda <BatLimitsFromI2CtoEE+0x5a>
        {    
            if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1dba:	8f e9       	ldi	r24, 0x9F	; 159
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <IsValidBatLowLimFor12V>
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	06 c0       	rjmp	.+12     	; 0x1dd2 <BatLimitsFromI2CtoEE+0x52>
    1dc6:	8f e9       	ldi	r24, 0x9F	; 159
    1dc8:	93 e0       	ldi	r25, 0x03	; 3
    1dca:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <IsValidBatLowLimFor24V>
    1dce:	88 23       	and	r24, r24
    1dd0:	21 f0       	breq	.+8      	; 0x1dda <BatLimitsFromI2CtoEE+0x5a>
            {
                if (WriteEEBatLowLim())
    1dd2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <WriteEEBatLowLim>
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	e9 cf       	rjmp	.-46     	; 0x1dac <BatLimitsFromI2CtoEE+0x2c>
                    bat_limit_loaded = BAT_LIM_LOADED;
                    return; // all done
                }
            }
        }
        LoadBatLimitsFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    1dda:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <LoadBatLimitsFromEEPROM>
    1dde:	08 95       	ret

00001de0 <IsValidMorningThresholdFor12V>:
int daynight_evening_threshold;
unsigned long daynight_morning_debounce;
unsigned long daynight_evening_debounce;

uint8_t IsValidMorningThresholdFor12V(int *value) 
{
    1de0:	fc 01       	movw	r30, r24
    1de2:	20 81       	ld	r18, Z
    1de4:	31 81       	ldd	r19, Z+1	; 0x01
    1de6:	2b 53       	subi	r18, 0x3B	; 59
    1de8:	31 09       	sbc	r19, r1
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	25 39       	cpi	r18, 0x95	; 149
    1dee:	31 05       	cpc	r19, r1
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <IsValidMorningThresholdFor12V+0x14>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1df4:	08 95       	ret

00001df6 <IsValidEveningThresholdFor12V>:

uint8_t IsValidEveningThresholdFor12V(int *value) 
{
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 81       	ld	r18, Z
    1dfa:	31 81       	ldd	r19, Z+1	; 0x01
    1dfc:	29 51       	subi	r18, 0x19	; 25
    1dfe:	31 09       	sbc	r19, r1
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	20 35       	cpi	r18, 0x50	; 80
    1e04:	31 05       	cpc	r19, r1
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <IsValidEveningThresholdFor12V+0x14>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e0a:	08 95       	ret

00001e0c <IsValidMorningThresholdFor24V>:

uint8_t IsValidMorningThresholdFor24V(int *value) 
{
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 81       	ld	r18, Z
    1e10:	31 81       	ldd	r19, Z+1	; 0x01
    1e12:	26 57       	subi	r18, 0x76	; 118
    1e14:	31 09       	sbc	r19, r1
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	29 32       	cpi	r18, 0x29	; 41
    1e1a:	31 40       	sbci	r19, 0x01	; 1
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <IsValidMorningThresholdFor24V+0x14>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e20:	08 95       	ret

00001e22 <IsValidEveningThresholdFor24V>:

uint8_t IsValidEveningThresholdFor24V(int *value) 
{
    1e22:	fc 01       	movw	r30, r24
    1e24:	20 81       	ld	r18, Z
    1e26:	31 81       	ldd	r19, Z+1	; 0x01
    1e28:	22 53       	subi	r18, 0x32	; 50
    1e2a:	31 09       	sbc	r19, r1
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	2e 39       	cpi	r18, 0x9E	; 158
    1e30:	31 05       	cpc	r19, r1
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <IsValidEveningThresholdFor24V+0x14>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e36:	08 95       	ret

00001e38 <IsValidEveningDebounce>:
        return 0;
    }
}

uint8_t IsValidEveningDebounce(unsigned long *value) 
{
    1e38:	fc 01       	movw	r30, r24
    1e3a:	40 81       	ld	r20, Z
    1e3c:	51 81       	ldd	r21, Z+1	; 0x01
    1e3e:	62 81       	ldd	r22, Z+2	; 0x02
    1e40:	73 81       	ldd	r23, Z+3	; 0x03
    1e42:	40 54       	subi	r20, 0x40	; 64
    1e44:	5f 41       	sbci	r21, 0x1F	; 31
    1e46:	61 09       	sbc	r22, r1
    1e48:	71 09       	sbc	r23, r1
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	41 34       	cpi	r20, 0x41	; 65
    1e4e:	5f 4c       	sbci	r21, 0xCF	; 207
    1e50:	66 43       	sbci	r22, 0x36	; 54
    1e52:	71 05       	cpc	r23, r1
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <IsValidEveningDebounce+0x20>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e58:	08 95       	ret

00001e5a <WriteEEMorningThreshold>:

// wrtite daynight_morning_threshold (when morning debounce starts) to EEPROM
uint8_t WriteEEMorningThreshold() 
{
    uint16_t tmp_daynight_morning_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)); 
    1e5a:	86 e4       	ldi	r24, 0x46	; 70
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e62:	f9 99       	sbic	0x1f, 1	; 31
    1e64:	0c c0       	rjmp	.+24     	; 0x1e7e <WriteEEMorningThreshold+0x24>
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
    1e66:	60 91 a5 03 	lds	r22, 0x03A5	; 0x8003a5 <daynight_morning_threshold>
    1e6a:	70 91 a6 03 	lds	r23, 0x03A6	; 0x8003a6 <daynight_morning_threshold+0x1>
    1e6e:	86 17       	cp	r24, r22
    1e70:	97 07       	cpc	r25, r23
    1e72:	39 f0       	breq	.+14     	; 0x1e82 <WriteEEMorningThreshold+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
    1e74:	86 e4       	ldi	r24, 0x46	; 70
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 8e 1c 	call	0x391c	; 0x391c <eeprom_update_word>
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <WriteEEMorningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	08 95       	ret
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
        }
        return 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e84:	08 95       	ret

00001e86 <WriteEEEveningThreshold>:

// wrtite daynight_evening_threshold (when evening debounce starts) to EEPROM
uint8_t WriteEEEveningThreshold() 
{
    uint16_t tmp_daynight_evening_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)); 
    1e86:	88 e4       	ldi	r24, 0x48	; 72
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e8e:	f9 99       	sbic	0x1f, 1	; 31
    1e90:	0c c0       	rjmp	.+24     	; 0x1eaa <WriteEEEveningThreshold+0x24>
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
    1e92:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <daynight_evening_threshold>
    1e96:	70 91 a9 03 	lds	r23, 0x03A9	; 0x8003a9 <daynight_evening_threshold+0x1>
    1e9a:	86 17       	cp	r24, r22
    1e9c:	97 07       	cpc	r25, r23
    1e9e:	39 f0       	breq	.+14     	; 0x1eae <WriteEEEveningThreshold+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
    1ea0:	88 e4       	ldi	r24, 0x48	; 72
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 8e 1c 	call	0x391c	; 0x391c <eeprom_update_word>
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <WriteEEEveningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	08 95       	ret
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
        }
        return 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1eb0:	08 95       	ret

00001eb2 <WriteEEMorningDebounce>:

// wrtite daynight_morning_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEMorningDebounce() 
{
    uint32_t tmp_daynight_morning_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)); 
    1eb2:	8a e4       	ldi	r24, 0x4A	; 74
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1ebe:	f9 99       	sbic	0x1f, 1	; 31
    1ec0:	12 c0       	rjmp	.+36     	; 0x1ee6 <WriteEEMorningDebounce+0x34>
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
    1ec2:	40 91 aa 03 	lds	r20, 0x03AA	; 0x8003aa <daynight_morning_debounce>
    1ec6:	50 91 ab 03 	lds	r21, 0x03AB	; 0x8003ab <daynight_morning_debounce+0x1>
    1eca:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <daynight_morning_debounce+0x2>
    1ece:	70 91 ad 03 	lds	r23, 0x03AD	; 0x8003ad <daynight_morning_debounce+0x3>
    1ed2:	84 17       	cp	r24, r20
    1ed4:	95 07       	cpc	r25, r21
    1ed6:	a6 07       	cpc	r26, r22
    1ed8:	b7 07       	cpc	r27, r23
    1eda:	39 f0       	breq	.+14     	; 0x1eea <WriteEEMorningDebounce+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
    1edc:	8a e4       	ldi	r24, 0x4A	; 74
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 82 1c 	call	0x3904	; 0x3904 <eeprom_update_dword>
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <WriteEEMorningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	08 95       	ret
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
        }
        return 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1eec:	08 95       	ret

00001eee <WriteEEEveningDebounce>:

// wrtite daynight_evening_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEEveningDebounce() 
{
    uint32_t tmp_daynight_evening_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)); 
    1eee:	8e e4       	ldi	r24, 0x4E	; 78
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1efa:	f9 99       	sbic	0x1f, 1	; 31
    1efc:	12 c0       	rjmp	.+36     	; 0x1f22 <WriteEEEveningDebounce+0x34>
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
    1efe:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <daynight_evening_debounce>
    1f02:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <daynight_evening_debounce+0x1>
    1f06:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <daynight_evening_debounce+0x2>
    1f0a:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <daynight_evening_debounce+0x3>
    1f0e:	84 17       	cp	r24, r20
    1f10:	95 07       	cpc	r25, r21
    1f12:	a6 07       	cpc	r26, r22
    1f14:	b7 07       	cpc	r27, r23
    1f16:	39 f0       	breq	.+14     	; 0x1f26 <WriteEEEveningDebounce+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
    1f18:	8e e4       	ldi	r24, 0x4E	; 78
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 82 1c 	call	0x3904	; 0x3904 <eeprom_update_dword>
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <WriteEEEveningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	08 95       	ret
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
        }
        return 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f28:	08 95       	ret

00001f2a <LoadDayNightValuesFromEEPROM>:

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    1f2a:	cf 92       	push	r12
    1f2c:	df 92       	push	r13
    1f2e:	ef 92       	push	r14
    1f30:	ff 92       	push	r15
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    uint8_t use_defaults = 0;
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    1f48:	86 e4       	ldi	r24, 0x46	; 70
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    1f50:	7c 01       	movw	r14, r24
    1f52:	9c 87       	std	Y+12, r25	; 0x0c
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    1f56:	ce 01       	movw	r24, r28
    1f58:	0b 96       	adiw	r24, 0x0b	; 11
    1f5a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <IsValidMorningThresholdFor12V>
    1f5e:	81 11       	cpse	r24, r1
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <LoadDayNightValuesFromEEPROM+0x44>
    1f62:	ce 01       	movw	r24, r28
    1f64:	0b 96       	adiw	r24, 0x0b	; 11
    1f66:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <IsValidMorningThresholdFor24V>
    1f6a:	88 23       	and	r24, r24
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <LoadDayNightValuesFromEEPROM+0x50>
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    1f6e:	f0 92 a6 03 	sts	0x03A6, r15	; 0x8003a6 <daynight_morning_threshold+0x1>
    1f72:	e0 92 a5 03 	sts	0x03A5, r14	; 0x8003a5 <daynight_morning_threshold>
}

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    uint8_t use_defaults = 0;
    1f76:	10 e0       	ldi	r17, 0x00	; 0
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <LoadDayNightValuesFromEEPROM+0x52>
    }
    else
    {
        use_defaults = 1;
    1f7a:	11 e0       	ldi	r17, 0x01	; 1
    }
    int tmp_daynight_evening_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)));
    1f7c:	88 e4       	ldi	r24, 0x48	; 72
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <eeprom_read_word>
    1f84:	7c 01       	movw	r14, r24
    1f86:	9a 87       	std	Y+10, r25	; 0x0a
    1f88:	89 87       	std	Y+9, r24	; 0x09
    if ( (IsValidEveningThresholdFor12V(&tmp_daynight_evening_threshold) || IsValidEveningThresholdFor24V(&tmp_daynight_evening_threshold)) )
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	09 96       	adiw	r24, 0x09	; 9
    1f8e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <IsValidEveningThresholdFor12V>
    1f92:	81 11       	cpse	r24, r1
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <LoadDayNightValuesFromEEPROM+0x78>
    1f96:	ce 01       	movw	r24, r28
    1f98:	09 96       	adiw	r24, 0x09	; 9
    1f9a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <IsValidEveningThresholdFor24V>
    1f9e:	88 23       	and	r24, r24
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <LoadDayNightValuesFromEEPROM+0x82>
    {
        daynight_evening_threshold = tmp_daynight_evening_threshold;
    1fa2:	f0 92 a9 03 	sts	0x03A9, r15	; 0x8003a9 <daynight_evening_threshold+0x1>
    1fa6:	e0 92 a8 03 	sts	0x03A8, r14	; 0x8003a8 <daynight_evening_threshold>
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <LoadDayNightValuesFromEEPROM+0x84>
    }
    else
    {
        use_defaults = 1;
    1fac:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_morning_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)));
    1fae:	8a e4       	ldi	r24, 0x4A	; 74
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    1fb6:	6b 01       	movw	r12, r22
    1fb8:	7c 01       	movw	r14, r24
    1fba:	6d 83       	std	Y+5, r22	; 0x05
    1fbc:	7e 83       	std	Y+6, r23	; 0x06
    1fbe:	8f 83       	std	Y+7, r24	; 0x07
    1fc0:	98 87       	std	Y+8, r25	; 0x08
    if ( IsValidMorningDebounce(&tmp_daynight_morning_debounce) )
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	05 96       	adiw	r24, 0x05	; 5
    1fc6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <IsValidEveningDebounce>
    1fca:	88 23       	and	r24, r24
    1fcc:	49 f0       	breq	.+18     	; 0x1fe0 <LoadDayNightValuesFromEEPROM+0xb6>
    {
        daynight_morning_debounce = tmp_daynight_morning_debounce;
    1fce:	c0 92 aa 03 	sts	0x03AA, r12	; 0x8003aa <daynight_morning_debounce>
    1fd2:	d0 92 ab 03 	sts	0x03AB, r13	; 0x8003ab <daynight_morning_debounce+0x1>
    1fd6:	e0 92 ac 03 	sts	0x03AC, r14	; 0x8003ac <daynight_morning_debounce+0x2>
    1fda:	f0 92 ad 03 	sts	0x03AD, r15	; 0x8003ad <daynight_morning_debounce+0x3>
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <LoadDayNightValuesFromEEPROM+0xb8>
    }
    else
    {
        use_defaults = 1;
    1fe0:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    1fe2:	8e e4       	ldi	r24, 0x4E	; 78
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    1fea:	6b 01       	movw	r12, r22
    1fec:	7c 01       	movw	r14, r24
    1fee:	69 83       	std	Y+1, r22	; 0x01
    1ff0:	7a 83       	std	Y+2, r23	; 0x02
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <IsValidEveningDebounce>
    1ffe:	81 11       	cpse	r24, r1
    2000:	25 c0       	rjmp	.+74     	; 0x204c <LoadDayNightValuesFromEEPROM+0x122>
        use_defaults = 1;
    }
    if (use_defaults)
    {
        // default values are for 12V PV measured with ALT_V channel with 5V referance
        daynight_morning_threshold = 80; // 4.3/(((5.0)/1024.0)*(110.0/10.0))
    2002:	80 e5       	ldi	r24, 0x50	; 80
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <daynight_morning_threshold+0x1>
    200a:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <daynight_morning_threshold>
        daynight_evening_threshold = 40; // 2.15/(((5.0)/1024.0)*(110.0/10.0))
    200e:	88 e2       	ldi	r24, 0x28	; 40
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <daynight_evening_threshold+0x1>
    2016:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <daynight_evening_threshold>
        daynight_morning_debounce = 1200000UL; // 20 min
    201a:	80 e8       	ldi	r24, 0x80	; 128
    201c:	9f e4       	ldi	r25, 0x4F	; 79
    201e:	a2 e1       	ldi	r26, 0x12	; 18
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <daynight_morning_debounce>
    2026:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <daynight_morning_debounce+0x1>
    202a:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <daynight_morning_debounce+0x2>
    202e:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <daynight_morning_debounce+0x3>
        daynight_evening_debounce = 1200000UL; // 20 min
    2032:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <daynight_evening_debounce>
    2036:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <daynight_evening_debounce+0x1>
    203a:	a0 93 a3 03 	sts	0x03A3, r26	; 0x8003a3 <daynight_evening_debounce+0x2>
    203e:	b0 93 a4 03 	sts	0x03A4, r27	; 0x8003a4 <daynight_evening_debounce+0x3>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <daynight_values_loaded>
        return 0;
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0d c0       	rjmp	.+26     	; 0x2066 <LoadDayNightValuesFromEEPROM+0x13c>
        use_defaults = 1;
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    {
        daynight_evening_debounce = tmp_daynight_evening_debounce;
    204c:	c0 92 a1 03 	sts	0x03A1, r12	; 0x8003a1 <daynight_evening_debounce>
    2050:	d0 92 a2 03 	sts	0x03A2, r13	; 0x8003a2 <daynight_evening_debounce+0x1>
    2054:	e0 92 a3 03 	sts	0x03A3, r14	; 0x8003a3 <daynight_evening_debounce+0x2>
    2058:	f0 92 a4 03 	sts	0x03A4, r15	; 0x8003a4 <daynight_evening_debounce+0x3>
    }
    else
    {
        use_defaults = 1;
    }
    if (use_defaults)
    205c:	11 11       	cpse	r17, r1
    205e:	d1 cf       	rjmp	.-94     	; 0x2002 <LoadDayNightValuesFromEEPROM+0xd8>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
        return 0;
    }
    else
    {
        daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    2060:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <daynight_values_loaded>
        return 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    2066:	2c 96       	adiw	r28, 0x0c	; 12
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	08 95       	ret

00002082 <DayNightValuesFromI2CtoEE>:

// Save day-night state machine values from I2C to EEPROM (if valid), one will change per loop, and I2C will take several loop cycles to get another.
void DayNightValuesFromI2CtoEE(void)
{
    if (daynight_values_loaded > DAYNIGHT_VALUES_DEFAULT)
    2082:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_values_loaded>
    2086:	82 30       	cpi	r24, 0x02	; 2
    2088:	08 f4       	brcc	.+2      	; 0x208c <DayNightValuesFromI2CtoEE+0xa>
    208a:	47 c0       	rjmp	.+142    	; 0x211a <DayNightValuesFromI2CtoEE+0x98>
    {
        if (daynight_values_loaded == DAYNIGHT_MORNING_THRESHOLD_TOSAVE)
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	99 f4       	brne	.+38     	; 0x20b6 <DayNightValuesFromI2CtoEE+0x34>
        {
            if ( IsValidMorningThresholdFor12V(&daynight_morning_threshold) || IsValidMorningThresholdFor24V(&daynight_morning_threshold) )
    2090:	85 ea       	ldi	r24, 0xA5	; 165
    2092:	93 e0       	ldi	r25, 0x03	; 3
    2094:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <IsValidMorningThresholdFor12V>
    2098:	81 11       	cpse	r24, r1
    209a:	06 c0       	rjmp	.+12     	; 0x20a8 <DayNightValuesFromI2CtoEE+0x26>
    209c:	85 ea       	ldi	r24, 0xA5	; 165
    209e:	93 e0       	ldi	r25, 0x03	; 3
    20a0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <IsValidMorningThresholdFor24V>
    20a4:	88 23       	and	r24, r24
    20a6:	39 f0       	breq	.+14     	; 0x20b6 <DayNightValuesFromI2CtoEE+0x34>
            {
                if (WriteEEMorningThreshold())
    20a8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <WriteEEMorningThreshold>
    20ac:	88 23       	and	r24, r24
    20ae:	19 f0       	breq	.+6      	; 0x20b6 <DayNightValuesFromI2CtoEE+0x34>
                {
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    20b0:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <daynight_values_loaded>
                    return; // all done
    20b4:	08 95       	ret
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_THRESHOLD_TOSAVE)
    20b6:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_values_loaded>
    20ba:	83 30       	cpi	r24, 0x03	; 3
    20bc:	81 f4       	brne	.+32     	; 0x20de <DayNightValuesFromI2CtoEE+0x5c>
        {    
            if ( IsValidEveningThresholdFor12V(&daynight_evening_threshold) || IsValidEveningThresholdFor24V(&daynight_evening_threshold) )
    20be:	88 ea       	ldi	r24, 0xA8	; 168
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <IsValidEveningThresholdFor12V>
    20c6:	81 11       	cpse	r24, r1
    20c8:	06 c0       	rjmp	.+12     	; 0x20d6 <DayNightValuesFromI2CtoEE+0x54>
    20ca:	88 ea       	ldi	r24, 0xA8	; 168
    20cc:	93 e0       	ldi	r25, 0x03	; 3
    20ce:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <IsValidEveningThresholdFor24V>
    20d2:	88 23       	and	r24, r24
    20d4:	21 f0       	breq	.+8      	; 0x20de <DayNightValuesFromI2CtoEE+0x5c>
            {
                if (WriteEEEveningThreshold())
    20d6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <WriteEEEveningThreshold>
    20da:	81 11       	cpse	r24, r1
    20dc:	e9 cf       	rjmp	.-46     	; 0x20b0 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_MORNING_DEBOUNCE_TOSAVE)
    20de:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_values_loaded>
    20e2:	84 30       	cpi	r24, 0x04	; 4
    20e4:	51 f4       	brne	.+20     	; 0x20fa <DayNightValuesFromI2CtoEE+0x78>
        {
            if ( IsValidMorningDebounce(&daynight_morning_debounce) )
    20e6:	8a ea       	ldi	r24, 0xAA	; 170
    20e8:	93 e0       	ldi	r25, 0x03	; 3
    20ea:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <IsValidEveningDebounce>
    20ee:	88 23       	and	r24, r24
    20f0:	21 f0       	breq	.+8      	; 0x20fa <DayNightValuesFromI2CtoEE+0x78>
            {
                if (WriteEEMorningDebounce())
    20f2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <WriteEEMorningDebounce>
    20f6:	81 11       	cpse	r24, r1
    20f8:	db cf       	rjmp	.-74     	; 0x20b0 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_DEBOUNCE_TOSAVE)
    20fa:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <daynight_values_loaded>
    20fe:	85 30       	cpi	r24, 0x05	; 5
    2100:	51 f4       	brne	.+20     	; 0x2116 <DayNightValuesFromI2CtoEE+0x94>
        {
            if ( IsValidEveningDebounce(&daynight_evening_debounce) )
    2102:	81 ea       	ldi	r24, 0xA1	; 161
    2104:	93 e0       	ldi	r25, 0x03	; 3
    2106:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <IsValidEveningDebounce>
    210a:	88 23       	and	r24, r24
    210c:	21 f0       	breq	.+8      	; 0x2116 <DayNightValuesFromI2CtoEE+0x94>
            {
                if (WriteEEEveningDebounce())
    210e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <WriteEEEveningDebounce>
    2112:	81 11       	cpse	r24, r1
    2114:	cd cf       	rjmp	.-102    	; 0x20b0 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        LoadDayNightValuesFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    2116:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <LoadDayNightValuesFromEEPROM>
    211a:	08 95       	ret

0000211c <check_daynight>:
    bit 6 is set when day_work needs done
    bit 5 is used with I2C, which if a 1 is passed then bits 7 and 6 are returned with the state
    bit 4 is used with I2C, which if set with the bytes from master/host will clear bits 7 and 6 if they are also clear on the data byte from master/host.
*/
void check_daynight(void)
{
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    // check light on solar pannel with ALT_V, reading are only taken when !ALT_EN.
    int sensor_val = analogRead(ALT_V);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <analogRead>
    212e:	ec 01       	movw	r28, r24
    unsigned long kRuntime= millis() - dayTmrStarted;
    2130:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    2134:	c0 90 b0 03 	lds	r12, 0x03B0	; 0x8003b0 <dayTmrStarted>
    2138:	d0 90 b1 03 	lds	r13, 0x03B1	; 0x8003b1 <dayTmrStarted+0x1>
    213c:	e0 90 b2 03 	lds	r14, 0x03B2	; 0x8003b2 <dayTmrStarted+0x2>
    2140:	f0 90 b3 03 	lds	r15, 0x03B3	; 0x8003b3 <dayTmrStarted+0x3>
    2144:	9b 01       	movw	r18, r22
    2146:	ac 01       	movw	r20, r24
    2148:	2c 19       	sub	r18, r12
    214a:	3d 09       	sbc	r19, r13
    214c:	4e 09       	sbc	r20, r14
    214e:	5f 09       	sbc	r21, r15
    2150:	69 01       	movw	r12, r18
    2152:	7a 01       	movw	r14, r20
    
    if(daynight_state == DAYNIGHT_START_STATE) 
    2154:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <daynight_state>
    2158:	81 11       	cpse	r24, r1
    215a:	1f c0       	rjmp	.+62     	; 0x219a <check_daynight+0x7e>
    { 
        if (kRuntime > STARTUP_DELAY) 
    215c:	39 ef       	ldi	r19, 0xF9	; 249
    215e:	c3 16       	cp	r12, r19
    2160:	3a e2       	ldi	r19, 0x2A	; 42
    2162:	d3 06       	cpc	r13, r19
    2164:	e1 04       	cpc	r14, r1
    2166:	f1 04       	cpc	r15, r1
    2168:	08 f4       	brcc	.+2      	; 0x216c <check_daynight+0x50>
    216a:	9e c0       	rjmp	.+316    	; 0x22a8 <check_daynight+0x18c>
        {
            if(sensor_val > daynight_evening_threshold ) 
    216c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <daynight_evening_threshold>
    2170:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <daynight_evening_threshold+0x1>
    2174:	8c 17       	cp	r24, r28
    2176:	9d 07       	cpc	r25, r29
    2178:	14 f4       	brge	.+4      	; 0x217e <check_daynight+0x62>
            {
                daynight_state = DAYNIGHT_DAY_STATE; 
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <check_daynight+0x64>
                dayTmrStarted = millis();
            } 
            else 
            {
                daynight_state = DAYNIGHT_NIGHT_STATE;
    217e:	84 e0       	ldi	r24, 0x04	; 4
    2180:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <daynight_state>
                dayTmrStarted = millis();
    2184:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    2188:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <dayTmrStarted>
    218c:	70 93 b1 03 	sts	0x03B1, r23	; 0x8003b1 <dayTmrStarted+0x1>
    2190:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <dayTmrStarted+0x2>
    2194:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <dayTmrStarted+0x3>
    2198:	87 c0       	rjmp	.+270    	; 0x22a8 <check_daynight+0x18c>
            }
        }
        return;
    } 
  
    if(daynight_state == DAYNIGHT_DAY_STATE) 
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	f9 f4       	brne	.+62     	; 0x21dc <check_daynight+0xc0>
    { //day
        if (sensor_val < daynight_evening_threshold ) 
    219e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <daynight_evening_threshold>
    21a2:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <daynight_evening_threshold+0x1>
    21a6:	c8 17       	cp	r28, r24
    21a8:	d9 07       	cpc	r29, r25
    21aa:	6c f4       	brge	.+26     	; 0x21c6 <check_daynight+0xaa>
        {
            daynight_state = DAYNIGHT_EVENING_DEBOUNCE_STATE;
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <daynight_state>
            dayTmrStarted = millis();
    21b2:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    21b6:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <dayTmrStarted>
    21ba:	70 93 b1 03 	sts	0x03B1, r23	; 0x8003b1 <dayTmrStarted+0x1>
    21be:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <dayTmrStarted+0x2>
    21c2:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <dayTmrStarted+0x3>
        }
        if (kRuntime > DAYNIGHT_TO_LONG) 
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	c4 16       	cp	r12, r20
    21ca:	42 ea       	ldi	r20, 0xA2	; 162
    21cc:	d4 06       	cpc	r13, r20
    21ce:	4a e4       	ldi	r20, 0x4A	; 74
    21d0:	e4 06       	cpc	r14, r20
    21d2:	44 e0       	ldi	r20, 0x04	; 4
    21d4:	f4 06       	cpc	r15, r20
    21d6:	08 f4       	brcc	.+2      	; 0x21da <check_daynight+0xbe>
    21d8:	67 c0       	rjmp	.+206    	; 0x22a8 <check_daynight+0x18c>
    21da:	3e c0       	rjmp	.+124    	; 0x2258 <check_daynight+0x13c>
            dayTmrStarted = millis();
        }
        return;
    }
  
    if(daynight_state == DAYNIGHT_EVENING_DEBOUNCE_STATE) 
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	b9 f4       	brne	.+46     	; 0x220e <check_daynight+0xf2>
    { //evening_debounce
        if (sensor_val < daynight_evening_threshold ) 
    21e0:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <daynight_evening_threshold>
    21e4:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <daynight_evening_threshold+0x1>
    21e8:	c8 17       	cp	r28, r24
    21ea:	d9 07       	cpc	r29, r25
    21ec:	34 f6       	brge	.-116    	; 0x217a <check_daynight+0x5e>
        {
            if (kRuntime > daynight_evening_debounce) 
    21ee:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <daynight_evening_debounce>
    21f2:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <daynight_evening_debounce+0x1>
    21f6:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <daynight_evening_debounce+0x2>
    21fa:	b0 91 a4 03 	lds	r27, 0x03A4	; 0x8003a4 <daynight_evening_debounce+0x3>
    21fe:	82 17       	cp	r24, r18
    2200:	93 07       	cpc	r25, r19
    2202:	a4 07       	cpc	r26, r20
    2204:	b5 07       	cpc	r27, r21
    2206:	08 f0       	brcs	.+2      	; 0x220a <check_daynight+0xee>
    2208:	4f c0       	rjmp	.+158    	; 0x22a8 <check_daynight+0x18c>
            {
                daynight_state = DAYNIGHT_NIGHTWORK_STATE;
    220a:	83 e0       	ldi	r24, 0x03	; 3
    220c:	b9 cf       	rjmp	.-142    	; 0x2180 <check_daynight+0x64>
            dayTmrStarted = millis();
        }
        return;
    }

    if(daynight_state == DAYNIGHT_NIGHTWORK_STATE) 
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	21 f4       	brne	.+8      	; 0x221a <check_daynight+0xfe>
    { //work befor night
        //set the night work bit 7
        daynight_work = 0x80; // note the day work bit 6 is clear
    2212:	80 e8       	ldi	r24, 0x80	; 128
    2214:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_work>
    2218:	39 c0       	rjmp	.+114    	; 0x228c <check_daynight+0x170>
        daynight_state = DAYNIGHT_NIGHT_STATE;
        return;
    }

    if(daynight_state == DAYNIGHT_NIGHT_STATE) 
    221a:	84 30       	cpi	r24, 0x04	; 4
    221c:	f9 f4       	brne	.+62     	; 0x225c <check_daynight+0x140>
    { //night
        if (sensor_val > daynight_morning_threshold ) 
    221e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <daynight_morning_threshold>
    2222:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <daynight_morning_threshold+0x1>
    2226:	8c 17       	cp	r24, r28
    2228:	9d 07       	cpc	r25, r29
    222a:	6c f4       	brge	.+26     	; 0x2246 <check_daynight+0x12a>
        {
            daynight_state = DAYNIGHT_MORNING_DEBOUNCE_STATE;
    222c:	85 e0       	ldi	r24, 0x05	; 5
    222e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <daynight_state>
            dayTmrStarted = millis();
    2232:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    2236:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <dayTmrStarted>
    223a:	70 93 b1 03 	sts	0x03B1, r23	; 0x8003b1 <dayTmrStarted+0x1>
    223e:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <dayTmrStarted+0x2>
    2242:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <dayTmrStarted+0x3>
        }
        if (kRuntime > DAYNIGHT_TO_LONG) 
    2246:	51 e0       	ldi	r21, 0x01	; 1
    2248:	c5 16       	cp	r12, r21
    224a:	52 ea       	ldi	r21, 0xA2	; 162
    224c:	d5 06       	cpc	r13, r21
    224e:	5a e4       	ldi	r21, 0x4A	; 74
    2250:	e5 06       	cpc	r14, r21
    2252:	54 e0       	ldi	r21, 0x04	; 4
    2254:	f5 06       	cpc	r15, r21
    2256:	40 f1       	brcs	.+80     	; 0x22a8 <check_daynight+0x18c>
        {
            daynight_state = DAYNIGHT_FAIL_STATE;
    2258:	87 e0       	ldi	r24, 0x07	; 7
    225a:	92 cf       	rjmp	.-220    	; 0x2180 <check_daynight+0x64>
            dayTmrStarted = millis();
        }
        return;
    }

    if(daynight_state == DAYNIGHT_MORNING_DEBOUNCE_STATE) 
    225c:	85 30       	cpi	r24, 0x05	; 5
    225e:	c1 f4       	brne	.+48     	; 0x2290 <check_daynight+0x174>
    { //morning_debounce
        if (sensor_val > daynight_morning_threshold ) 
    2260:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <daynight_morning_threshold>
    2264:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <daynight_morning_threshold+0x1>
    2268:	8c 17       	cp	r24, r28
    226a:	9d 07       	cpc	r25, r29
    226c:	7c f4       	brge	.+30     	; 0x228c <check_daynight+0x170>
        {
            if (kRuntime > daynight_morning_debounce) 
    226e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <daynight_morning_debounce>
    2272:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <daynight_morning_debounce+0x1>
    2276:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <daynight_morning_debounce+0x2>
    227a:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <daynight_morning_debounce+0x3>
    227e:	82 17       	cp	r24, r18
    2280:	93 07       	cpc	r25, r19
    2282:	a4 07       	cpc	r26, r20
    2284:	b5 07       	cpc	r27, r21
    2286:	80 f4       	brcc	.+32     	; 0x22a8 <check_daynight+0x18c>
            {
                daynight_state = DAYNIGHT_DAYWORK_STATE;
    2288:	86 e0       	ldi	r24, 0x06	; 6
    228a:	0c c0       	rjmp	.+24     	; 0x22a4 <check_daynight+0x188>
            }
        }
        else 
        {
            daynight_state = DAYNIGHT_NIGHT_STATE;
    228c:	84 e0       	ldi	r24, 0x04	; 4
    228e:	0a c0       	rjmp	.+20     	; 0x22a4 <check_daynight+0x188>
        }
        return;
    }

    if(daynight_state == DAYNIGHT_DAYWORK_STATE) 
    2290:	86 30       	cpi	r24, 0x06	; 6
    2292:	29 f4       	brne	.+10     	; 0x229e <check_daynight+0x182>
    { //work befor day
        //set the day work bit 6
        daynight_work = 0x40; // and clear the night work bit 7
    2294:	80 e4       	ldi	r24, 0x40	; 64
    2296:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_work>
        daynight_state = DAYNIGHT_DAY_STATE;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <check_daynight+0x188>
        return;
    }

    //fail state can be restart by clearing status bit 6 with i2c command 7
    if(daynight_state > DAYNIGHT_FAIL_STATE) 
    229e:	87 30       	cpi	r24, 0x07	; 7
    22a0:	19 f0       	breq	.+6      	; 0x22a8 <check_daynight+0x18c>
    { 
        daynight_state = DAYNIGHT_FAIL_STATE;
    22a2:	87 e0       	ldi	r24, 0x07	; 7
    22a4:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <daynight_state>
        return;
    }
    return;
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	08 95       	ret

000022b6 <analogRead>:
// uses interrupt driven buffer when available
// otherwise does busy waiting
// api is a well know LGPL software, respect it as such.
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    22b6:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <ADC_auto_conversion>
    22ba:	99 23       	and	r25, r25
    22bc:	61 f0       	breq	.+24     	; 0x22d6 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    22be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    22c0:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    22c2:	e8 2f       	mov	r30, r24
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	ea 54       	subi	r30, 0x4A	; 74
    22cc:	fc 4f       	sbci	r31, 0xFC	; 252
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    22d2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    22d4:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    22d6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    22da:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    22dc:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    22e0:	e8 2f       	mov	r30, r24
    22e2:	e7 70       	andi	r30, 0x07	; 7
    22e4:	82 2f       	mov	r24, r18
    22e6:	89 2b       	or	r24, r25
    22e8:	e8 2b       	or	r30, r24
    22ea:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    22ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22f2:	80 64       	ori	r24, 0x40	; 64
    22f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    22f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22fc:	86 fd       	sbrc	r24, 6
    22fe:	fc cf       	rjmp	.-8      	; 0x22f8 <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    2300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    2304:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    230c:	08 95       	ret

0000230e <__vector_21>:
volatile uint8_t adc_isr_status;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    230e:	1f 92       	push	r1
    2310:	0f 92       	push	r0
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	0f 92       	push	r0
    2316:	11 24       	eor	r1, r1
    2318:	2f 93       	push	r18
    231a:	8f 93       	push	r24
    231c:	9f 93       	push	r25
    231e:	ef 93       	push	r30
    2320:	ff 93       	push	r31
    adc[adc_channel] = ADC;
    2322:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <adc_channel>
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    232c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	ea 54       	subi	r30, 0x4A	; 74
    2336:	fc 4f       	sbci	r31, 0xFC	; 252
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    
    ++adc_channel;
    233c:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <adc_channel>
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <adc_channel>
    
    // ch 0 is ALT_I, always read
    // ch 1 is ALT_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 1) && digitalRead(ALT_EN) )
    2346:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <adc_channel>
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	29 f4       	brne	.+10     	; 0x2358 <__vector_21+0x4a>
    234e:	1b 9b       	sbis	0x03, 3	; 3
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <__vector_21+0x4a>
    {
        adc_channel = 6; // skip channel 1
    2352:	86 e0       	ldi	r24, 0x06	; 6
    2354:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <adc_channel>
    }
    // skip channels 3..5
    if (adc_channel == 2)
    2358:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <adc_channel>
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	19 f4       	brne	.+6      	; 0x2366 <__vector_21+0x58>
    {
        adc_channel = 6;
    2360:	86 e0       	ldi	r24, 0x06	; 6
    2362:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <adc_channel>
    }
    // ch 6 is PWR_I, always read
    // ch 7 is PWR_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 7) && digitalRead(ALT_EN) )
    2366:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <adc_channel>
    236a:	87 30       	cpi	r24, 0x07	; 7
    236c:	29 f4       	brne	.+10     	; 0x2378 <__vector_21+0x6a>
    236e:	1b 9b       	sbis	0x03, 3	; 3
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <__vector_21+0x6a>
    {
        adc_channel = 8; // skip channel 7
    2372:	88 e0       	ldi	r24, 0x08	; 8
    2374:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <adc_channel>
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    2378:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <adc_channel>
    237c:	88 30       	cpi	r24, 0x08	; 8
    237e:	b0 f4       	brcc	.+44     	; 0x23ac <__vector_21+0x9e>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2380:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2384:	80 7f       	andi	r24, 0xF0	; 240
    2386:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    238a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    238e:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <analog_reference>
    2392:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <adc_channel>
    2396:	8f 71       	andi	r24, 0x1F	; 31
    2398:	82 2b       	or	r24, r18
    239a:	89 0f       	add	r24, r25
    239c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    23a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23a4:	80 64       	ori	r24, 0x40	; 64
    23a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <__vector_21+0xb0>
        adc_channel = 8; // skip channel 7
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    23ac:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <adc_channel>
        adc_isr_status = ISR_ADCBURST_DONE; // mark to notify burst is done
    23b0:	8f e7       	ldi	r24, 0x7F	; 127
    23b2:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <adc_isr_status>
        if (!free_running)
    23b6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <free_running>
    23ba:	81 11       	cpse	r24, r1
    23bc:	e1 cf       	rjmp	.-62     	; 0x2380 <__vector_21+0x72>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	9f 91       	pop	r25
    23c4:	8f 91       	pop	r24
    23c6:	2f 91       	pop	r18
    23c8:	0f 90       	pop	r0
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	0f 90       	pop	r0
    23ce:	1f 90       	pop	r1
    23d0:	18 95       	reti

000023d2 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a user pin.
    analog_reference = reference;
    23d2:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <analog_reference>
    free_running = 0;
    23d6:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    23da:	ec e7       	ldi	r30, 0x7C	; 124
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    23e0:	90 73       	andi	r25, 0x30	; 48
    23e2:	89 2b       	or	r24, r25
    23e4:	80 83       	st	Z, r24
    
// On most avr5 core chips the adc_clock needs to run between 50kHz<adc_clock<200kHz
// for maximum resolution
#if defined(ADCSRA)
	#if (50000 < F_CPU/128) && (F_CPU/128 < 200000 ) // set prescaler /128
		ADCSRA |= (1<<ADPS2);
    23e6:	ea e7       	ldi	r30, 0x7A	; 122
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	84 60       	ori	r24, 0x04	; 4
    23ee:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    23f0:	80 81       	ld	r24, Z
    23f2:	82 60       	ori	r24, 0x02	; 2
    23f4:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS0);
    23f6:	80 81       	ld	r24, Z
    23f8:	81 60       	ori	r24, 0x01	; 1
    23fa:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
    #else 
    #   error can not set adc_clock for maximum resolution
	#endif
	ADCSRA |= (1<<ADEN); // enable adc conversion
    23fc:	80 81       	ld	r24, Z
    23fe:	80 68       	ori	r24, 0x80	; 128
    2400:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0; 
    2402:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <ADC_auto_conversion>
    2406:	08 95       	ret

00002408 <enable_ADC_auto_conversion>:
// to select reference and set the adc_clock pre-scaler. This call will start 
// taking readings on each channel the ISR iterates over and holds the result 
// in a buffer.
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    2408:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <adc_channel>
    adc_isr_status = ISR_ADCBURST_START; // mark so we know new readings are arriving
    240c:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <adc_isr_status>
    free_running = free_run;
    2410:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <free_running>

#if defined(ADCSRA)
	// Power up the ADC and set it for conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    2414:	ea e7       	ldi	r30, 0x7A	; 122
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	87 75       	andi	r24, 0x57	; 87
    241c:	88 68       	ori	r24, 0x88	; 136
    241e:	80 83       	st	Z, r24

    // Start the first Conversion (ISR will start each one after the previous is done)
    ADCSRA |= (1<<ADSC);
    2420:	80 81       	ld	r24, Z
    2422:	80 64       	ori	r24, 0x40	; 64
    2424:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <ADC_auto_conversion>
    242c:	08 95       	ret

0000242e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    242e:	1f 92       	push	r1
    2430:	0f 92       	push	r0
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	0f 92       	push	r0
    2436:	11 24       	eor	r1, r1
    2438:	2f 93       	push	r18
    243a:	3f 93       	push	r19
    243c:	8f 93       	push	r24
    243e:	9f 93       	push	r25
    2440:	af 93       	push	r26
    2442:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2444:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <timer0_millis>
    2448:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <timer0_millis+0x1>
    244c:	a0 91 ac 01 	lds	r26, 0x01AC	; 0x8001ac <timer0_millis+0x2>
    2450:	b0 91 ad 01 	lds	r27, 0x01AD	; 0x8001ad <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2454:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2458:	2d e2       	ldi	r18, 0x2D	; 45
    245a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    245c:	2d 37       	cpi	r18, 0x7D	; 125
    245e:	20 f4       	brcc	.+8      	; 0x2468 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	a1 1d       	adc	r26, r1
    2464:	b1 1d       	adc	r27, r1
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2468:	20 eb       	ldi	r18, 0xB0	; 176
    246a:	23 0f       	add	r18, r19
		m += 1;
    246c:	02 96       	adiw	r24, 0x02	; 2
    246e:	a1 1d       	adc	r26, r1
    2470:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2472:	20 93 a9 01 	sts	0x01A9, r18	; 0x8001a9 <timer0_fract>
	timer0_millis = m;
    2476:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <timer0_millis>
    247a:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <timer0_millis+0x1>
    247e:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <timer0_millis+0x2>
    2482:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <timer0_millis+0x3>
	timer0_overflow_count++;
    2486:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <timer0_overflow_count>
    248a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <timer0_overflow_count+0x1>
    248e:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <timer0_overflow_count+0x2>
    2492:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <timer0_overflow_count+0x3>
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	a1 1d       	adc	r26, r1
    249a:	b1 1d       	adc	r27, r1
    249c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <timer0_overflow_count>
    24a0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <timer0_overflow_count+0x1>
    24a4:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <timer0_overflow_count+0x2>
    24a8:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <timer0_overflow_count+0x3>
}
    24ac:	bf 91       	pop	r27
    24ae:	af 91       	pop	r26
    24b0:	9f 91       	pop	r25
    24b2:	8f 91       	pop	r24
    24b4:	3f 91       	pop	r19
    24b6:	2f 91       	pop	r18
    24b8:	0f 90       	pop	r0
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	0f 90       	pop	r0
    24be:	1f 90       	pop	r1
    24c0:	18 95       	reti

000024c2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    24c2:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    24c4:	f8 94       	cli
	m = timer0_millis;
    24c6:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <timer0_millis>
    24ca:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <timer0_millis+0x1>
    24ce:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <timer0_millis+0x2>
    24d2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <timer0_millis+0x3>
	SREG = oldSREG;
    24d6:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    24d8:	08 95       	ret

000024da <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    24da:	84 b5       	in	r24, 0x24	; 36
    24dc:	82 60       	ori	r24, 0x02	; 2
    24de:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    24e0:	84 b5       	in	r24, 0x24	; 36
    24e2:	81 60       	ori	r24, 0x01	; 1
    24e4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    24e6:	85 b5       	in	r24, 0x25	; 37
    24e8:	82 60       	ori	r24, 0x02	; 2
    24ea:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    24ec:	85 b5       	in	r24, 0x25	; 37
    24ee:	81 60       	ori	r24, 0x01	; 1
    24f0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    24f2:	ee e6       	ldi	r30, 0x6E	; 110
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	81 60       	ori	r24, 0x01	; 1
    24fa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    24fc:	e1 e8       	ldi	r30, 0x81	; 129
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    2502:	80 81       	ld	r24, Z
    2504:	82 60       	ori	r24, 0x02	; 2
    2506:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    2508:	80 81       	ld	r24, Z
    250a:	81 60       	ori	r24, 0x01	; 1
    250c:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    250e:	e0 e8       	ldi	r30, 0x80	; 128
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	81 60       	ori	r24, 0x01	; 1
    2516:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    2518:	e1 eb       	ldi	r30, 0xB1	; 177
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	84 60       	ori	r24, 0x04	; 4
    2520:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    2522:	e0 eb       	ldi	r30, 0xB0	; 176
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	81 60       	ori	r24, 0x01	; 1
    252a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    252c:	e1 e9       	ldi	r30, 0x91	; 145
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	82 60       	ori	r24, 0x02	; 2
    2534:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    2536:	80 81       	ld	r24, Z
    2538:	81 60       	ori	r24, 0x01	; 1
    253a:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    253c:	e0 e9       	ldi	r30, 0x90	; 144
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	81 60       	ori	r24, 0x01	; 1
    2544:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    2546:	e1 ea       	ldi	r30, 0xA1	; 161
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	82 60       	ori	r24, 0x02	; 2
    254e:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    2550:	80 81       	ld	r24, Z
    2552:	81 60       	ori	r24, 0x01	; 1
    2554:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2556:	e0 ea       	ldi	r30, 0xA0	; 160
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	81 60       	ori	r24, 0x01	; 1
    255e:	80 83       	st	Z, r24
    2560:	08 95       	ret

00002562 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    2562:	08 95       	ret

00002564 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2564:	08 95       	ret

00002566 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    2566:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi0_state>
    twi0_sendStop = 1;		// default value
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <twi0_sendStop>
    twi0_inRepStart = 0;
    2570:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi0_inRepStart>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2574:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2576:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2578:	3d 98       	cbi	0x07, 5	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    257a:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    257c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    257e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2580:	3c 98       	cbi	0x07, 4	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2582:	9f bf       	out	0x3f, r25	; 63
    pinMode(SCL0,INPUT); // DDRC &= ~(1 << DDC4)
    pinMode(SDA0,INPUT); // DDRC &= ~(1 << DDC5)

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2584:	88 23       	and	r24, r24
    2586:	41 f0       	breq	.+16     	; 0x2598 <twi0_init+0x32>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2588:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    258a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    258c:	45 9a       	sbi	0x08, 5	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    258e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2590:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2592:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2594:	44 9a       	sbi	0x08, 4	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2596:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(SCL0,HIGH); // PORTC |= (1 << PORTC4) weak pullup
        digitalWrite(SDA0,HIGH); // PORTC |= (1 << PORTC5) weak pullup
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    2598:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    259c:	8e 7f       	andi	r24, 0xFE	; 254
    259e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    25a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    25a6:	8d 7f       	andi	r24, 0xFD	; 253
    25a8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    25ac:	84 e3       	ldi	r24, 0x34	; 52
    25ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    25b2:	85 e4       	ldi	r24, 0x45	; 69
    25b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    25b8:	08 95       	ret

000025ba <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    25ba:	88 0f       	add	r24, r24
    25bc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    25c0:	08 95       	ret

000025c2 <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    25c2:	61 32       	cpi	r22, 0x21	; 33
    25c4:	98 f4       	brcc	.+38     	; 0x25ec <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    25c6:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <twi0_state>
    25ca:	24 30       	cpi	r18, 0x04	; 4
    25cc:	89 f4       	brne	.+34     	; 0x25f0 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    25ce:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <twi0_txBufferLength>
    25d2:	28 2f       	mov	r18, r24
    25d4:	a6 ed       	ldi	r26, 0xD6	; 214
    25d6:	b1 e0       	ldi	r27, 0x01	; 1
    for(i = 0; i < length; ++i)
    25d8:	fc 01       	movw	r30, r24
    25da:	8e 2f       	mov	r24, r30
    25dc:	82 1b       	sub	r24, r18
    25de:	86 17       	cp	r24, r22
    25e0:	18 f4       	brcc	.+6      	; 0x25e8 <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    25e2:	81 91       	ld	r24, Z+
    25e4:	8d 93       	st	X+, r24
    25e6:	f9 cf       	rjmp	.-14     	; 0x25da <twi0_transmit+0x18>
    }
  
    return 0;
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    25f2:	08 95       	ret

000025f4 <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    25f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    25f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    25fc:	08 95       	ret

000025fe <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    25fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <twi0_onSlaveTransmit+0x1>
    2602:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <twi0_onSlaveTransmit>
    2606:	08 95       	ret

00002608 <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2608:	85 ed       	ldi	r24, 0xD5	; 213
    260a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    260e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2612:	84 fd       	sbrc	r24, 4
    2614:	fc cf       	rjmp	.-8      	; 0x260e <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    2616:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi0_state>
    261a:	08 95       	ret

0000261c <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    261c:	85 ec       	ldi	r24, 0xC5	; 197
    261e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    2622:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi0_state>
    2626:	08 95       	ret

00002628 <__vector_24>:
}

ISR(TWI0_vect)
{
    2628:	1f 92       	push	r1
    262a:	0f 92       	push	r0
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	0f 92       	push	r0
    2630:	11 24       	eor	r1, r1
    2632:	2f 93       	push	r18
    2634:	3f 93       	push	r19
    2636:	4f 93       	push	r20
    2638:	5f 93       	push	r21
    263a:	6f 93       	push	r22
    263c:	7f 93       	push	r23
    263e:	8f 93       	push	r24
    2640:	9f 93       	push	r25
    2642:	af 93       	push	r26
    2644:	bf 93       	push	r27
    2646:	ef 93       	push	r30
    2648:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    264a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    264e:	88 7f       	andi	r24, 0xF8	; 248
    2650:	80 36       	cpi	r24, 0x60	; 96
    2652:	09 f4       	brne	.+2      	; 0x2656 <__vector_24+0x2e>
    2654:	9e c0       	rjmp	.+316    	; 0x2792 <__vector_24+0x16a>
    2656:	78 f5       	brcc	.+94     	; 0x26b6 <__vector_24+0x8e>
    2658:	88 32       	cpi	r24, 0x28	; 40
    265a:	09 f4       	brne	.+2      	; 0x265e <__vector_24+0x36>
    265c:	5d c0       	rjmp	.+186    	; 0x2718 <__vector_24+0xf0>
    265e:	90 f4       	brcc	.+36     	; 0x2684 <__vector_24+0x5c>
    2660:	80 31       	cpi	r24, 0x10	; 16
    2662:	09 f4       	brne	.+2      	; 0x2666 <__vector_24+0x3e>
    2664:	56 c0       	rjmp	.+172    	; 0x2712 <__vector_24+0xea>
    2666:	38 f4       	brcc	.+14     	; 0x2676 <__vector_24+0x4e>
    2668:	88 23       	and	r24, r24
    266a:	09 f4       	brne	.+2      	; 0x266e <__vector_24+0x46>
    266c:	f5 c0       	rjmp	.+490    	; 0x2858 <__vector_24+0x230>
    266e:	88 30       	cpi	r24, 0x08	; 8
    2670:	09 f4       	brne	.+2      	; 0x2674 <__vector_24+0x4c>
    2672:	4f c0       	rjmp	.+158    	; 0x2712 <__vector_24+0xea>
    2674:	f5 c0       	rjmp	.+490    	; 0x2860 <__vector_24+0x238>
    2676:	88 31       	cpi	r24, 0x18	; 24
    2678:	09 f4       	brne	.+2      	; 0x267c <__vector_24+0x54>
    267a:	4e c0       	rjmp	.+156    	; 0x2718 <__vector_24+0xf0>
    267c:	80 32       	cpi	r24, 0x20	; 32
    267e:	09 f4       	brne	.+2      	; 0x2682 <__vector_24+0x5a>
    2680:	5f c0       	rjmp	.+190    	; 0x2740 <__vector_24+0x118>
    2682:	ee c0       	rjmp	.+476    	; 0x2860 <__vector_24+0x238>
    2684:	80 34       	cpi	r24, 0x40	; 64
    2686:	09 f4       	brne	.+2      	; 0x268a <__vector_24+0x62>
    2688:	6a c0       	rjmp	.+212    	; 0x275e <__vector_24+0x136>
    268a:	58 f4       	brcc	.+22     	; 0x26a2 <__vector_24+0x7a>
    268c:	80 33       	cpi	r24, 0x30	; 48
    268e:	09 f4       	brne	.+2      	; 0x2692 <__vector_24+0x6a>
    2690:	57 c0       	rjmp	.+174    	; 0x2740 <__vector_24+0x118>
    2692:	88 33       	cpi	r24, 0x38	; 56
    2694:	09 f0       	breq	.+2      	; 0x2698 <__vector_24+0x70>
    2696:	e4 c0       	rjmp	.+456    	; 0x2860 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    2698:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi0_error>
            twi0_releaseBus();
    269c:	0e 94 0e 13 	call	0x261c	; 0x261c <twi0_releaseBus>
            break;
    26a0:	df c0       	rjmp	.+446    	; 0x2860 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    26a2:	80 35       	cpi	r24, 0x50	; 80
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <__vector_24+0x80>
    26a6:	4f c0       	rjmp	.+158    	; 0x2746 <__vector_24+0x11e>
    26a8:	88 35       	cpi	r24, 0x58	; 88
    26aa:	09 f4       	brne	.+2      	; 0x26ae <__vector_24+0x86>
    26ac:	5d c0       	rjmp	.+186    	; 0x2768 <__vector_24+0x140>
    26ae:	88 34       	cpi	r24, 0x48	; 72
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <__vector_24+0x8c>
    26b2:	d6 c0       	rjmp	.+428    	; 0x2860 <__vector_24+0x238>
    26b4:	d3 c0       	rjmp	.+422    	; 0x285c <__vector_24+0x234>
    26b6:	88 39       	cpi	r24, 0x98	; 152
    26b8:	09 f4       	brne	.+2      	; 0x26bc <__vector_24+0x94>
    26ba:	c4 c0       	rjmp	.+392    	; 0x2844 <__vector_24+0x21c>
    26bc:	a8 f4       	brcc	.+42     	; 0x26e8 <__vector_24+0xc0>
    26be:	88 37       	cpi	r24, 0x78	; 120
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <__vector_24+0x9c>
    26c2:	67 c0       	rjmp	.+206    	; 0x2792 <__vector_24+0x16a>
    26c4:	38 f4       	brcc	.+14     	; 0x26d4 <__vector_24+0xac>
    26c6:	88 36       	cpi	r24, 0x68	; 104
    26c8:	09 f4       	brne	.+2      	; 0x26cc <__vector_24+0xa4>
    26ca:	63 c0       	rjmp	.+198    	; 0x2792 <__vector_24+0x16a>
    26cc:	80 37       	cpi	r24, 0x70	; 112
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <__vector_24+0xaa>
    26d0:	60 c0       	rjmp	.+192    	; 0x2792 <__vector_24+0x16a>
    26d2:	c6 c0       	rjmp	.+396    	; 0x2860 <__vector_24+0x238>
    26d4:	88 38       	cpi	r24, 0x88	; 136
    26d6:	09 f4       	brne	.+2      	; 0x26da <__vector_24+0xb2>
    26d8:	b5 c0       	rjmp	.+362    	; 0x2844 <__vector_24+0x21c>
    26da:	80 39       	cpi	r24, 0x90	; 144
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <__vector_24+0xb8>
    26de:	5f c0       	rjmp	.+190    	; 0x279e <__vector_24+0x176>
    26e0:	80 38       	cpi	r24, 0x80	; 128
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <__vector_24+0xbe>
    26e4:	bd c0       	rjmp	.+378    	; 0x2860 <__vector_24+0x238>
    26e6:	5b c0       	rjmp	.+182    	; 0x279e <__vector_24+0x176>
    26e8:	80 3b       	cpi	r24, 0xB0	; 176
    26ea:	09 f4       	brne	.+2      	; 0x26ee <__vector_24+0xc6>
    26ec:	83 c0       	rjmp	.+262    	; 0x27f4 <__vector_24+0x1cc>
    26ee:	38 f4       	brcc	.+14     	; 0x26fe <__vector_24+0xd6>
    26f0:	80 3a       	cpi	r24, 0xA0	; 160
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__vector_24+0xce>
    26f4:	66 c0       	rjmp	.+204    	; 0x27c2 <__vector_24+0x19a>
    26f6:	88 3a       	cpi	r24, 0xA8	; 168
    26f8:	09 f4       	brne	.+2      	; 0x26fc <__vector_24+0xd4>
    26fa:	7c c0       	rjmp	.+248    	; 0x27f4 <__vector_24+0x1cc>
    26fc:	b1 c0       	rjmp	.+354    	; 0x2860 <__vector_24+0x238>
    26fe:	80 3c       	cpi	r24, 0xC0	; 192
    2700:	09 f4       	brne	.+2      	; 0x2704 <__vector_24+0xdc>
    2702:	a4 c0       	rjmp	.+328    	; 0x284c <__vector_24+0x224>
    2704:	88 3c       	cpi	r24, 0xC8	; 200
    2706:	09 f4       	brne	.+2      	; 0x270a <__vector_24+0xe2>
    2708:	a1 c0       	rjmp	.+322    	; 0x284c <__vector_24+0x224>
    270a:	88 3b       	cpi	r24, 0xB8	; 184
    270c:	09 f4       	brne	.+2      	; 0x2710 <__vector_24+0xe8>
    270e:	87 c0       	rjmp	.+270    	; 0x281e <__vector_24+0x1f6>
    2710:	a7 c0       	rjmp	.+334    	; 0x2860 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    2712:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <twi0_slarw>
    2716:	10 c0       	rjmp	.+32     	; 0x2738 <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2718:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <twi0_masterBufferIndex>
    271c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <twi0_masterBufferLength>
    2720:	98 17       	cp	r25, r24
    2722:	70 f5       	brcc	.+92     	; 0x2780 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    2724:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <twi0_masterBufferIndex>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	8e 0f       	add	r24, r30
    272c:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <twi0_masterBufferIndex>
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	e8 50       	subi	r30, 0x08	; 8
    2734:	fe 4f       	sbci	r31, 0xFE	; 254
    2736:	80 81       	ld	r24, Z
    2738:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    273c:	85 ec       	ldi	r24, 0xC5	; 197
    273e:	83 c0       	rjmp	.+262    	; 0x2846 <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    2740:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <twi0_error>
    2744:	8b c0       	rjmp	.+278    	; 0x285c <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2746:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <twi0_masterBufferIndex>
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	8e 0f       	add	r24, r30
    274e:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <twi0_masterBufferIndex>
    2752:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	e8 50       	subi	r30, 0x08	; 8
    275a:	fe 4f       	sbci	r31, 0xFE	; 254
    275c:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    275e:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <twi0_masterBufferIndex>
    2762:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <twi0_masterBufferLength>
    2766:	6b c0       	rjmp	.+214    	; 0x283e <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2768:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <twi0_masterBufferIndex>
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	8e 0f       	add	r24, r30
    2770:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <twi0_masterBufferIndex>
    2774:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	e8 50       	subi	r30, 0x08	; 8
    277c:	fe 4f       	sbci	r31, 0xFE	; 254
    277e:	80 83       	st	Z, r24
            if (twi0_sendStop)
    2780:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <twi0_sendStop>
    2784:	81 11       	cpse	r24, r1
    2786:	6a c0       	rjmp	.+212    	; 0x285c <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    278e:	84 ea       	ldi	r24, 0xA4	; 164
    2790:	5e c0       	rjmp	.+188    	; 0x284e <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    2798:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <twi0_rxBufferIndex>
    279c:	cf cf       	rjmp	.-98     	; 0x273c <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    279e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi0_rxBufferIndex>
    27a2:	80 32       	cpi	r24, 0x20	; 32
    27a4:	08 f0       	brcs	.+2      	; 0x27a8 <__vector_24+0x180>
    27a6:	4e c0       	rjmp	.+156    	; 0x2844 <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    27a8:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi0_rxBufferIndex>
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	8e 0f       	add	r24, r30
    27b0:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi0_rxBufferIndex>
    27b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	ec 54       	subi	r30, 0x4C	; 76
    27bc:	fe 4f       	sbci	r31, 0xFE	; 254
    27be:	80 83       	st	Z, r24
    27c0:	bd cf       	rjmp	.-134    	; 0x273c <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    27c2:	0e 94 0e 13 	call	0x261c	; 0x261c <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    27c6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <twi0_rxBufferIndex>
    27ca:	80 32       	cpi	r24, 0x20	; 32
    27cc:	30 f4       	brcc	.+12     	; 0x27da <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    27ce:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi0_rxBufferIndex>
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	ec 54       	subi	r30, 0x4C	; 76
    27d6:	fe 4f       	sbci	r31, 0xFE	; 254
    27d8:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    27da:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <twi0_rxBufferIndex>
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    27e4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    27e8:	84 eb       	ldi	r24, 0xB4	; 180
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    27ee:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <twi0_rxBufferIndex>
            break;
    27f2:	36 c0       	rjmp	.+108    	; 0x2860 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    27f4:	84 e0       	ldi	r24, 0x04	; 4
    27f6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    27fa:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    27fe:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    2802:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <twi0_onSlaveTransmit>
    2806:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <twi0_onSlaveTransmit+0x1>
    280a:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    280c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <twi0_txBufferLength>
    2810:	81 11       	cpse	r24, r1
    2812:	05 c0       	rjmp	.+10     	; 0x281e <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    281a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    281e:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <twi0_txBufferIndex>
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	8e 0f       	add	r24, r30
    2826:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <twi0_txBufferIndex>
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	ea 52       	subi	r30, 0x2A	; 42
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	80 81       	ld	r24, Z
    2832:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    2836:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <twi0_txBufferIndex>
    283a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <twi0_txBufferLength>
    283e:	98 17       	cp	r25, r24
    2840:	08 f4       	brcc	.+2      	; 0x2844 <__vector_24+0x21c>
    2842:	7c cf       	rjmp	.-264    	; 0x273c <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2844:	85 e8       	ldi	r24, 0x85	; 133
    2846:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    284a:	0a c0       	rjmp	.+20     	; 0x2860 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    284c:	85 ec       	ldi	r24, 0xC5	; 197
    284e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    2852:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <twi0_state>
            break;
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    2858:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <twi0_error>
            twi0_stop();
    285c:	0e 94 04 13 	call	0x2608	; 0x2608 <twi0_stop>
            break;
    }
}
    2860:	ff 91       	pop	r31
    2862:	ef 91       	pop	r30
    2864:	bf 91       	pop	r27
    2866:	af 91       	pop	r26
    2868:	9f 91       	pop	r25
    286a:	8f 91       	pop	r24
    286c:	7f 91       	pop	r23
    286e:	6f 91       	pop	r22
    2870:	5f 91       	pop	r21
    2872:	4f 91       	pop	r20
    2874:	3f 91       	pop	r19
    2876:	2f 91       	pop	r18
    2878:	0f 90       	pop	r0
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	0f 90       	pop	r0
    287e:	1f 90       	pop	r1
    2880:	18 95       	reti

00002882 <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    2882:	08 95       	ret

00002884 <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2884:	08 95       	ret

00002886 <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    2886:	20 e4       	ldi	r18, 0x40	; 64
    2888:	32 e0       	ldi	r19, 0x02	; 2
    288a:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <twi1_rxBuffer+0x1>
    288e:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    2892:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi1_state>
    twi1_sendStop = 1;		// default value
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <twi1_sendStop>
    twi1_inRepStart = 0;
    289c:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <twi1_inRepStart>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    28a0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28a2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    28a4:	69 98       	cbi	0x0d, 1	; 13
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28a6:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    28a8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28aa:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    28ac:	68 98       	cbi	0x0d, 0	; 13
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28ae:	9f bf       	out	0x3f, r25	; 63
    pinMode(SCL1,INPUT); // 328pb DDRE &= ~(1 << DDE0)
    pinMode(SDA1,INPUT); // 328pb DDRE &= ~(1 << DDE1)

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    28b0:	88 23       	and	r24, r24
    28b2:	41 f0       	breq	.+16     	; 0x28c4 <twi1_init+0x3e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    28b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28b6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    28b8:	71 9a       	sbi	0x0e, 1	; 14
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28ba:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    28bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28be:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    28c0:	70 9a       	sbi	0x0e, 0	; 14
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28c2:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(SCL1,HIGH); // 328pb PORTE |= (1 << PORTE0)
        digitalWrite(SDA1,HIGH); // 328pb PORTE |= (1 << PORTE1)
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    28c4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    28c8:	8e 7f       	andi	r24, 0xFE	; 254
    28ca:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    28ce:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    28d2:	8d 7f       	andi	r24, 0xFD	; 253
    28d4:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    28d8:	84 e3       	ldi	r24, 0x34	; 52
    28da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    28de:	85 e4       	ldi	r24, 0x45	; 69
    28e0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    28e4:	08 95       	ret

000028e6 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    28e6:	88 0f       	add	r24, r24
    28e8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    28ec:	08 95       	ret

000028ee <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    28ee:	61 32       	cpi	r22, 0x21	; 33
    28f0:	98 f4       	brcc	.+38     	; 0x2918 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    28f2:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <twi1_state>
    28f6:	24 30       	cpi	r18, 0x04	; 4
    28f8:	89 f4       	brne	.+34     	; 0x291c <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    28fa:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <twi1_txBufferLength>
    28fe:	28 2f       	mov	r18, r24
    2900:	a2 e6       	ldi	r26, 0x62	; 98
    2902:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2904:	fc 01       	movw	r30, r24
    2906:	8e 2f       	mov	r24, r30
    2908:	82 1b       	sub	r24, r18
    290a:	86 17       	cp	r24, r22
    290c:	18 f4       	brcc	.+6      	; 0x2914 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    290e:	81 91       	ld	r24, Z+
    2910:	8d 93       	st	X+, r24
    2912:	f9 cf       	rjmp	.-14     	; 0x2906 <twi1_transmit+0x18>
    }
  
    return 0;
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    291c:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    291e:	08 95       	ret

00002920 <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2920:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <twi1_onSlaveReceive+0x1>
    2924:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <twi1_onSlaveReceive>
    2928:	08 95       	ret

0000292a <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    292a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <twi1_onSlaveTransmit+0x1>
    292e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <twi1_onSlaveTransmit>
    2932:	08 95       	ret

00002934 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2934:	85 ed       	ldi	r24, 0xD5	; 213
    2936:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    293a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    293e:	84 fd       	sbrc	r24, 4
    2940:	fc cf       	rjmp	.-8      	; 0x293a <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2942:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi1_state>
    2946:	08 95       	ret

00002948 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2948:	85 ec       	ldi	r24, 0xC5	; 197
    294a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    294e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi1_state>
    2952:	08 95       	ret

00002954 <__vector_40>:
}

ISR(TWI1_vect)
{
    2954:	1f 92       	push	r1
    2956:	0f 92       	push	r0
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	0f 92       	push	r0
    295c:	11 24       	eor	r1, r1
    295e:	2f 93       	push	r18
    2960:	3f 93       	push	r19
    2962:	4f 93       	push	r20
    2964:	5f 93       	push	r21
    2966:	6f 93       	push	r22
    2968:	7f 93       	push	r23
    296a:	8f 93       	push	r24
    296c:	9f 93       	push	r25
    296e:	af 93       	push	r26
    2970:	bf 93       	push	r27
    2972:	ef 93       	push	r30
    2974:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2976:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    297a:	88 7f       	andi	r24, 0xF8	; 248
    297c:	80 36       	cpi	r24, 0x60	; 96
    297e:	09 f4       	brne	.+2      	; 0x2982 <__vector_40+0x2e>
    2980:	9e c0       	rjmp	.+316    	; 0x2abe <__vector_40+0x16a>
    2982:	78 f5       	brcc	.+94     	; 0x29e2 <__vector_40+0x8e>
    2984:	88 32       	cpi	r24, 0x28	; 40
    2986:	09 f4       	brne	.+2      	; 0x298a <__vector_40+0x36>
    2988:	5d c0       	rjmp	.+186    	; 0x2a44 <__vector_40+0xf0>
    298a:	90 f4       	brcc	.+36     	; 0x29b0 <__vector_40+0x5c>
    298c:	80 31       	cpi	r24, 0x10	; 16
    298e:	09 f4       	brne	.+2      	; 0x2992 <__vector_40+0x3e>
    2990:	56 c0       	rjmp	.+172    	; 0x2a3e <__vector_40+0xea>
    2992:	38 f4       	brcc	.+14     	; 0x29a2 <__vector_40+0x4e>
    2994:	88 23       	and	r24, r24
    2996:	09 f4       	brne	.+2      	; 0x299a <__vector_40+0x46>
    2998:	0a c1       	rjmp	.+532    	; 0x2bae <__vector_40+0x25a>
    299a:	88 30       	cpi	r24, 0x08	; 8
    299c:	09 f4       	brne	.+2      	; 0x29a0 <__vector_40+0x4c>
    299e:	4f c0       	rjmp	.+158    	; 0x2a3e <__vector_40+0xea>
    29a0:	0a c1       	rjmp	.+532    	; 0x2bb6 <__vector_40+0x262>
    29a2:	88 31       	cpi	r24, 0x18	; 24
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <__vector_40+0x54>
    29a6:	4e c0       	rjmp	.+156    	; 0x2a44 <__vector_40+0xf0>
    29a8:	80 32       	cpi	r24, 0x20	; 32
    29aa:	09 f4       	brne	.+2      	; 0x29ae <__vector_40+0x5a>
    29ac:	5f c0       	rjmp	.+190    	; 0x2a6c <__vector_40+0x118>
    29ae:	03 c1       	rjmp	.+518    	; 0x2bb6 <__vector_40+0x262>
    29b0:	80 34       	cpi	r24, 0x40	; 64
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <__vector_40+0x62>
    29b4:	6a c0       	rjmp	.+212    	; 0x2a8a <__vector_40+0x136>
    29b6:	58 f4       	brcc	.+22     	; 0x29ce <__vector_40+0x7a>
    29b8:	80 33       	cpi	r24, 0x30	; 48
    29ba:	09 f4       	brne	.+2      	; 0x29be <__vector_40+0x6a>
    29bc:	57 c0       	rjmp	.+174    	; 0x2a6c <__vector_40+0x118>
    29be:	88 33       	cpi	r24, 0x38	; 56
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <__vector_40+0x70>
    29c2:	f9 c0       	rjmp	.+498    	; 0x2bb6 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    29c4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <twi1_error>
            twi1_releaseBus();
    29c8:	0e 94 a4 14 	call	0x2948	; 0x2948 <twi1_releaseBus>
            break;
    29cc:	f4 c0       	rjmp	.+488    	; 0x2bb6 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    29ce:	80 35       	cpi	r24, 0x50	; 80
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <__vector_40+0x80>
    29d2:	4f c0       	rjmp	.+158    	; 0x2a72 <__vector_40+0x11e>
    29d4:	88 35       	cpi	r24, 0x58	; 88
    29d6:	09 f4       	brne	.+2      	; 0x29da <__vector_40+0x86>
    29d8:	5d c0       	rjmp	.+186    	; 0x2a94 <__vector_40+0x140>
    29da:	88 34       	cpi	r24, 0x48	; 72
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <__vector_40+0x8c>
    29de:	eb c0       	rjmp	.+470    	; 0x2bb6 <__vector_40+0x262>
    29e0:	e8 c0       	rjmp	.+464    	; 0x2bb2 <__vector_40+0x25e>
    29e2:	88 39       	cpi	r24, 0x98	; 152
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <__vector_40+0x94>
    29e6:	d9 c0       	rjmp	.+434    	; 0x2b9a <__vector_40+0x246>
    29e8:	a8 f4       	brcc	.+42     	; 0x2a14 <__vector_40+0xc0>
    29ea:	88 37       	cpi	r24, 0x78	; 120
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <__vector_40+0x9c>
    29ee:	67 c0       	rjmp	.+206    	; 0x2abe <__vector_40+0x16a>
    29f0:	38 f4       	brcc	.+14     	; 0x2a00 <__vector_40+0xac>
    29f2:	88 36       	cpi	r24, 0x68	; 104
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <__vector_40+0xa4>
    29f6:	63 c0       	rjmp	.+198    	; 0x2abe <__vector_40+0x16a>
    29f8:	80 37       	cpi	r24, 0x70	; 112
    29fa:	09 f4       	brne	.+2      	; 0x29fe <__vector_40+0xaa>
    29fc:	60 c0       	rjmp	.+192    	; 0x2abe <__vector_40+0x16a>
    29fe:	db c0       	rjmp	.+438    	; 0x2bb6 <__vector_40+0x262>
    2a00:	88 38       	cpi	r24, 0x88	; 136
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <__vector_40+0xb2>
    2a04:	ca c0       	rjmp	.+404    	; 0x2b9a <__vector_40+0x246>
    2a06:	80 39       	cpi	r24, 0x90	; 144
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <__vector_40+0xb8>
    2a0a:	5f c0       	rjmp	.+190    	; 0x2aca <__vector_40+0x176>
    2a0c:	80 38       	cpi	r24, 0x80	; 128
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <__vector_40+0xbe>
    2a10:	d2 c0       	rjmp	.+420    	; 0x2bb6 <__vector_40+0x262>
    2a12:	5b c0       	rjmp	.+182    	; 0x2aca <__vector_40+0x176>
    2a14:	80 3b       	cpi	r24, 0xB0	; 176
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <__vector_40+0xc6>
    2a18:	98 c0       	rjmp	.+304    	; 0x2b4a <__vector_40+0x1f6>
    2a1a:	38 f4       	brcc	.+14     	; 0x2a2a <__vector_40+0xd6>
    2a1c:	80 3a       	cpi	r24, 0xA0	; 160
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__vector_40+0xce>
    2a20:	69 c0       	rjmp	.+210    	; 0x2af4 <__vector_40+0x1a0>
    2a22:	88 3a       	cpi	r24, 0xA8	; 168
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <__vector_40+0xd4>
    2a26:	91 c0       	rjmp	.+290    	; 0x2b4a <__vector_40+0x1f6>
    2a28:	c6 c0       	rjmp	.+396    	; 0x2bb6 <__vector_40+0x262>
    2a2a:	80 3c       	cpi	r24, 0xC0	; 192
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <__vector_40+0xdc>
    2a2e:	b9 c0       	rjmp	.+370    	; 0x2ba2 <__vector_40+0x24e>
    2a30:	88 3c       	cpi	r24, 0xC8	; 200
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <__vector_40+0xe2>
    2a34:	b6 c0       	rjmp	.+364    	; 0x2ba2 <__vector_40+0x24e>
    2a36:	88 3b       	cpi	r24, 0xB8	; 184
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <__vector_40+0xe8>
    2a3a:	9c c0       	rjmp	.+312    	; 0x2b74 <__vector_40+0x220>
    2a3c:	bc c0       	rjmp	.+376    	; 0x2bb6 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    2a3e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <twi1_slarw>
    2a42:	10 c0       	rjmp	.+32     	; 0x2a64 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2a44:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <twi1_masterBufferIndex>
    2a48:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi1_masterBufferLength>
    2a4c:	98 17       	cp	r25, r24
    2a4e:	70 f5       	brcc	.+92     	; 0x2aac <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2a50:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi1_masterBufferIndex>
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	8e 0f       	add	r24, r30
    2a58:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi1_masterBufferIndex>
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	ec 57       	subi	r30, 0x7C	; 124
    2a60:	fd 4f       	sbci	r31, 0xFD	; 253
    2a62:	80 81       	ld	r24, Z
    2a64:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2a68:	85 ec       	ldi	r24, 0xC5	; 197
    2a6a:	98 c0       	rjmp	.+304    	; 0x2b9c <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    2a6c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <twi1_error>
    2a70:	a0 c0       	rjmp	.+320    	; 0x2bb2 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2a72:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi1_masterBufferIndex>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	8e 0f       	add	r24, r30
    2a7a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi1_masterBufferIndex>
    2a7e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	ec 57       	subi	r30, 0x7C	; 124
    2a86:	fd 4f       	sbci	r31, 0xFD	; 253
    2a88:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2a8a:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <twi1_masterBufferIndex>
    2a8e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi1_masterBufferLength>
    2a92:	80 c0       	rjmp	.+256    	; 0x2b94 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2a94:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi1_masterBufferIndex>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	8e 0f       	add	r24, r30
    2a9c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <twi1_masterBufferIndex>
    2aa0:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ec 57       	subi	r30, 0x7C	; 124
    2aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aaa:	80 83       	st	Z, r24
            if (twi1_sendStop)
    2aac:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <twi1_sendStop>
    2ab0:	81 11       	cpse	r24, r1
    2ab2:	7f c0       	rjmp	.+254    	; 0x2bb2 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2aba:	84 ea       	ldi	r24, 0xA4	; 164
    2abc:	73 c0       	rjmp	.+230    	; 0x2ba4 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2ac4:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <twi1_rxBufferIndex>
    2ac8:	cf cf       	rjmp	.-98     	; 0x2a68 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2aca:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi1_rxBufferIndex>
    2ace:	80 32       	cpi	r24, 0x20	; 32
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <__vector_40+0x180>
    2ad2:	63 c0       	rjmp	.+198    	; 0x2b9a <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2ad4:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <twi1_rxBuffer>
    2ad8:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <twi1_rxBuffer+0x1>
    2adc:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi1_rxBufferIndex>
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	98 0f       	add	r25, r24
    2ae4:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <twi1_rxBufferIndex>
    2ae8:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2aec:	e8 0f       	add	r30, r24
    2aee:	f1 1d       	adc	r31, r1
    2af0:	90 83       	st	Z, r25
    2af2:	ba cf       	rjmp	.-140    	; 0x2a68 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2af4:	0e 94 a4 14 	call	0x2948	; 0x2948 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2af8:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <twi1_rxBufferIndex>
    2afc:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <twi1_rxBuffer>
    2b00:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <twi1_rxBuffer+0x1>
    2b04:	20 32       	cpi	r18, 0x20	; 32
    2b06:	30 f4       	brcc	.+12     	; 0x2b14 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2b08:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <twi1_rxBufferIndex>
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	e2 0f       	add	r30, r18
    2b10:	f1 1d       	adc	r31, r1
    2b12:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2b14:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <twi1_rxBufferIndex>
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <twi1_onSlaveReceive>
    2b1e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <twi1_onSlaveReceive+0x1>
    2b22:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2b24:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <twi1_rxBuffer>
    2b28:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <twi1_rxBuffer+0x1>
    2b2c:	80 54       	subi	r24, 0x40	; 64
    2b2e:	92 40       	sbci	r25, 0x02	; 2
    2b30:	19 f4       	brne	.+6      	; 0x2b38 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2b32:	80 e2       	ldi	r24, 0x20	; 32
    2b34:	92 e0       	ldi	r25, 0x02	; 2
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2b38:	80 e4       	ldi	r24, 0x40	; 64
    2b3a:	92 e0       	ldi	r25, 0x02	; 2
    2b3c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <twi1_rxBuffer+0x1>
    2b40:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2b44:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <twi1_rxBufferIndex>
            break;
    2b48:	36 c0       	rjmp	.+108    	; 0x2bb6 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    2b4a:	84 e0       	ldi	r24, 0x04	; 4
    2b4c:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2b50:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2b54:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2b58:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <twi1_onSlaveTransmit>
    2b5c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <twi1_onSlaveTransmit+0x1>
    2b60:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2b62:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi1_txBufferLength>
    2b66:	81 11       	cpse	r24, r1
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2b70:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2b74:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <twi1_txBufferIndex>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	8e 0f       	add	r24, r30
    2b7c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <twi1_txBufferIndex>
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	ee 59       	subi	r30, 0x9E	; 158
    2b84:	fd 4f       	sbci	r31, 0xFD	; 253
    2b86:	80 81       	ld	r24, Z
    2b88:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    2b8c:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <twi1_txBufferIndex>
    2b90:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <twi1_txBufferLength>
    2b94:	98 17       	cp	r25, r24
    2b96:	08 f4       	brcc	.+2      	; 0x2b9a <__vector_40+0x246>
    2b98:	67 cf       	rjmp	.-306    	; 0x2a68 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2b9a:	85 e8       	ldi	r24, 0x85	; 133
    2b9c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2ba0:	0a c0       	rjmp	.+20     	; 0x2bb6 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2ba2:	85 ec       	ldi	r24, 0xC5	; 197
    2ba4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    2ba8:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <twi1_state>
            break;
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2bae:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <twi1_error>
            twi1_stop();
    2bb2:	0e 94 9a 14 	call	0x2934	; 0x2934 <twi1_stop>
            break;
    }
}
    2bb6:	ff 91       	pop	r31
    2bb8:	ef 91       	pop	r30
    2bba:	bf 91       	pop	r27
    2bbc:	af 91       	pop	r26
    2bbe:	9f 91       	pop	r25
    2bc0:	8f 91       	pop	r24
    2bc2:	7f 91       	pop	r23
    2bc4:	6f 91       	pop	r22
    2bc6:	5f 91       	pop	r21
    2bc8:	4f 91       	pop	r20
    2bca:	3f 91       	pop	r19
    2bcc:	2f 91       	pop	r18
    2bce:	0f 90       	pop	r0
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	0f 90       	pop	r0
    2bd4:	1f 90       	pop	r1
    2bd6:	18 95       	reti

00002bd8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2bd8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bda:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2bdc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bde:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2be0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2be2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2be4:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2be6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2be8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bea:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2bec:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bee:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2bf0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bf2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2bf4:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bf6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2bf8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bfa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2bfc:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bfe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c00:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c02:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c04:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c06:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c08:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c0a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c0c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c0e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c10:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c12:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c14:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c16:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c18:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c1a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c1c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c1e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c20:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c22:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2c24:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c26:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c2a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c2c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c2e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c30:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c32:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c34:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c36:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c3a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c3c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c3e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c42:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2c44:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c46:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c48:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c4a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c4c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c4e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c50:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c52:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2c54:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c56:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c58:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c5a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c5c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c5e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c60:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c62:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2c64:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c66:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c68:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c6a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c6c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c6e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c70:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c72:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c74:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c76:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c78:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c7a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2c7c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c7e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2c80:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c82:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2c84:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c86:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
    2c88:	80 e3       	ldi	r24, 0x30	; 48
    2c8a:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <bootloader_address>
    host_active = 0;
    2c8e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <host_active>
    lockout_active = 0;
    2c92:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <lockout_active>
    status_byt = 0;
    2c96:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <status_byt>
    write_rpu_address_to_eeprom = 0;
    2c9a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
    2c9e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <shutdown_detected>
    shutdown_started = 0;
    2ca2:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <shutdown_started>
    arduino_mode_started =0;
    2ca6:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <arduino_mode_started>
    arduino_mode = 0;
    2caa:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode>
    test_mode_started = 0;
    2cae:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <test_mode_started>
    test_mode = 0;
    2cb2:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <test_mode>
    transceiver_state = 0;
    2cb6:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
    2cba:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <smbus_has_numBytes_to_handle+0x1>
    2cbe:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_output = 0;
    2cc2:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
    2cc6:	0e 94 6d 12 	call	0x24da	; 0x24da <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
    2cca:	80 e4       	ldi	r24, 0x40	; 64
    2ccc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	0e 94 04 12 	call	0x2408	; 0x2408 <enable_ADC_auto_conversion>
    adc_started_at = millis();
    2cd6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    2cda:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <adc_started_at>
    2cde:	70 93 87 03 	sts	0x0387, r23	; 0x800387 <adc_started_at+0x1>
    2ce2:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <adc_started_at+0x2>
    2ce6:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <adc_started_at+0x3>

    /* Initialize UART0 to 250 kbps, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uart0_init(DTR_BAUD,UART0_RX_REPLACE_CR_WITH_NL);
    2cea:	42 e0       	ldi	r20, 0x02	; 2
    2cec:	60 e9       	ldi	r22, 0x90	; 144
    2cee:	70 ed       	ldi	r23, 0xD0	; 208
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 a9 18 	call	0x3152	; 0x3152 <uart0_init>
    2cf8:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <__iob+0x1>
    2cfc:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <__iob>
    2d00:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <__iob+0x3>
    2d04:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
    2d08:	89 e2       	ldi	r24, 0x29	; 41
    2d0a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
    2d0e:	81 eb       	ldi	r24, 0xB1	; 177
    2d10:	9a e0       	ldi	r25, 0x0A	; 10
    2d12:	0e 94 ff 12 	call	0x25fe	; 0x25fe <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
    2d16:	84 e7       	ldi	r24, 0x74	; 116
    2d18:	9a e0       	ldi	r25, 0x0A	; 10
    2d1a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	0e 94 b3 12 	call	0x2566	; 0x2566 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
    2d24:	8a e2       	ldi	r24, 0x2A	; 42
    2d26:	0e 94 73 14 	call	0x28e6	; 0x28e6 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
    2d2a:	8b e4       	ldi	r24, 0x4B	; 75
    2d2c:	9b e0       	ldi	r25, 0x0B	; 11
    2d2e:	0e 94 95 14 	call	0x292a	; 0x292a <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
    2d32:	8e ec       	ldi	r24, 0xCE	; 206
    2d34:	9a e0       	ldi	r25, 0x0A	; 10
    2d36:	0e 94 90 14 	call	0x2920	; 0x2920 <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	0e 94 43 14 	call	0x2886	; 0x2886 <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
    2d40:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d42:	2f eb       	ldi	r18, 0xBF	; 191
    2d44:	84 ed       	ldi	r24, 0xD4	; 212
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	21 50       	subi	r18, 0x01	; 1
    2d4a:	80 40       	sbci	r24, 0x00	; 0
    2d4c:	90 40       	sbci	r25, 0x00	; 0
    2d4e:	e1 f7       	brne	.-8      	; 0x2d48 <setup+0x170>
    2d50:	00 c0       	rjmp	.+0      	; 0x2d52 <setup+0x17a>
    2d52:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d54:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d56:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d58:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d5a:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear, blocking at this point is OK.
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
    2d5c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
    2d60:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <check_for_eeprom_id>
    2d64:	88 23       	and	r24, r24
    2d66:	29 f0       	breq	.+10     	; 0x2d72 <setup+0x19a>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
    2d68:	82 e3       	ldi	r24, 0x32	; 50
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <eeprom_read_byte>
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <setup+0x19c>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
    2d72:	81 e3       	ldi	r24, 0x31	; 49
    2d74:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <rpu_address>
    }

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
    2d78:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <LoadBatLimitsFromEEPROM>

    // load Day-Night state machine values from EEPROM (or set defaults)
    LoadDayNightValuesFromEEPROM();
    2d7c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LoadDayNightValuesFromEEPROM>
    dayTmrStarted = millis();
    2d80:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    2d84:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <dayTmrStarted>
    2d88:	70 93 b1 03 	sts	0x03B1, r23	; 0x8003b1 <dayTmrStarted+0x1>
    2d8c:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <dayTmrStarted+0x2>
    2d90:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <dayTmrStarted+0x3>

    // load Calibration Limits from EEPROM (or set defaults)
    cal_loaded = CAL_CLEAR;
    2d94:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <cal_loaded>
    for (uint8_t cal_index = 0; cal_index < EE_CAL_NUM; cal_index++)
    {
        LoadCalFromEEPROM(cal_index);
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LoadCalFromEEPROM>
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LoadCalFromEEPROM>
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LoadCalFromEEPROM>
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LoadCalFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
    // this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
    // status_byt was zero at this point, but this sets the bit without changing the other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
    2db0:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <status_byt>
    2db4:	88 60       	ori	r24, 0x08	; 8
    2db6:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <status_byt>
    2dba:	08 95       	ret

00002dbc <main>:
#endif
}

int main(void)
{
    setup();
    2dbc:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <setup>

    blink_started_at = millis();
    2dc0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <millis>
    2dc4:	60 93 00 03 	sts	0x0300, r22	; 0x800300 <blink_started_at>
    2dc8:	70 93 01 03 	sts	0x0301, r23	; 0x800301 <blink_started_at+0x1>
    2dcc:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <blink_started_at+0x2>
    2dd0:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <blink_started_at+0x3>

    while (1) // scan time for each loop varies depending on how much of each thing needs to be done 
    {
        if (!test_mode) 
    2dd4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <test_mode>
    2dd8:	81 11       	cpse	r24, r1
    2dda:	0a c0       	rjmp	.+20     	; 0x2df0 <main+0x34>
        {
            blink_on_activate();
    2ddc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <blink_on_activate>
            check_Bootload_Time();
    2de0:	0e 94 aa 01 	call	0x354	; 0x354 <check_Bootload_Time>
            check_DTR();
    2de4:	0e 94 4d 02 	call	0x49a	; 0x49a <check_DTR>
            check_lockout();
    2de8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <check_lockout>
            check_shutdown();
    2dec:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <check_shutdown>
        }
        save_rpu_addr_state();
    2df0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <save_rpu_addr_state>
        check_uart();
    2df4:	0e 94 07 03 	call	0x60e	; 0x60e <check_uart>
        adc_burst();
    2df8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <adc_burst>
        ReferancesFromI2CtoEE();
    2dfc:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <ReferancesFromI2CtoEE>
        BatLimitsFromI2CtoEE();
    2e00:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <BatLimitsFromI2CtoEE>
        ChannelCalFromI2CtoEE();
    2e04:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <ChannelCalFromI2CtoEE>
        check_if_alt_should_be_on();
    2e08:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <check_if_alt_should_be_on>
        DayNightValuesFromI2CtoEE();
    2e0c:	0e 94 41 10 	call	0x2082	; 0x2082 <DayNightValuesFromI2CtoEE>
        check_daynight();
    2e10:	0e 94 8e 10 	call	0x211c	; 0x211c <check_daynight>
        handle_smbus_receive();
    2e14:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <handle_smbus_receive>
    }    
    2e18:	dd cf       	rjmp	.-70     	; 0x2dd4 <main+0x18>

00002e1a <IsValidValForCal>:
// check if calibration is a valid float
// 0UL and 0xFFFFFFFFUL are not valid
uint8_t IsValidValForCal(uint8_t cal_map)
{
    uint32_t tmp_cal;
    memcpy(&tmp_cal, &calMap[cal_map].calibration, sizeof tmp_cal);
    2e1a:	24 e0       	ldi	r18, 0x04	; 4
    2e1c:	82 9f       	mul	r24, r18
    2e1e:	c0 01       	movw	r24, r0
    2e20:	11 24       	eor	r1, r1
    2e22:	fc 01       	movw	r30, r24
    2e24:	e7 53       	subi	r30, 0x37	; 55
    2e26:	fc 4f       	sbci	r31, 0xFC	; 252
    2e28:	40 81       	ld	r20, Z
    2e2a:	51 81       	ldd	r21, Z+1	; 0x01
    2e2c:	62 81       	ldd	r22, Z+2	; 0x02
    2e2e:	73 81       	ldd	r23, Z+3	; 0x03
    2e30:	41 50       	subi	r20, 0x01	; 1
    2e32:	51 09       	sbc	r21, r1
    2e34:	61 09       	sbc	r22, r1
    2e36:	71 09       	sbc	r23, r1
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	4e 3f       	cpi	r20, 0xFE	; 254
    2e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e3e:	6f 4f       	sbci	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	08 f0       	brcs	.+2      	; 0x2e46 <IsValidValForCal+0x2c>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    if ( (tmp_cal == 0xFFFFFFFFUL) | (tmp_cal == 0x0UL) )
    {
            return 0;
    }
    return 1;
}
    2e46:	08 95       	ret

00002e48 <IsValidValForCalChannel>:


// check if channel_with_writebit calibration is a valid
uint8_t IsValidValForCalChannel(void) 
{
    uint8_t channel  = channel_with_writebit & CAL_CHANNEL_MASK; // mask the writebit
    2e48:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <channel_with_writebit>
    2e4c:	ef 77       	andi	r30, 0x7F	; 127
    if ( (channel == ALT_I) || (channel == ALT_V) || (channel == PWR_V) || (channel == PWR_I) )
    2e4e:	e2 30       	cpi	r30, 0x02	; 2
    2e50:	20 f0       	brcs	.+8      	; 0x2e5a <IsValidValForCalChannel+0x12>
    2e52:	8a ef       	ldi	r24, 0xFA	; 250
    2e54:	8e 0f       	add	r24, r30
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	30 f4       	brcc	.+12     	; 0x2e66 <IsValidValForCalChannel+0x1e>
    {
        // copy the float to a uint32_t to check if bytes are valid, 
        // python:  unpack('f', pack('BBBB', 0xff, 0xff, 0xff, 0xff)) is (nan,)
        // eeprom that is not yet set is 0xff and should be ignored if passed through i2c
        return IsValidValForCal(channelMap[channel].cal_map);
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	e5 56       	subi	r30, 0x65	; 101
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	80 81       	ld	r24, Z
    2e62:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <IsValidValForCal>
            
    }
    return 0;
}
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	08 95       	ret

00002e6a <WriteCalToEE>:

// save channel calibration if writebit is set and eeprom is ready
uint8_t WriteCalToEE(void) 
{
    if (channel_with_writebit & 0x80)
    2e6a:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <channel_with_writebit>
    2e6e:	87 ff       	sbrs	r24, 7
    2e70:	1a c0       	rjmp	.+52     	; 0x2ea6 <WriteCalToEE+0x3c>
    {
        uint8_t channel  = channel_with_writebit & 0x7F; // mask the writebit to select one of ALT_I, ALT_V,PWR_I,PWR_V
    2e72:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <channel_with_writebit>
        uint8_t offset = channelMap[channel].cal_map;
        // use update functions to skip the burning if the old value is the same with new.
        // https://www.microchip.com/webdoc/AVRLibcReferenceManual/group__avr__eeprom.html
        if ( eeprom_is_ready() )
    2e76:	f9 99       	sbic	0x1f, 1	; 31
    2e78:	16 c0       	rjmp	.+44     	; 0x2ea6 <WriteCalToEE+0x3c>
uint8_t WriteCalToEE(void) 
{
    if (channel_with_writebit & 0x80)
    {
        uint8_t channel  = channel_with_writebit & 0x7F; // mask the writebit to select one of ALT_I, ALT_V,PWR_I,PWR_V
        uint8_t offset = channelMap[channel].cal_map;
    2e7a:	ef 77       	andi	r30, 0x7F	; 127
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	e5 56       	subi	r30, 0x65	; 101
    2e80:	fe 4f       	sbci	r31, 0xFE	; 254
    2e82:	80 81       	ld	r24, Z
        // use update functions to skip the burning if the old value is the same with new.
        // https://www.microchip.com/webdoc/AVRLibcReferenceManual/group__avr__eeprom.html
        if ( eeprom_is_ready() )
        {
            eeprom_update_float( (float *)(EE_CAL_BASE_ADDR+(EE_CAL_OFFSET*offset)), calMap[offset].calibration);
    2e84:	24 e0       	ldi	r18, 0x04	; 4
    2e86:	82 9f       	mul	r24, r18
    2e88:	c0 01       	movw	r24, r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	e7 53       	subi	r30, 0x37	; 55
    2e90:	fc 4f       	sbci	r31, 0xFC	; 252
    2e92:	40 81       	ld	r20, Z
    2e94:	51 81       	ldd	r21, Z+1	; 0x01
    2e96:	62 81       	ldd	r22, Z+2	; 0x02
    2e98:	73 81       	ldd	r23, Z+3	; 0x03
    2e9a:	8e 5a       	subi	r24, 0xAE	; 174
    2e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9e:	0e 94 82 1c 	call	0x3904	; 0x3904 <eeprom_update_dword>
            return 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	08 95       	ret
        }
    }
    return 0;
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
}
    2ea8:	08 95       	ret

00002eaa <LoadCalFromEEPROM>:

// load a channel calibraion or set default if not valid (0 or 0xFFFFFFFF are not valid for calibration)
// at startup call for each value in range 0..EE_CAL_NUM to fill calMap
// also befor loop do cal_loaded = CAL_CLEAR 
void LoadCalFromEEPROM(uint8_t cal_map) 
{
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	18 2f       	mov	r17, r24
        calMap[cal_map].calibration = eeprom_read_float((float *)(EE_CAL_BASE_ADDR+(EE_CAL_OFFSET*cal_map)));
    2eb2:	84 e0       	ldi	r24, 0x04	; 4
    2eb4:	18 9f       	mul	r17, r24
    2eb6:	e0 01       	movw	r28, r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	ce 01       	movw	r24, r28
    2ebc:	8e 5a       	subi	r24, 0xAE	; 174
    2ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ec0:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <eeprom_read_dword>
    2ec4:	c7 53       	subi	r28, 0x37	; 55
    2ec6:	dc 4f       	sbci	r29, 0xFC	; 252
    2ec8:	68 83       	st	Y, r22
    2eca:	79 83       	std	Y+1, r23	; 0x01
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
    2ece:	9b 83       	std	Y+3, r25	; 0x03
        if ( !IsValidValForCal(cal_map) ) 
    2ed0:	81 2f       	mov	r24, r17
    2ed2:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <IsValidValForCal>
    2ed6:	81 11       	cpse	r24, r1
    2ed8:	38 c0       	rjmp	.+112    	; 0x2f4a <LoadCalFromEEPROM+0xa0>
        {
            if (cal_map == channelMap[ALT_I].cal_map)
    2eda:	11 11       	cpse	r17, r1
    2edc:	0c c0       	rjmp	.+24     	; 0x2ef6 <LoadCalFromEEPROM+0x4c>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))/(0.018*50.0); // ALT_I has  0.018 Ohm sense resistor and gain of 50
    2ede:	84 ee       	ldi	r24, 0xE4	; 228
    2ee0:	98 e3       	ldi	r25, 0x38	; 56
    2ee2:	ae e8       	ldi	r26, 0x8E	; 142
    2ee4:	ba e3       	ldi	r27, 0x3A	; 58
    2ee6:	88 83       	st	Y, r24
    2ee8:	99 83       	std	Y+1, r25	; 0x01
    2eea:	aa 83       	std	Y+2, r26	; 0x02
    2eec:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_0_DEFAULT;
    2eee:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2ef2:	8f 5f       	subi	r24, 0xFF	; 255
    2ef4:	34 c0       	rjmp	.+104    	; 0x2f5e <LoadCalFromEEPROM+0xb4>
            }
            if (cal_map == channelMap[ALT_V].cal_map)
    2ef6:	11 30       	cpi	r17, 0x01	; 1
    2ef8:	61 f4       	brne	.+24     	; 0x2f12 <LoadCalFromEEPROM+0x68>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))*(100+10.0)/10.0; // ALT_V has divider with 100k and 10.0k
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e3       	ldi	r26, 0x30	; 48
    2f00:	bc e3       	ldi	r27, 0x3C	; 60
    2f02:	88 83       	st	Y, r24
    2f04:	99 83       	std	Y+1, r25	; 0x01
    2f06:	aa 83       	std	Y+2, r26	; 0x02
    2f08:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_1_DEFAULT;
    2f0a:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2f0e:	8e 5f       	subi	r24, 0xFE	; 254
    2f10:	26 c0       	rjmp	.+76     	; 0x2f5e <LoadCalFromEEPROM+0xb4>
            }
            if (cal_map == channelMap[PWR_I].cal_map)
    2f12:	12 30       	cpi	r17, 0x02	; 2
    2f14:	61 f4       	brne	.+24     	; 0x2f2e <LoadCalFromEEPROM+0x84>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))/(0.068*50.0); // PWR_I has  0.068 Ohm sense resistor and gain of 50
    2f16:	86 e9       	ldi	r24, 0x96	; 150
    2f18:	96 e9       	ldi	r25, 0x96	; 150
    2f1a:	a6 e9       	ldi	r26, 0x96	; 150
    2f1c:	b9 e3       	ldi	r27, 0x39	; 57
    2f1e:	88 83       	st	Y, r24
    2f20:	99 83       	std	Y+1, r25	; 0x01
    2f22:	aa 83       	std	Y+2, r26	; 0x02
    2f24:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_2_DEFAULT;
    2f26:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2f2a:	8c 5f       	subi	r24, 0xFC	; 252
    2f2c:	18 c0       	rjmp	.+48     	; 0x2f5e <LoadCalFromEEPROM+0xb4>
            }
            if (cal_map == channelMap[PWR_V].cal_map)
    2f2e:	13 30       	cpi	r17, 0x03	; 3
    2f30:	c1 f4       	brne	.+48     	; 0x2f62 <LoadCalFromEEPROM+0xb8>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))*(100+15.8)/15.8; // PWR_V has divider with 100k and 15.8k
    2f32:	8a e1       	ldi	r24, 0x1A	; 26
    2f34:	98 e8       	ldi	r25, 0x88	; 136
    2f36:	aa ee       	ldi	r26, 0xEA	; 234
    2f38:	bb e3       	ldi	r27, 0x3B	; 59
    2f3a:	88 83       	st	Y, r24
    2f3c:	99 83       	std	Y+1, r25	; 0x01
    2f3e:	aa 83       	std	Y+2, r26	; 0x02
    2f40:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_3_DEFAULT;
    2f42:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2f46:	88 5f       	subi	r24, 0xF8	; 248
    2f48:	0a c0       	rjmp	.+20     	; 0x2f5e <LoadCalFromEEPROM+0xb4>
        else
        {
            // calibration from EEPROM is valid, so it has been kept. It is not a default value so
            // clear the CAL_n_DEFAULT bit (0..3) of cal_loaded
            uint8_t mask_for_cal_default_bit = ~(1<<cal_map);
            cal_loaded = cal_loaded & mask_for_cal_default_bit; // now clear the CAL_n_DEFAULT bit
    2f4a:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <cal_loaded>
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <LoadCalFromEEPROM+0xac>
    2f54:	88 0f       	add	r24, r24
    2f56:	1a 95       	dec	r17
    2f58:	ea f7       	brpl	.-6      	; 0x2f54 <LoadCalFromEEPROM+0xaa>
    2f5a:	80 95       	com	r24
    2f5c:	82 23       	and	r24, r18
    2f5e:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <cal_loaded>
        }
}
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	1f 91       	pop	r17
    2f68:	08 95       	ret

00002f6a <ChannelCalFromI2CtoEE>:

// save channel calibration from I2C to EEPROM (if valid)
void ChannelCalFromI2CtoEE(void)
{
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    if (cal_loaded & (CAL_0_TOSAVE | CAL_1_TOSAVE | CAL_2_TOSAVE | CAL_3_TOSAVE) )
    2f70:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2f74:	80 7f       	andi	r24, 0xF0	; 240
    2f76:	a9 f1       	breq	.+106    	; 0x2fe2 <ChannelCalFromI2CtoEE+0x78>
    {
        // channel_with_writebit agree (e.g., writebit set)
        if (channel_with_writebit & 0x80)
    2f78:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <channel_with_writebit>
    2f7c:	87 ff       	sbrs	r24, 7
    2f7e:	31 c0       	rjmp	.+98     	; 0x2fe2 <ChannelCalFromI2CtoEE+0x78>
        {
            uint8_t channel = channel_with_writebit & 0x7F;
    2f80:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <channel_with_writebit>
            // does the channelMap.cal_map agree, e.g., CAL_0_TOSAVE is 0x10
            // ALT_I is 0; channelMap[0].cal_map is 0; finaly (1<<0) == 0x10>>4
            if ( (1<<channelMap[channel].cal_map) == (cal_loaded>>4) )
    2f84:	ef 77       	andi	r30, 0x7F	; 127
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	e5 56       	subi	r30, 0x65	; 101
    2f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8c:	10 81       	ld	r17, Z
    2f8e:	c1 e0       	ldi	r28, 0x01	; 1
    2f90:	d0 e0       	ldi	r29, 0x00	; 0
    2f92:	01 2e       	mov	r0, r17
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <ChannelCalFromI2CtoEE+0x30>
    2f96:	cc 0f       	add	r28, r28
    2f98:	dd 1f       	adc	r29, r29
    2f9a:	0a 94       	dec	r0
    2f9c:	e2 f7       	brpl	.-8      	; 0x2f96 <ChannelCalFromI2CtoEE+0x2c>
    2f9e:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2fa2:	82 95       	swap	r24
    2fa4:	8f 70       	andi	r24, 0x0F	; 15
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	c8 17       	cp	r28, r24
    2faa:	d9 07       	cpc	r29, r25
    2fac:	d1 f4       	brne	.+52     	; 0x2fe2 <ChannelCalFromI2CtoEE+0x78>
            {
                // final check befor trying to save
                if ( IsValidValForCalChannel() )
    2fae:	0e 94 24 17 	call	0x2e48	; 0x2e48 <IsValidValForCalChannel>
    2fb2:	88 23       	and	r24, r24
    2fb4:	81 f0       	breq	.+32     	; 0x2fd6 <ChannelCalFromI2CtoEE+0x6c>
                {
                    if (WriteCalToEE())
    2fb6:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <WriteCalToEE>
    2fba:	88 23       	and	r24, r24
    2fbc:	91 f0       	breq	.+36     	; 0x2fe2 <ChannelCalFromI2CtoEE+0x78>
                    {
                        // clear the CAL_n_TOSAVE bits
                        cal_loaded = cal_loaded & 0x0F;
    2fbe:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2fc2:	8f 70       	andi	r24, 0x0F	; 15
    2fc4:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <cal_loaded>
                        // also clear the correct CAL_n_DEFAULT bit (calibration is not default)
                        uint8_t mask_for_cal_default_bit = ~(1<<channelMap[channel].cal_map);
                        cal_loaded = cal_loaded & mask_for_cal_default_bit; // now clear the CAL_n_DEFAULT bit
    2fc8:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <cal_loaded>
    2fcc:	c0 95       	com	r28
    2fce:	c8 23       	and	r28, r24
    2fd0:	c0 93 c8 03 	sts	0x03C8, r28	; 0x8003c8 <cal_loaded>
                        return; // all done
    2fd4:	06 c0       	rjmp	.+12     	; 0x2fe2 <ChannelCalFromI2CtoEE+0x78>
                    }
                }
                else
                {
                    LoadCalFromEEPROM(channelMap[channel].cal_map); // ignore value since it is not valid
    2fd6:	81 2f       	mov	r24, r17
                }
            }       
        }
    }
}
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
                        return; // all done
                    }
                }
                else
                {
                    LoadCalFromEEPROM(channelMap[channel].cal_map); // ignore value since it is not valid
    2fde:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <LoadCalFromEEPROM>
                }
            }       
        }
    }
}
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	1f 91       	pop	r17
    2fe8:	08 95       	ret

00002fea <uart0_putchar>:
// putchar for sending to stdio stream
int uart0_putchar(char c, FILE *stream)
{
    uint16_t next_index;

    next_index  = (TxHead + 1) & ( UART0_TX0_SIZE - 1);
    2fea:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <TxHead>
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	2f 5f       	subi	r18, 0xFF	; 255
    2ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff4:	2f 71       	andi	r18, 0x1F	; 31
    2ff6:	33 27       	eor	r19, r19

    while ( next_index == TxTail ) 
    2ff8:	40 91 ab 02 	lds	r20, 0x02AB	; 0x8002ab <TxTail>
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	24 17       	cp	r18, r20
    3000:	35 07       	cpc	r19, r21
    3002:	d1 f3       	breq	.-12     	; 0x2ff8 <uart0_putchar+0xe>
        ;// busy wait for free space in buffer
    }

    // I put a carriage return and newline in the printf string  
    // so I don't use UART0_TX_REPLACE_NL_WITH_CR
    if ( (options & UART0_TX_REPLACE_NL_WITH_CR) && (c == '\n') )
    3004:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <options>
    3008:	f9 01       	movw	r30, r18
    300a:	e3 53       	subi	r30, 0x33	; 51
    300c:	fd 4f       	sbci	r31, 0xFD	; 253
    300e:	90 ff       	sbrs	r25, 0
    3010:	03 c0       	rjmp	.+6      	; 0x3018 <uart0_putchar+0x2e>
    3012:	8a 30       	cpi	r24, 0x0A	; 10
    3014:	09 f4       	brne	.+2      	; 0x3018 <uart0_putchar+0x2e>
    {
        TxBuf[next_index] = (uint8_t)'\r';
    3016:	8d e0       	ldi	r24, 0x0D	; 13
    }
    else
    {
        TxBuf[next_index] = (uint8_t) c;
    3018:	80 83       	st	Z, r24
    }
    TxHead = next_index;
    301a:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <TxHead>

    // Data Register Empty Interrupt Enable (UDRIE)
    // When the UDRIE bit in UCSRnB is written to '1', the USART Data Register Empty Interrupt 
    // will be executed as long as UDRE is set (provided that global interrupts are enabled).
    UCSR0B |= (1<<UDRIE0);
    301e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3022:	80 62       	ori	r24, 0x20	; 32
    3024:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    return 0;
}
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	08 95       	ret

0000302e <__vector_18>:

static uint8_t options;
volatile uint8_t UART0_error;

ISR(USART0_RX_vect)
{
    302e:	1f 92       	push	r1
    3030:	0f 92       	push	r0
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	0f 92       	push	r0
    3036:	11 24       	eor	r1, r1
    3038:	2f 93       	push	r18
    303a:	3f 93       	push	r19
    303c:	4f 93       	push	r20
    303e:	5f 93       	push	r21
    3040:	8f 93       	push	r24
    3042:	9f 93       	push	r25
    3044:	ef 93       	push	r30
    3046:	ff 93       	push	r31
    uint16_t next_index;
    uint8_t data;
 
    // check USARTn Control and Status Register A for Frame Error (FE) or Data OverRun (DOR)
    uint8_t last_status = (UCSR0A & ((1<<FE0)|(1<<DOR0)) );
    3048:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    304c:	28 71       	andi	r18, 0x18	; 24

    // above errors are valid until UDR0 is read, e.g., now
    data = UDR0;
    304e:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    next_index = ( RxHead + 1) & ( UART0_RX0_SIZE - 1);
    3052:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <RxHead>
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	8f 71       	andi	r24, 0x1F	; 31
    305c:	99 27       	eor	r25, r25
    
    if ( next_index == RxTail ) 
    305e:	40 91 a9 02 	lds	r20, 0x02A9	; 0x8002a9 <RxTail>
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	84 17       	cp	r24, r20
    3066:	95 07       	cpc	r25, r21
    3068:	11 f4       	brne	.+4      	; 0x306e <__vector_18+0x40>
    {
        last_status += UART0_BUFFER_OVERFLOW;
    306a:	2e 5f       	subi	r18, 0xFE	; 254
    306c:	06 c0       	rjmp	.+12     	; 0x307a <__vector_18+0x4c>
    } 
    else 
    {
        RxHead = next_index;
    306e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <RxHead>
        RxBuf[next_index] = data;
    3072:	fc 01       	movw	r30, r24
    3074:	e3 55       	subi	r30, 0x53	; 83
    3076:	fd 4f       	sbci	r31, 0xFD	; 253
    3078:	30 83       	st	Z, r19
    }
    UART0_error = last_status;   
    307a:	20 93 da 03 	sts	0x03DA, r18	; 0x8003da <UART0_error>
}
    307e:	ff 91       	pop	r31
    3080:	ef 91       	pop	r30
    3082:	9f 91       	pop	r25
    3084:	8f 91       	pop	r24
    3086:	5f 91       	pop	r21
    3088:	4f 91       	pop	r20
    308a:	3f 91       	pop	r19
    308c:	2f 91       	pop	r18
    308e:	0f 90       	pop	r0
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	0f 90       	pop	r0
    3094:	1f 90       	pop	r1
    3096:	18 95       	reti

00003098 <__vector_19>:


ISR(USART0_UDRE_vect)
{
    3098:	1f 92       	push	r1
    309a:	0f 92       	push	r0
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	0f 92       	push	r0
    30a0:	11 24       	eor	r1, r1
    30a2:	8f 93       	push	r24
    30a4:	9f 93       	push	r25
    30a6:	ef 93       	push	r30
    30a8:	ff 93       	push	r31
    uint16_t tmptail;

    if ( TxHead != TxTail) 
    30aa:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <TxHead>
    30ae:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <TxTail>
    30b2:	98 17       	cp	r25, r24
    30b4:	79 f0       	breq	.+30     	; 0x30d4 <__vector_19+0x3c>
    {
        tmptail = (TxTail + 1) & ( UART0_TX0_SIZE - 1); // calculate and store new buffer index
    30b6:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <TxTail>
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	8f 71       	andi	r24, 0x1F	; 31
    30c0:	99 27       	eor	r25, r25
        TxTail = tmptail;
    30c2:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <TxTail>
        UDR0 = TxBuf[tmptail]; // get one byte from buffer and send it with UART
    30c6:	fc 01       	movw	r30, r24
    30c8:	e3 53       	subi	r30, 0x33	; 51
    30ca:	fd 4f       	sbci	r31, 0xFD	; 253
    30cc:	80 81       	ld	r24, Z
    30ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    30d2:	05 c0       	rjmp	.+10     	; 0x30de <__vector_19+0x46>
    } 
    else 
    {
        UCSR0B &= ~(1<<UDRIE0); // tx buffer empty, disable UDRE interrupt
    30d4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    30d8:	8f 7d       	andi	r24, 0xDF	; 223
    30da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    30de:	ff 91       	pop	r31
    30e0:	ef 91       	pop	r30
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti

000030f0 <uart0_available>:
}

// Number of bytes available in the receive buffer.
int uart0_available(void)
{
    return (UART0_RX0_SIZE + RxHead - RxTail) & ( UART0_RX0_SIZE - 1);
    30f0:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <RxHead>
    30f4:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <RxTail>
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	80 96       	adiw	r24, 0x20	; 32
    30fc:	82 1b       	sub	r24, r18
    30fe:	91 09       	sbc	r25, r1
}
    3100:	8f 71       	andi	r24, 0x1F	; 31
    3102:	99 27       	eor	r25, r25
    3104:	08 95       	ret

00003106 <uart0_getchar>:
int uart0_getchar(FILE *stream)
{
    uint16_t next_index;
    uint8_t data;

    while( !(uart0_available()) );  // wait for input
    3106:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart0_available>
    310a:	89 2b       	or	r24, r25
    310c:	e1 f3       	breq	.-8      	; 0x3106 <uart0_getchar>

    if ( RxHead == RxTail ) 
    310e:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <RxHead>
    3112:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <RxTail>
    3116:	98 13       	cpse	r25, r24
    3118:	07 c0       	rjmp	.+14     	; 0x3128 <uart0_getchar+0x22>
    {
        UART0_error += UART0_NO_DATA;
    311a:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <UART0_error>
    311e:	8f 5f       	subi	r24, 0xFF	; 255
    3120:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <UART0_error>
        data = 0;
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	0c c0       	rjmp	.+24     	; 0x3140 <uart0_getchar+0x3a>
    }
    else
    {
        next_index = (RxTail + 1) & ( UART0_RX0_SIZE - 1);
    3128:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <RxTail>
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	8f 71       	andi	r24, 0x1F	; 31
    3132:	99 27       	eor	r25, r25
        RxTail = next_index;
    3134:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <RxTail>
        data = RxBuf[next_index]; // get byte from rx buffer
    3138:	fc 01       	movw	r30, r24
    313a:	e3 55       	subi	r30, 0x53	; 83
    313c:	fd 4f       	sbci	r31, 0xFD	; 253
    313e:	80 81       	ld	r24, Z
    }

    // I use UART0_RX_REPLACE_CR_WITH_NL to simplify command parsing from a host 
    if ( (options & UART0_RX_REPLACE_CR_WITH_NL) && (data == '\r') ) data = '\n';
    3140:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <options>
    3144:	91 ff       	sbrs	r25, 1
    3146:	03 c0       	rjmp	.+6      	; 0x314e <uart0_getchar+0x48>
    3148:	8d 30       	cpi	r24, 0x0D	; 13
    314a:	09 f4       	brne	.+2      	; 0x314e <uart0_getchar+0x48>
    314c:	8a e0       	ldi	r24, 0x0A	; 10
    return (int) data;
}
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	08 95       	ret

00003152 <uart0_init>:
static FILE uartstream0_f = FDEV_SETUP_STREAM(uart0_putchar, uart0_getchar, _FDEV_SETUP_RW);

// Initialize the UART and return file handle, disconnect UART if baudrate is zero.
// choices e.g., UART0_TX_REPLACE_NL_WITH_CR & UART0_RX_REPLACE_CR_WITH_NL
FILE *uart0_init(uint32_t baudrate, uint8_t choices)
{
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	8b 01       	movw	r16, r22
    3162:	9c 01       	movw	r18, r24
    3164:	c4 2f       	mov	r28, r20
    uint16_t ubrr = UART0_BAUD_SELECT(baudrate);
    3166:	6b 01       	movw	r12, r22
    3168:	7c 01       	movw	r14, r24
    316a:	80 e6       	ldi	r24, 0x60	; 96
    316c:	c8 0e       	add	r12, r24
    316e:	83 ee       	ldi	r24, 0xE3	; 227
    3170:	d8 1e       	adc	r13, r24
    3172:	86 e1       	ldi	r24, 0x16	; 22
    3174:	e8 1e       	adc	r14, r24
    3176:	f1 1c       	adc	r15, r1
    3178:	c7 01       	movw	r24, r14
    317a:	b6 01       	movw	r22, r12
    317c:	43 e0       	ldi	r20, 0x03	; 3
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	4a 95       	dec	r20
    3188:	d1 f7       	brne	.-12     	; 0x317e <uart0_init+0x2c>
    318a:	a9 01       	movw	r20, r18
    318c:	98 01       	movw	r18, r16
    318e:	e4 e0       	ldi	r30, 0x04	; 4
    3190:	22 0f       	add	r18, r18
    3192:	33 1f       	adc	r19, r19
    3194:	44 1f       	adc	r20, r20
    3196:	55 1f       	adc	r21, r21
    3198:	ea 95       	dec	r30
    319a:	d1 f7       	brne	.-12     	; 0x3190 <uart0_init+0x3e>
    319c:	0e 94 13 19 	call	0x3226	; 0x3226 <__udivmodsi4>
    31a0:	21 50       	subi	r18, 0x01	; 1
    31a2:	31 09       	sbc	r19, r1
    
    TxHead = 0;
    31a4:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <TxHead>
    TxTail = 0;
    31a8:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <TxTail>
    RxHead = 0;
    31ac:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <RxHead>
    RxTail = 0;
    31b0:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <RxTail>

    // disconnect UART if baudrate is zero (ubrr is 0/-1 in this case)
    if (ubrr == 0)
    31b4:	21 15       	cp	r18, r1
    31b6:	31 05       	cpc	r19, r1
    31b8:	31 f4       	brne	.+12     	; 0x31c6 <uart0_init+0x74>
    {
        uint8_t local_UCSR0B = UCSR0B & ~(1<<TXEN0); // trun off the transmiter
    31ba:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    31be:	87 7f       	andi	r24, 0xF7	; 247
        UCSR0B = local_UCSR0B;
    31c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    31c4:	10 c0       	rjmp	.+32     	; 0x31e6 <uart0_init+0x94>
    }
    else
    {
        if (ubrr & 0x8000) 
    31c6:	37 ff       	sbrs	r19, 7
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <uart0_init+0x80>
        {
            UCSR0A = (1<<U2X0);  //Double speed mode (status register)
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
            ubrr &= ~0x8000;
    31d0:	3f 77       	andi	r19, 0x7F	; 127
        }
        UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); // enable TX and RX
    31d2:	88 e9       	ldi	r24, 0x98	; 152
    31d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
        UCSR0C = (3<<UCSZ00); // control frame format asynchronous, 8data, no parity, 1stop bit
    31d8:	86 e0       	ldi	r24, 0x06	; 6
    31da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
        UBRR0H = (uint8_t)(ubrr>>8);
    31de:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
        UBRR0L = (uint8_t) ubrr;
    31e2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    }

    options = choices;
    31e6:	c0 93 a8 02 	sts	0x02A8, r28	; 0x8002a8 <options>

    return &uartstream0_f;
}
    31ea:	88 e0       	ldi	r24, 0x08	; 8
    31ec:	91 e0       	ldi	r25, 0x01	; 1
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	df 90       	pop	r13
    31fa:	cf 90       	pop	r12
    31fc:	08 95       	ret

000031fe <__divmodhi4>:
    31fe:	97 fb       	bst	r25, 7
    3200:	07 2e       	mov	r0, r23
    3202:	16 f4       	brtc	.+4      	; 0x3208 <__divmodhi4+0xa>
    3204:	00 94       	com	r0
    3206:	07 d0       	rcall	.+14     	; 0x3216 <__divmodhi4_neg1>
    3208:	77 fd       	sbrc	r23, 7
    320a:	09 d0       	rcall	.+18     	; 0x321e <__divmodhi4_neg2>
    320c:	0e 94 35 19 	call	0x326a	; 0x326a <__udivmodhi4>
    3210:	07 fc       	sbrc	r0, 7
    3212:	05 d0       	rcall	.+10     	; 0x321e <__divmodhi4_neg2>
    3214:	3e f4       	brtc	.+14     	; 0x3224 <__divmodhi4_exit>

00003216 <__divmodhi4_neg1>:
    3216:	90 95       	com	r25
    3218:	81 95       	neg	r24
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	08 95       	ret

0000321e <__divmodhi4_neg2>:
    321e:	70 95       	com	r23
    3220:	61 95       	neg	r22
    3222:	7f 4f       	sbci	r23, 0xFF	; 255

00003224 <__divmodhi4_exit>:
    3224:	08 95       	ret

00003226 <__udivmodsi4>:
    3226:	a1 e2       	ldi	r26, 0x21	; 33
    3228:	1a 2e       	mov	r1, r26
    322a:	aa 1b       	sub	r26, r26
    322c:	bb 1b       	sub	r27, r27
    322e:	fd 01       	movw	r30, r26
    3230:	0d c0       	rjmp	.+26     	; 0x324c <__udivmodsi4_ep>

00003232 <__udivmodsi4_loop>:
    3232:	aa 1f       	adc	r26, r26
    3234:	bb 1f       	adc	r27, r27
    3236:	ee 1f       	adc	r30, r30
    3238:	ff 1f       	adc	r31, r31
    323a:	a2 17       	cp	r26, r18
    323c:	b3 07       	cpc	r27, r19
    323e:	e4 07       	cpc	r30, r20
    3240:	f5 07       	cpc	r31, r21
    3242:	20 f0       	brcs	.+8      	; 0x324c <__udivmodsi4_ep>
    3244:	a2 1b       	sub	r26, r18
    3246:	b3 0b       	sbc	r27, r19
    3248:	e4 0b       	sbc	r30, r20
    324a:	f5 0b       	sbc	r31, r21

0000324c <__udivmodsi4_ep>:
    324c:	66 1f       	adc	r22, r22
    324e:	77 1f       	adc	r23, r23
    3250:	88 1f       	adc	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	1a 94       	dec	r1
    3256:	69 f7       	brne	.-38     	; 0x3232 <__udivmodsi4_loop>
    3258:	60 95       	com	r22
    325a:	70 95       	com	r23
    325c:	80 95       	com	r24
    325e:	90 95       	com	r25
    3260:	9b 01       	movw	r18, r22
    3262:	ac 01       	movw	r20, r24
    3264:	bd 01       	movw	r22, r26
    3266:	cf 01       	movw	r24, r30
    3268:	08 95       	ret

0000326a <__udivmodhi4>:
    326a:	aa 1b       	sub	r26, r26
    326c:	bb 1b       	sub	r27, r27
    326e:	51 e1       	ldi	r21, 0x11	; 17
    3270:	07 c0       	rjmp	.+14     	; 0x3280 <__udivmodhi4_ep>

00003272 <__udivmodhi4_loop>:
    3272:	aa 1f       	adc	r26, r26
    3274:	bb 1f       	adc	r27, r27
    3276:	a6 17       	cp	r26, r22
    3278:	b7 07       	cpc	r27, r23
    327a:	10 f0       	brcs	.+4      	; 0x3280 <__udivmodhi4_ep>
    327c:	a6 1b       	sub	r26, r22
    327e:	b7 0b       	sbc	r27, r23

00003280 <__udivmodhi4_ep>:
    3280:	88 1f       	adc	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	5a 95       	dec	r21
    3286:	a9 f7       	brne	.-22     	; 0x3272 <__udivmodhi4_loop>
    3288:	80 95       	com	r24
    328a:	90 95       	com	r25
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	08 95       	ret

00003292 <__cmpsf2>:
    3292:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_cmp>
    3296:	08 f4       	brcc	.+2      	; 0x329a <__cmpsf2+0x8>
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	08 95       	ret

0000329c <__fp_cmp>:
    329c:	99 0f       	add	r25, r25
    329e:	00 08       	sbc	r0, r0
    32a0:	55 0f       	add	r21, r21
    32a2:	aa 0b       	sbc	r26, r26
    32a4:	e0 e8       	ldi	r30, 0x80	; 128
    32a6:	fe ef       	ldi	r31, 0xFE	; 254
    32a8:	16 16       	cp	r1, r22
    32aa:	17 06       	cpc	r1, r23
    32ac:	e8 07       	cpc	r30, r24
    32ae:	f9 07       	cpc	r31, r25
    32b0:	c0 f0       	brcs	.+48     	; 0x32e2 <__fp_cmp+0x46>
    32b2:	12 16       	cp	r1, r18
    32b4:	13 06       	cpc	r1, r19
    32b6:	e4 07       	cpc	r30, r20
    32b8:	f5 07       	cpc	r31, r21
    32ba:	98 f0       	brcs	.+38     	; 0x32e2 <__fp_cmp+0x46>
    32bc:	62 1b       	sub	r22, r18
    32be:	73 0b       	sbc	r23, r19
    32c0:	84 0b       	sbc	r24, r20
    32c2:	95 0b       	sbc	r25, r21
    32c4:	39 f4       	brne	.+14     	; 0x32d4 <__fp_cmp+0x38>
    32c6:	0a 26       	eor	r0, r26
    32c8:	61 f0       	breq	.+24     	; 0x32e2 <__fp_cmp+0x46>
    32ca:	23 2b       	or	r18, r19
    32cc:	24 2b       	or	r18, r20
    32ce:	25 2b       	or	r18, r21
    32d0:	21 f4       	brne	.+8      	; 0x32da <__fp_cmp+0x3e>
    32d2:	08 95       	ret
    32d4:	0a 26       	eor	r0, r26
    32d6:	09 f4       	brne	.+2      	; 0x32da <__fp_cmp+0x3e>
    32d8:	a1 40       	sbci	r26, 0x01	; 1
    32da:	a6 95       	lsr	r26
    32dc:	8f ef       	ldi	r24, 0xFF	; 255
    32de:	81 1d       	adc	r24, r1
    32e0:	81 1d       	adc	r24, r1
    32e2:	08 95       	ret

000032e4 <__gesf2>:
    32e4:	0e 94 4e 19 	call	0x329c	; 0x329c <__fp_cmp>
    32e8:	08 f4       	brcc	.+2      	; 0x32ec <__gesf2+0x8>
    32ea:	8f ef       	ldi	r24, 0xFF	; 255
    32ec:	08 95       	ret

000032ee <fgetc>:
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	ec 01       	movw	r28, r24
    32f4:	2b 81       	ldd	r18, Y+3	; 0x03
    32f6:	20 ff       	sbrs	r18, 0
    32f8:	33 c0       	rjmp	.+102    	; 0x3360 <fgetc+0x72>
    32fa:	26 ff       	sbrs	r18, 6
    32fc:	0a c0       	rjmp	.+20     	; 0x3312 <fgetc+0x24>
    32fe:	2f 7b       	andi	r18, 0xBF	; 191
    3300:	2b 83       	std	Y+3, r18	; 0x03
    3302:	8e 81       	ldd	r24, Y+6	; 0x06
    3304:	9f 81       	ldd	r25, Y+7	; 0x07
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	9f 83       	std	Y+7, r25	; 0x07
    330a:	8e 83       	std	Y+6, r24	; 0x06
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	29 c0       	rjmp	.+82     	; 0x3364 <fgetc+0x76>
    3312:	22 ff       	sbrs	r18, 2
    3314:	0f c0       	rjmp	.+30     	; 0x3334 <fgetc+0x46>
    3316:	e8 81       	ld	r30, Y
    3318:	f9 81       	ldd	r31, Y+1	; 0x01
    331a:	80 81       	ld	r24, Z
    331c:	08 2e       	mov	r0, r24
    331e:	00 0c       	add	r0, r0
    3320:	99 0b       	sbc	r25, r25
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	19 f4       	brne	.+6      	; 0x332c <fgetc+0x3e>
    3326:	20 62       	ori	r18, 0x20	; 32
    3328:	2b 83       	std	Y+3, r18	; 0x03
    332a:	1a c0       	rjmp	.+52     	; 0x3360 <fgetc+0x72>
    332c:	31 96       	adiw	r30, 0x01	; 1
    332e:	f9 83       	std	Y+1, r31	; 0x01
    3330:	e8 83       	st	Y, r30
    3332:	0e c0       	rjmp	.+28     	; 0x3350 <fgetc+0x62>
    3334:	ea 85       	ldd	r30, Y+10	; 0x0a
    3336:	fb 85       	ldd	r31, Y+11	; 0x0b
    3338:	09 95       	icall
    333a:	97 ff       	sbrs	r25, 7
    333c:	09 c0       	rjmp	.+18     	; 0x3350 <fgetc+0x62>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	11 f0       	breq	.+4      	; 0x3348 <fgetc+0x5a>
    3344:	80 e2       	ldi	r24, 0x20	; 32
    3346:	01 c0       	rjmp	.+2      	; 0x334a <fgetc+0x5c>
    3348:	80 e1       	ldi	r24, 0x10	; 16
    334a:	82 2b       	or	r24, r18
    334c:	8b 83       	std	Y+3, r24	; 0x03
    334e:	08 c0       	rjmp	.+16     	; 0x3360 <fgetc+0x72>
    3350:	2e 81       	ldd	r18, Y+6	; 0x06
    3352:	3f 81       	ldd	r19, Y+7	; 0x07
    3354:	2f 5f       	subi	r18, 0xFF	; 255
    3356:	3f 4f       	sbci	r19, 0xFF	; 255
    3358:	3f 83       	std	Y+7, r19	; 0x07
    335a:	2e 83       	std	Y+6, r18	; 0x06
    335c:	99 27       	eor	r25, r25
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <fgetc+0x76>
    3360:	8f ef       	ldi	r24, 0xFF	; 255
    3362:	9f ef       	ldi	r25, 0xFF	; 255
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <printf>:
    336a:	a0 e0       	ldi	r26, 0x00	; 0
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	eb eb       	ldi	r30, 0xBB	; 187
    3370:	f9 e1       	ldi	r31, 0x19	; 25
    3372:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__prologue_saves__+0x20>
    3376:	ae 01       	movw	r20, r28
    3378:	4b 5f       	subi	r20, 0xFB	; 251
    337a:	5f 4f       	sbci	r21, 0xFF	; 255
    337c:	fa 01       	movw	r30, r20
    337e:	61 91       	ld	r22, Z+
    3380:	71 91       	ld	r23, Z+
    3382:	af 01       	movw	r20, r30
    3384:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <__iob+0x2>
    3388:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <__iob+0x3>
    338c:	0e 94 cb 19 	call	0x3396	; 0x3396 <vfprintf>
    3390:	e2 e0       	ldi	r30, 0x02	; 2
    3392:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__epilogue_restores__+0x20>

00003396 <vfprintf>:
    3396:	ab e0       	ldi	r26, 0x0B	; 11
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e1 ed       	ldi	r30, 0xD1	; 209
    339c:	f9 e1       	ldi	r31, 0x19	; 25
    339e:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__prologue_saves__>
    33a2:	6c 01       	movw	r12, r24
    33a4:	7b 01       	movw	r14, r22
    33a6:	8a 01       	movw	r16, r20
    33a8:	fc 01       	movw	r30, r24
    33aa:	17 82       	std	Z+7, r1	; 0x07
    33ac:	16 82       	std	Z+6, r1	; 0x06
    33ae:	83 81       	ldd	r24, Z+3	; 0x03
    33b0:	81 ff       	sbrs	r24, 1
    33b2:	cc c1       	rjmp	.+920    	; 0x374c <vfprintf+0x3b6>
    33b4:	ce 01       	movw	r24, r28
    33b6:	01 96       	adiw	r24, 0x01	; 1
    33b8:	3c 01       	movw	r6, r24
    33ba:	f6 01       	movw	r30, r12
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	f7 01       	movw	r30, r14
    33c0:	93 fd       	sbrc	r25, 3
    33c2:	85 91       	lpm	r24, Z+
    33c4:	93 ff       	sbrs	r25, 3
    33c6:	81 91       	ld	r24, Z+
    33c8:	7f 01       	movw	r14, r30
    33ca:	88 23       	and	r24, r24
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <vfprintf+0x3a>
    33ce:	ba c1       	rjmp	.+884    	; 0x3744 <vfprintf+0x3ae>
    33d0:	85 32       	cpi	r24, 0x25	; 37
    33d2:	39 f4       	brne	.+14     	; 0x33e2 <vfprintf+0x4c>
    33d4:	93 fd       	sbrc	r25, 3
    33d6:	85 91       	lpm	r24, Z+
    33d8:	93 ff       	sbrs	r25, 3
    33da:	81 91       	ld	r24, Z+
    33dc:	7f 01       	movw	r14, r30
    33de:	85 32       	cpi	r24, 0x25	; 37
    33e0:	29 f4       	brne	.+10     	; 0x33ec <vfprintf+0x56>
    33e2:	b6 01       	movw	r22, r12
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    33ea:	e7 cf       	rjmp	.-50     	; 0x33ba <vfprintf+0x24>
    33ec:	91 2c       	mov	r9, r1
    33ee:	21 2c       	mov	r2, r1
    33f0:	31 2c       	mov	r3, r1
    33f2:	ff e1       	ldi	r31, 0x1F	; 31
    33f4:	f3 15       	cp	r31, r3
    33f6:	d8 f0       	brcs	.+54     	; 0x342e <vfprintf+0x98>
    33f8:	8b 32       	cpi	r24, 0x2B	; 43
    33fa:	79 f0       	breq	.+30     	; 0x341a <vfprintf+0x84>
    33fc:	38 f4       	brcc	.+14     	; 0x340c <vfprintf+0x76>
    33fe:	80 32       	cpi	r24, 0x20	; 32
    3400:	79 f0       	breq	.+30     	; 0x3420 <vfprintf+0x8a>
    3402:	83 32       	cpi	r24, 0x23	; 35
    3404:	a1 f4       	brne	.+40     	; 0x342e <vfprintf+0x98>
    3406:	23 2d       	mov	r18, r3
    3408:	20 61       	ori	r18, 0x10	; 16
    340a:	1d c0       	rjmp	.+58     	; 0x3446 <vfprintf+0xb0>
    340c:	8d 32       	cpi	r24, 0x2D	; 45
    340e:	61 f0       	breq	.+24     	; 0x3428 <vfprintf+0x92>
    3410:	80 33       	cpi	r24, 0x30	; 48
    3412:	69 f4       	brne	.+26     	; 0x342e <vfprintf+0x98>
    3414:	23 2d       	mov	r18, r3
    3416:	21 60       	ori	r18, 0x01	; 1
    3418:	16 c0       	rjmp	.+44     	; 0x3446 <vfprintf+0xb0>
    341a:	83 2d       	mov	r24, r3
    341c:	82 60       	ori	r24, 0x02	; 2
    341e:	38 2e       	mov	r3, r24
    3420:	e3 2d       	mov	r30, r3
    3422:	e4 60       	ori	r30, 0x04	; 4
    3424:	3e 2e       	mov	r3, r30
    3426:	2a c0       	rjmp	.+84     	; 0x347c <vfprintf+0xe6>
    3428:	f3 2d       	mov	r31, r3
    342a:	f8 60       	ori	r31, 0x08	; 8
    342c:	1d c0       	rjmp	.+58     	; 0x3468 <vfprintf+0xd2>
    342e:	37 fc       	sbrc	r3, 7
    3430:	2d c0       	rjmp	.+90     	; 0x348c <vfprintf+0xf6>
    3432:	20 ed       	ldi	r18, 0xD0	; 208
    3434:	28 0f       	add	r18, r24
    3436:	2a 30       	cpi	r18, 0x0A	; 10
    3438:	40 f0       	brcs	.+16     	; 0x344a <vfprintf+0xb4>
    343a:	8e 32       	cpi	r24, 0x2E	; 46
    343c:	b9 f4       	brne	.+46     	; 0x346c <vfprintf+0xd6>
    343e:	36 fc       	sbrc	r3, 6
    3440:	81 c1       	rjmp	.+770    	; 0x3744 <vfprintf+0x3ae>
    3442:	23 2d       	mov	r18, r3
    3444:	20 64       	ori	r18, 0x40	; 64
    3446:	32 2e       	mov	r3, r18
    3448:	19 c0       	rjmp	.+50     	; 0x347c <vfprintf+0xe6>
    344a:	36 fe       	sbrs	r3, 6
    344c:	06 c0       	rjmp	.+12     	; 0x345a <vfprintf+0xc4>
    344e:	8a e0       	ldi	r24, 0x0A	; 10
    3450:	98 9e       	mul	r9, r24
    3452:	20 0d       	add	r18, r0
    3454:	11 24       	eor	r1, r1
    3456:	92 2e       	mov	r9, r18
    3458:	11 c0       	rjmp	.+34     	; 0x347c <vfprintf+0xe6>
    345a:	ea e0       	ldi	r30, 0x0A	; 10
    345c:	2e 9e       	mul	r2, r30
    345e:	20 0d       	add	r18, r0
    3460:	11 24       	eor	r1, r1
    3462:	22 2e       	mov	r2, r18
    3464:	f3 2d       	mov	r31, r3
    3466:	f0 62       	ori	r31, 0x20	; 32
    3468:	3f 2e       	mov	r3, r31
    346a:	08 c0       	rjmp	.+16     	; 0x347c <vfprintf+0xe6>
    346c:	8c 36       	cpi	r24, 0x6C	; 108
    346e:	21 f4       	brne	.+8      	; 0x3478 <vfprintf+0xe2>
    3470:	83 2d       	mov	r24, r3
    3472:	80 68       	ori	r24, 0x80	; 128
    3474:	38 2e       	mov	r3, r24
    3476:	02 c0       	rjmp	.+4      	; 0x347c <vfprintf+0xe6>
    3478:	88 36       	cpi	r24, 0x68	; 104
    347a:	41 f4       	brne	.+16     	; 0x348c <vfprintf+0xf6>
    347c:	f7 01       	movw	r30, r14
    347e:	93 fd       	sbrc	r25, 3
    3480:	85 91       	lpm	r24, Z+
    3482:	93 ff       	sbrs	r25, 3
    3484:	81 91       	ld	r24, Z+
    3486:	7f 01       	movw	r14, r30
    3488:	81 11       	cpse	r24, r1
    348a:	b3 cf       	rjmp	.-154    	; 0x33f2 <vfprintf+0x5c>
    348c:	98 2f       	mov	r25, r24
    348e:	9f 7d       	andi	r25, 0xDF	; 223
    3490:	95 54       	subi	r25, 0x45	; 69
    3492:	93 30       	cpi	r25, 0x03	; 3
    3494:	28 f4       	brcc	.+10     	; 0x34a0 <vfprintf+0x10a>
    3496:	0c 5f       	subi	r16, 0xFC	; 252
    3498:	1f 4f       	sbci	r17, 0xFF	; 255
    349a:	9f e3       	ldi	r25, 0x3F	; 63
    349c:	99 83       	std	Y+1, r25	; 0x01
    349e:	0d c0       	rjmp	.+26     	; 0x34ba <vfprintf+0x124>
    34a0:	83 36       	cpi	r24, 0x63	; 99
    34a2:	31 f0       	breq	.+12     	; 0x34b0 <vfprintf+0x11a>
    34a4:	83 37       	cpi	r24, 0x73	; 115
    34a6:	71 f0       	breq	.+28     	; 0x34c4 <vfprintf+0x12e>
    34a8:	83 35       	cpi	r24, 0x53	; 83
    34aa:	09 f0       	breq	.+2      	; 0x34ae <vfprintf+0x118>
    34ac:	59 c0       	rjmp	.+178    	; 0x3560 <vfprintf+0x1ca>
    34ae:	21 c0       	rjmp	.+66     	; 0x34f2 <vfprintf+0x15c>
    34b0:	f8 01       	movw	r30, r16
    34b2:	80 81       	ld	r24, Z
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	0e 5f       	subi	r16, 0xFE	; 254
    34b8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ba:	88 24       	eor	r8, r8
    34bc:	83 94       	inc	r8
    34be:	91 2c       	mov	r9, r1
    34c0:	53 01       	movw	r10, r6
    34c2:	13 c0       	rjmp	.+38     	; 0x34ea <vfprintf+0x154>
    34c4:	28 01       	movw	r4, r16
    34c6:	f2 e0       	ldi	r31, 0x02	; 2
    34c8:	4f 0e       	add	r4, r31
    34ca:	51 1c       	adc	r5, r1
    34cc:	f8 01       	movw	r30, r16
    34ce:	a0 80       	ld	r10, Z
    34d0:	b1 80       	ldd	r11, Z+1	; 0x01
    34d2:	36 fe       	sbrs	r3, 6
    34d4:	03 c0       	rjmp	.+6      	; 0x34dc <vfprintf+0x146>
    34d6:	69 2d       	mov	r22, r9
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <vfprintf+0x14a>
    34dc:	6f ef       	ldi	r22, 0xFF	; 255
    34de:	7f ef       	ldi	r23, 0xFF	; 255
    34e0:	c5 01       	movw	r24, r10
    34e2:	0e 94 b7 1b 	call	0x376e	; 0x376e <strnlen>
    34e6:	4c 01       	movw	r8, r24
    34e8:	82 01       	movw	r16, r4
    34ea:	f3 2d       	mov	r31, r3
    34ec:	ff 77       	andi	r31, 0x7F	; 127
    34ee:	3f 2e       	mov	r3, r31
    34f0:	16 c0       	rjmp	.+44     	; 0x351e <vfprintf+0x188>
    34f2:	28 01       	movw	r4, r16
    34f4:	22 e0       	ldi	r18, 0x02	; 2
    34f6:	42 0e       	add	r4, r18
    34f8:	51 1c       	adc	r5, r1
    34fa:	f8 01       	movw	r30, r16
    34fc:	a0 80       	ld	r10, Z
    34fe:	b1 80       	ldd	r11, Z+1	; 0x01
    3500:	36 fe       	sbrs	r3, 6
    3502:	03 c0       	rjmp	.+6      	; 0x350a <vfprintf+0x174>
    3504:	69 2d       	mov	r22, r9
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	02 c0       	rjmp	.+4      	; 0x350e <vfprintf+0x178>
    350a:	6f ef       	ldi	r22, 0xFF	; 255
    350c:	7f ef       	ldi	r23, 0xFF	; 255
    350e:	c5 01       	movw	r24, r10
    3510:	0e 94 ac 1b 	call	0x3758	; 0x3758 <strnlen_P>
    3514:	4c 01       	movw	r8, r24
    3516:	f3 2d       	mov	r31, r3
    3518:	f0 68       	ori	r31, 0x80	; 128
    351a:	3f 2e       	mov	r3, r31
    351c:	82 01       	movw	r16, r4
    351e:	33 fc       	sbrc	r3, 3
    3520:	1b c0       	rjmp	.+54     	; 0x3558 <vfprintf+0x1c2>
    3522:	82 2d       	mov	r24, r2
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	88 16       	cp	r8, r24
    3528:	99 06       	cpc	r9, r25
    352a:	b0 f4       	brcc	.+44     	; 0x3558 <vfprintf+0x1c2>
    352c:	b6 01       	movw	r22, r12
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    3536:	2a 94       	dec	r2
    3538:	f4 cf       	rjmp	.-24     	; 0x3522 <vfprintf+0x18c>
    353a:	f5 01       	movw	r30, r10
    353c:	37 fc       	sbrc	r3, 7
    353e:	85 91       	lpm	r24, Z+
    3540:	37 fe       	sbrs	r3, 7
    3542:	81 91       	ld	r24, Z+
    3544:	5f 01       	movw	r10, r30
    3546:	b6 01       	movw	r22, r12
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    354e:	21 10       	cpse	r2, r1
    3550:	2a 94       	dec	r2
    3552:	21 e0       	ldi	r18, 0x01	; 1
    3554:	82 1a       	sub	r8, r18
    3556:	91 08       	sbc	r9, r1
    3558:	81 14       	cp	r8, r1
    355a:	91 04       	cpc	r9, r1
    355c:	71 f7       	brne	.-36     	; 0x353a <vfprintf+0x1a4>
    355e:	e8 c0       	rjmp	.+464    	; 0x3730 <vfprintf+0x39a>
    3560:	84 36       	cpi	r24, 0x64	; 100
    3562:	11 f0       	breq	.+4      	; 0x3568 <vfprintf+0x1d2>
    3564:	89 36       	cpi	r24, 0x69	; 105
    3566:	41 f5       	brne	.+80     	; 0x35b8 <vfprintf+0x222>
    3568:	f8 01       	movw	r30, r16
    356a:	37 fe       	sbrs	r3, 7
    356c:	07 c0       	rjmp	.+14     	; 0x357c <vfprintf+0x1e6>
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	93 81       	ldd	r25, Z+3	; 0x03
    3576:	0c 5f       	subi	r16, 0xFC	; 252
    3578:	1f 4f       	sbci	r17, 0xFF	; 255
    357a:	08 c0       	rjmp	.+16     	; 0x358c <vfprintf+0x1f6>
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	07 2e       	mov	r0, r23
    3582:	00 0c       	add	r0, r0
    3584:	88 0b       	sbc	r24, r24
    3586:	99 0b       	sbc	r25, r25
    3588:	0e 5f       	subi	r16, 0xFE	; 254
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	f3 2d       	mov	r31, r3
    358e:	ff 76       	andi	r31, 0x6F	; 111
    3590:	3f 2e       	mov	r3, r31
    3592:	97 ff       	sbrs	r25, 7
    3594:	09 c0       	rjmp	.+18     	; 0x35a8 <vfprintf+0x212>
    3596:	90 95       	com	r25
    3598:	80 95       	com	r24
    359a:	70 95       	com	r23
    359c:	61 95       	neg	r22
    359e:	7f 4f       	sbci	r23, 0xFF	; 255
    35a0:	8f 4f       	sbci	r24, 0xFF	; 255
    35a2:	9f 4f       	sbci	r25, 0xFF	; 255
    35a4:	f0 68       	ori	r31, 0x80	; 128
    35a6:	3f 2e       	mov	r3, r31
    35a8:	2a e0       	ldi	r18, 0x0A	; 10
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	a3 01       	movw	r20, r6
    35ae:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__ultoa_invert>
    35b2:	88 2e       	mov	r8, r24
    35b4:	86 18       	sub	r8, r6
    35b6:	45 c0       	rjmp	.+138    	; 0x3642 <vfprintf+0x2ac>
    35b8:	85 37       	cpi	r24, 0x75	; 117
    35ba:	31 f4       	brne	.+12     	; 0x35c8 <vfprintf+0x232>
    35bc:	23 2d       	mov	r18, r3
    35be:	2f 7e       	andi	r18, 0xEF	; 239
    35c0:	b2 2e       	mov	r11, r18
    35c2:	2a e0       	ldi	r18, 0x0A	; 10
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	25 c0       	rjmp	.+74     	; 0x3612 <vfprintf+0x27c>
    35c8:	93 2d       	mov	r25, r3
    35ca:	99 7f       	andi	r25, 0xF9	; 249
    35cc:	b9 2e       	mov	r11, r25
    35ce:	8f 36       	cpi	r24, 0x6F	; 111
    35d0:	c1 f0       	breq	.+48     	; 0x3602 <vfprintf+0x26c>
    35d2:	18 f4       	brcc	.+6      	; 0x35da <vfprintf+0x244>
    35d4:	88 35       	cpi	r24, 0x58	; 88
    35d6:	79 f0       	breq	.+30     	; 0x35f6 <vfprintf+0x260>
    35d8:	b5 c0       	rjmp	.+362    	; 0x3744 <vfprintf+0x3ae>
    35da:	80 37       	cpi	r24, 0x70	; 112
    35dc:	19 f0       	breq	.+6      	; 0x35e4 <vfprintf+0x24e>
    35de:	88 37       	cpi	r24, 0x78	; 120
    35e0:	21 f0       	breq	.+8      	; 0x35ea <vfprintf+0x254>
    35e2:	b0 c0       	rjmp	.+352    	; 0x3744 <vfprintf+0x3ae>
    35e4:	e9 2f       	mov	r30, r25
    35e6:	e0 61       	ori	r30, 0x10	; 16
    35e8:	be 2e       	mov	r11, r30
    35ea:	b4 fe       	sbrs	r11, 4
    35ec:	0d c0       	rjmp	.+26     	; 0x3608 <vfprintf+0x272>
    35ee:	fb 2d       	mov	r31, r11
    35f0:	f4 60       	ori	r31, 0x04	; 4
    35f2:	bf 2e       	mov	r11, r31
    35f4:	09 c0       	rjmp	.+18     	; 0x3608 <vfprintf+0x272>
    35f6:	34 fe       	sbrs	r3, 4
    35f8:	0a c0       	rjmp	.+20     	; 0x360e <vfprintf+0x278>
    35fa:	29 2f       	mov	r18, r25
    35fc:	26 60       	ori	r18, 0x06	; 6
    35fe:	b2 2e       	mov	r11, r18
    3600:	06 c0       	rjmp	.+12     	; 0x360e <vfprintf+0x278>
    3602:	28 e0       	ldi	r18, 0x08	; 8
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <vfprintf+0x27c>
    3608:	20 e1       	ldi	r18, 0x10	; 16
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <vfprintf+0x27c>
    360e:	20 e1       	ldi	r18, 0x10	; 16
    3610:	32 e0       	ldi	r19, 0x02	; 2
    3612:	f8 01       	movw	r30, r16
    3614:	b7 fe       	sbrs	r11, 7
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <vfprintf+0x290>
    3618:	60 81       	ld	r22, Z
    361a:	71 81       	ldd	r23, Z+1	; 0x01
    361c:	82 81       	ldd	r24, Z+2	; 0x02
    361e:	93 81       	ldd	r25, Z+3	; 0x03
    3620:	0c 5f       	subi	r16, 0xFC	; 252
    3622:	1f 4f       	sbci	r17, 0xFF	; 255
    3624:	06 c0       	rjmp	.+12     	; 0x3632 <vfprintf+0x29c>
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 5f       	subi	r16, 0xFE	; 254
    3630:	1f 4f       	sbci	r17, 0xFF	; 255
    3632:	a3 01       	movw	r20, r6
    3634:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__ultoa_invert>
    3638:	88 2e       	mov	r8, r24
    363a:	86 18       	sub	r8, r6
    363c:	fb 2d       	mov	r31, r11
    363e:	ff 77       	andi	r31, 0x7F	; 127
    3640:	3f 2e       	mov	r3, r31
    3642:	36 fe       	sbrs	r3, 6
    3644:	0d c0       	rjmp	.+26     	; 0x3660 <vfprintf+0x2ca>
    3646:	23 2d       	mov	r18, r3
    3648:	2e 7f       	andi	r18, 0xFE	; 254
    364a:	a2 2e       	mov	r10, r18
    364c:	89 14       	cp	r8, r9
    364e:	58 f4       	brcc	.+22     	; 0x3666 <vfprintf+0x2d0>
    3650:	34 fe       	sbrs	r3, 4
    3652:	0b c0       	rjmp	.+22     	; 0x366a <vfprintf+0x2d4>
    3654:	32 fc       	sbrc	r3, 2
    3656:	09 c0       	rjmp	.+18     	; 0x366a <vfprintf+0x2d4>
    3658:	83 2d       	mov	r24, r3
    365a:	8e 7e       	andi	r24, 0xEE	; 238
    365c:	a8 2e       	mov	r10, r24
    365e:	05 c0       	rjmp	.+10     	; 0x366a <vfprintf+0x2d4>
    3660:	b8 2c       	mov	r11, r8
    3662:	a3 2c       	mov	r10, r3
    3664:	03 c0       	rjmp	.+6      	; 0x366c <vfprintf+0x2d6>
    3666:	b8 2c       	mov	r11, r8
    3668:	01 c0       	rjmp	.+2      	; 0x366c <vfprintf+0x2d6>
    366a:	b9 2c       	mov	r11, r9
    366c:	a4 fe       	sbrs	r10, 4
    366e:	0f c0       	rjmp	.+30     	; 0x368e <vfprintf+0x2f8>
    3670:	fe 01       	movw	r30, r28
    3672:	e8 0d       	add	r30, r8
    3674:	f1 1d       	adc	r31, r1
    3676:	80 81       	ld	r24, Z
    3678:	80 33       	cpi	r24, 0x30	; 48
    367a:	21 f4       	brne	.+8      	; 0x3684 <vfprintf+0x2ee>
    367c:	9a 2d       	mov	r25, r10
    367e:	99 7e       	andi	r25, 0xE9	; 233
    3680:	a9 2e       	mov	r10, r25
    3682:	09 c0       	rjmp	.+18     	; 0x3696 <vfprintf+0x300>
    3684:	a2 fe       	sbrs	r10, 2
    3686:	06 c0       	rjmp	.+12     	; 0x3694 <vfprintf+0x2fe>
    3688:	b3 94       	inc	r11
    368a:	b3 94       	inc	r11
    368c:	04 c0       	rjmp	.+8      	; 0x3696 <vfprintf+0x300>
    368e:	8a 2d       	mov	r24, r10
    3690:	86 78       	andi	r24, 0x86	; 134
    3692:	09 f0       	breq	.+2      	; 0x3696 <vfprintf+0x300>
    3694:	b3 94       	inc	r11
    3696:	a3 fc       	sbrc	r10, 3
    3698:	11 c0       	rjmp	.+34     	; 0x36bc <vfprintf+0x326>
    369a:	a0 fe       	sbrs	r10, 0
    369c:	06 c0       	rjmp	.+12     	; 0x36aa <vfprintf+0x314>
    369e:	b2 14       	cp	r11, r2
    36a0:	88 f4       	brcc	.+34     	; 0x36c4 <vfprintf+0x32e>
    36a2:	28 0c       	add	r2, r8
    36a4:	92 2c       	mov	r9, r2
    36a6:	9b 18       	sub	r9, r11
    36a8:	0e c0       	rjmp	.+28     	; 0x36c6 <vfprintf+0x330>
    36aa:	b2 14       	cp	r11, r2
    36ac:	60 f4       	brcc	.+24     	; 0x36c6 <vfprintf+0x330>
    36ae:	b6 01       	movw	r22, r12
    36b0:	80 e2       	ldi	r24, 0x20	; 32
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    36b8:	b3 94       	inc	r11
    36ba:	f7 cf       	rjmp	.-18     	; 0x36aa <vfprintf+0x314>
    36bc:	b2 14       	cp	r11, r2
    36be:	18 f4       	brcc	.+6      	; 0x36c6 <vfprintf+0x330>
    36c0:	2b 18       	sub	r2, r11
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <vfprintf+0x332>
    36c4:	98 2c       	mov	r9, r8
    36c6:	21 2c       	mov	r2, r1
    36c8:	a4 fe       	sbrs	r10, 4
    36ca:	10 c0       	rjmp	.+32     	; 0x36ec <vfprintf+0x356>
    36cc:	b6 01       	movw	r22, r12
    36ce:	80 e3       	ldi	r24, 0x30	; 48
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    36d6:	a2 fe       	sbrs	r10, 2
    36d8:	17 c0       	rjmp	.+46     	; 0x3708 <vfprintf+0x372>
    36da:	a1 fc       	sbrc	r10, 1
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <vfprintf+0x34e>
    36de:	88 e7       	ldi	r24, 0x78	; 120
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <vfprintf+0x352>
    36e4:	88 e5       	ldi	r24, 0x58	; 88
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	b6 01       	movw	r22, r12
    36ea:	0c c0       	rjmp	.+24     	; 0x3704 <vfprintf+0x36e>
    36ec:	8a 2d       	mov	r24, r10
    36ee:	86 78       	andi	r24, 0x86	; 134
    36f0:	59 f0       	breq	.+22     	; 0x3708 <vfprintf+0x372>
    36f2:	a1 fe       	sbrs	r10, 1
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <vfprintf+0x364>
    36f6:	8b e2       	ldi	r24, 0x2B	; 43
    36f8:	01 c0       	rjmp	.+2      	; 0x36fc <vfprintf+0x366>
    36fa:	80 e2       	ldi	r24, 0x20	; 32
    36fc:	a7 fc       	sbrc	r10, 7
    36fe:	8d e2       	ldi	r24, 0x2D	; 45
    3700:	b6 01       	movw	r22, r12
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    3708:	89 14       	cp	r8, r9
    370a:	38 f4       	brcc	.+14     	; 0x371a <vfprintf+0x384>
    370c:	b6 01       	movw	r22, r12
    370e:	80 e3       	ldi	r24, 0x30	; 48
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    3716:	9a 94       	dec	r9
    3718:	f7 cf       	rjmp	.-18     	; 0x3708 <vfprintf+0x372>
    371a:	8a 94       	dec	r8
    371c:	f3 01       	movw	r30, r6
    371e:	e8 0d       	add	r30, r8
    3720:	f1 1d       	adc	r31, r1
    3722:	80 81       	ld	r24, Z
    3724:	b6 01       	movw	r22, r12
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    372c:	81 10       	cpse	r8, r1
    372e:	f5 cf       	rjmp	.-22     	; 0x371a <vfprintf+0x384>
    3730:	22 20       	and	r2, r2
    3732:	09 f4       	brne	.+2      	; 0x3736 <vfprintf+0x3a0>
    3734:	42 ce       	rjmp	.-892    	; 0x33ba <vfprintf+0x24>
    3736:	b6 01       	movw	r22, r12
    3738:	80 e2       	ldi	r24, 0x20	; 32
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 c2 1b 	call	0x3784	; 0x3784 <fputc>
    3740:	2a 94       	dec	r2
    3742:	f6 cf       	rjmp	.-20     	; 0x3730 <vfprintf+0x39a>
    3744:	f6 01       	movw	r30, r12
    3746:	86 81       	ldd	r24, Z+6	; 0x06
    3748:	97 81       	ldd	r25, Z+7	; 0x07
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <vfprintf+0x3ba>
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	9f ef       	ldi	r25, 0xFF	; 255
    3750:	2b 96       	adiw	r28, 0x0b	; 11
    3752:	e2 e1       	ldi	r30, 0x12	; 18
    3754:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__epilogue_restores__>

00003758 <strnlen_P>:
    3758:	fc 01       	movw	r30, r24
    375a:	05 90       	lpm	r0, Z+
    375c:	61 50       	subi	r22, 0x01	; 1
    375e:	70 40       	sbci	r23, 0x00	; 0
    3760:	01 10       	cpse	r0, r1
    3762:	d8 f7       	brcc	.-10     	; 0x375a <strnlen_P+0x2>
    3764:	80 95       	com	r24
    3766:	90 95       	com	r25
    3768:	8e 0f       	add	r24, r30
    376a:	9f 1f       	adc	r25, r31
    376c:	08 95       	ret

0000376e <strnlen>:
    376e:	fc 01       	movw	r30, r24
    3770:	61 50       	subi	r22, 0x01	; 1
    3772:	70 40       	sbci	r23, 0x00	; 0
    3774:	01 90       	ld	r0, Z+
    3776:	01 10       	cpse	r0, r1
    3778:	d8 f7       	brcc	.-10     	; 0x3770 <strnlen+0x2>
    377a:	80 95       	com	r24
    377c:	90 95       	com	r25
    377e:	8e 0f       	add	r24, r30
    3780:	9f 1f       	adc	r25, r31
    3782:	08 95       	ret

00003784 <fputc>:
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	fb 01       	movw	r30, r22
    378e:	23 81       	ldd	r18, Z+3	; 0x03
    3790:	21 fd       	sbrc	r18, 1
    3792:	03 c0       	rjmp	.+6      	; 0x379a <fputc+0x16>
    3794:	8f ef       	ldi	r24, 0xFF	; 255
    3796:	9f ef       	ldi	r25, 0xFF	; 255
    3798:	2c c0       	rjmp	.+88     	; 0x37f2 <fputc+0x6e>
    379a:	22 ff       	sbrs	r18, 2
    379c:	16 c0       	rjmp	.+44     	; 0x37ca <fputc+0x46>
    379e:	46 81       	ldd	r20, Z+6	; 0x06
    37a0:	57 81       	ldd	r21, Z+7	; 0x07
    37a2:	24 81       	ldd	r18, Z+4	; 0x04
    37a4:	35 81       	ldd	r19, Z+5	; 0x05
    37a6:	42 17       	cp	r20, r18
    37a8:	53 07       	cpc	r21, r19
    37aa:	44 f4       	brge	.+16     	; 0x37bc <fputc+0x38>
    37ac:	a0 81       	ld	r26, Z
    37ae:	b1 81       	ldd	r27, Z+1	; 0x01
    37b0:	9d 01       	movw	r18, r26
    37b2:	2f 5f       	subi	r18, 0xFF	; 255
    37b4:	3f 4f       	sbci	r19, 0xFF	; 255
    37b6:	31 83       	std	Z+1, r19	; 0x01
    37b8:	20 83       	st	Z, r18
    37ba:	8c 93       	st	X, r24
    37bc:	26 81       	ldd	r18, Z+6	; 0x06
    37be:	37 81       	ldd	r19, Z+7	; 0x07
    37c0:	2f 5f       	subi	r18, 0xFF	; 255
    37c2:	3f 4f       	sbci	r19, 0xFF	; 255
    37c4:	37 83       	std	Z+7, r19	; 0x07
    37c6:	26 83       	std	Z+6, r18	; 0x06
    37c8:	14 c0       	rjmp	.+40     	; 0x37f2 <fputc+0x6e>
    37ca:	8b 01       	movw	r16, r22
    37cc:	ec 01       	movw	r28, r24
    37ce:	fb 01       	movw	r30, r22
    37d0:	00 84       	ldd	r0, Z+8	; 0x08
    37d2:	f1 85       	ldd	r31, Z+9	; 0x09
    37d4:	e0 2d       	mov	r30, r0
    37d6:	09 95       	icall
    37d8:	89 2b       	or	r24, r25
    37da:	e1 f6       	brne	.-72     	; 0x3794 <fputc+0x10>
    37dc:	d8 01       	movw	r26, r16
    37de:	16 96       	adiw	r26, 0x06	; 6
    37e0:	8d 91       	ld	r24, X+
    37e2:	9c 91       	ld	r25, X
    37e4:	17 97       	sbiw	r26, 0x07	; 7
    37e6:	01 96       	adiw	r24, 0x01	; 1
    37e8:	17 96       	adiw	r26, 0x07	; 7
    37ea:	9c 93       	st	X, r25
    37ec:	8e 93       	st	-X, r24
    37ee:	16 97       	sbiw	r26, 0x06	; 6
    37f0:	ce 01       	movw	r24, r28
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	08 95       	ret

000037fc <__ultoa_invert>:
    37fc:	fa 01       	movw	r30, r20
    37fe:	aa 27       	eor	r26, r26
    3800:	28 30       	cpi	r18, 0x08	; 8
    3802:	51 f1       	breq	.+84     	; 0x3858 <__ultoa_invert+0x5c>
    3804:	20 31       	cpi	r18, 0x10	; 16
    3806:	81 f1       	breq	.+96     	; 0x3868 <__ultoa_invert+0x6c>
    3808:	e8 94       	clt
    380a:	6f 93       	push	r22
    380c:	6e 7f       	andi	r22, 0xFE	; 254
    380e:	6e 5f       	subi	r22, 0xFE	; 254
    3810:	7f 4f       	sbci	r23, 0xFF	; 255
    3812:	8f 4f       	sbci	r24, 0xFF	; 255
    3814:	9f 4f       	sbci	r25, 0xFF	; 255
    3816:	af 4f       	sbci	r26, 0xFF	; 255
    3818:	b1 e0       	ldi	r27, 0x01	; 1
    381a:	3e d0       	rcall	.+124    	; 0x3898 <__ultoa_invert+0x9c>
    381c:	b4 e0       	ldi	r27, 0x04	; 4
    381e:	3c d0       	rcall	.+120    	; 0x3898 <__ultoa_invert+0x9c>
    3820:	67 0f       	add	r22, r23
    3822:	78 1f       	adc	r23, r24
    3824:	89 1f       	adc	r24, r25
    3826:	9a 1f       	adc	r25, r26
    3828:	a1 1d       	adc	r26, r1
    382a:	68 0f       	add	r22, r24
    382c:	79 1f       	adc	r23, r25
    382e:	8a 1f       	adc	r24, r26
    3830:	91 1d       	adc	r25, r1
    3832:	a1 1d       	adc	r26, r1
    3834:	6a 0f       	add	r22, r26
    3836:	71 1d       	adc	r23, r1
    3838:	81 1d       	adc	r24, r1
    383a:	91 1d       	adc	r25, r1
    383c:	a1 1d       	adc	r26, r1
    383e:	20 d0       	rcall	.+64     	; 0x3880 <__ultoa_invert+0x84>
    3840:	09 f4       	brne	.+2      	; 0x3844 <__ultoa_invert+0x48>
    3842:	68 94       	set
    3844:	3f 91       	pop	r19
    3846:	2a e0       	ldi	r18, 0x0A	; 10
    3848:	26 9f       	mul	r18, r22
    384a:	11 24       	eor	r1, r1
    384c:	30 19       	sub	r19, r0
    384e:	30 5d       	subi	r19, 0xD0	; 208
    3850:	31 93       	st	Z+, r19
    3852:	de f6       	brtc	.-74     	; 0x380a <__ultoa_invert+0xe>
    3854:	cf 01       	movw	r24, r30
    3856:	08 95       	ret
    3858:	46 2f       	mov	r20, r22
    385a:	47 70       	andi	r20, 0x07	; 7
    385c:	40 5d       	subi	r20, 0xD0	; 208
    385e:	41 93       	st	Z+, r20
    3860:	b3 e0       	ldi	r27, 0x03	; 3
    3862:	0f d0       	rcall	.+30     	; 0x3882 <__ultoa_invert+0x86>
    3864:	c9 f7       	brne	.-14     	; 0x3858 <__ultoa_invert+0x5c>
    3866:	f6 cf       	rjmp	.-20     	; 0x3854 <__ultoa_invert+0x58>
    3868:	46 2f       	mov	r20, r22
    386a:	4f 70       	andi	r20, 0x0F	; 15
    386c:	40 5d       	subi	r20, 0xD0	; 208
    386e:	4a 33       	cpi	r20, 0x3A	; 58
    3870:	18 f0       	brcs	.+6      	; 0x3878 <__ultoa_invert+0x7c>
    3872:	49 5d       	subi	r20, 0xD9	; 217
    3874:	31 fd       	sbrc	r19, 1
    3876:	40 52       	subi	r20, 0x20	; 32
    3878:	41 93       	st	Z+, r20
    387a:	02 d0       	rcall	.+4      	; 0x3880 <__ultoa_invert+0x84>
    387c:	a9 f7       	brne	.-22     	; 0x3868 <__ultoa_invert+0x6c>
    387e:	ea cf       	rjmp	.-44     	; 0x3854 <__ultoa_invert+0x58>
    3880:	b4 e0       	ldi	r27, 0x04	; 4
    3882:	a6 95       	lsr	r26
    3884:	97 95       	ror	r25
    3886:	87 95       	ror	r24
    3888:	77 95       	ror	r23
    388a:	67 95       	ror	r22
    388c:	ba 95       	dec	r27
    388e:	c9 f7       	brne	.-14     	; 0x3882 <__ultoa_invert+0x86>
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	61 05       	cpc	r22, r1
    3894:	71 05       	cpc	r23, r1
    3896:	08 95       	ret
    3898:	9b 01       	movw	r18, r22
    389a:	ac 01       	movw	r20, r24
    389c:	0a 2e       	mov	r0, r26
    389e:	06 94       	lsr	r0
    38a0:	57 95       	ror	r21
    38a2:	47 95       	ror	r20
    38a4:	37 95       	ror	r19
    38a6:	27 95       	ror	r18
    38a8:	ba 95       	dec	r27
    38aa:	c9 f7       	brne	.-14     	; 0x389e <__ultoa_invert+0xa2>
    38ac:	62 0f       	add	r22, r18
    38ae:	73 1f       	adc	r23, r19
    38b0:	84 1f       	adc	r24, r20
    38b2:	95 1f       	adc	r25, r21
    38b4:	a0 1d       	adc	r26, r0
    38b6:	08 95       	ret

000038b8 <eeprom_read_byte>:
    38b8:	f9 99       	sbic	0x1f, 1	; 31
    38ba:	fe cf       	rjmp	.-4      	; 0x38b8 <eeprom_read_byte>
    38bc:	92 bd       	out	0x22, r25	; 34
    38be:	81 bd       	out	0x21, r24	; 33
    38c0:	f8 9a       	sbi	0x1f, 0	; 31
    38c2:	99 27       	eor	r25, r25
    38c4:	80 b5       	in	r24, 0x20	; 32
    38c6:	08 95       	ret

000038c8 <eeprom_read_dword>:
    38c8:	a6 e1       	ldi	r26, 0x16	; 22
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	44 e0       	ldi	r20, 0x04	; 4
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	0c 94 96 1c 	jmp	0x392c	; 0x392c <eeprom_read_blraw>

000038d4 <eeprom_read_word>:
    38d4:	a8 e1       	ldi	r26, 0x18	; 24
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	42 e0       	ldi	r20, 0x02	; 2
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	0c 94 96 1c 	jmp	0x392c	; 0x392c <eeprom_read_blraw>

000038e0 <eeprom_update_byte>:
    38e0:	26 2f       	mov	r18, r22

000038e2 <eeprom_update_r18>:
    38e2:	f9 99       	sbic	0x1f, 1	; 31
    38e4:	fe cf       	rjmp	.-4      	; 0x38e2 <eeprom_update_r18>
    38e6:	92 bd       	out	0x22, r25	; 34
    38e8:	81 bd       	out	0x21, r24	; 33
    38ea:	f8 9a       	sbi	0x1f, 0	; 31
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	00 b4       	in	r0, 0x20	; 32
    38f0:	02 16       	cp	r0, r18
    38f2:	39 f0       	breq	.+14     	; 0x3902 <eeprom_update_r18+0x20>
    38f4:	1f ba       	out	0x1f, r1	; 31
    38f6:	20 bd       	out	0x20, r18	; 32
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	fa 9a       	sbi	0x1f, 2	; 31
    38fe:	f9 9a       	sbi	0x1f, 1	; 31
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	08 95       	ret

00003904 <eeprom_update_dword>:
    3904:	03 96       	adiw	r24, 0x03	; 3
    3906:	27 2f       	mov	r18, r23
    3908:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <eeprom_update_r18>
    390c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <eeprom_update_byte>
    3910:	25 2f       	mov	r18, r21
    3912:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <eeprom_update_r18>
    3916:	24 2f       	mov	r18, r20
    3918:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <eeprom_update_r18>

0000391c <eeprom_update_word>:
    391c:	01 96       	adiw	r24, 0x01	; 1
    391e:	27 2f       	mov	r18, r23
    3920:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <eeprom_update_r18>
    3924:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <eeprom_update_byte>

00003928 <eeprom_read_block>:
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22

0000392c <eeprom_read_blraw>:
    392c:	fc 01       	movw	r30, r24
    392e:	f9 99       	sbic	0x1f, 1	; 31
    3930:	fe cf       	rjmp	.-4      	; 0x392e <eeprom_read_blraw+0x2>
    3932:	06 c0       	rjmp	.+12     	; 0x3940 <eeprom_read_blraw+0x14>
    3934:	f2 bd       	out	0x22, r31	; 34
    3936:	e1 bd       	out	0x21, r30	; 33
    3938:	f8 9a       	sbi	0x1f, 0	; 31
    393a:	31 96       	adiw	r30, 0x01	; 1
    393c:	00 b4       	in	r0, 0x20	; 32
    393e:	0d 92       	st	X+, r0
    3940:	41 50       	subi	r20, 0x01	; 1
    3942:	50 40       	sbci	r21, 0x00	; 0
    3944:	b8 f7       	brcc	.-18     	; 0x3934 <eeprom_read_blraw+0x8>
    3946:	08 95       	ret

00003948 <__prologue_saves__>:
    3948:	2f 92       	push	r2
    394a:	3f 92       	push	r3
    394c:	4f 92       	push	r4
    394e:	5f 92       	push	r5
    3950:	6f 92       	push	r6
    3952:	7f 92       	push	r7
    3954:	8f 92       	push	r8
    3956:	9f 92       	push	r9
    3958:	af 92       	push	r10
    395a:	bf 92       	push	r11
    395c:	cf 92       	push	r12
    395e:	df 92       	push	r13
    3960:	ef 92       	push	r14
    3962:	ff 92       	push	r15
    3964:	0f 93       	push	r16
    3966:	1f 93       	push	r17
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	ca 1b       	sub	r28, r26
    3972:	db 0b       	sbc	r29, r27
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	09 94       	ijmp

00003980 <__epilogue_restores__>:
    3980:	2a 88       	ldd	r2, Y+18	; 0x12
    3982:	39 88       	ldd	r3, Y+17	; 0x11
    3984:	48 88       	ldd	r4, Y+16	; 0x10
    3986:	5f 84       	ldd	r5, Y+15	; 0x0f
    3988:	6e 84       	ldd	r6, Y+14	; 0x0e
    398a:	7d 84       	ldd	r7, Y+13	; 0x0d
    398c:	8c 84       	ldd	r8, Y+12	; 0x0c
    398e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3990:	aa 84       	ldd	r10, Y+10	; 0x0a
    3992:	b9 84       	ldd	r11, Y+9	; 0x09
    3994:	c8 84       	ldd	r12, Y+8	; 0x08
    3996:	df 80       	ldd	r13, Y+7	; 0x07
    3998:	ee 80       	ldd	r14, Y+6	; 0x06
    399a:	fd 80       	ldd	r15, Y+5	; 0x05
    399c:	0c 81       	ldd	r16, Y+4	; 0x04
    399e:	1b 81       	ldd	r17, Y+3	; 0x03
    39a0:	aa 81       	ldd	r26, Y+2	; 0x02
    39a2:	b9 81       	ldd	r27, Y+1	; 0x01
    39a4:	ce 0f       	add	r28, r30
    39a6:	d1 1d       	adc	r29, r1
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	f8 94       	cli
    39ac:	de bf       	out	0x3e, r29	; 62
    39ae:	0f be       	out	0x3f, r0	; 63
    39b0:	cd bf       	out	0x3d, r28	; 61
    39b2:	ed 01       	movw	r28, r26
    39b4:	08 95       	ret

000039b6 <_exit>:
    39b6:	f8 94       	cli

000039b8 <__stop_program>:
    39b8:	ff cf       	rjmp	.-2      	; 0x39b8 <__stop_program>
