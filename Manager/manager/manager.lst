
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00002a06  00002a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  0080019c  0080019c  00002b36  2**0
                  ALLOC
  3 .stab         000097b0  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027ce  00000000  00000000  0000c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000eab6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000eac8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  0000eb08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2a  00000000  00000000  0000ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  0000f912  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004fa  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  00010706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_18>
      4c:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e6 e0       	ldi	r30, 0x06	; 6
      ce:	fa e2       	ldi	r31, 0x2A	; 42
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a1 3a       	cpi	r26, 0xA1	; 161
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
      f0:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
    host_active = 0;
     1ae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
    lockout_active = 0;
     1b2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    status_byt = 0;
     1b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
    test_mode = 0;
     1d2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     1e2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
    uart_output = 0;
     1e6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1ea:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
     1ee:	80 e4       	ldi	r24, 0x40	; 64
     1f0:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <enable_ADC_auto_conversion>
    adc_started_at = millis();
     1fa:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     1fe:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <adc_started_at>
     202:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <adc_started_at+0x1>
     206:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <adc_started_at+0x2>
     20a:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <adc_started_at+0x3>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20e:	60 e9       	ldi	r22, 0x90	; 144
     210:	70 ed       	ldi	r23, 0xD0	; 208
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <uartstream0_init>
     21a:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <__iob+0x1>
     21e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <__iob>
     222:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <__iob+0x3>
     226:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     22a:	89 e2       	ldi	r24, 0x29	; 41
     22c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     230:	84 ef       	ldi	r24, 0xF4	; 244
     232:	99 e0       	ldi	r25, 0x09	; 9
     234:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     238:	87 eb       	ldi	r24, 0xB7	; 183
     23a:	99 e0       	ldi	r25, 0x09	; 9
     23c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     246:	8a e2       	ldi	r24, 0x2A	; 42
     248:	0e 94 0b 10 	call	0x2016	; 0x2016 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	9a e0       	ldi	r25, 0x0A	; 10
     250:	0e 94 2d 10 	call	0x205a	; 0x205a <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     254:	87 e0       	ldi	r24, 0x07	; 7
     256:	9a e0       	ldi	r25, 0x0A	; 10
     258:	0e 94 28 10 	call	0x2050	; 0x2050 <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     262:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f eb       	ldi	r18, 0xBF	; 191
     266:	84 ed       	ldi	r24, 0xD4	; 212
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <setup+0x172>
     272:	00 c0       	rjmp	.+0      	; 0x274 <setup+0x17c>
     274:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     276:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     278:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     27a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
     27e:	0e 94 a5 0b 	call	0x174a	; 0x174a <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
     282:	0e 94 b2 0a 	call	0x1564	; 0x1564 <check_for_eeprom_id>
     286:	88 23       	and	r24, r24
     288:	29 f0       	breq	.+10     	; 0x294 <setup+0x19c>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 8b 14 	call	0x2916	; 0x2916 <eeprom_read_byte>
     292:	01 c0       	rjmp	.+2      	; 0x296 <setup+0x19e>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     29a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     29e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     2a2:	88 60       	ori	r24, 0x08	; 8
     2a4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     2a8:	08 95       	ret

000002aa <main>:
#endif
}

int main(void)
{
    setup();
     2aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2ae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     2b2:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     2b6:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     2ba:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     2be:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>

    while (1) 
    {
        if (!test_mode) 
     2c2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
     2c6:	81 11       	cpse	r24, r1
     2c8:	0a c0       	rjmp	.+20     	; 0x2de <main+0x34>
        {
            blink_on_activate();
     2ca:	0e 94 06 02 	call	0x40c	; 0x40c <blink_on_activate>
            check_Bootload_Time();
     2ce:	0e 94 b5 02 	call	0x56a	; 0x56a <check_Bootload_Time>
            check_DTR();
     2d2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <check_DTR>
            check_lockout();
     2d6:	0e 94 de 02 	call	0x5bc	; 0x5bc <check_lockout>
            check_shutdown();
     2da:	0e 94 07 03 	call	0x60e	; 0x60e <check_shutdown>
        }
        if(write_rpu_address_to_eeprom) save_rpu_addr_state();
     2de:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
     2e2:	81 11       	cpse	r24, r1
     2e4:	0e 94 89 0a 	call	0x1512	; 0x1512 <save_rpu_addr_state>
        check_uart();
     2e8:	0e 94 12 04 	call	0x824	; 0x824 <check_uart>
        adc_burst();
     2ec:	0e 94 cd 0a 	call	0x159a	; 0x159a <adc_burst>
        if (ref_loaded > REF_DEFAULT) ref2ee();
     2f0:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	10 f0       	brcs	.+4      	; 0x2fc <main+0x52>
     2f8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ref2ee>
        if (smbus_has_numBytes_to_handle) handle_smbus_receive();
     2fc:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
     300:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     304:	89 2b       	or	r24, r25
     306:	e9 f2       	breq	.-70     	; 0x2c2 <main+0x18>
     308:	0e 94 10 0a 	call	0x1420	; 0x1420 <handle_smbus_receive>
     30c:	da cf       	rjmp	.-76     	; 0x2c2 <main+0x18>

0000030e <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     30e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     312:	88 23       	and	r24, r24
     314:	c1 f0       	breq	.+48     	; 0x346 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     316:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     318:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     31a:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     31c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     31e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     320:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     322:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     324:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     326:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     32a:	88 23       	and	r24, r24
     32c:	21 f0       	breq	.+8      	; 0x336 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     32e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     330:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	03 c0       	rjmp	.+6      	; 0x33c <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     336:	8f b7       	in	r24, 0x3f	; 63
     338:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     33a:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     33c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     33e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     340:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     342:	42 9a       	sbi	0x08, 2	; 8
     344:	17 c0       	rjmp	.+46     	; 0x374 <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     346:	8f b7       	in	r24, 0x3f	; 63
     348:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     34a:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     34c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     34e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     350:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     352:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     354:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     356:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     35a:	88 23       	and	r24, r24
     35c:	21 f0       	breq	.+8      	; 0x366 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     360:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     362:	5d 9a       	sbi	0x0b, 5	; 11
     364:	03 c0       	rjmp	.+6      	; 0x36c <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     366:	8f b7       	in	r24, 0x3f	; 63
     368:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     36a:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     36c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     36e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     370:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     372:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     374:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     376:	08 95       	ret

00000378 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     378:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     37c:	88 23       	and	r24, r24
     37e:	81 f0       	breq	.+32     	; 0x3a0 <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     380:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     382:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     384:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     386:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     388:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     38a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     38c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     38e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     390:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     392:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     394:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     396:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     398:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     39a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     39c:	42 9a       	sbi	0x08, 2	; 8
     39e:	0f c0       	rjmp	.+30     	; 0x3be <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a0:	8f b7       	in	r24, 0x3f	; 63
     3a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3a4:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3aa:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ac:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ae:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3b4:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ba:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3bc:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3be:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3c0:	08 95       	ret

000003c2 <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3c2:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3c6:	88 23       	and	r24, r24
     3c8:	81 f0       	breq	.+32     	; 0x3ea <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3cc:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ce:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3d6:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3dc:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3de:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3e6:	42 9a       	sbi	0x08, 2	; 8
     3e8:	0f c0       	rjmp	.+30     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ea:	8f b7       	in	r24, 0x3f	; 63
     3ec:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3ee:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3f6:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3fa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3fc:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3fe:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     400:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     402:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     404:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     406:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     408:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     40a:	08 95       	ret

0000040c <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     410:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     414:	81 11       	cpse	r24, r1
     416:	a6 c0       	rjmp	.+332    	; 0x564 <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     418:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     41c:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <blink_started_at>
     420:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     424:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     428:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	80 1b       	sub	r24, r16
     432:	91 0b       	sbc	r25, r17
     434:	a2 0b       	sbc	r26, r18
     436:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     438:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     43c:	27 7f       	andi	r18, 0xF7	; 247
     43e:	09 f0       	breq	.+2      	; 0x442 <blink_on_activate+0x36>
     440:	6d c0       	rjmp	.+218    	; 0x51c <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     442:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <host_is_foreign>
     446:	22 23       	and	r18, r18
     448:	21 f0       	breq	.+8      	; 0x452 <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     44a:	b6 95       	lsr	r27
     44c:	a7 95       	ror	r26
     44e:	97 95       	ror	r25
     450:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     452:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started>
     456:	22 23       	and	r18, r18
     458:	e9 f0       	breq	.+58     	; 0x494 <blink_on_activate+0x88>
     45a:	8c 34       	cpi	r24, 0x4C	; 76
     45c:	91 05       	cpc	r25, r1
     45e:	a1 05       	cpc	r26, r1
     460:	b1 05       	cpc	r27, r1
     462:	c0 f0       	brcs	.+48     	; 0x494 <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     464:	25 9b       	sbis	0x04, 5	; 4
     466:	09 c0       	rjmp	.+18     	; 0x47a <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     468:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     46a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     46c:	f8 94       	cli
    {
        if (value_for_bit) 
     46e:	95 fd       	sbrc	r25, 5
     470:	02 c0       	rjmp	.+4      	; 0x476 <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     472:	2d 9a       	sbi	0x05, 5	; 5
     474:	01 c0       	rjmp	.+2      	; 0x478 <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     476:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     478:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     47a:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     47e:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     482:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     486:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     48a:	85 5b       	subi	r24, 0xB5	; 181
     48c:	9f 4f       	sbci	r25, 0xFF	; 255
     48e:	af 4f       	sbci	r26, 0xFF	; 255
     490:	bf 4f       	sbci	r27, 0xFF	; 255
     492:	60 c0       	rjmp	.+192    	; 0x554 <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     494:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     498:	22 23       	and	r18, r18
     49a:	f1 f0       	breq	.+60     	; 0x4d8 <blink_on_activate+0xcc>
     49c:	81 3d       	cpi	r24, 0xD1	; 209
     49e:	27 e0       	ldi	r18, 0x07	; 7
     4a0:	92 07       	cpc	r25, r18
     4a2:	a1 05       	cpc	r26, r1
     4a4:	b1 05       	cpc	r27, r1
     4a6:	c0 f0       	brcs	.+48     	; 0x4d8 <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4a8:	25 9b       	sbis	0x04, 5	; 4
     4aa:	09 c0       	rjmp	.+18     	; 0x4be <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4ac:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4ae:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4b0:	f8 94       	cli
    {
        if (value_for_bit) 
     4b2:	95 fd       	sbrc	r25, 5
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     4b6:	2d 9a       	sbi	0x05, 5	; 5
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4ba:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4bc:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4be:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4c2:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4c6:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4ca:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4ce:	80 53       	subi	r24, 0x30	; 48
     4d0:	98 4f       	sbci	r25, 0xF8	; 248
     4d2:	af 4f       	sbci	r26, 0xFF	; 255
     4d4:	bf 4f       	sbci	r27, 0xFF	; 255
     4d6:	3e c0       	rjmp	.+124    	; 0x554 <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4d8:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <host_active>
     4dc:	22 23       	and	r18, r18
     4de:	09 f4       	brne	.+2      	; 0x4e2 <blink_on_activate+0xd6>
     4e0:	41 c0       	rjmp	.+130    	; 0x564 <blink_on_activate+0x158>
     4e2:	85 3f       	cpi	r24, 0xF5	; 245
     4e4:	91 40       	sbci	r25, 0x01	; 1
     4e6:	a1 05       	cpc	r26, r1
     4e8:	b1 05       	cpc	r27, r1
     4ea:	e0 f1       	brcs	.+120    	; 0x564 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4ec:	25 9b       	sbis	0x04, 5	; 4
     4ee:	09 c0       	rjmp	.+18     	; 0x502 <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4f0:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4f2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4f4:	f8 94       	cli
    {
        if (value_for_bit) 
     4f6:	95 fd       	sbrc	r25, 5
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     4fa:	2d 9a       	sbi	0x05, 5	; 5
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4fe:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     500:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     502:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     506:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     50a:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     50e:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     512:	8c 50       	subi	r24, 0x0C	; 12
     514:	9e 4f       	sbci	r25, 0xFE	; 254
     516:	af 4f       	sbci	r26, 0xFF	; 255
     518:	bf 4f       	sbci	r27, 0xFF	; 255
     51a:	1c c0       	rjmp	.+56     	; 0x554 <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     51c:	89 3c       	cpi	r24, 0xC9	; 201
     51e:	91 05       	cpc	r25, r1
     520:	a1 05       	cpc	r26, r1
     522:	b1 05       	cpc	r27, r1
     524:	f8 f0       	brcs	.+62     	; 0x564 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     526:	25 9b       	sbis	0x04, 5	; 4
     528:	09 c0       	rjmp	.+18     	; 0x53c <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     52a:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     52c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     52e:	f8 94       	cli
    {
        if (value_for_bit) 
     530:	95 fd       	sbrc	r25, 5
     532:	02 c0       	rjmp	.+4      	; 0x538 <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     534:	2d 9a       	sbi	0x05, 5	; 5
     536:	01 c0       	rjmp	.+2      	; 0x53a <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     538:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     53a:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     53c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     540:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     544:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     548:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     54c:	88 53       	subi	r24, 0x38	; 56
     54e:	9f 4f       	sbci	r25, 0xFF	; 255
     550:	af 4f       	sbci	r26, 0xFF	; 255
     552:	bf 4f       	sbci	r27, 0xFF	; 255
     554:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <blink_started_at>
     558:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <blink_started_at+0x1>
     55c:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <blink_started_at+0x2>
     560:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <blink_started_at+0x3>
        }
    }
}
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
    if (bootloader_started)
     56e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     572:	88 23       	and	r24, r24
     574:	01 f1       	breq	.+64     	; 0x5b6 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     576:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     57a:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     57e:	21 11       	cpse	r18, r1
     580:	1a c0       	rjmp	.+52     	; 0x5b6 <check_Bootload_Time+0x4c>
     582:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <bootloader_started_at>
     586:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <bootloader_started_at+0x1>
     58a:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <bootloader_started_at+0x2>
     58e:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <bootloader_started_at+0x3>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	80 1b       	sub	r24, r16
     598:	91 0b       	sbc	r25, r17
     59a:	a2 0b       	sbc	r26, r18
     59c:	b3 0b       	sbc	r27, r19
     59e:	89 33       	cpi	r24, 0x39	; 57
     5a0:	91 4c       	sbci	r25, 0xC1	; 193
     5a2:	a1 40       	sbci	r26, 0x01	; 1
     5a4:	b1 05       	cpc	r27, r1
     5a6:	38 f0       	brcs	.+14     	; 0x5b6 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     5a8:	0e 94 87 01 	call	0x30e	; 0x30e <connect_normal_mode>
            host_active =1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
            bootloader_started = 0;
     5b2:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
        }
    }
}
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5c0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5c4:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5c8:	21 11       	cpse	r18, r1
     5ca:	1e c0       	rjmp	.+60     	; 0x608 <check_lockout+0x4c>
     5cc:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     5d0:	22 23       	and	r18, r18
     5d2:	d1 f0       	breq	.+52     	; 0x608 <check_lockout+0x4c>
     5d4:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <lockout_started_at>
     5d8:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <lockout_started_at+0x1>
     5dc:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <lockout_started_at+0x2>
     5e0:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <lockout_started_at+0x3>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	80 1b       	sub	r24, r16
     5ea:	91 0b       	sbc	r25, r17
     5ec:	a2 0b       	sbc	r26, r18
     5ee:	b3 0b       	sbc	r27, r19
     5f0:	81 3c       	cpi	r24, 0xC1	; 193
     5f2:	94 4d       	sbci	r25, 0xD4	; 212
     5f4:	a1 40       	sbci	r26, 0x01	; 1
     5f6:	b1 05       	cpc	r27, r1
     5f8:	38 f0       	brcs	.+14     	; 0x608 <check_lockout+0x4c>
    {
        connect_normal_mode();
     5fa:	0e 94 87 01 	call	0x30e	; 0x30e <connect_normal_mode>

        host_active = 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
        lockout_active =0;
     604:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    }
}
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret

0000060e <check_shutdown>:


void check_shutdown(void)
{
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
    if (shutdown_started)
     612:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_started>
     616:	88 23       	and	r24, r24
     618:	19 f1       	breq	.+70     	; 0x660 <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     61a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     61e:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <shutdown_started_at>
     622:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <shutdown_started_at+0x1>
     626:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <shutdown_started_at+0x2>
     62a:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <shutdown_started_at+0x3>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	80 1b       	sub	r24, r16
     634:	91 0b       	sbc	r25, r17
     636:	a2 0b       	sbc	r26, r18
     638:	b3 0b       	sbc	r27, r19
     63a:	89 3e       	cpi	r24, 0xE9	; 233
     63c:	93 40       	sbci	r25, 0x03	; 3
     63e:	a1 05       	cpc	r26, r1
     640:	b1 05       	cpc	r27, r1
     642:	98 f1       	brcs	.+102    	; 0x6aa <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     644:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     646:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     648:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     64a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     64c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     64e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     650:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     652:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     654:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <shutdown_detected>
     65e:	25 c0       	rjmp	.+74     	; 0x6aa <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     660:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     664:	81 11       	cpse	r24, r1
     666:	21 c0       	rjmp	.+66     	; 0x6aa <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     668:	18 99       	sbic	0x03, 0	; 3
     66a:	1f c0       	rjmp	.+62     	; 0x6aa <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     66c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     670:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     672:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     674:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     676:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     678:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     67a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     67c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     67e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     680:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     682:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     684:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     686:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     688:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     68a:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     68c:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
                shutdown_started_at = millis();
     696:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     69a:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
     69e:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
     6a2:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
     6a6:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
            }
        }
}
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     6b0:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     6b4:	81 11       	cpse	r24, r1
     6b6:	b5 c0       	rjmp	.+362    	; 0x822 <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     6b8:	4b 99       	sbic	0x09, 3	; 9
     6ba:	56 c0       	rjmp	.+172    	; 0x768 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6bc:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     6c0:	83 fd       	sbrc	r24, 3
     6c2:	af c0       	rjmp	.+350    	; 0x822 <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     6c4:	4a 9b       	sbis	0x09, 2	; 9
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6c8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6ca:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6cc:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6ce:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6d0:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6d2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     6d6:	81 11       	cpse	r24, r1
     6d8:	a4 c0       	rjmp	.+328    	; 0x822 <check_DTR+0x172>
     6da:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     6de:	81 11       	cpse	r24, r1
     6e0:	a0 c0       	rjmp	.+320    	; 0x822 <check_DTR+0x172>
     6e2:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     6e6:	81 11       	cpse	r24, r1
     6e8:	9c c0       	rjmp	.+312    	; 0x822 <check_DTR+0x172>
     6ea:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     6ee:	81 11       	cpse	r24, r1
     6f0:	98 c0       	rjmp	.+304    	; 0x822 <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     6f2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     6f6:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     6fa:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     6fe:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     702:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     706:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <bootloader_address>
     70a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     70e:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     712:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     716:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	20 95       	com	r18
     71e:	30 95       	com	r19
     720:	2a 70       	andi	r18, 0x0A	; 10
     722:	33 27       	eor	r19, r19
     724:	64 e0       	ldi	r22, 0x04	; 4
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	6a 95       	dec	r22
     72c:	e1 f7       	brne	.-8      	; 0x726 <check_DTR+0x76>
     72e:	89 2f       	mov	r24, r25
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	80 95       	com	r24
     734:	90 95       	com	r25
     736:	80 75       	andi	r24, 0x50	; 80
     738:	99 27       	eor	r25, r25
     73a:	74 e0       	ldi	r23, 0x04	; 4
     73c:	95 95       	asr	r25
     73e:	87 95       	ror	r24
     740:	7a 95       	dec	r23
     742:	e1 f7       	brne	.-8      	; 0x73c <check_DTR+0x8c>
     744:	82 2b       	or	r24, r18
     746:	93 2b       	or	r25, r19
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	1f 92       	push	r1
     74e:	4f 93       	push	r20
     750:	86 e1       	ldi	r24, 0x16	; 22
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
                        uart_has_TTL = 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
                        localhost_active = 1;
     762:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <localhost_active>
     766:	57 c0       	rjmp	.+174    	; 0x816 <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     768:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     76c:	88 23       	and	r24, r24
     76e:	09 f4       	brne	.+2      	; 0x772 <check_DTR+0xc2>
     770:	58 c0       	rjmp	.+176    	; 0x822 <check_DTR+0x172>
     772:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     776:	88 23       	and	r24, r24
     778:	09 f4       	brne	.+2      	; 0x77c <check_DTR+0xcc>
     77a:	53 c0       	rjmp	.+166    	; 0x822 <check_DTR+0x172>
     77c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     780:	81 11       	cpse	r24, r1
     782:	4f c0       	rjmp	.+158    	; 0x822 <check_DTR+0x172>
     784:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     788:	81 11       	cpse	r24, r1
     78a:	4b c0       	rjmp	.+150    	; 0x822 <check_DTR+0x172>
     78c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     790:	81 11       	cpse	r24, r1
     792:	47 c0       	rjmp	.+142    	; 0x822 <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     794:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     798:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     79c:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     7a0:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     7a4:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7a8:	8f ec       	ldi	r24, 0xCF	; 207
     7aa:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7ae:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     7b2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     7b6:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	20 95       	com	r18
     7be:	30 95       	com	r19
     7c0:	2a 70       	andi	r18, 0x0A	; 10
     7c2:	33 27       	eor	r19, r19
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <check_DTR+0x116>
     7ce:	89 2f       	mov	r24, r25
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	80 95       	com	r24
     7d4:	90 95       	com	r25
     7d6:	80 75       	andi	r24, 0x50	; 80
     7d8:	99 27       	eor	r25, r25
     7da:	54 e0       	ldi	r21, 0x04	; 4
     7dc:	95 95       	asr	r25
     7de:	87 95       	ror	r24
     7e0:	5a 95       	dec	r21
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <check_DTR+0x12c>
     7e4:	82 2b       	or	r24, r18
     7e6:	93 2b       	or	r25, r19
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	1f 92       	push	r1
     7ee:	4f 93       	push	r20
     7f0:	86 e1       	ldi	r24, 0x16	; 22
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
                uart_has_TTL = 1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     802:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     804:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     806:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     808:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     80a:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     80e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     810:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     812:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     814:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	08 95       	ret

00000824 <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     844:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     848:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <uart_has_TTL>
     84c:	22 23       	and	r18, r18
     84e:	d9 f0       	breq	.+54     	; 0x886 <check_uart+0x62>
     850:	40 90 09 03 	lds	r4, 0x0309	; 0x800309 <uart_started_at>
     854:	50 90 0a 03 	lds	r5, 0x030A	; 0x80030a <uart_started_at+0x1>
     858:	60 90 0b 03 	lds	r6, 0x030B	; 0x80030b <uart_started_at+0x2>
     85c:	70 90 0c 03 	lds	r7, 0x030C	; 0x80030c <uart_started_at+0x3>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	84 19       	sub	r24, r4
     866:	95 09       	sbc	r25, r5
     868:	a6 09       	sbc	r26, r6
     86a:	b7 09       	sbc	r27, r7
     86c:	85 3f       	cpi	r24, 0xF5	; 245
     86e:	91 40       	sbci	r25, 0x01	; 1
     870:	a1 05       	cpc	r26, r1
     872:	b1 05       	cpc	r27, r1
     874:	40 f0       	brcs	.+16     	; 0x886 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     876:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     87a:	81 70       	andi	r24, 0x01	; 1
     87c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
        uart_has_TTL = 0;
     880:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     884:	c9 c1       	rjmp	.+914    	; 0xc18 <__stack+0x319>
    }
    else
    {
        if ( uart0_available() )
     886:	0e 94 c8 0c 	call	0x1990	; 0x1990 <uart0_available>
     88a:	89 2b       	or	r24, r25
     88c:	09 f4       	brne	.+2      	; 0x890 <check_uart+0x6c>
     88e:	c4 c1       	rjmp	.+904    	; 0xc18 <__stack+0x319>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     890:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <__iob>
     894:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <__iob+0x1>
     898:	0e 94 a6 11 	call	0x234c	; 0x234c <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     89c:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <uart_previous_byte>
     8a0:	26 2f       	mov	r18, r22
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	20 95       	com	r18
     8a6:	30 95       	com	r19
     8a8:	a9 01       	movw	r20, r18
     8aa:	4a 70       	andi	r20, 0x0A	; 10
     8ac:	55 27       	eor	r21, r21
     8ae:	74 e0       	ldi	r23, 0x04	; 4
     8b0:	44 0f       	add	r20, r20
     8b2:	55 1f       	adc	r21, r21
     8b4:	7a 95       	dec	r23
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <check_uart+0x8c>
     8b8:	20 75       	andi	r18, 0x50	; 80
     8ba:	33 27       	eor	r19, r19
     8bc:	e4 e0       	ldi	r30, 0x04	; 4
     8be:	35 95       	asr	r19
     8c0:	27 95       	ror	r18
     8c2:	ea 95       	dec	r30
     8c4:	e1 f7       	brne	.-8      	; 0x8be <check_uart+0x9a>
     8c6:	24 2b       	or	r18, r20
     8c8:	35 2b       	or	r19, r21
     8ca:	ac 01       	movw	r20, r24
     8cc:	55 27       	eor	r21, r21
     8ce:	24 17       	cp	r18, r20
     8d0:	35 07       	cpc	r19, r21
     8d2:	39 f4       	brne	.+14     	; 0x8e2 <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8d4:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8d8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     8dc:	81 11       	cpse	r24, r1
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <check_uart+0xc4>
     8e0:	0f c0       	rjmp	.+30     	; 0x900 <__stack+0x1>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     8e2:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_previous_byte>
                return;
     8e6:	98 c1       	rjmp	.+816    	; 0xc18 <__stack+0x319>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     8e8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
     8ec:	68 17       	cp	r22, r24
     8ee:	29 f0       	breq	.+10     	; 0x8fa <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     8f0:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     8f4:	84 70       	andi	r24, 0x04	; 4
     8f6:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
                }
                uart_has_TTL = 0;
     8fa:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     900:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     904:	88 23       	and	r24, r24
     906:	19 f0       	breq	.+6      	; 0x90e <__stack+0xf>
                {
                    host_is_foreign = 0; // used to connect the host
     908:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     914:	61 11       	cpse	r22, r1
     916:	27 c0       	rjmp	.+78     	; 0x966 <__stack+0x67>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     918:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	80 5c       	subi	r24, 0xC0	; 192
     922:	94 4d       	sbci	r25, 0xD4	; 212
     924:	a1 40       	sbci	r26, 0x01	; 1
     926:	b1 09       	sbc	r27, r1
     928:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     92c:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     930:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     934:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     938:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	88 53       	subi	r24, 0x38	; 56
     942:	91 4c       	sbci	r25, 0xC1	; 193
     944:	a1 40       	sbci	r26, 0x01	; 1
     946:	b1 09       	sbc	r27, r1
     948:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     94c:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     950:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     954:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     958:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     95a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     95c:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     95e:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     960:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
     964:	32 c1       	rjmp	.+612    	; 0xbca <__stack+0x2cb>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     966:	6f 3f       	cpi	r22, 0xFF	; 255
     968:	31 f4       	brne	.+12     	; 0x976 <__stack+0x77>
            {
                arduino_mode_started = 0;
     96a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
                arduino_mode = 1;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <arduino_mode>
                return;
     974:	51 c1       	rjmp	.+674    	; 0xc18 <__stack+0x319>
            }
            if (input == RPU_START_TEST_MODE) 
     976:	61 30       	cpi	r22, 0x01	; 1
     978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x7d>
     97a:	6b c0       	rjmp	.+214    	; 0xa52 <__stack+0x153>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     97c:	f9 b1       	in	r31, 0x09	; 9
     97e:	e9 b1       	in	r30, 0x09	; 9
     980:	56 b1       	in	r21, 0x06	; 6
     982:	49 b1       	in	r20, 0x09	; 9
     984:	39 b1       	in	r19, 0x09	; 9
     986:	89 b1       	in	r24, 0x09	; 9
     988:	29 b1       	in	r18, 0x09	; 9
     98a:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	88 0f       	add	r24, r24
     990:	89 2f       	mov	r24, r25
     992:	88 1f       	adc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	73 fb       	bst	r23, 3
     9a0:	99 27       	eor	r25, r25
     9a2:	90 f9       	bld	r25, 0
     9a4:	89 2b       	or	r24, r25
     9a6:	f3 fb       	bst	r31, 3
     9a8:	aa 24       	eor	r10, r10
     9aa:	a0 f8       	bld	r10, 0
     9ac:	b1 2c       	mov	r11, r1
     9ae:	b6 94       	lsr	r11
     9b0:	ba 2c       	mov	r11, r10
     9b2:	aa 24       	eor	r10, r10
     9b4:	b7 94       	ror	r11
     9b6:	a7 94       	ror	r10
     9b8:	a8 2a       	or	r10, r24
     9ba:	e2 fb       	bst	r30, 2
     9bc:	cc 24       	eor	r12, r12
     9be:	c0 f8       	bld	r12, 0
     9c0:	d1 2c       	mov	r13, r1
     9c2:	d6 e0       	ldi	r29, 0x06	; 6
     9c4:	cc 0c       	add	r12, r12
     9c6:	dd 1c       	adc	r13, r13
     9c8:	da 95       	dec	r29
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <__stack+0xc5>
     9cc:	ca 28       	or	r12, r10
     9ce:	52 fb       	bst	r21, 2
     9d0:	ee 24       	eor	r14, r14
     9d2:	e0 f8       	bld	r14, 0
     9d4:	f1 2c       	mov	r15, r1
     9d6:	15 e0       	ldi	r17, 0x05	; 5
     9d8:	ee 0c       	add	r14, r14
     9da:	ff 1c       	adc	r15, r15
     9dc:	1a 95       	dec	r17
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0xd9>
     9e0:	ec 28       	or	r14, r12
     9e2:	45 fb       	bst	r20, 5
     9e4:	00 27       	eor	r16, r16
     9e6:	00 f9       	bld	r16, 0
     9e8:	10 e0       	ldi	r17, 0x00	; 0
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	00 0f       	add	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	8a 95       	dec	r24
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0xed>
     9f4:	0e 29       	or	r16, r14
     9f6:	36 fb       	bst	r19, 6
     9f8:	33 27       	eor	r19, r19
     9fa:	30 f9       	bld	r19, 0
     9fc:	c3 2f       	mov	r28, r19
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	d8 2f       	mov	r29, r24
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	cc 0f       	add	r28, r28
     a06:	dd 1f       	adc	r29, r29
     a08:	9a 95       	dec	r25
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <__stack+0x105>
     a0c:	c0 2b       	or	r28, r16
     a0e:	24 fb       	bst	r18, 4
     a10:	88 24       	eor	r8, r8
     a12:	80 f8       	bld	r8, 0
     a14:	91 2c       	mov	r9, r1
     a16:	88 0c       	add	r8, r8
     a18:	99 1c       	adc	r9, r9
     a1a:	8c 2a       	or	r8, r28
     a1c:	80 92 f4 02 	sts	0x02F4, r8	; 0x8002f4 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a20:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a22:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a24:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a26:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a2a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a2c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a2e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a30:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a32:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a34:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a36:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a3c:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a42:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a44:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a46:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a48:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 1;
     a4c:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <test_mode>
                return;
     a50:	e3 c0       	rjmp	.+454    	; 0xc18 <__stack+0x319>
            }
            if (input == RPU_END_TEST_MODE) 
     a52:	6e 3f       	cpi	r22, 0xFE	; 254
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x159>
     a56:	76 c0       	rjmp	.+236    	; 0xb44 <__stack+0x245>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a58:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a5c:	88 1f       	adc	r24, r24
     a5e:	88 27       	eor	r24, r24
     a60:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a62:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a64:	f8 94       	cli
    {
        if (value_for_bit) 
     a66:	88 23       	and	r24, r24
     a68:	11 f0       	breq	.+4      	; 0xa6e <__stack+0x16f>
        {
            *register_addr |= 1 << bit_offset;
     a6a:	5b 9a       	sbi	0x0b, 3	; 11
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <__stack+0x171>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a6e:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a70:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a72:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a76:	86 fb       	bst	r24, 6
     a78:	88 27       	eor	r24, r24
     a7a:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a7c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a7e:	f8 94       	cli
    {
        if (value_for_bit) 
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <__stack+0x189>
        {
            *register_addr |= 1 << bit_offset;
     a84:	5a 9a       	sbi	0x0b, 2	; 11
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <__stack+0x18b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a88:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a8a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a8c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a90:	85 fb       	bst	r24, 5
     a92:	88 27       	eor	r24, r24
     a94:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a96:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a98:	f8 94       	cli
    {
        if (value_for_bit) 
     a9a:	88 23       	and	r24, r24
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <__stack+0x1a3>
        {
            *register_addr |= 1 << bit_offset;
     a9e:	42 9a       	sbi	0x08, 2	; 8
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <__stack+0x1a5>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aa2:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aa6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     aaa:	82 95       	swap	r24
     aac:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aae:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ab0:	f8 94       	cli
    {
        if (value_for_bit) 
     ab2:	88 23       	and	r24, r24
     ab4:	11 f0       	breq	.+4      	; 0xaba <__stack+0x1bb>
        {
            *register_addr |= 1 << bit_offset;
     ab6:	5d 9a       	sbi	0x0b, 5	; 11
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <__stack+0x1bd>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aba:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     abc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     abe:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ac2:	83 fb       	bst	r24, 3
     ac4:	88 27       	eor	r24, r24
     ac6:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ac8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aca:	f8 94       	cli
    {
        if (value_for_bit) 
     acc:	88 23       	and	r24, r24
     ace:	11 f0       	breq	.+4      	; 0xad4 <__stack+0x1d5>
        {
            *register_addr |= 1 << bit_offset;
     ad0:	5e 9a       	sbi	0x0b, 6	; 11
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <__stack+0x1d7>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ad4:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad6:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ad8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ada:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     adc:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ade:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ae0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ae4:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae6:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     ae8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     aec:	88 61       	ori	r24, 0x18	; 24
     aee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     af2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     af6:	82 fb       	bst	r24, 2
     af8:	88 27       	eor	r24, r24
     afa:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     afc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     afe:	f8 94       	cli
    {
        if (value_for_bit) 
     b00:	88 23       	and	r24, r24
     b02:	11 f0       	breq	.+4      	; 0xb08 <__stack+0x209>
        {
            *register_addr |= 1 << bit_offset;
     b04:	5f 9a       	sbi	0x0b, 7	; 11
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <__stack+0x20b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b08:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b0a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b0c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b10:	86 95       	lsr	r24
     b12:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b14:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b16:	f8 94       	cli
    {
        if (value_for_bit) 
     b18:	88 23       	and	r24, r24
     b1a:	11 f0       	breq	.+4      	; 0xb20 <__stack+0x221>
        {
            *register_addr |= 1 << bit_offset;
     b1c:	5c 9a       	sbi	0x0b, 4	; 11
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <__stack+0x223>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b20:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b22:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b24:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b28:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b2a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b2c:	f8 94       	cli
    {
        if (value_for_bit) 
     b2e:	88 23       	and	r24, r24
     b30:	11 f0       	breq	.+4      	; 0xb36 <__stack+0x237>
        {
            *register_addr |= 1 << bit_offset;
     b32:	43 9a       	sbi	0x08, 3	; 8
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <__stack+0x239>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b36:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b38:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b3a:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 0;
     b3e:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
                return;
     b42:	6a c0       	rjmp	.+212    	; 0xc18 <__stack+0x319>
            }
            if (input == rpu_address) // that is my local address
     b44:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     b48:	68 13       	cpse	r22, r24
     b4a:	2a c0       	rjmp	.+84     	; 0xba0 <__stack+0x2a1>
            {
                connect_bootload_mode();
     b4c:	0e 94 bc 01 	call	0x378	; 0x378 <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b56:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b58:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b5a:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b5c:	8f bf       	out	0x3f, r24	; 63
     b5e:	8f e5       	ldi	r24, 0x5F	; 95
     b60:	9a ee       	ldi	r25, 0xEA	; 234
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <__stack+0x263>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <__stack+0x269>
     b68:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b6a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b6c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b6e:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b70:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     b72:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     b76:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     b7a:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     b7e:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     b82:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     b86:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                bootloader_started_at = millis();
     b8a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     b8e:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <bootloader_started_at>
     b92:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <bootloader_started_at+0x1>
     b96:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <bootloader_started_at+0x2>
     b9a:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <bootloader_started_at+0x3>
                return;
     b9e:	3c c0       	rjmp	.+120    	; 0xc18 <__stack+0x319>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     ba0:	67 fd       	sbrc	r22, 7
     ba2:	1e c0       	rjmp	.+60     	; 0xbe0 <__stack+0x2e1>
            {  
                lockout_active =1;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lockout_active>
                bootloader_started = 0;
     baa:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
                host_active =0;
     bae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>

                connect_lockout_mode();
     bb2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <connect_lockout_mode>

                lockout_started_at = millis();
     bb6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     bba:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <lockout_started_at>
     bbe:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <lockout_started_at+0x1>
     bc2:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <lockout_started_at+0x2>
     bc6:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <lockout_started_at+0x3>
                blink_started_at = millis();
     bca:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     bce:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     bd2:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     bd6:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     bda:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                return;
     bde:	1c c0       	rjmp	.+56     	; 0xc18 <__stack+0x319>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     be0:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
                lockout_active =0;
     be4:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
                host_active =0;
     be8:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
                bootloader_started = 0;
     bec:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bf0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bf2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     bf4:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bf6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bf8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bfa:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     bfc:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bfe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c00:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c02:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c04:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c06:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c08:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c0a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c0c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c0e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c10:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c12:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c14:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c16:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	08 95       	ret

00000c3a <fnWtMgrAddr>:
}

// I2C_COMMAND_TO_SET_RPU_ADDRESS
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
    rpu_address = i2cBuffer[1];
     c3a:	fc 01       	movw	r30, r24
     c3c:	81 81       	ldd	r24, Z+1	; 0x01
     c3e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    write_rpu_address_to_eeprom = 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
     c48:	08 95       	ret

00000c4a <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c4a:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <bootloader_address>
     c4e:	fc 01       	movw	r30, r24
     c50:	21 83       	std	Z+1, r18	; 0x01
     c52:	08 95       	ret

00000c54 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c54:	fc 01       	movw	r30, r24
     c56:	81 81       	ldd	r24, Z+1	; 0x01
     c58:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
     c5c:	08 95       	ret

00000c5e <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c5e:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <shutdown_detected>
     c62:	fc 01       	movw	r30, r24
     c64:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c66:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
     c6a:	08 95       	ret

00000c6c <fnRdStatus>:
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = status_byt;
     c6c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     c70:	fc 01       	movw	r30, r24
     c72:	21 83       	std	Z+1, r18	; 0x01
     c74:	08 95       	ret

00000c76 <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    status_byt = i2cBuffer[1];
     c76:	fc 01       	movw	r30, r24
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     c7e:	08 95       	ret

00000c80 <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     c80:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     c84:	fc 01       	movw	r30, r24
     c86:	21 83       	std	Z+1, r18	; 0x01
     c88:	08 95       	ret

00000c8a <fnRdTimedAccumAltI>:
    i2cBuffer[2] =  adc_buffer & 0xFF; 
}

// I2C command to read timed accumulation of analog channel ALT_I
void fnRdTimedAccumAltI(uint8_t* i2cBuffer)
{
     c8a:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_alt_ti>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     c8c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
     c90:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_alt_ti>>16) & 0xFF;
     c92:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
     c96:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_alt_ti>>8) & 0xFF;
     c98:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
     c9c:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_alt_ti & 0xFF; // low byte. Again Mask should optimize out
     c9e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <accumulate_alt_ti>
     ca2:	84 83       	std	Z+4, r24	; 0x04
     ca4:	08 95       	ret

00000ca6 <fnRdTimedAccumPwrI>:
}

// I2C command to read timed accumulation of analog channel PWR_I
void fnRdTimedAccumPwrI(uint8_t* i2cBuffer)
{
     ca6:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_pwr_ti>>24) & 0xFF;
     ca8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
     cac:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_pwr_ti>>16) & 0xFF;
     cae:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
     cb2:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_pwr_ti>>8) & 0xFF;
     cb4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
     cb8:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_pwr_ti & 0xFF;
     cba:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <accumulate_pwr_ti>
     cbe:	84 83       	std	Z+4, r24	; 0x04
     cc0:	08 95       	ret

00000cc2 <fnAnalogRefExternAVCC>:
/* swap the I2C buffer with the ref_extern_avcc_uV in use
    set ref_loaded so main loop will try to save it to eeprom
    the main loop will reload eeprom or default value if new is out of range
*/ 
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     cc2:	fc 01       	movw	r30, r24
    // ref_extern_avcc_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_extern_avcc_uV>>24) & 0xFF;
     cc4:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    ref_extern_avcc_uV = 0x00FFFFFF & ref_extern_avcc_uV; // mask out the old value
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_extern_avcc_uV; // stuff in the new value to save
     cc8:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     ccc:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     cd0:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     cd4:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[1] =  temp; // return the old value
     cd8:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_extern_avcc_uV>>16) & 0xFF;
     cda:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    ref_extern_avcc_uV = 0xFF00FFFF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_extern_avcc_uV; 
     cde:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     ce2:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     ce6:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     cea:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[2] =  temp;
     cee:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_extern_avcc_uV>>8) & 0xFF;
     cf0:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    ref_extern_avcc_uV = 0xFFFF00FF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_extern_avcc_uV; 
     cf4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     cf8:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     cfc:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     d00:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[3] =  temp;
     d04:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_extern_avcc_uV & 0xFF;
     d06:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    ref_extern_avcc_uV = 0xFFFFFF00 & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[4])) & ref_extern_avcc_uV;  
     d0a:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     d0e:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     d12:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     d16:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[4] =  temp;
     d1a:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_AVCC_TOSAVE; // main loop will reload eeprom or default value if new value is out of range
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     d22:	08 95       	ret

00000d24 <fnAnalogRefIntern1V1>:
}

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     d24:	fc 01       	movw	r30, r24
    // ref_intern_1v1_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_intern_1v1_uV>>24) & 0xFF;
     d26:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    ref_intern_1v1_uV = 0x00FFFFFF & ref_intern_1v1_uV; // mask out the old value
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_intern_1v1_uV; // stuff in the new value to save
     d2a:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     d2e:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     d32:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     d36:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[1] =  temp; // return the old value
     d3a:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_intern_1v1_uV>>16) & 0xFF;
     d3c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    ref_intern_1v1_uV = 0xFF00FFFF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_intern_1v1_uV; 
     d40:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     d44:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     d48:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     d4c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[2] =  temp;
     d50:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_intern_1v1_uV>>8) & 0xFF;
     d52:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    ref_intern_1v1_uV = 0xFFFF00FF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_intern_1v1_uV; 
     d56:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     d5a:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     d5e:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     d62:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[3] =  temp;
     d66:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_intern_1v1_uV & 0xFF;
     d68:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    ref_intern_1v1_uV = 0xFFFFFF00 & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[4])) & ref_intern_1v1_uV;  
     d6c:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     d70:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     d74:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     d78:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[4] =  temp;
     d7c:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will reload eeprom or default value if new value is out of range
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     d84:	08 95       	ret

00000d86 <fnNull>:
    }
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     d86:	08 95       	ret

00000d88 <fnRdMgrAddr>:
  *    the manager broadcast the bootload address when the host serial is active (e.g., nRTS) 
  *    all managers lockout serial except the address to bootload and the host */

// I2C_COMMAND_TO_READ_RPU_ADDRESS and set RPU_NORMAL_MODE
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
     d88:	cf 93       	push	r28
    i2cBuffer[1] = rpu_address; // '1' is 0x31
     d8a:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
     d8e:	fc 01       	movw	r30, r24
     d90:	21 83       	std	Z+1, r18	; 0x01
    local_mcu_is_rpu_aware =1; 
     d92:	c1 e0       	ldi	r28, 0x01	; 1
     d94:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <local_mcu_is_rpu_aware>
    
    // end the local mcu lockout. 
    if (localhost_active) 
     d98:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     d9c:	88 23       	and	r24, r24
     d9e:	b1 f1       	breq	.+108    	; 0xe0c <fnRdMgrAddr+0x84>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
     da0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     da4:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     da8:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     dac:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     db0:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
     db4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     db8:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     dbc:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     dc0:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	20 95       	com	r18
     dc8:	30 95       	com	r19
     dca:	2a 70       	andi	r18, 0x0A	; 10
     dcc:	33 27       	eor	r19, r19
     dce:	64 e0       	ldi	r22, 0x04	; 4
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	6a 95       	dec	r22
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <fnRdMgrAddr+0x48>
     dd8:	89 2f       	mov	r24, r25
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	80 95       	com	r24
     dde:	90 95       	com	r25
     de0:	80 75       	andi	r24, 0x50	; 80
     de2:	99 27       	eor	r25, r25
     de4:	74 e0       	ldi	r23, 0x04	; 4
     de6:	95 95       	asr	r25
     de8:	87 95       	ror	r24
     dea:	7a 95       	dec	r23
     dec:	e1 f7       	brne	.-8      	; 0xde6 <fnRdMgrAddr+0x5e>
     dee:	82 2b       	or	r24, r18
     df0:	93 2b       	or	r25, r19
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	1f 92       	push	r1
     df8:	4f 93       	push	r20
     dfa:	86 e1       	ldi	r24, 0x16	; 22
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	9f 93       	push	r25
     e00:	8f 93       	push	r24
     e02:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
     e06:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
     e0a:	39 c0       	rjmp	.+114    	; 0xe7e <fnRdMgrAddr+0xf6>
    }
    else 
        if (bootloader_started)
     e0c:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     e10:	88 23       	and	r24, r24
     e12:	e1 f1       	breq	.+120    	; 0xe8c <fnRdMgrAddr+0x104>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
     e14:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     e18:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     e1c:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     e20:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     e24:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
     e28:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     e2c:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     e30:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     e34:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	20 95       	com	r18
     e3c:	30 95       	com	r19
     e3e:	2a 70       	andi	r18, 0x0A	; 10
     e40:	33 27       	eor	r19, r19
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	8a 95       	dec	r24
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <fnRdMgrAddr+0xbc>
     e4c:	89 2f       	mov	r24, r25
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	80 95       	com	r24
     e52:	90 95       	com	r25
     e54:	80 75       	andi	r24, 0x50	; 80
     e56:	99 27       	eor	r25, r25
     e58:	54 e0       	ldi	r21, 0x04	; 4
     e5a:	95 95       	asr	r25
     e5c:	87 95       	ror	r24
     e5e:	5a 95       	dec	r21
     e60:	e1 f7       	brne	.-8      	; 0xe5a <fnRdMgrAddr+0xd2>
     e62:	82 2b       	or	r24, r18
     e64:	93 2b       	or	r25, r19
     e66:	9f 93       	push	r25
     e68:	8f 93       	push	r24
     e6a:	1f 92       	push	r1
     e6c:	4f 93       	push	r20
     e6e:	86 e1       	ldi	r24, 0x16	; 22
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	9f 93       	push	r25
     e74:	8f 93       	push	r24
     e76:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
     e7a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	20 c0       	rjmp	.+64     	; 0xecc <fnRdMgrAddr+0x144>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
     e8c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	80 5c       	subi	r24, 0xC0	; 192
     e96:	94 4d       	sbci	r25, 0xD4	; 212
     e98:	a1 40       	sbci	r26, 0x01	; 1
     e9a:	b1 09       	sbc	r27, r1
     e9c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     ea0:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     ea4:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     ea8:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     eac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	88 53       	subi	r24, 0x38	; 56
     eb6:	91 4c       	sbci	r25, 0xC1	; 193
     eb8:	a1 40       	sbci	r26, 0x01	; 1
     eba:	b1 09       	sbc	r27, r1
     ebc:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     ec0:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     ec4:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     ec8:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
        }
}
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <fnRdAdcAltI>:
/********* POWER MANAGER ***********
  *  for ALT_I, ALT_V, PWR_I, PWR_V reading     */

// I2C command to read analog channel 0
void fnRdAdcAltI(uint8_t* i2cBuffer)
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_I);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     edc:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; // low byte. Again Mask should optimize out
     ede:	8a 83       	std	Y+2, r24	; 0x02
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <fnRdAdcAltV>:

// I2C command to read analog channel 1
void fnRdAdcAltV(uint8_t* i2cBuffer)
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_V);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     ef2:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
     ef4:	8a 83       	std	Y+2, r24	; 0x02
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <fnRdAdcPwrI>:

// I2C command to read analog channel 6
void fnRdAdcPwrI(uint8_t* i2cBuffer)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_I);
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     f08:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
     f0a:	8a 83       	std	Y+2, r24	; 0x02
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <fnRdAdcPwrV>:

// I2C command to read analog channel 7
void fnRdAdcPwrV(uint8_t* i2cBuffer)
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_V);
     f18:	87 e0       	ldi	r24, 0x07	; 7
     f1a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
     f1e:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; 
     f20:	8a 83       	std	Y+2, r24	; 0x02
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     f28:	7f 92       	push	r7
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	af 92       	push	r10
     f30:	bf 92       	push	r11
     f32:	cf 92       	push	r12
     f34:	df 92       	push	r13
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
    if (test_mode)
     f42:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <test_mode>
     f46:	ee 23       	and	r30, r30
     f48:	09 f4       	brne	.+2      	; 0xf4c <fnRdXcvrCntlInTestMode+0x24>
     f4a:	55 c0       	rjmp	.+170    	; 0xff6 <fnRdXcvrCntlInTestMode+0xce>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     f4c:	e9 b1       	in	r30, 0x09	; 9
     f4e:	b9 b1       	in	r27, 0x09	; 9
     f50:	f6 b1       	in	r31, 0x06	; 6
     f52:	79 b0       	in	r7, 0x09	; 9
     f54:	a9 b0       	in	r10, 0x09	; 9
     f56:	09 b1       	in	r16, 0x09	; 9
     f58:	b9 b0       	in	r11, 0x09	; 9
     f5a:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
     f5c:	10 e0       	ldi	r17, 0x00	; 0
     f5e:	00 0f       	add	r16, r16
     f60:	01 2f       	mov	r16, r17
     f62:	00 1f       	adc	r16, r16
     f64:	11 0b       	sbc	r17, r17
     f66:	00 0f       	add	r16, r16
     f68:	11 1f       	adc	r17, r17
     f6a:	00 0f       	add	r16, r16
     f6c:	11 1f       	adc	r17, r17
     f6e:	c3 fb       	bst	r28, 3
     f70:	cc 27       	eor	r28, r28
     f72:	c0 f9       	bld	r28, 0
     f74:	ac 2f       	mov	r26, r28
     f76:	a0 2b       	or	r26, r16
     f78:	e3 fb       	bst	r30, 3
     f7a:	88 24       	eor	r8, r8
     f7c:	80 f8       	bld	r8, 0
     f7e:	91 2c       	mov	r9, r1
     f80:	e4 01       	movw	r28, r8
     f82:	d6 95       	lsr	r29
     f84:	dc 2f       	mov	r29, r28
     f86:	cc 27       	eor	r28, r28
     f88:	d7 95       	ror	r29
     f8a:	c7 95       	ror	r28
     f8c:	ca 2b       	or	r28, r26
     f8e:	b2 fb       	bst	r27, 2
     f90:	cc 24       	eor	r12, r12
     f92:	c0 f8       	bld	r12, 0
     f94:	d1 2c       	mov	r13, r1
     f96:	d6 01       	movw	r26, r12
     f98:	56 e0       	ldi	r21, 0x06	; 6
     f9a:	aa 0f       	add	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	5a 95       	dec	r21
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <fnRdXcvrCntlInTestMode+0x72>
     fa2:	ac 2b       	or	r26, r28
     fa4:	f2 fb       	bst	r31, 2
     fa6:	ee 24       	eor	r14, r14
     fa8:	e0 f8       	bld	r14, 0
     faa:	f1 2c       	mov	r15, r1
     fac:	f7 01       	movw	r30, r14
     fae:	65 e0       	ldi	r22, 0x05	; 5
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	6a 95       	dec	r22
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <fnRdXcvrCntlInTestMode+0x88>
     fb8:	ea 2b       	or	r30, r26
     fba:	75 fa       	bst	r7, 5
     fbc:	66 27       	eor	r22, r22
     fbe:	60 f9       	bld	r22, 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	f4 e0       	ldi	r31, 0x04	; 4
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	fa 95       	dec	r31
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <fnRdXcvrCntlInTestMode+0x9c>
     fcc:	6e 2b       	or	r22, r30
     fce:	a6 fa       	bst	r10, 6
     fd0:	44 27       	eor	r20, r20
     fd2:	40 f9       	bld	r20, 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	a3 e0       	ldi	r26, 0x03	; 3
     fd8:	44 0f       	add	r20, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	aa 95       	dec	r26
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <fnRdXcvrCntlInTestMode+0xb0>
     fe0:	46 2b       	or	r20, r22
     fe2:	b4 fa       	bst	r11, 4
     fe4:	22 27       	eor	r18, r18
     fe6:	20 f9       	bld	r18, 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	24 2b       	or	r18, r20
     ff0:	fc 01       	movw	r30, r24
     ff2:	21 83       	std	Z+1, r18	; 0x01
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
     ff6:	fc 01       	movw	r30, r24
     ff8:	11 82       	std	Z+1, r1	; 0x01
    }
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	7f 90       	pop	r7
    1014:	08 95       	ret

00001016 <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	fc 01       	movw	r30, r24
    if (test_mode)
    101c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <fnWtXcvrCntlInTestMode+0x10>
    1024:	6e c0       	rjmp	.+220    	; 0x1102 <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    1026:	81 81       	ldd	r24, Z+1	; 0x01
    1028:	88 1f       	adc	r24, r24
    102a:	88 27       	eor	r24, r24
    102c:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    102e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1030:	f8 94       	cli
    {
        if (value_for_bit) 
    1032:	88 23       	and	r24, r24
    1034:	11 f0       	breq	.+4      	; 0x103a <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    1036:	5b 9a       	sbi	0x0b, 3	; 11
    1038:	01 c0       	rjmp	.+2      	; 0x103c <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    103a:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    103c:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    103e:	81 81       	ldd	r24, Z+1	; 0x01
    1040:	86 fb       	bst	r24, 6
    1042:	88 27       	eor	r24, r24
    1044:	80 f9       	bld	r24, 0
    1046:	c8 2f       	mov	r28, r24
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    104c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    104e:	f8 94       	cli
    {
        if (value_for_bit) 
    1050:	cd 2b       	or	r28, r29
    1052:	11 f0       	breq	.+4      	; 0x1058 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    1054:	5a 9a       	sbi	0x0b, 2	; 11
    1056:	01 c0       	rjmp	.+2      	; 0x105a <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1058:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    105a:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	85 fb       	bst	r24, 5
    1060:	aa 27       	eor	r26, r26
    1062:	a0 f9       	bld	r26, 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1066:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1068:	f8 94       	cli
    {
        if (value_for_bit) 
    106a:	ab 2b       	or	r26, r27
    106c:	11 f0       	breq	.+4      	; 0x1072 <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    106e:	42 9a       	sbi	0x08, 2	; 8
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1072:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1074:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	84 fb       	bst	r24, 4
    107a:	66 27       	eor	r22, r22
    107c:	60 f9       	bld	r22, 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1080:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1082:	f8 94       	cli
    {
        if (value_for_bit) 
    1084:	67 2b       	or	r22, r23
    1086:	11 f0       	breq	.+4      	; 0x108c <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    1088:	5d 9a       	sbi	0x0b, 5	; 11
    108a:	01 c0       	rjmp	.+2      	; 0x108e <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    108c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    108e:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    1090:	81 81       	ldd	r24, Z+1	; 0x01
    1092:	83 fb       	bst	r24, 3
    1094:	44 27       	eor	r20, r20
    1096:	40 f9       	bld	r20, 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    109a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    109c:	f8 94       	cli
    {
        if (value_for_bit) 
    109e:	45 2b       	or	r20, r21
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    10a2:	5e 9a       	sbi	0x0b, 6	; 11
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10a6:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10a8:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    10aa:	81 81       	ldd	r24, Z+1	; 0x01
    10ac:	82 ff       	sbrs	r24, 2
    10ae:	11 c0       	rjmp	.+34     	; 0x10d2 <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    10b0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10b4:	87 7e       	andi	r24, 0xE7	; 231
    10b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10bc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    10be:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10c0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10c4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10c6:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10c8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10cc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    10ce:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10d0:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    10d2:	81 81       	ldd	r24, Z+1	; 0x01
    10d4:	81 fb       	bst	r24, 1
    10d6:	22 27       	eor	r18, r18
    10d8:	20 f9       	bld	r18, 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10de:	f8 94       	cli
    {
        if (value_for_bit) 
    10e0:	23 2b       	or	r18, r19
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    10e4:	5c 9a       	sbi	0x0b, 4	; 11
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10e8:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ea:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    10f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10f2:	f8 94       	cli
    {
        if (value_for_bit) 
    10f4:	88 23       	and	r24, r24
    10f6:	11 f0       	breq	.+4      	; 0x10fc <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    10f8:	43 9a       	sbi	0x08, 3	; 8
    10fa:	01 c0       	rjmp	.+2      	; 0x10fe <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    10fc:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10fe:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    1102:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    110a:	fc 01       	movw	r30, r24
    110c:	81 81       	ldd	r24, Z+1	; 0x01
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	f1 f4       	brne	.+60     	; 0x114e <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1112:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1114:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1116:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1118:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    111a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    111c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    111e:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1120:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1122:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1124:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1126:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1128:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    112a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    112c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    112e:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1130:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    1132:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    1136:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
        shutdown_started_at = millis();
    113a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
    113e:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
    1142:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
    1146:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
    114a:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
    114e:	08 95       	ret

00001150 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    1150:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    1152:	fc 01       	movw	r30, r24
    1154:	c1 81       	ldd	r28, Z+1	; 0x01
    1156:	c1 30       	cpi	r28, 0x01	; 1
    1158:	09 f0       	breq	.+2      	; 0x115c <fnWtArduinMode+0xc>
    115a:	45 c0       	rjmp	.+138    	; 0x11e6 <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    115c:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode_started>
    1160:	21 11       	cpse	r18, r1
    1162:	41 c0       	rjmp	.+130    	; 0x11e6 <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    1164:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
    1168:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    116c:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1170:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1174:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    117e:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1182:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1186:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	20 95       	com	r18
    118e:	30 95       	com	r19
    1190:	2a 70       	andi	r18, 0x0A	; 10
    1192:	33 27       	eor	r19, r19
    1194:	84 e0       	ldi	r24, 0x04	; 4
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	8a 95       	dec	r24
    119c:	e1 f7       	brne	.-8      	; 0x1196 <fnWtArduinMode+0x46>
    119e:	89 2f       	mov	r24, r25
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	80 95       	com	r24
    11a4:	90 95       	com	r25
    11a6:	80 75       	andi	r24, 0x50	; 80
    11a8:	99 27       	eor	r25, r25
    11aa:	54 e0       	ldi	r21, 0x04	; 4
    11ac:	95 95       	asr	r25
    11ae:	87 95       	ror	r24
    11b0:	5a 95       	dec	r21
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <fnWtArduinMode+0x5c>
    11b4:	82 2b       	or	r24, r18
    11b6:	93 2b       	or	r25, r19
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	1f 92       	push	r1
    11be:	4f 93       	push	r20
    11c0:	86 e1       	ldi	r24, 0x16	; 22
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    11cc:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    11d0:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    11d4:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    11e6:	fc 01       	movw	r30, r24
    11e8:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    11ee:	cf 93       	push	r28
    11f0:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    11f2:	c1 81       	ldd	r28, Z+1	; 0x01
    11f4:	c1 30       	cpi	r28, 0x01	; 1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <fnStartTestMode+0xc>
    11f8:	48 c0       	rjmp	.+144    	; 0x128a <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    11fa:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    11fe:	81 11       	cpse	r24, r1
    1200:	42 c0       	rjmp	.+132    	; 0x1286 <fnStartTestMode+0x98>
    1202:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1206:	81 11       	cpse	r24, r1
    1208:	3e c0       	rjmp	.+124    	; 0x1286 <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    120a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
    120e:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1212:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1216:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    121a:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    121e:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1222:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1226:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    122a:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	20 95       	com	r18
    1232:	30 95       	com	r19
    1234:	2a 70       	andi	r18, 0x0A	; 10
    1236:	33 27       	eor	r19, r19
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	8a 95       	dec	r24
    1240:	e1 f7       	brne	.-8      	; 0x123a <fnStartTestMode+0x4c>
    1242:	89 2f       	mov	r24, r25
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	80 75       	andi	r24, 0x50	; 80
    124c:	99 27       	eor	r25, r25
    124e:	54 e0       	ldi	r21, 0x04	; 4
    1250:	95 95       	asr	r25
    1252:	87 95       	ror	r24
    1254:	5a 95       	dec	r21
    1256:	e1 f7       	brne	.-8      	; 0x1250 <fnStartTestMode+0x62>
    1258:	82 2b       	or	r24, r18
    125a:	93 2b       	or	r25, r19
    125c:	9f 93       	push	r25
    125e:	8f 93       	push	r24
    1260:	1f 92       	push	r1
    1262:	4f 93       	push	r20
    1264:	86 e1       	ldi	r24, 0x16	; 22
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	9f 93       	push	r25
    126a:	8f 93       	push	r24
    126c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1270:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    1274:	c0 93 ed 02 	sts	0x02ED, r28	; 0x8002ed <test_mode_started>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	04 c0       	rjmp	.+8      	; 0x128e <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	01 c0       	rjmp	.+2      	; 0x128c <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    128a:	83 e0       	ldi	r24, 0x03	; 3
    128c:	81 83       	std	Z+1, r24	; 0x01
    }
}
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    129a:	19 81       	ldd	r17, Y+1	; 0x01
    129c:	11 30       	cpi	r17, 0x01	; 1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <fnEndTestMode+0x10>
    12a0:	61 c0       	rjmp	.+194    	; 0x1364 <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    12a2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    12a6:	81 11       	cpse	r24, r1
    12a8:	5d c0       	rjmp	.+186    	; 0x1364 <fnEndTestMode+0xd2>
    12aa:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <fnEndTestMode+0x22>
    12b2:	58 c0       	rjmp	.+176    	; 0x1364 <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12b6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12b8:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12ba:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12be:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12c0:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12c2:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    12c4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12c8:	88 61       	ori	r24, 0x18	; 24
    12ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12ce:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12d0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12d2:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12d4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12d6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12d8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12da:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12dc:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    12de:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
    12e2:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    12e6:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    12ea:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    12ee:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    12f2:	8e ef       	ldi	r24, 0xFE	; 254
    12f4:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    12f8:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    12fc:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
    1300:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	20 95       	com	r18
    1308:	30 95       	com	r19
    130a:	2a 70       	andi	r18, 0x0A	; 10
    130c:	33 27       	eor	r19, r19
    130e:	a9 01       	movw	r20, r18
    1310:	24 e0       	ldi	r18, 0x04	; 4
    1312:	44 0f       	add	r20, r20
    1314:	55 1f       	adc	r21, r21
    1316:	2a 95       	dec	r18
    1318:	e1 f7       	brne	.-8      	; 0x1312 <fnEndTestMode+0x80>
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	20 95       	com	r18
    1320:	30 95       	com	r19
    1322:	20 75       	andi	r18, 0x50	; 80
    1324:	33 27       	eor	r19, r19
    1326:	64 e0       	ldi	r22, 0x04	; 4
    1328:	35 95       	asr	r19
    132a:	27 95       	ror	r18
    132c:	6a 95       	dec	r22
    132e:	e1 f7       	brne	.-8      	; 0x1328 <fnEndTestMode+0x96>
    1330:	24 2b       	or	r18, r20
    1332:	35 2b       	or	r19, r21
    1334:	3f 93       	push	r19
    1336:	2f 93       	push	r18
    1338:	1f 92       	push	r1
    133a:	9f 93       	push	r25
    133c:	86 e1       	ldi	r24, 0x16	; 22
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	9f 93       	push	r25
    1342:	8f 93       	push	r24
    1344:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1348:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    134c:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    1350:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    1364:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	08 95       	ret

0000136e <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    136e:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	29 2f       	mov	r18, r25
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	26 17       	cp	r18, r22
    1378:	37 07       	cpc	r19, r23
    137a:	54 f4       	brge	.+20     	; 0x1390 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    137c:	fa 01       	movw	r30, r20
    137e:	e2 0f       	add	r30, r18
    1380:	f3 1f       	adc	r31, r19
    1382:	80 81       	ld	r24, Z
    1384:	f9 01       	movw	r30, r18
    1386:	e3 5f       	subi	r30, 0xF3	; 243
    1388:	fc 4f       	sbci	r31, 0xFC	; 252
    138a:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	f1 cf       	rjmp	.-30     	; 0x1372 <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    1390:	90 32       	cpi	r25, 0x20	; 32
    1392:	20 f4       	brcc	.+8      	; 0x139c <receive_i2c_event+0x2e>
    1394:	f9 01       	movw	r30, r18
    1396:	e3 5f       	subi	r30, 0xF3	; 243
    1398:	fc 4f       	sbci	r31, 0xFC	; 252
    139a:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    139c:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    13a0:	62 30       	cpi	r22, 0x02	; 2
    13a2:	10 f4       	brcc	.+4      	; 0x13a8 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    13a8:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <i2c0Buffer>
    13ac:	e8 2f       	mov	r30, r24
    13ae:	e2 95       	swap	r30
    13b0:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    13b2:	e4 30       	cpi	r30, 0x04	; 4
    13b4:	10 f0       	brcs	.+4      	; 0x13ba <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    13b6:	8e ef       	ldi	r24, 0xFE	; 254
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    13ba:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    13bc:	88 30       	cpi	r24, 0x08	; 8
    13be:	20 f0       	brcs	.+8      	; 0x13c8 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    13c0:	8d ef       	ldi	r24, 0xFD	; 253
    13c2:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    13c6:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    13c8:	98 e0       	ldi	r25, 0x08	; 8
    13ca:	e9 9f       	mul	r30, r25
    13cc:	f0 01       	movw	r30, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	e8 0f       	add	r30, r24
    13d2:	f1 1d       	adc	r31, r1
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	e5 5e       	subi	r30, 0xE5	; 229
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	01 90       	ld	r0, Z+
    13de:	f0 81       	ld	r31, Z
    13e0:	e0 2d       	mov	r30, r0
    13e2:	8d e0       	ldi	r24, 0x0D	; 13
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	09 94       	ijmp

000013e8 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    13e8:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    13ec:	8d e0       	ldi	r24, 0x0D	; 13
    13ee:	93 e0       	ldi	r25, 0x03	; 3
    13f0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <twi0_transmit>
    if (return_code != 0)
    13f4:	88 23       	and	r24, r24
    13f6:	29 f0       	breq	.+10     	; 0x1402 <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    13f8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
    13fc:	82 70       	andi	r24, 0x02	; 2
    13fe:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
    1402:	08 95       	ret

00001404 <fnRdMgrAddrQuietly>:
}

// I2C_COMMAND_TO_READ_RPU_ADDRESS
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = rpu_address; // '1' is 0x31
    1404:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
    1408:	fc 01       	movw	r30, r24
    140a:	21 83       	std	Z+1, r18	; 0x01
    140c:	08 95       	ret

0000140e <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    140e:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <inBytes_to_handle+0x1>
    1412:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    1416:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    141a:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <smbus_has_numBytes_to_handle>
    141e:	08 95       	ret

00001420 <handle_smbus_receive>:
        {fnWtArduinMode, fnRdArduinMode, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull},
        {fnRdAdcAltI, fnRdAdcAltV, fnRdAdcPwrI, fnRdAdcPwrV, fnRdTimedAccumAltI, fnRdTimedAccumPwrI, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
    1420:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
    1424:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    smbus_has_numBytes_to_handle = 0; 
    1428:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    142c:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    1430:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <inBytes_to_handle>
    1434:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <inBytes_to_handle+0x1>
    // read_i2c_block_data has a single command byte in its data set
    // it will write i2c address, the command* byte, and then cause a repeated start
    // followed by the i2c address (again) and then reading** the data
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    1438:	21 30       	cpi	r18, 0x01	; 1
    143a:	31 05       	cpc	r19, r1
    143c:	11 f0       	breq	.+4      	; 0x1442 <handle_smbus_receive+0x22>
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	23 c0       	rjmp	.+70     	; 0x1488 <handle_smbus_receive+0x68>
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    1442:	90 81       	ld	r25, Z
    1444:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    1448:	98 13       	cpse	r25, r24
    144a:	59 c0       	rjmp	.+178    	; 0x14fe <handle_smbus_receive+0xde>
    144c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    1450:	81 11       	cpse	r24, r1
    1452:	55 c0       	rjmp	.+170    	; 0x14fe <handle_smbus_receive+0xde>
        {
            for(i = 0; i < smbusBufferLength; ++i)
    1454:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    1458:	ad e2       	ldi	r26, 0x2D	; 45
    145a:	b3 e0       	ldi	r27, 0x03	; 3
    145c:	e1 e5       	ldi	r30, 0x51	; 81
    145e:	f3 e0       	ldi	r31, 0x03	; 3
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	98 17       	cp	r25, r24
    1464:	21 f0       	breq	.+8      	; 0x146e <handle_smbus_receive+0x4e>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
    1466:	2d 91       	ld	r18, X+
    1468:	21 93       	st	Z+, r18
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
        {
            for(i = 0; i < smbusBufferLength; ++i)
    146a:	9f 5f       	subi	r25, 0xFF	; 255
    146c:	fa cf       	rjmp	.-12     	; 0x1462 <handle_smbus_receive+0x42>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
            }
            if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    146e:	80 32       	cpi	r24, 0x20	; 32
    1470:	28 f4       	brcc	.+10     	; 0x147c <handle_smbus_receive+0x5c>
    1472:	e8 2f       	mov	r30, r24
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	ef 5a       	subi	r30, 0xAF	; 175
    1478:	fc 4f       	sbci	r31, 0xFC	; 252
    147a:	11 82       	std	Z+1, r1	; 0x01
            smbus_oldBufferLength = smbusBufferLength;
    147c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
            transmit_data_ready = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    1486:	08 95       	ret
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    1488:	84 2f       	mov	r24, r20
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	54 f4       	brge	.+20     	; 0x14a6 <handle_smbus_receive+0x86>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    1492:	df 01       	movw	r26, r30
    1494:	a8 0f       	add	r26, r24
    1496:	b9 1f       	adc	r27, r25
    1498:	5c 91       	ld	r21, X
    149a:	dc 01       	movw	r26, r24
    149c:	a3 5d       	subi	r26, 0xD3	; 211
    149e:	bc 4f       	sbci	r27, 0xFC	; 252
    14a0:	5c 93       	st	X, r21
            smbus_oldBufferLength = smbusBufferLength;
            transmit_data_ready = 1;
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    14a2:	4f 5f       	subi	r20, 0xFF	; 255
    14a4:	f1 cf       	rjmp	.-30     	; 0x1488 <handle_smbus_receive+0x68>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    }
    if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    14a6:	40 32       	cpi	r20, 0x20	; 32
    14a8:	20 f4       	brcc	.+8      	; 0x14b2 <handle_smbus_receive+0x92>
    14aa:	fc 01       	movw	r30, r24
    14ac:	e3 5d       	subi	r30, 0xD3	; 211
    14ae:	fc 4f       	sbci	r31, 0xFC	; 252
    14b0:	11 82       	std	Z+1, r1	; 0x01
    smbusBufferLength = numBytes;
    14b2:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

    // an read_i2c_block_data has a command byte 
    if( !(smbusBufferLength > 0) ) 
    14b6:	21 11       	cpse	r18, r1
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <handle_smbus_receive+0x9e>
    {
        smbusBuffer[0] = 0xFF; // error code for small size.
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	0d c0       	rjmp	.+26     	; 0x14d8 <handle_smbus_receive+0xb8>
        return; // not valid, do nothing just echo an error code.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (smbusBuffer[0] & 0xF0) >> 4;
    14be:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    14c2:	e8 2f       	mov	r30, r24
    14c4:	e2 95       	swap	r30
    14c6:	ef 70       	andi	r30, 0x0F	; 15
    if(group >= GROUP) 
    14c8:	e4 30       	cpi	r30, 0x04	; 4
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <handle_smbus_receive+0xb0>
    {
        smbusBuffer[0] = 0xFE; // error code for bad group.
    14cc:	8e ef       	ldi	r24, 0xFE	; 254
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <handle_smbus_receive+0xb8>
        return; 
    }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = smbusBuffer[0] & 0x0F;
    14d0:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    14d2:	88 30       	cpi	r24, 0x08	; 8
    14d4:	20 f0       	brcs	.+8      	; 0x14de <handle_smbus_receive+0xbe>
    {
        smbusBuffer[0] = 0xFD; // error code for bad command.
    14d6:	8d ef       	ldi	r24, 0xFD	; 253
    14d8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <smbusBuffer>
        return; // not valid, do nothing but echo error code.
    14dc:	08 95       	ret
    }

    // Call the i2c command function and return
    (* pf[group][command])(smbusBuffer);
    14de:	98 e0       	ldi	r25, 0x08	; 8
    14e0:	e9 9f       	mul	r30, r25
    14e2:	f0 01       	movw	r30, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	e8 0f       	add	r30, r24
    14e8:	f1 1d       	adc	r31, r1
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	e5 5a       	subi	r30, 0xA5	; 165
    14f0:	fe 4f       	sbci	r31, 0xFE	; 254
    14f2:	01 90       	ld	r0, Z+
    14f4:	f0 81       	ld	r31, Z
    14f6:	e0 2d       	mov	r30, r0
    14f8:	8d e2       	ldi	r24, 0x2D	; 45
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	09 94       	ijmp
    14fe:	08 95       	ret

00001500 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    1500:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    1504:	81 e5       	ldi	r24, 0x51	; 81
    1506:	93 e0       	ldi	r25, 0x03	; 3
    1508:	0e 94 0f 10 	call	0x201e	; 0x201e <twi1_transmit>
    transmit_data_ready = 0;
    150c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    1510:	08 95       	ret

00001512 <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    1512:	cf 93       	push	r28
    if (eeprom_is_ready())
    1514:	f9 99       	sbic	0x1f, 1	; 31
    1516:	24 c0       	rjmp	.+72     	; 0x1560 <save_rpu_addr_state+0x4e>
    {
        // up to first EE_RPU_IDMAX states may be used for writhing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    1518:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	98 0f       	add	r25, r24
    1520:	9a 30       	cpi	r25, 0x0A	; 10
    1522:	90 f4       	brcc	.+36     	; 0x1548 <save_rpu_addr_state+0x36>
        { // write "RPUadpt\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	fc 01       	movw	r30, r24
    1528:	ed 54       	subi	r30, 0x4D	; 77
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    152e:	6c 2f       	mov	r22, r28
    1530:	87 96       	adiw	r24, 0x27	; 39
    1532:	0e 94 9f 14 	call	0x293e	; 0x293e <eeprom_write_byte>
            
            if (value == '\0') 
    1536:	c1 11       	cpse	r28, r1
    1538:	02 c0       	rjmp	.+4      	; 0x153e <save_rpu_addr_state+0x2c>
            {
                write_rpu_address_to_eeprom = 11;
    153a:	8b e0       	ldi	r24, 0x0B	; 11
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <save_rpu_addr_state+0x32>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    153e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    1548:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    154c:	8b 30       	cpi	r24, 0x0B	; 11
    154e:	41 f4       	brne	.+16     	; 0x1560 <save_rpu_addr_state+0x4e>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    1550:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <rpu_address>
    1554:	82 e3       	ldi	r24, 0x32	; 50
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 9f 14 	call	0x293e	; 0x293e <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    155c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
        }
    }
}
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	c8 e2       	ldi	r28, 0x28	; 40
    156c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    156e:	fe 01       	movw	r30, r28
    1570:	e4 57       	subi	r30, 0x74	; 116
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    1576:	ce 01       	movw	r24, r28
    1578:	0e 94 8b 14 	call	0x2916	; 0x2916 <eeprom_read_byte>
        if (id != ee_id) 
    157c:	18 13       	cpse	r17, r24
    157e:	06 c0       	rjmp	.+12     	; 0x158c <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    1580:	11 23       	and	r17, r17
    1582:	31 f0       	breq	.+12     	; 0x1590 <check_for_eeprom_id+0x2c>
    1584:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    1586:	c2 33       	cpi	r28, 0x32	; 50
    1588:	d1 05       	cpc	r29, r1
    158a:	89 f7       	brne	.-30     	; 0x156e <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	08 95       	ret

0000159a <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    159e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    15a2:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <adc_started_at>
    15a6:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <adc_started_at+0x1>
    15aa:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <adc_started_at+0x2>
    15ae:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <adc_started_at+0x3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	80 1b       	sub	r24, r16
    15b8:	91 0b       	sbc	r25, r17
    15ba:	a2 0b       	sbc	r26, r18
    15bc:	b3 0b       	sbc	r27, r19
    15be:	0b 97       	sbiw	r24, 0x0b	; 11
    15c0:	a1 05       	cpc	r26, r1
    15c2:	b1 05       	cpc	r27, r1
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <adc_burst+0x2e>
    15c6:	4c c0       	rjmp	.+152    	; 0x1660 <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <analogRead>
    15ce:	09 2e       	mov	r0, r25
    15d0:	00 0c       	add	r0, r0
    15d2:	aa 0b       	sbc	r26, r26
    15d4:	bb 0b       	sbc	r27, r27
    15d6:	40 91 71 03 	lds	r20, 0x0371	; 0x800371 <accumulate_alt_ti>
    15da:	50 91 72 03 	lds	r21, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
    15de:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
    15e2:	70 91 74 03 	lds	r23, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
    15e6:	84 0f       	add	r24, r20
    15e8:	95 1f       	adc	r25, r21
    15ea:	a6 1f       	adc	r26, r22
    15ec:	b7 1f       	adc	r27, r23
    15ee:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <accumulate_alt_ti>
    15f2:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <accumulate_alt_ti+0x1>
    15f6:	a0 93 73 03 	sts	0x0373, r26	; 0x800373 <accumulate_alt_ti+0x2>
    15fa:	b0 93 74 03 	sts	0x0374, r27	; 0x800374 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    15fe:	86 e0       	ldi	r24, 0x06	; 6
    1600:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <analogRead>
    1604:	09 2e       	mov	r0, r25
    1606:	00 0c       	add	r0, r0
    1608:	aa 0b       	sbc	r26, r26
    160a:	bb 0b       	sbc	r27, r27
    160c:	40 91 75 03 	lds	r20, 0x0375	; 0x800375 <accumulate_pwr_ti>
    1610:	50 91 76 03 	lds	r21, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
    1614:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
    1618:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
    161c:	84 0f       	add	r24, r20
    161e:	95 1f       	adc	r25, r21
    1620:	a6 1f       	adc	r26, r22
    1622:	b7 1f       	adc	r27, r23
    1624:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <accumulate_pwr_ti>
    1628:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <accumulate_pwr_ti+0x1>
    162c:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <accumulate_pwr_ti+0x2>
    1630:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	0e 94 75 0d 	call	0x1aea	; 0x1aea <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    163a:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <adc_started_at>
    163e:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <adc_started_at+0x1>
    1642:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <adc_started_at+0x2>
    1646:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <adc_started_at+0x3>
    164a:	0a 96       	adiw	r24, 0x0a	; 10
    164c:	a1 1d       	adc	r26, r1
    164e:	b1 1d       	adc	r27, r1
    1650:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <adc_started_at>
    1654:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <adc_started_at+0x1>
    1658:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <adc_started_at+0x2>
    165c:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <adc_started_at+0x3>
    } 
}
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret

00001666 <IsValidValForAvccRef>:
uint8_t ref_loaded;
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

uint8_t IsValidValForAvccRef(uint32_t *value) 
{
    1666:	fc 01       	movw	r30, r24
    1668:	40 81       	ld	r20, Z
    166a:	51 81       	ldd	r21, Z+1	; 0x01
    166c:	62 81       	ldd	r22, Z+2	; 0x02
    166e:	73 81       	ldd	r23, Z+3	; 0x03
    1670:	41 52       	subi	r20, 0x21	; 33
    1672:	5a 4a       	sbci	r21, 0xAA	; 170
    1674:	64 44       	sbci	r22, 0x44	; 68
    1676:	71 09       	sbc	r23, r1
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	4f 33       	cpi	r20, 0x3F	; 63
    167c:	52 44       	sbci	r21, 0x42	; 66
    167e:	6f 40       	sbci	r22, 0x0F	; 15
    1680:	71 05       	cpc	r23, r1
    1682:	08 f0       	brcs	.+2      	; 0x1686 <IsValidValForAvccRef+0x20>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1686:	08 95       	ret

00001688 <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref(uint32_t *value) 
{
    1688:	fc 01       	movw	r30, r24
    168a:	40 81       	ld	r20, Z
    168c:	51 81       	ldd	r21, Z+1	; 0x01
    168e:	62 81       	ldd	r22, Z+2	; 0x02
    1690:	73 81       	ldd	r23, Z+3	; 0x03
    1692:	41 5a       	subi	r20, 0xA1	; 161
    1694:	5b 4b       	sbci	r21, 0xBB	; 187
    1696:	6d 40       	sbci	r22, 0x0D	; 13
    1698:	71 09       	sbc	r23, r1
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	4f 37       	cpi	r20, 0x7F	; 127
    169e:	5a 41       	sbci	r21, 0x1A	; 26
    16a0:	66 40       	sbci	r22, 0x06	; 6
    16a2:	71 05       	cpc	r23, r1
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <IsValidValFor1V1Ref+0x20>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    16a8:	08 95       	ret

000016aa <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    16aa:	8e e1       	ldi	r24, 0x1E	; 30
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 99 14 	call	0x2932	; 0x2932 <eeprom_read_word>
    if ( eeprom_is_ready() )
    16b2:	f9 99       	sbic	0x1f, 1	; 31
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    16b6:	84 34       	cpi	r24, 0x44	; 68
    16b8:	91 44       	sbci	r25, 0x41	; 65
    16ba:	49 f0       	breq	.+18     	; 0x16ce <WriteEeReferenceId+0x24>
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    16bc:	64 e4       	ldi	r22, 0x44	; 68
    16be:	71 e4       	ldi	r23, 0x41	; 65
    16c0:	8e e1       	ldi	r24, 0x1E	; 30
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 b5 14 	call	0x296a	; 0x296a <eeprom_write_word>
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    16d0:	08 95       	ret

000016d2 <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 93 14 	call	0x2926	; 0x2926 <eeprom_read_dword>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    16de:	f9 99       	sbic	0x1f, 1	; 31
    16e0:	12 c0       	rjmp	.+36     	; 0x1706 <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    16e2:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    16e6:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    16ea:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    16ee:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    16f2:	84 17       	cp	r24, r20
    16f4:	95 07       	cpc	r25, r21
    16f6:	a6 07       	cpc	r26, r22
    16f8:	b7 07       	cpc	r27, r23
    16fa:	39 f0       	breq	.+14     	; 0x170a <WriteEeReferenceAvcc+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    16fc:	80 e2       	ldi	r24, 0x20	; 32
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 ad 14 	call	0x295a	; 0x295a <eeprom_write_dword>
    1704:	02 c0       	rjmp	.+4      	; 0x170a <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    170c:	08 95       	ret

0000170e <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    170e:	84 e2       	ldi	r24, 0x24	; 36
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 93 14 	call	0x2926	; 0x2926 <eeprom_read_dword>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    171a:	f9 99       	sbic	0x1f, 1	; 31
    171c:	12 c0       	rjmp	.+36     	; 0x1742 <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    171e:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    1722:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    1726:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    172a:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    172e:	84 17       	cp	r24, r20
    1730:	95 07       	cpc	r25, r21
    1732:	a6 07       	cpc	r26, r22
    1734:	b7 07       	cpc	r27, r23
    1736:	39 f0       	breq	.+14     	; 0x1746 <WriteEeReference1V1+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    1738:	84 e2       	ldi	r24, 0x24	; 36
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 ad 14 	call	0x295a	; 0x295a <eeprom_write_dword>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1748:	08 95       	ret

0000174a <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    174a:	8e e1       	ldi	r24, 0x1E	; 30
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 99 14 	call	0x2932	; 0x2932 <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1752:	84 34       	cpi	r24, 0x44	; 68
    1754:	91 44       	sbci	r25, 0x41	; 65
    1756:	e1 f4       	brne	.+56     	; 0x1790 <LoadAnalogRefFromEEPROM+0x46>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 93 14 	call	0x2926	; 0x2926 <eeprom_read_dword>
    1760:	60 93 7e 03 	sts	0x037E, r22	; 0x80037e <ref_extern_avcc_uV>
    1764:	70 93 7f 03 	sts	0x037F, r23	; 0x80037f <ref_extern_avcc_uV+0x1>
    1768:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <ref_extern_avcc_uV+0x2>
    176c:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    1770:	84 e2       	ldi	r24, 0x24	; 36
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 93 14 	call	0x2926	; 0x2926 <eeprom_read_dword>
    1778:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <ref_intern_1v1_uV>
    177c:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <ref_intern_1v1_uV+0x1>
    1780:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <ref_intern_1v1_uV+0x2>
    1784:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_LOADED;
    1788:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	08 95       	ret
        return 1;
    }
    else
    {
        ref_extern_avcc_uV = 5000000UL; // set a default value
    1790:	80 e4       	ldi	r24, 0x40	; 64
    1792:	9b e4       	ldi	r25, 0x4B	; 75
    1794:	ac e4       	ldi	r26, 0x4C	; 76
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <ref_extern_avcc_uV>
    179c:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <ref_extern_avcc_uV+0x1>
    17a0:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <ref_extern_avcc_uV+0x2>
    17a4:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = 1080000UL; // default
    17a8:	80 ec       	ldi	r24, 0xC0	; 192
    17aa:	9a e7       	ldi	r25, 0x7A	; 122
    17ac:	a0 e1       	ldi	r26, 0x10	; 16
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
    17b4:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
    17b8:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
    17bc:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_DEFAULT;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
        return 0;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    17c8:	08 95       	ret

000017ca <ref2ee>:

// save calibration referances, they are uploaded from I2C which sets ref_loaded
void ref2ee(void)
{
    if ( IsValidValForAvccRef(&ref_extern_avcc_uV) && IsValidValFor1V1Ref(&ref_intern_1v1_uV) )
    17ca:	8e e7       	ldi	r24, 0x7E	; 126
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	0e 94 33 0b 	call	0x1666	; 0x1666 <IsValidValForAvccRef>
    17d2:	88 23       	and	r24, r24
    17d4:	29 f1       	breq	.+74     	; 0x1820 <ref2ee+0x56>
    17d6:	82 e8       	ldi	r24, 0x82	; 130
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	0e 94 44 0b 	call	0x1688	; 0x1688 <IsValidValFor1V1Ref>
    17de:	88 23       	and	r24, r24
    17e0:	f9 f0       	breq	.+62     	; 0x1820 <ref2ee+0x56>
    {
        uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    17e2:	8e e1       	ldi	r24, 0x1E	; 30
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 99 14 	call	0x2932	; 0x2932 <eeprom_read_word>
        if ( (id != 0x4144) & (ref_loaded > REF_DEFAULT) ) // 'A' is 0x41 and 'D' is 0x44
    17ea:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <ref_loaded>
    17ee:	84 34       	cpi	r24, 0x44	; 68
    17f0:	91 44       	sbci	r25, 0x41	; 65
    17f2:	21 f0       	breq	.+8      	; 0x17fc <ref2ee+0x32>
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	10 f0       	brcs	.+4      	; 0x17fc <ref2ee+0x32>
        {
            WriteEeReferenceId();
    17f8:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <WriteEeReferenceId>
            return; // that is enough for this loop
         }
        else 
        {
            if (ref_loaded == REF_1V1_TOSAVE)
    17fc:	23 30       	cpi	r18, 0x03	; 3
    17fe:	39 f4       	brne	.+14     	; 0x180e <ref2ee+0x44>
            {
                if (WriteEeReference1V1())
    1800:	0e 94 87 0b 	call	0x170e	; 0x170e <WriteEeReference1V1>
    1804:	88 23       	and	r24, r24
    1806:	19 f0       	breq	.+6      	; 0x180e <ref2ee+0x44>
                {
                    ref_loaded = REF_LOADED;
    1808:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
                    return; // all done
    180c:	08 95       	ret
                }
            }
            if (ref_loaded == REF_AVCC_TOSAVE)
    180e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	39 f4       	brne	.+14     	; 0x1824 <ref2ee+0x5a>
            {
                if (WriteEeReferenceAvcc())
    1816:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <WriteEeReferenceAvcc>
    181a:	81 11       	cpse	r24, r1
    181c:	f5 cf       	rjmp	.-22     	; 0x1808 <ref2ee+0x3e>
    181e:	08 95       	ret
        }       

    }
    else
    {
        LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1820:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <LoadAnalogRefFromEEPROM>
    1824:	08 95       	ret

00001826 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	ef 93       	push	r30
    183e:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1840:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    1844:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    1848:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    184a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	8f 71       	andi	r24, 0x1F	; 31
    1854:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    1856:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	84 17       	cp	r24, r20
    185e:	95 07       	cpc	r25, r21
    1860:	39 f0       	breq	.+14     	; 0x1870 <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    1862:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1866:	fc 01       	movw	r30, r24
    1868:	eb 55       	subi	r30, 0x5B	; 91
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	30 83       	st	Z, r19
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1870:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    1872:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	8f 93       	push	r24
    189c:	9f 93       	push	r25
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    18a2:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    18a6:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    18aa:	98 17       	cp	r25, r24
    18ac:	79 f0       	breq	.+30     	; 0x18cc <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    18ae:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	8f 71       	andi	r24, 0x1F	; 31
    18b8:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    18ba:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    18be:	fc 01       	movw	r30, r24
    18c0:	eb 53       	subi	r30, 0x3B	; 59
    18c2:	fe 4f       	sbci	r31, 0xFE	; 254
    18c4:	80 81       	ld	r24, Z
    18c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    18cc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    18d0:	8f 7d       	andi	r24, 0xDF	; 223
    18d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    18e8:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    18ec:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    18f0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    18f4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    18f8:	97 ff       	sbrs	r25, 7
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    18fc:	22 e0       	ldi	r18, 0x02	; 2
    18fe:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    1902:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    1904:	28 e9       	ldi	r18, 0x98	; 152
    1906:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    190a:	26 e0       	ldi	r18, 0x06	; 6
    190c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    1910:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    1914:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1918:	08 95       	ret

0000191a <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    191a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    191e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1922:	98 17       	cp	r25, r24
    1924:	a1 f0       	breq	.+40     	; 0x194e <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    1926:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	8f 71       	andi	r24, 0x1F	; 31
    1930:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    1932:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1936:	fc 01       	movw	r30, r24
    1938:	eb 55       	subi	r30, 0x5B	; 91
    193a:	fe 4f       	sbci	r31, 0xFE	; 254
    193c:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    193e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	98 2f       	mov	r25, r24
    1946:	88 27       	eor	r24, r24
    1948:	82 0f       	add	r24, r18
    194a:	91 1d       	adc	r25, r1
    194c:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    1952:	08 95       	ret

00001954 <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1954:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	2f 71       	andi	r18, 0x1F	; 31
    1960:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    1962:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	24 17       	cp	r18, r20
    196a:	35 07       	cpc	r19, r21
    196c:	d1 f3       	breq	.-12     	; 0x1962 <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    196e:	f9 01       	movw	r30, r18
    1970:	eb 53       	subi	r30, 0x3B	; 59
    1972:	fe 4f       	sbci	r31, 0xFE	; 254
    1974:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    1976:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    197a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    197e:	80 62       	ori	r24, 0x20	; 32
    1980:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1984:	08 95       	ret

00001986 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    1986:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uart0_putc>
	return 0;
}
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	08 95       	ret

00001990 <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    1990:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1994:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	80 96       	adiw	r24, 0x20	; 32
    199c:	82 1b       	sub	r24, r18
    199e:	91 09       	sbc	r25, r1
} /* uart0_available */
    19a0:	8f 71       	andi	r24, 0x1F	; 31
    19a2:	99 27       	eor	r25, r25
    19a4:	08 95       	ret

000019a6 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    19a6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <uart0_available>
    19aa:	89 2b       	or	r24, r25
    19ac:	e1 f3       	breq	.-8      	; 0x19a6 <uartstream0_getchar>
    res = uart0_getc();
    19ae:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_getc>
    if(res == '\r') res = '\n';
    19b2:	8d 30       	cpi	r24, 0x0D	; 13
    19b4:	91 05       	cpc	r25, r1
    19b6:	11 f4       	brne	.+4      	; 0x19bc <uartstream0_getchar+0x16>
    19b8:	8a e0       	ldi	r24, 0x0A	; 10
    19ba:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    19bc:	99 27       	eor	r25, r25
    19be:	08 95       	ret

000019c0 <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	8b 01       	movw	r16, r22
    19c6:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	80 5a       	subi	r24, 0xA0	; 160
    19ce:	9c 41       	sbci	r25, 0x1C	; 28
    19d0:	a9 4e       	sbci	r26, 0xE9	; 233
    19d2:	bf 4f       	sbci	r27, 0xFF	; 255
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	43 e0       	ldi	r20, 0x03	; 3
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	4a 95       	dec	r20
    19e4:	d1 f7       	brne	.-12     	; 0x19da <uartstream0_init+0x1a>
    19e6:	a9 01       	movw	r20, r18
    19e8:	98 01       	movw	r18, r16
    19ea:	e4 e0       	ldi	r30, 0x04	; 4
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	44 1f       	adc	r20, r20
    19f2:	55 1f       	adc	r21, r21
    19f4:	ea 95       	dec	r30
    19f6:	d1 f7       	brne	.-12     	; 0x19ec <uartstream0_init+0x2c>
    19f8:	0e 94 84 11 	call	0x2308	; 0x2308 <__udivmodsi4>
    19fc:	c9 01       	movw	r24, r18
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <uart0_init>
	return &uartstream0_f;
}	
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <__vector_21>:
volatile uint8_t analog_reference;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	2f 93       	push	r18
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	ef 93       	push	r30
    1a20:	ff 93       	push	r31
    // ADCL contain lower 8 bits, ADCH upper (two bits)
    // Must read ADCL first (news ADC is now defined for this)
    adc[adc_channel] = ADC;
    1a22:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <adc_channel>
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1a2c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	e8 57       	subi	r30, 0x78	; 120
    1a36:	fc 4f       	sbci	r31, 0xFC	; 252
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    //adc[adc_channel] = ADCL | (ADCH << 8);
    
    ++adc_channel;
    1a3c:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <adc_channel>
    1a40:	8f 5f       	subi	r24, 0xFF	; 255
    1a42:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <adc_channel>
    
    // skip since only ch 0,1,6,7: ALT_I,ALT_V,PWR_I,PWR_V are used for analog input
    if (adc_channel == 2)
    1a46:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <adc_channel>
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <__vector_21+0x46>
    {
        adc_channel = 6;
    1a4e:	86 e0       	ldi	r24, 0x06	; 6
    1a50:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <adc_channel>
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    1a54:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <adc_channel>
    1a58:	88 30       	cpi	r24, 0x08	; 8
    1a5a:	b0 f4       	brcc	.+44     	; 0x1a88 <__vector_21+0x7a>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1a5c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1a60:	80 7f       	andi	r24, 0xF0	; 240
    1a62:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    1a66:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1a6a:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <analog_reference>
    1a6e:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <adc_channel>
    1a72:	8f 71       	andi	r24, 0x1F	; 31
    1a74:	82 2b       	or	r24, r18
    1a76:	89 0f       	add	r24, r25
    1a78:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    1a7c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a80:	80 64       	ori	r24, 0x40	; 64
    1a82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a86:	0c c0       	rjmp	.+24     	; 0x1aa0 <__vector_21+0x92>
        adc_channel = 6;
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    1a88:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <adc_channel>
        adc[ADC_CHANNELS] = 0x7FFF; // mark to notify that burst is done
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	9f e7       	ldi	r25, 0x7F	; 127
    1a90:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <adc+0x11>
    1a94:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <adc+0x10>
        if (!free_running)
    1a98:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <free_running>
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	de cf       	rjmp	.-68     	; 0x1a5c <__vector_21+0x4e>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    1aa0:	ff 91       	pop	r31
    1aa2:	ef 91       	pop	r30
    1aa4:	9f 91       	pop	r25
    1aa6:	8f 91       	pop	r24
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a pin.
    analog_reference = reference;
    1ab4:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <analog_reference>
    free_running = 0;
    1ab8:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1abc:	ec e7       	ldi	r30, 0x7C	; 124
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    1ac2:	90 73       	andi	r25, 0x30	; 48
    1ac4:	89 2b       	or	r24, r25
    1ac6:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    1ac8:	ea e7       	ldi	r30, 0x7A	; 122
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	84 60       	ori	r24, 0x04	; 4
    1ad0:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    1ad2:	80 81       	ld	r24, Z
    1ad4:	82 60       	ori	r24, 0x02	; 2
    1ad6:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    1ad8:	80 81       	ld	r24, Z
    1ada:	8e 7f       	andi	r24, 0xFE	; 254
    1adc:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS2);
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
	// enable a2d conversions
	ADCSRA |= (1<<ADEN);
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0;
    1ae4:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <ADC_auto_conversion>
    1ae8:	08 95       	ret

00001aea <enable_ADC_auto_conversion>:

/* This changes the ADC to Auto Trigger mode. It will take readings on each 
    channel and hold them in an array. The array value is accessed by reading from adc[]  */
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    1aea:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <adc_channel>
    adc[ADC_CHANNELS] = 0x00;
    1aee:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <adc+0x11>
    1af2:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <adc+0x10>
    free_running = free_run;
    1af6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <free_running>
    //      EXTERNAL_AREF 0
    //      EXTERNAL_AVCC (1<<REFS0)
    //      INTERNAL_1V1 (1<<REFS1) | (1<<REFS0)
#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1afa:	ec e7       	ldi	r30, 0x7C	; 124
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | analog_reference ;
    1b00:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <analog_reference>
    1b04:	80 73       	andi	r24, 0x30	; 48
    1b06:	89 2b       	or	r24, r25
    1b08:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    1b0a:	ea e7       	ldi	r30, 0x7A	; 122
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	84 60       	ori	r24, 0x04	; 4
    1b12:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    1b14:	80 81       	ld	r24, Z
    1b16:	82 60       	ori	r24, 0x02	; 2
    1b18:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
    
	// Power up the ADC and set it for a single conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    1b20:	80 81       	ld	r24, Z
    1b22:	87 75       	andi	r24, 0x57	; 87
    1b24:	88 68       	ori	r24, 0x88	; 136
    1b26:	80 83       	st	Z, r24

    // Start an ADC Conversion 
    ADCSRA |= (1<<ADSC);
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 64       	ori	r24, 0x40	; 64
    1b2c:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <ADC_auto_conversion>
    1b34:	08 95       	ret

00001b36 <analogRead>:


// Use the ADC channel number only (not the pin number)
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    1b36:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <ADC_auto_conversion>
    1b3a:	99 23       	and	r25, r25
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b3e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b40:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    1b42:	e8 2f       	mov	r30, r24
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	ee 0f       	add	r30, r30
    1b48:	ff 1f       	adc	r31, r31
    1b4a:	e8 57       	subi	r30, 0x78	; 120
    1b4c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b52:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    1b54:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    1b56:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    1b5a:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    1b5c:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    1b60:	e8 2f       	mov	r30, r24
    1b62:	e7 70       	andi	r30, 0x07	; 7
    1b64:	82 2f       	mov	r24, r18
    1b66:	89 2b       	or	r24, r25
    1b68:	e8 2b       	or	r30, r24
    1b6a:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    1b6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b72:	80 64       	ori	r24, 0x40	; 64
    1b74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    1b78:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b7c:	86 fd       	sbrc	r24, 6
    1b7e:	fc cf       	rjmp	.-8      	; 0x1b78 <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    1b80:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    1b84:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    1b8c:	08 95       	ret

00001b8e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	2f 93       	push	r18
    1b9a:	3f 93       	push	r19
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1ba4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
    1ba8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    1bac:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    1bb0:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1bb4:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1bb8:	2d e2       	ldi	r18, 0x2D	; 45
    1bba:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1bbc:	2d 37       	cpi	r18, 0x7D	; 125
    1bbe:	20 f4       	brcc	.+8      	; 0x1bc8 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	b1 1d       	adc	r27, r1
    1bc6:	05 c0       	rjmp	.+10     	; 0x1bd2 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1bc8:	20 eb       	ldi	r18, 0xB0	; 176
    1bca:	23 0f       	add	r18, r19
		m += 1;
    1bcc:	02 96       	adiw	r24, 0x02	; 2
    1bce:	a1 1d       	adc	r26, r1
    1bd0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1bd2:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
	timer0_millis = m;
    1bd6:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
    1bda:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
    1bde:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
    1be2:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
	timer0_overflow_count++;
    1be6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
    1bea:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
    1bee:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
    1bf2:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	b1 1d       	adc	r27, r1
    1bfc:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
    1c00:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
    1c04:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
    1c08:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
}
    1c0c:	bf 91       	pop	r27
    1c0e:	af 91       	pop	r26
    1c10:	9f 91       	pop	r25
    1c12:	8f 91       	pop	r24
    1c14:	3f 91       	pop	r19
    1c16:	2f 91       	pop	r18
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1c22:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1c24:	f8 94       	cli
	m = timer0_millis;
    1c26:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
    1c2a:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    1c2e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    1c32:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	SREG = oldSREG;
    1c36:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1c38:	08 95       	ret

00001c3a <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    1c3a:	84 b5       	in	r24, 0x24	; 36
    1c3c:	82 60       	ori	r24, 0x02	; 2
    1c3e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    1c40:	84 b5       	in	r24, 0x24	; 36
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    1c46:	85 b5       	in	r24, 0x25	; 37
    1c48:	82 60       	ori	r24, 0x02	; 2
    1c4a:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    1c4c:	85 b5       	in	r24, 0x25	; 37
    1c4e:	81 60       	ori	r24, 0x01	; 1
    1c50:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    1c52:	ee e6       	ldi	r30, 0x6E	; 110
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	81 60       	ori	r24, 0x01	; 1
    1c5a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1c5c:	e1 e8       	ldi	r30, 0x81	; 129
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    1c62:	80 81       	ld	r24, Z
    1c64:	82 60       	ori	r24, 0x02	; 2
    1c66:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    1c68:	80 81       	ld	r24, Z
    1c6a:	81 60       	ori	r24, 0x01	; 1
    1c6c:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    1c6e:	e0 e8       	ldi	r30, 0x80	; 128
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	81 60       	ori	r24, 0x01	; 1
    1c76:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    1c78:	e1 eb       	ldi	r30, 0xB1	; 177
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    1c82:	e0 eb       	ldi	r30, 0xB0	; 176
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	81 60       	ori	r24, 0x01	; 1
    1c8a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    1c8c:	e1 e9       	ldi	r30, 0x91	; 145
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	82 60       	ori	r24, 0x02	; 2
    1c94:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    1c96:	80 81       	ld	r24, Z
    1c98:	81 60       	ori	r24, 0x01	; 1
    1c9a:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1c9c:	e0 e9       	ldi	r30, 0x90	; 144
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	81 60       	ori	r24, 0x01	; 1
    1ca4:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    1ca6:	e1 ea       	ldi	r30, 0xA1	; 161
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	82 60       	ori	r24, 0x02	; 2
    1cae:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    1cb0:	80 81       	ld	r24, Z
    1cb2:	81 60       	ori	r24, 0x01	; 1
    1cb4:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1cb6:	e0 ea       	ldi	r30, 0xA0	; 160
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	81 60       	ori	r24, 0x01	; 1
    1cbe:	80 83       	st	Z, r24
    1cc0:	08 95       	ret

00001cc2 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    1cc2:	08 95       	ret

00001cc4 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    1cc4:	08 95       	ret

00001cc6 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    1cc6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    twi0_sendStop = 1;		// default value
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi0_sendStop>
    twi0_inRepStart = 0;
    1cd0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    1cd4:	88 23       	and	r24, r24
    1cd6:	21 f0       	breq	.+8      	; 0x1ce0 <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    1cd8:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    1cda:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    1cdc:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    1cde:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    1ce0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1ce4:	8e 7f       	andi	r24, 0xFE	; 254
    1ce6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    1cea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1cee:	8d 7f       	andi	r24, 0xFD	; 253
    1cf0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    1cf4:	84 e3       	ldi	r24, 0x34	; 52
    1cf6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    1cfa:	85 e4       	ldi	r24, 0x45	; 69
    1cfc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d00:	08 95       	ret

00001d02 <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    1d02:	88 0f       	add	r24, r24
    1d04:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    1d08:	08 95       	ret

00001d0a <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    1d0a:	61 32       	cpi	r22, 0x21	; 33
    1d0c:	98 f4       	brcc	.+38     	; 0x1d34 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    1d0e:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <twi0_state>
    1d12:	24 30       	cpi	r18, 0x04	; 4
    1d14:	89 f4       	brne	.+34     	; 0x1d38 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    1d16:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi0_txBufferLength>
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	a3 e1       	ldi	r26, 0x13	; 19
    1d1e:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    1d20:	fc 01       	movw	r30, r24
    1d22:	8e 2f       	mov	r24, r30
    1d24:	82 1b       	sub	r24, r18
    1d26:	86 17       	cp	r24, r22
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    1d2a:	81 91       	ld	r24, Z+
    1d2c:	8d 93       	st	X+, r24
    1d2e:	f9 cf       	rjmp	.-14     	; 0x1d22 <twi0_transmit+0x18>
    }
  
    return 0;
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    1d3a:	08 95       	ret

00001d3c <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    1d3c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    1d40:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    1d44:	08 95       	ret

00001d46 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    1d46:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    1d4a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    1d4e:	08 95       	ret

00001d50 <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1d50:	85 ed       	ldi	r24, 0xD5	; 213
    1d52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    1d56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d5a:	84 fd       	sbrc	r24, 4
    1d5c:	fc cf       	rjmp	.-8      	; 0x1d56 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    1d5e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    1d62:	08 95       	ret

00001d64 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    1d64:	85 ec       	ldi	r24, 0xC5	; 197
    1d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    1d6a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    1d6e:	08 95       	ret

00001d70 <__vector_24>:
}

ISR(TWI0_vect)
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    1d92:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1d96:	88 7f       	andi	r24, 0xF8	; 248
    1d98:	80 36       	cpi	r24, 0x60	; 96
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__vector_24+0x2e>
    1d9c:	9e c0       	rjmp	.+316    	; 0x1eda <__vector_24+0x16a>
    1d9e:	78 f5       	brcc	.+94     	; 0x1dfe <__vector_24+0x8e>
    1da0:	88 32       	cpi	r24, 0x28	; 40
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <__vector_24+0x36>
    1da4:	5d c0       	rjmp	.+186    	; 0x1e60 <__vector_24+0xf0>
    1da6:	90 f4       	brcc	.+36     	; 0x1dcc <__vector_24+0x5c>
    1da8:	80 31       	cpi	r24, 0x10	; 16
    1daa:	09 f4       	brne	.+2      	; 0x1dae <__vector_24+0x3e>
    1dac:	56 c0       	rjmp	.+172    	; 0x1e5a <__vector_24+0xea>
    1dae:	38 f4       	brcc	.+14     	; 0x1dbe <__vector_24+0x4e>
    1db0:	88 23       	and	r24, r24
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__vector_24+0x46>
    1db4:	f5 c0       	rjmp	.+490    	; 0x1fa0 <__vector_24+0x230>
    1db6:	88 30       	cpi	r24, 0x08	; 8
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <__vector_24+0x4c>
    1dba:	4f c0       	rjmp	.+158    	; 0x1e5a <__vector_24+0xea>
    1dbc:	f5 c0       	rjmp	.+490    	; 0x1fa8 <__vector_24+0x238>
    1dbe:	88 31       	cpi	r24, 0x18	; 24
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__vector_24+0x54>
    1dc2:	4e c0       	rjmp	.+156    	; 0x1e60 <__vector_24+0xf0>
    1dc4:	80 32       	cpi	r24, 0x20	; 32
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <__vector_24+0x5a>
    1dc8:	5f c0       	rjmp	.+190    	; 0x1e88 <__vector_24+0x118>
    1dca:	ee c0       	rjmp	.+476    	; 0x1fa8 <__vector_24+0x238>
    1dcc:	80 34       	cpi	r24, 0x40	; 64
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <__vector_24+0x62>
    1dd0:	6a c0       	rjmp	.+212    	; 0x1ea6 <__vector_24+0x136>
    1dd2:	58 f4       	brcc	.+22     	; 0x1dea <__vector_24+0x7a>
    1dd4:	80 33       	cpi	r24, 0x30	; 48
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <__vector_24+0x6a>
    1dd8:	57 c0       	rjmp	.+174    	; 0x1e88 <__vector_24+0x118>
    1dda:	88 33       	cpi	r24, 0x38	; 56
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <__vector_24+0x70>
    1dde:	e4 c0       	rjmp	.+456    	; 0x1fa8 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    1de0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
            twi0_releaseBus();
    1de4:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <twi0_releaseBus>
            break;
    1de8:	df c0       	rjmp	.+446    	; 0x1fa8 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    1dea:	80 35       	cpi	r24, 0x50	; 80
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <__vector_24+0x80>
    1dee:	4f c0       	rjmp	.+158    	; 0x1e8e <__vector_24+0x11e>
    1df0:	88 35       	cpi	r24, 0x58	; 88
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <__vector_24+0x86>
    1df4:	5d c0       	rjmp	.+186    	; 0x1eb0 <__vector_24+0x140>
    1df6:	88 34       	cpi	r24, 0x48	; 72
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <__vector_24+0x8c>
    1dfa:	d6 c0       	rjmp	.+428    	; 0x1fa8 <__vector_24+0x238>
    1dfc:	d3 c0       	rjmp	.+422    	; 0x1fa4 <__vector_24+0x234>
    1dfe:	88 39       	cpi	r24, 0x98	; 152
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <__vector_24+0x94>
    1e02:	c4 c0       	rjmp	.+392    	; 0x1f8c <__vector_24+0x21c>
    1e04:	a8 f4       	brcc	.+42     	; 0x1e30 <__vector_24+0xc0>
    1e06:	88 37       	cpi	r24, 0x78	; 120
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <__vector_24+0x9c>
    1e0a:	67 c0       	rjmp	.+206    	; 0x1eda <__vector_24+0x16a>
    1e0c:	38 f4       	brcc	.+14     	; 0x1e1c <__vector_24+0xac>
    1e0e:	88 36       	cpi	r24, 0x68	; 104
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__vector_24+0xa4>
    1e12:	63 c0       	rjmp	.+198    	; 0x1eda <__vector_24+0x16a>
    1e14:	80 37       	cpi	r24, 0x70	; 112
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <__vector_24+0xaa>
    1e18:	60 c0       	rjmp	.+192    	; 0x1eda <__vector_24+0x16a>
    1e1a:	c6 c0       	rjmp	.+396    	; 0x1fa8 <__vector_24+0x238>
    1e1c:	88 38       	cpi	r24, 0x88	; 136
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <__vector_24+0xb2>
    1e20:	b5 c0       	rjmp	.+362    	; 0x1f8c <__vector_24+0x21c>
    1e22:	80 39       	cpi	r24, 0x90	; 144
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <__vector_24+0xb8>
    1e26:	5f c0       	rjmp	.+190    	; 0x1ee6 <__vector_24+0x176>
    1e28:	80 38       	cpi	r24, 0x80	; 128
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <__vector_24+0xbe>
    1e2c:	bd c0       	rjmp	.+378    	; 0x1fa8 <__vector_24+0x238>
    1e2e:	5b c0       	rjmp	.+182    	; 0x1ee6 <__vector_24+0x176>
    1e30:	80 3b       	cpi	r24, 0xB0	; 176
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <__vector_24+0xc6>
    1e34:	83 c0       	rjmp	.+262    	; 0x1f3c <__vector_24+0x1cc>
    1e36:	38 f4       	brcc	.+14     	; 0x1e46 <__vector_24+0xd6>
    1e38:	80 3a       	cpi	r24, 0xA0	; 160
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__vector_24+0xce>
    1e3c:	66 c0       	rjmp	.+204    	; 0x1f0a <__vector_24+0x19a>
    1e3e:	88 3a       	cpi	r24, 0xA8	; 168
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <__vector_24+0xd4>
    1e42:	7c c0       	rjmp	.+248    	; 0x1f3c <__vector_24+0x1cc>
    1e44:	b1 c0       	rjmp	.+354    	; 0x1fa8 <__vector_24+0x238>
    1e46:	80 3c       	cpi	r24, 0xC0	; 192
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <__vector_24+0xdc>
    1e4a:	a4 c0       	rjmp	.+328    	; 0x1f94 <__vector_24+0x224>
    1e4c:	88 3c       	cpi	r24, 0xC8	; 200
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <__vector_24+0xe2>
    1e50:	a1 c0       	rjmp	.+322    	; 0x1f94 <__vector_24+0x224>
    1e52:	88 3b       	cpi	r24, 0xB8	; 184
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <__vector_24+0xe8>
    1e56:	87 c0       	rjmp	.+270    	; 0x1f66 <__vector_24+0x1f6>
    1e58:	a7 c0       	rjmp	.+334    	; 0x1fa8 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    1e5a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi0_slarw>
    1e5e:	10 c0       	rjmp	.+32     	; 0x1e80 <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    1e60:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    1e64:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    1e68:	98 17       	cp	r25, r24
    1e6a:	70 f5       	brcc	.+92     	; 0x1ec8 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    1e6c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	8e 0f       	add	r24, r30
    1e74:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	eb 5c       	subi	r30, 0xCB	; 203
    1e7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1e84:	85 ec       	ldi	r24, 0xC5	; 197
    1e86:	83 c0       	rjmp	.+262    	; 0x1f8e <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    1e88:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
    1e8c:	8b c0       	rjmp	.+278    	; 0x1fa4 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    1e8e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	8e 0f       	add	r24, r30
    1e96:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    1e9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	eb 5c       	subi	r30, 0xCB	; 203
    1ea2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea4:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    1ea6:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    1eaa:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    1eae:	6b c0       	rjmp	.+214    	; 0x1f86 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    1eb0:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	8e 0f       	add	r24, r30
    1eb8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    1ebc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	eb 5c       	subi	r30, 0xCB	; 203
    1ec4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec6:	80 83       	st	Z, r24
            if (twi0_sendStop)
    1ec8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_sendStop>
    1ecc:	81 11       	cpse	r24, r1
    1ece:	6a c0       	rjmp	.+212    	; 0x1fa4 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    1ed6:	84 ea       	ldi	r24, 0xA4	; 164
    1ed8:	5e c0       	rjmp	.+188    	; 0x1f96 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    1eda:	83 e0       	ldi	r24, 0x03	; 3
    1edc:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    1ee0:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
    1ee4:	cf cf       	rjmp	.-98     	; 0x1e84 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    1ee6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    1eea:	80 32       	cpi	r24, 0x20	; 32
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <__vector_24+0x180>
    1eee:	4e c0       	rjmp	.+156    	; 0x1f8c <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    1ef0:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	8e 0f       	add	r24, r30
    1ef8:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi0_rxBufferIndex>
    1efc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	ef 50       	subi	r30, 0x0F	; 15
    1f04:	fe 4f       	sbci	r31, 0xFE	; 254
    1f06:	80 83       	st	Z, r24
    1f08:	bd cf       	rjmp	.-134    	; 0x1e84 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    1f0a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    1f0e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    1f12:	80 32       	cpi	r24, 0x20	; 32
    1f14:	30 f4       	brcc	.+12     	; 0x1f22 <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    1f16:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	ef 50       	subi	r30, 0x0F	; 15
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    1f22:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    1f2c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    1f30:	81 ef       	ldi	r24, 0xF1	; 241
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    1f36:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
            break;
    1f3a:	36 c0       	rjmp	.+108    	; 0x1fa8 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    1f3c:	84 e0       	ldi	r24, 0x04	; 4
    1f3e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    1f42:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    1f46:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    1f4a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    1f4e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    1f52:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    1f54:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	05 c0       	rjmp	.+10     	; 0x1f66 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    1f62:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    1f66:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi0_txBufferIndex>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	8e 0f       	add	r24, r30
    1f6e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi0_txBufferIndex>
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	ed 5e       	subi	r30, 0xED	; 237
    1f76:	fd 4f       	sbci	r31, 0xFD	; 253
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    1f7e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <twi0_txBufferIndex>
    1f82:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    1f86:	98 17       	cp	r25, r24
    1f88:	08 f4       	brcc	.+2      	; 0x1f8c <__vector_24+0x21c>
    1f8a:	7c cf       	rjmp	.-264    	; 0x1e84 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    1f8c:	85 e8       	ldi	r24, 0x85	; 133
    1f8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f92:	0a c0       	rjmp	.+20     	; 0x1fa8 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1f94:	85 ec       	ldi	r24, 0xC5	; 197
    1f96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    1f9a:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
            break;
    1f9e:	04 c0       	rjmp	.+8      	; 0x1fa8 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    1fa0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_error>
            twi0_stop();
    1fa4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <twi0_stop>
            break;
    }
}
    1fa8:	ff 91       	pop	r31
    1faa:	ef 91       	pop	r30
    1fac:	bf 91       	pop	r27
    1fae:	af 91       	pop	r26
    1fb0:	9f 91       	pop	r25
    1fb2:	8f 91       	pop	r24
    1fb4:	7f 91       	pop	r23
    1fb6:	6f 91       	pop	r22
    1fb8:	5f 91       	pop	r21
    1fba:	4f 91       	pop	r20
    1fbc:	3f 91       	pop	r19
    1fbe:	2f 91       	pop	r18
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	0f 90       	pop	r0
    1fc6:	1f 90       	pop	r1
    1fc8:	18 95       	reti

00001fca <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    1fca:	08 95       	ret

00001fcc <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    1fcc:	08 95       	ret

00001fce <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    1fce:	2d e7       	ldi	r18, 0x7D	; 125
    1fd0:	32 e0       	ldi	r19, 0x02	; 2
    1fd2:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <twi1_rxBuffer+0x1>
    1fd6:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    1fda:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    twi1_sendStop = 1;		// default value
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi1_sendStop>
    twi1_inRepStart = 0;
    1fe4:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    1fe8:	88 23       	and	r24, r24
    1fea:	21 f0       	breq	.+8      	; 0x1ff4 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    1fec:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    1fee:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    1ff0:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    1ff2:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    1ff4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1ff8:	8e 7f       	andi	r24, 0xFE	; 254
    1ffa:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    1ffe:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2002:	8d 7f       	andi	r24, 0xFD	; 253
    2004:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    2008:	84 e3       	ldi	r24, 0x34	; 52
    200a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    200e:	85 e4       	ldi	r24, 0x45	; 69
    2010:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2014:	08 95       	ret

00002016 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    2016:	88 0f       	add	r24, r24
    2018:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    201c:	08 95       	ret

0000201e <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    201e:	61 32       	cpi	r22, 0x21	; 33
    2020:	98 f4       	brcc	.+38     	; 0x2048 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    2022:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <twi1_state>
    2026:	24 30       	cpi	r18, 0x04	; 4
    2028:	89 f4       	brne	.+34     	; 0x204c <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    202a:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <twi1_txBufferLength>
    202e:	28 2f       	mov	r18, r24
    2030:	af e9       	ldi	r26, 0x9F	; 159
    2032:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2034:	fc 01       	movw	r30, r24
    2036:	8e 2f       	mov	r24, r30
    2038:	82 1b       	sub	r24, r18
    203a:	86 17       	cp	r24, r22
    203c:	18 f4       	brcc	.+6      	; 0x2044 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    203e:	81 91       	ld	r24, Z+
    2040:	8d 93       	st	X+, r24
    2042:	f9 cf       	rjmp	.-14     	; 0x2036 <twi1_transmit+0x18>
    }
  
    return 0;
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    204c:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    204e:	08 95       	ret

00002050 <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2050:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    2054:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    2058:	08 95       	ret

0000205a <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    205a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    205e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    2062:	08 95       	ret

00002064 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2064:	85 ed       	ldi	r24, 0xD5	; 213
    2066:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    206a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    206e:	84 fd       	sbrc	r24, 4
    2070:	fc cf       	rjmp	.-8      	; 0x206a <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2072:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2076:	08 95       	ret

00002078 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2078:	85 ec       	ldi	r24, 0xC5	; 197
    207a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    207e:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2082:	08 95       	ret

00002084 <__vector_40>:
}

ISR(TWI1_vect)
{
    2084:	1f 92       	push	r1
    2086:	0f 92       	push	r0
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	0f 92       	push	r0
    208c:	11 24       	eor	r1, r1
    208e:	2f 93       	push	r18
    2090:	3f 93       	push	r19
    2092:	4f 93       	push	r20
    2094:	5f 93       	push	r21
    2096:	6f 93       	push	r22
    2098:	7f 93       	push	r23
    209a:	8f 93       	push	r24
    209c:	9f 93       	push	r25
    209e:	af 93       	push	r26
    20a0:	bf 93       	push	r27
    20a2:	ef 93       	push	r30
    20a4:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    20a6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    20aa:	88 7f       	andi	r24, 0xF8	; 248
    20ac:	80 36       	cpi	r24, 0x60	; 96
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <__vector_40+0x2e>
    20b0:	9e c0       	rjmp	.+316    	; 0x21ee <__vector_40+0x16a>
    20b2:	78 f5       	brcc	.+94     	; 0x2112 <__vector_40+0x8e>
    20b4:	88 32       	cpi	r24, 0x28	; 40
    20b6:	09 f4       	brne	.+2      	; 0x20ba <__vector_40+0x36>
    20b8:	5d c0       	rjmp	.+186    	; 0x2174 <__vector_40+0xf0>
    20ba:	90 f4       	brcc	.+36     	; 0x20e0 <__vector_40+0x5c>
    20bc:	80 31       	cpi	r24, 0x10	; 16
    20be:	09 f4       	brne	.+2      	; 0x20c2 <__vector_40+0x3e>
    20c0:	56 c0       	rjmp	.+172    	; 0x216e <__vector_40+0xea>
    20c2:	38 f4       	brcc	.+14     	; 0x20d2 <__vector_40+0x4e>
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <__vector_40+0x46>
    20c8:	0a c1       	rjmp	.+532    	; 0x22de <__vector_40+0x25a>
    20ca:	88 30       	cpi	r24, 0x08	; 8
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <__vector_40+0x4c>
    20ce:	4f c0       	rjmp	.+158    	; 0x216e <__vector_40+0xea>
    20d0:	0a c1       	rjmp	.+532    	; 0x22e6 <__vector_40+0x262>
    20d2:	88 31       	cpi	r24, 0x18	; 24
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <__vector_40+0x54>
    20d6:	4e c0       	rjmp	.+156    	; 0x2174 <__vector_40+0xf0>
    20d8:	80 32       	cpi	r24, 0x20	; 32
    20da:	09 f4       	brne	.+2      	; 0x20de <__vector_40+0x5a>
    20dc:	5f c0       	rjmp	.+190    	; 0x219c <__vector_40+0x118>
    20de:	03 c1       	rjmp	.+518    	; 0x22e6 <__vector_40+0x262>
    20e0:	80 34       	cpi	r24, 0x40	; 64
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <__vector_40+0x62>
    20e4:	6a c0       	rjmp	.+212    	; 0x21ba <__vector_40+0x136>
    20e6:	58 f4       	brcc	.+22     	; 0x20fe <__vector_40+0x7a>
    20e8:	80 33       	cpi	r24, 0x30	; 48
    20ea:	09 f4       	brne	.+2      	; 0x20ee <__vector_40+0x6a>
    20ec:	57 c0       	rjmp	.+174    	; 0x219c <__vector_40+0x118>
    20ee:	88 33       	cpi	r24, 0x38	; 56
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <__vector_40+0x70>
    20f2:	f9 c0       	rjmp	.+498    	; 0x22e6 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    20f4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
            twi1_releaseBus();
    20f8:	0e 94 3c 10 	call	0x2078	; 0x2078 <twi1_releaseBus>
            break;
    20fc:	f4 c0       	rjmp	.+488    	; 0x22e6 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    20fe:	80 35       	cpi	r24, 0x50	; 80
    2100:	09 f4       	brne	.+2      	; 0x2104 <__vector_40+0x80>
    2102:	4f c0       	rjmp	.+158    	; 0x21a2 <__vector_40+0x11e>
    2104:	88 35       	cpi	r24, 0x58	; 88
    2106:	09 f4       	brne	.+2      	; 0x210a <__vector_40+0x86>
    2108:	5d c0       	rjmp	.+186    	; 0x21c4 <__vector_40+0x140>
    210a:	88 34       	cpi	r24, 0x48	; 72
    210c:	09 f0       	breq	.+2      	; 0x2110 <__vector_40+0x8c>
    210e:	eb c0       	rjmp	.+470    	; 0x22e6 <__vector_40+0x262>
    2110:	e8 c0       	rjmp	.+464    	; 0x22e2 <__vector_40+0x25e>
    2112:	88 39       	cpi	r24, 0x98	; 152
    2114:	09 f4       	brne	.+2      	; 0x2118 <__vector_40+0x94>
    2116:	d9 c0       	rjmp	.+434    	; 0x22ca <__vector_40+0x246>
    2118:	a8 f4       	brcc	.+42     	; 0x2144 <__vector_40+0xc0>
    211a:	88 37       	cpi	r24, 0x78	; 120
    211c:	09 f4       	brne	.+2      	; 0x2120 <__vector_40+0x9c>
    211e:	67 c0       	rjmp	.+206    	; 0x21ee <__vector_40+0x16a>
    2120:	38 f4       	brcc	.+14     	; 0x2130 <__vector_40+0xac>
    2122:	88 36       	cpi	r24, 0x68	; 104
    2124:	09 f4       	brne	.+2      	; 0x2128 <__vector_40+0xa4>
    2126:	63 c0       	rjmp	.+198    	; 0x21ee <__vector_40+0x16a>
    2128:	80 37       	cpi	r24, 0x70	; 112
    212a:	09 f4       	brne	.+2      	; 0x212e <__vector_40+0xaa>
    212c:	60 c0       	rjmp	.+192    	; 0x21ee <__vector_40+0x16a>
    212e:	db c0       	rjmp	.+438    	; 0x22e6 <__vector_40+0x262>
    2130:	88 38       	cpi	r24, 0x88	; 136
    2132:	09 f4       	brne	.+2      	; 0x2136 <__vector_40+0xb2>
    2134:	ca c0       	rjmp	.+404    	; 0x22ca <__vector_40+0x246>
    2136:	80 39       	cpi	r24, 0x90	; 144
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_40+0xb8>
    213a:	5f c0       	rjmp	.+190    	; 0x21fa <__vector_40+0x176>
    213c:	80 38       	cpi	r24, 0x80	; 128
    213e:	09 f0       	breq	.+2      	; 0x2142 <__vector_40+0xbe>
    2140:	d2 c0       	rjmp	.+420    	; 0x22e6 <__vector_40+0x262>
    2142:	5b c0       	rjmp	.+182    	; 0x21fa <__vector_40+0x176>
    2144:	80 3b       	cpi	r24, 0xB0	; 176
    2146:	09 f4       	brne	.+2      	; 0x214a <__vector_40+0xc6>
    2148:	98 c0       	rjmp	.+304    	; 0x227a <__vector_40+0x1f6>
    214a:	38 f4       	brcc	.+14     	; 0x215a <__vector_40+0xd6>
    214c:	80 3a       	cpi	r24, 0xA0	; 160
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_40+0xce>
    2150:	69 c0       	rjmp	.+210    	; 0x2224 <__vector_40+0x1a0>
    2152:	88 3a       	cpi	r24, 0xA8	; 168
    2154:	09 f4       	brne	.+2      	; 0x2158 <__vector_40+0xd4>
    2156:	91 c0       	rjmp	.+290    	; 0x227a <__vector_40+0x1f6>
    2158:	c6 c0       	rjmp	.+396    	; 0x22e6 <__vector_40+0x262>
    215a:	80 3c       	cpi	r24, 0xC0	; 192
    215c:	09 f4       	brne	.+2      	; 0x2160 <__vector_40+0xdc>
    215e:	b9 c0       	rjmp	.+370    	; 0x22d2 <__vector_40+0x24e>
    2160:	88 3c       	cpi	r24, 0xC8	; 200
    2162:	09 f4       	brne	.+2      	; 0x2166 <__vector_40+0xe2>
    2164:	b6 c0       	rjmp	.+364    	; 0x22d2 <__vector_40+0x24e>
    2166:	88 3b       	cpi	r24, 0xB8	; 184
    2168:	09 f4       	brne	.+2      	; 0x216c <__vector_40+0xe8>
    216a:	9c c0       	rjmp	.+312    	; 0x22a4 <__vector_40+0x220>
    216c:	bc c0       	rjmp	.+376    	; 0x22e6 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    216e:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi1_slarw>
    2172:	10 c0       	rjmp	.+32     	; 0x2194 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2174:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2178:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    217c:	98 17       	cp	r25, r24
    217e:	70 f5       	brcc	.+92     	; 0x21dc <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2180:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	8e 0f       	add	r24, r30
    2188:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	ef 53       	subi	r30, 0x3F	; 63
    2190:	fd 4f       	sbci	r31, 0xFD	; 253
    2192:	80 81       	ld	r24, Z
    2194:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2198:	85 ec       	ldi	r24, 0xC5	; 197
    219a:	98 c0       	rjmp	.+304    	; 0x22cc <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    219c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
    21a0:	a0 c0       	rjmp	.+320    	; 0x22e2 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    21a2:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	8e 0f       	add	r24, r30
    21aa:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    21ae:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	ef 53       	subi	r30, 0x3F	; 63
    21b6:	fd 4f       	sbci	r31, 0xFD	; 253
    21b8:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    21ba:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    21be:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    21c2:	80 c0       	rjmp	.+256    	; 0x22c4 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    21c4:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	8e 0f       	add	r24, r30
    21cc:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    21d0:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ef 53       	subi	r30, 0x3F	; 63
    21d8:	fd 4f       	sbci	r31, 0xFD	; 253
    21da:	80 83       	st	Z, r24
            if (twi1_sendStop)
    21dc:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_sendStop>
    21e0:	81 11       	cpse	r24, r1
    21e2:	7f c0       	rjmp	.+254    	; 0x22e2 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    21ea:	84 ea       	ldi	r24, 0xA4	; 164
    21ec:	73 c0       	rjmp	.+230    	; 0x22d4 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    21ee:	83 e0       	ldi	r24, 0x03	; 3
    21f0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    21f4:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
    21f8:	cf cf       	rjmp	.-98     	; 0x2198 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    21fa:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    21fe:	80 32       	cpi	r24, 0x20	; 32
    2200:	08 f0       	brcs	.+2      	; 0x2204 <__vector_40+0x180>
    2202:	63 c0       	rjmp	.+198    	; 0x22ca <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2204:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi1_rxBuffer>
    2208:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    220c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	98 0f       	add	r25, r24
    2214:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi1_rxBufferIndex>
    2218:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    221c:	e8 0f       	add	r30, r24
    221e:	f1 1d       	adc	r31, r1
    2220:	90 83       	st	Z, r25
    2222:	ba cf       	rjmp	.-140    	; 0x2198 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2224:	0e 94 3c 10 	call	0x2078	; 0x2078 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2228:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    222c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2230:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2234:	20 32       	cpi	r18, 0x20	; 32
    2236:	30 f4       	brcc	.+12     	; 0x2244 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2238:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    223c:	fc 01       	movw	r30, r24
    223e:	e2 0f       	add	r30, r18
    2240:	f1 1d       	adc	r31, r1
    2242:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2244:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    224e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    2252:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2254:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2258:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    225c:	8d 57       	subi	r24, 0x7D	; 125
    225e:	92 40       	sbci	r25, 0x02	; 2
    2260:	19 f4       	brne	.+6      	; 0x2268 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2262:	8d e5       	ldi	r24, 0x5D	; 93
    2264:	92 e0       	ldi	r25, 0x02	; 2
    2266:	02 c0       	rjmp	.+4      	; 0x226c <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2268:	8d e7       	ldi	r24, 0x7D	; 125
    226a:	92 e0       	ldi	r25, 0x02	; 2
    226c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi1_rxBuffer+0x1>
    2270:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2274:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
            break;
    2278:	36 c0       	rjmp	.+108    	; 0x22e6 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2280:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2284:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2288:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    228c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2290:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2292:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2296:	81 11       	cpse	r24, r1
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    22a0:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    22a4:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <twi1_txBufferIndex>
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	8e 0f       	add	r24, r30
    22ac:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi1_txBufferIndex>
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	e1 56       	subi	r30, 0x61	; 97
    22b4:	fd 4f       	sbci	r31, 0xFD	; 253
    22b6:	80 81       	ld	r24, Z
    22b8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    22bc:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <twi1_txBufferIndex>
    22c0:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    22c4:	98 17       	cp	r25, r24
    22c6:	08 f4       	brcc	.+2      	; 0x22ca <__vector_40+0x246>
    22c8:	67 cf       	rjmp	.-306    	; 0x2198 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    22ca:	85 e8       	ldi	r24, 0x85	; 133
    22cc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    22d0:	0a c0       	rjmp	.+20     	; 0x22e6 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    22d2:	85 ec       	ldi	r24, 0xC5	; 197
    22d4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    22d8:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
            break;
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    22de:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_error>
            twi1_stop();
    22e2:	0e 94 32 10 	call	0x2064	; 0x2064 <twi1_stop>
            break;
    }
}
    22e6:	ff 91       	pop	r31
    22e8:	ef 91       	pop	r30
    22ea:	bf 91       	pop	r27
    22ec:	af 91       	pop	r26
    22ee:	9f 91       	pop	r25
    22f0:	8f 91       	pop	r24
    22f2:	7f 91       	pop	r23
    22f4:	6f 91       	pop	r22
    22f6:	5f 91       	pop	r21
    22f8:	4f 91       	pop	r20
    22fa:	3f 91       	pop	r19
    22fc:	2f 91       	pop	r18
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <__udivmodsi4>:
    2308:	a1 e2       	ldi	r26, 0x21	; 33
    230a:	1a 2e       	mov	r1, r26
    230c:	aa 1b       	sub	r26, r26
    230e:	bb 1b       	sub	r27, r27
    2310:	fd 01       	movw	r30, r26
    2312:	0d c0       	rjmp	.+26     	; 0x232e <__udivmodsi4_ep>

00002314 <__udivmodsi4_loop>:
    2314:	aa 1f       	adc	r26, r26
    2316:	bb 1f       	adc	r27, r27
    2318:	ee 1f       	adc	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	a2 17       	cp	r26, r18
    231e:	b3 07       	cpc	r27, r19
    2320:	e4 07       	cpc	r30, r20
    2322:	f5 07       	cpc	r31, r21
    2324:	20 f0       	brcs	.+8      	; 0x232e <__udivmodsi4_ep>
    2326:	a2 1b       	sub	r26, r18
    2328:	b3 0b       	sbc	r27, r19
    232a:	e4 0b       	sbc	r30, r20
    232c:	f5 0b       	sbc	r31, r21

0000232e <__udivmodsi4_ep>:
    232e:	66 1f       	adc	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	88 1f       	adc	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	1a 94       	dec	r1
    2338:	69 f7       	brne	.-38     	; 0x2314 <__udivmodsi4_loop>
    233a:	60 95       	com	r22
    233c:	70 95       	com	r23
    233e:	80 95       	com	r24
    2340:	90 95       	com	r25
    2342:	9b 01       	movw	r18, r22
    2344:	ac 01       	movw	r20, r24
    2346:	bd 01       	movw	r22, r26
    2348:	cf 01       	movw	r24, r30
    234a:	08 95       	ret

0000234c <fgetc>:
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	ec 01       	movw	r28, r24
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	20 ff       	sbrs	r18, 0
    2356:	33 c0       	rjmp	.+102    	; 0x23be <fgetc+0x72>
    2358:	26 ff       	sbrs	r18, 6
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <fgetc+0x24>
    235c:	2f 7b       	andi	r18, 0xBF	; 191
    235e:	2b 83       	std	Y+3, r18	; 0x03
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	01 96       	adiw	r24, 0x01	; 1
    2366:	9f 83       	std	Y+7, r25	; 0x07
    2368:	8e 83       	std	Y+6, r24	; 0x06
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	29 c0       	rjmp	.+82     	; 0x23c2 <fgetc+0x76>
    2370:	22 ff       	sbrs	r18, 2
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <fgetc+0x46>
    2374:	e8 81       	ld	r30, Y
    2376:	f9 81       	ldd	r31, Y+1	; 0x01
    2378:	80 81       	ld	r24, Z
    237a:	08 2e       	mov	r0, r24
    237c:	00 0c       	add	r0, r0
    237e:	99 0b       	sbc	r25, r25
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	19 f4       	brne	.+6      	; 0x238a <fgetc+0x3e>
    2384:	20 62       	ori	r18, 0x20	; 32
    2386:	2b 83       	std	Y+3, r18	; 0x03
    2388:	1a c0       	rjmp	.+52     	; 0x23be <fgetc+0x72>
    238a:	31 96       	adiw	r30, 0x01	; 1
    238c:	f9 83       	std	Y+1, r31	; 0x01
    238e:	e8 83       	st	Y, r30
    2390:	0e c0       	rjmp	.+28     	; 0x23ae <fgetc+0x62>
    2392:	ea 85       	ldd	r30, Y+10	; 0x0a
    2394:	fb 85       	ldd	r31, Y+11	; 0x0b
    2396:	09 95       	icall
    2398:	97 ff       	sbrs	r25, 7
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <fgetc+0x62>
    239c:	2b 81       	ldd	r18, Y+3	; 0x03
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	11 f0       	breq	.+4      	; 0x23a6 <fgetc+0x5a>
    23a2:	80 e2       	ldi	r24, 0x20	; 32
    23a4:	01 c0       	rjmp	.+2      	; 0x23a8 <fgetc+0x5c>
    23a6:	80 e1       	ldi	r24, 0x10	; 16
    23a8:	82 2b       	or	r24, r18
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	08 c0       	rjmp	.+16     	; 0x23be <fgetc+0x72>
    23ae:	2e 81       	ldd	r18, Y+6	; 0x06
    23b0:	3f 81       	ldd	r19, Y+7	; 0x07
    23b2:	2f 5f       	subi	r18, 0xFF	; 255
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	3f 83       	std	Y+7, r19	; 0x07
    23b8:	2e 83       	std	Y+6, r18	; 0x06
    23ba:	99 27       	eor	r25, r25
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <fgetc+0x76>
    23be:	8f ef       	ldi	r24, 0xFF	; 255
    23c0:	9f ef       	ldi	r25, 0xFF	; 255
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret

000023c8 <printf>:
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ea ee       	ldi	r30, 0xEA	; 234
    23ce:	f1 e1       	ldi	r31, 0x11	; 17
    23d0:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__+0x20>
    23d4:	ae 01       	movw	r20, r28
    23d6:	4b 5f       	subi	r20, 0xFB	; 251
    23d8:	5f 4f       	sbci	r21, 0xFF	; 255
    23da:	fa 01       	movw	r30, r20
    23dc:	61 91       	ld	r22, Z+
    23de:	71 91       	ld	r23, Z+
    23e0:	af 01       	movw	r20, r30
    23e2:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <__iob+0x2>
    23e6:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <__iob+0x3>
    23ea:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <vfprintf>
    23ee:	e2 e0       	ldi	r30, 0x02	; 2
    23f0:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__+0x20>

000023f4 <vfprintf>:
    23f4:	ab e0       	ldi	r26, 0x0B	; 11
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e0       	ldi	r30, 0x00	; 0
    23fa:	f2 e1       	ldi	r31, 0x12	; 18
    23fc:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__prologue_saves__>
    2400:	6c 01       	movw	r12, r24
    2402:	7b 01       	movw	r14, r22
    2404:	8a 01       	movw	r16, r20
    2406:	fc 01       	movw	r30, r24
    2408:	17 82       	std	Z+7, r1	; 0x07
    240a:	16 82       	std	Z+6, r1	; 0x06
    240c:	83 81       	ldd	r24, Z+3	; 0x03
    240e:	81 ff       	sbrs	r24, 1
    2410:	cc c1       	rjmp	.+920    	; 0x27aa <vfprintf+0x3b6>
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	3c 01       	movw	r6, r24
    2418:	f6 01       	movw	r30, r12
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	f7 01       	movw	r30, r14
    241e:	93 fd       	sbrc	r25, 3
    2420:	85 91       	lpm	r24, Z+
    2422:	93 ff       	sbrs	r25, 3
    2424:	81 91       	ld	r24, Z+
    2426:	7f 01       	movw	r14, r30
    2428:	88 23       	and	r24, r24
    242a:	09 f4       	brne	.+2      	; 0x242e <vfprintf+0x3a>
    242c:	ba c1       	rjmp	.+884    	; 0x27a2 <vfprintf+0x3ae>
    242e:	85 32       	cpi	r24, 0x25	; 37
    2430:	39 f4       	brne	.+14     	; 0x2440 <vfprintf+0x4c>
    2432:	93 fd       	sbrc	r25, 3
    2434:	85 91       	lpm	r24, Z+
    2436:	93 ff       	sbrs	r25, 3
    2438:	81 91       	ld	r24, Z+
    243a:	7f 01       	movw	r14, r30
    243c:	85 32       	cpi	r24, 0x25	; 37
    243e:	29 f4       	brne	.+10     	; 0x244a <vfprintf+0x56>
    2440:	b6 01       	movw	r22, r12
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2448:	e7 cf       	rjmp	.-50     	; 0x2418 <vfprintf+0x24>
    244a:	91 2c       	mov	r9, r1
    244c:	21 2c       	mov	r2, r1
    244e:	31 2c       	mov	r3, r1
    2450:	ff e1       	ldi	r31, 0x1F	; 31
    2452:	f3 15       	cp	r31, r3
    2454:	d8 f0       	brcs	.+54     	; 0x248c <vfprintf+0x98>
    2456:	8b 32       	cpi	r24, 0x2B	; 43
    2458:	79 f0       	breq	.+30     	; 0x2478 <vfprintf+0x84>
    245a:	38 f4       	brcc	.+14     	; 0x246a <vfprintf+0x76>
    245c:	80 32       	cpi	r24, 0x20	; 32
    245e:	79 f0       	breq	.+30     	; 0x247e <vfprintf+0x8a>
    2460:	83 32       	cpi	r24, 0x23	; 35
    2462:	a1 f4       	brne	.+40     	; 0x248c <vfprintf+0x98>
    2464:	23 2d       	mov	r18, r3
    2466:	20 61       	ori	r18, 0x10	; 16
    2468:	1d c0       	rjmp	.+58     	; 0x24a4 <vfprintf+0xb0>
    246a:	8d 32       	cpi	r24, 0x2D	; 45
    246c:	61 f0       	breq	.+24     	; 0x2486 <vfprintf+0x92>
    246e:	80 33       	cpi	r24, 0x30	; 48
    2470:	69 f4       	brne	.+26     	; 0x248c <vfprintf+0x98>
    2472:	23 2d       	mov	r18, r3
    2474:	21 60       	ori	r18, 0x01	; 1
    2476:	16 c0       	rjmp	.+44     	; 0x24a4 <vfprintf+0xb0>
    2478:	83 2d       	mov	r24, r3
    247a:	82 60       	ori	r24, 0x02	; 2
    247c:	38 2e       	mov	r3, r24
    247e:	e3 2d       	mov	r30, r3
    2480:	e4 60       	ori	r30, 0x04	; 4
    2482:	3e 2e       	mov	r3, r30
    2484:	2a c0       	rjmp	.+84     	; 0x24da <vfprintf+0xe6>
    2486:	f3 2d       	mov	r31, r3
    2488:	f8 60       	ori	r31, 0x08	; 8
    248a:	1d c0       	rjmp	.+58     	; 0x24c6 <vfprintf+0xd2>
    248c:	37 fc       	sbrc	r3, 7
    248e:	2d c0       	rjmp	.+90     	; 0x24ea <vfprintf+0xf6>
    2490:	20 ed       	ldi	r18, 0xD0	; 208
    2492:	28 0f       	add	r18, r24
    2494:	2a 30       	cpi	r18, 0x0A	; 10
    2496:	40 f0       	brcs	.+16     	; 0x24a8 <vfprintf+0xb4>
    2498:	8e 32       	cpi	r24, 0x2E	; 46
    249a:	b9 f4       	brne	.+46     	; 0x24ca <vfprintf+0xd6>
    249c:	36 fc       	sbrc	r3, 6
    249e:	81 c1       	rjmp	.+770    	; 0x27a2 <vfprintf+0x3ae>
    24a0:	23 2d       	mov	r18, r3
    24a2:	20 64       	ori	r18, 0x40	; 64
    24a4:	32 2e       	mov	r3, r18
    24a6:	19 c0       	rjmp	.+50     	; 0x24da <vfprintf+0xe6>
    24a8:	36 fe       	sbrs	r3, 6
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <vfprintf+0xc4>
    24ac:	8a e0       	ldi	r24, 0x0A	; 10
    24ae:	98 9e       	mul	r9, r24
    24b0:	20 0d       	add	r18, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	92 2e       	mov	r9, r18
    24b6:	11 c0       	rjmp	.+34     	; 0x24da <vfprintf+0xe6>
    24b8:	ea e0       	ldi	r30, 0x0A	; 10
    24ba:	2e 9e       	mul	r2, r30
    24bc:	20 0d       	add	r18, r0
    24be:	11 24       	eor	r1, r1
    24c0:	22 2e       	mov	r2, r18
    24c2:	f3 2d       	mov	r31, r3
    24c4:	f0 62       	ori	r31, 0x20	; 32
    24c6:	3f 2e       	mov	r3, r31
    24c8:	08 c0       	rjmp	.+16     	; 0x24da <vfprintf+0xe6>
    24ca:	8c 36       	cpi	r24, 0x6C	; 108
    24cc:	21 f4       	brne	.+8      	; 0x24d6 <vfprintf+0xe2>
    24ce:	83 2d       	mov	r24, r3
    24d0:	80 68       	ori	r24, 0x80	; 128
    24d2:	38 2e       	mov	r3, r24
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <vfprintf+0xe6>
    24d6:	88 36       	cpi	r24, 0x68	; 104
    24d8:	41 f4       	brne	.+16     	; 0x24ea <vfprintf+0xf6>
    24da:	f7 01       	movw	r30, r14
    24dc:	93 fd       	sbrc	r25, 3
    24de:	85 91       	lpm	r24, Z+
    24e0:	93 ff       	sbrs	r25, 3
    24e2:	81 91       	ld	r24, Z+
    24e4:	7f 01       	movw	r14, r30
    24e6:	81 11       	cpse	r24, r1
    24e8:	b3 cf       	rjmp	.-154    	; 0x2450 <vfprintf+0x5c>
    24ea:	98 2f       	mov	r25, r24
    24ec:	9f 7d       	andi	r25, 0xDF	; 223
    24ee:	95 54       	subi	r25, 0x45	; 69
    24f0:	93 30       	cpi	r25, 0x03	; 3
    24f2:	28 f4       	brcc	.+10     	; 0x24fe <vfprintf+0x10a>
    24f4:	0c 5f       	subi	r16, 0xFC	; 252
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	9f e3       	ldi	r25, 0x3F	; 63
    24fa:	99 83       	std	Y+1, r25	; 0x01
    24fc:	0d c0       	rjmp	.+26     	; 0x2518 <vfprintf+0x124>
    24fe:	83 36       	cpi	r24, 0x63	; 99
    2500:	31 f0       	breq	.+12     	; 0x250e <vfprintf+0x11a>
    2502:	83 37       	cpi	r24, 0x73	; 115
    2504:	71 f0       	breq	.+28     	; 0x2522 <vfprintf+0x12e>
    2506:	83 35       	cpi	r24, 0x53	; 83
    2508:	09 f0       	breq	.+2      	; 0x250c <vfprintf+0x118>
    250a:	59 c0       	rjmp	.+178    	; 0x25be <vfprintf+0x1ca>
    250c:	21 c0       	rjmp	.+66     	; 0x2550 <vfprintf+0x15c>
    250e:	f8 01       	movw	r30, r16
    2510:	80 81       	ld	r24, Z
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	0e 5f       	subi	r16, 0xFE	; 254
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	88 24       	eor	r8, r8
    251a:	83 94       	inc	r8
    251c:	91 2c       	mov	r9, r1
    251e:	53 01       	movw	r10, r6
    2520:	13 c0       	rjmp	.+38     	; 0x2548 <vfprintf+0x154>
    2522:	28 01       	movw	r4, r16
    2524:	f2 e0       	ldi	r31, 0x02	; 2
    2526:	4f 0e       	add	r4, r31
    2528:	51 1c       	adc	r5, r1
    252a:	f8 01       	movw	r30, r16
    252c:	a0 80       	ld	r10, Z
    252e:	b1 80       	ldd	r11, Z+1	; 0x01
    2530:	36 fe       	sbrs	r3, 6
    2532:	03 c0       	rjmp	.+6      	; 0x253a <vfprintf+0x146>
    2534:	69 2d       	mov	r22, r9
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	02 c0       	rjmp	.+4      	; 0x253e <vfprintf+0x14a>
    253a:	6f ef       	ldi	r22, 0xFF	; 255
    253c:	7f ef       	ldi	r23, 0xFF	; 255
    253e:	c5 01       	movw	r24, r10
    2540:	0e 94 e6 13 	call	0x27cc	; 0x27cc <strnlen>
    2544:	4c 01       	movw	r8, r24
    2546:	82 01       	movw	r16, r4
    2548:	f3 2d       	mov	r31, r3
    254a:	ff 77       	andi	r31, 0x7F	; 127
    254c:	3f 2e       	mov	r3, r31
    254e:	16 c0       	rjmp	.+44     	; 0x257c <vfprintf+0x188>
    2550:	28 01       	movw	r4, r16
    2552:	22 e0       	ldi	r18, 0x02	; 2
    2554:	42 0e       	add	r4, r18
    2556:	51 1c       	adc	r5, r1
    2558:	f8 01       	movw	r30, r16
    255a:	a0 80       	ld	r10, Z
    255c:	b1 80       	ldd	r11, Z+1	; 0x01
    255e:	36 fe       	sbrs	r3, 6
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <vfprintf+0x174>
    2562:	69 2d       	mov	r22, r9
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	02 c0       	rjmp	.+4      	; 0x256c <vfprintf+0x178>
    2568:	6f ef       	ldi	r22, 0xFF	; 255
    256a:	7f ef       	ldi	r23, 0xFF	; 255
    256c:	c5 01       	movw	r24, r10
    256e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <strnlen_P>
    2572:	4c 01       	movw	r8, r24
    2574:	f3 2d       	mov	r31, r3
    2576:	f0 68       	ori	r31, 0x80	; 128
    2578:	3f 2e       	mov	r3, r31
    257a:	82 01       	movw	r16, r4
    257c:	33 fc       	sbrc	r3, 3
    257e:	1b c0       	rjmp	.+54     	; 0x25b6 <vfprintf+0x1c2>
    2580:	82 2d       	mov	r24, r2
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	88 16       	cp	r8, r24
    2586:	99 06       	cpc	r9, r25
    2588:	b0 f4       	brcc	.+44     	; 0x25b6 <vfprintf+0x1c2>
    258a:	b6 01       	movw	r22, r12
    258c:	80 e2       	ldi	r24, 0x20	; 32
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2594:	2a 94       	dec	r2
    2596:	f4 cf       	rjmp	.-24     	; 0x2580 <vfprintf+0x18c>
    2598:	f5 01       	movw	r30, r10
    259a:	37 fc       	sbrc	r3, 7
    259c:	85 91       	lpm	r24, Z+
    259e:	37 fe       	sbrs	r3, 7
    25a0:	81 91       	ld	r24, Z+
    25a2:	5f 01       	movw	r10, r30
    25a4:	b6 01       	movw	r22, r12
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    25ac:	21 10       	cpse	r2, r1
    25ae:	2a 94       	dec	r2
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	82 1a       	sub	r8, r18
    25b4:	91 08       	sbc	r9, r1
    25b6:	81 14       	cp	r8, r1
    25b8:	91 04       	cpc	r9, r1
    25ba:	71 f7       	brne	.-36     	; 0x2598 <vfprintf+0x1a4>
    25bc:	e8 c0       	rjmp	.+464    	; 0x278e <vfprintf+0x39a>
    25be:	84 36       	cpi	r24, 0x64	; 100
    25c0:	11 f0       	breq	.+4      	; 0x25c6 <vfprintf+0x1d2>
    25c2:	89 36       	cpi	r24, 0x69	; 105
    25c4:	41 f5       	brne	.+80     	; 0x2616 <vfprintf+0x222>
    25c6:	f8 01       	movw	r30, r16
    25c8:	37 fe       	sbrs	r3, 7
    25ca:	07 c0       	rjmp	.+14     	; 0x25da <vfprintf+0x1e6>
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	0c 5f       	subi	r16, 0xFC	; 252
    25d6:	1f 4f       	sbci	r17, 0xFF	; 255
    25d8:	08 c0       	rjmp	.+16     	; 0x25ea <vfprintf+0x1f6>
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	07 2e       	mov	r0, r23
    25e0:	00 0c       	add	r0, r0
    25e2:	88 0b       	sbc	r24, r24
    25e4:	99 0b       	sbc	r25, r25
    25e6:	0e 5f       	subi	r16, 0xFE	; 254
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	f3 2d       	mov	r31, r3
    25ec:	ff 76       	andi	r31, 0x6F	; 111
    25ee:	3f 2e       	mov	r3, r31
    25f0:	97 ff       	sbrs	r25, 7
    25f2:	09 c0       	rjmp	.+18     	; 0x2606 <vfprintf+0x212>
    25f4:	90 95       	com	r25
    25f6:	80 95       	com	r24
    25f8:	70 95       	com	r23
    25fa:	61 95       	neg	r22
    25fc:	7f 4f       	sbci	r23, 0xFF	; 255
    25fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2600:	9f 4f       	sbci	r25, 0xFF	; 255
    2602:	f0 68       	ori	r31, 0x80	; 128
    2604:	3f 2e       	mov	r3, r31
    2606:	2a e0       	ldi	r18, 0x0A	; 10
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	a3 01       	movw	r20, r6
    260c:	0e 94 2d 14 	call	0x285a	; 0x285a <__ultoa_invert>
    2610:	88 2e       	mov	r8, r24
    2612:	86 18       	sub	r8, r6
    2614:	45 c0       	rjmp	.+138    	; 0x26a0 <vfprintf+0x2ac>
    2616:	85 37       	cpi	r24, 0x75	; 117
    2618:	31 f4       	brne	.+12     	; 0x2626 <vfprintf+0x232>
    261a:	23 2d       	mov	r18, r3
    261c:	2f 7e       	andi	r18, 0xEF	; 239
    261e:	b2 2e       	mov	r11, r18
    2620:	2a e0       	ldi	r18, 0x0A	; 10
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	25 c0       	rjmp	.+74     	; 0x2670 <vfprintf+0x27c>
    2626:	93 2d       	mov	r25, r3
    2628:	99 7f       	andi	r25, 0xF9	; 249
    262a:	b9 2e       	mov	r11, r25
    262c:	8f 36       	cpi	r24, 0x6F	; 111
    262e:	c1 f0       	breq	.+48     	; 0x2660 <vfprintf+0x26c>
    2630:	18 f4       	brcc	.+6      	; 0x2638 <vfprintf+0x244>
    2632:	88 35       	cpi	r24, 0x58	; 88
    2634:	79 f0       	breq	.+30     	; 0x2654 <vfprintf+0x260>
    2636:	b5 c0       	rjmp	.+362    	; 0x27a2 <vfprintf+0x3ae>
    2638:	80 37       	cpi	r24, 0x70	; 112
    263a:	19 f0       	breq	.+6      	; 0x2642 <vfprintf+0x24e>
    263c:	88 37       	cpi	r24, 0x78	; 120
    263e:	21 f0       	breq	.+8      	; 0x2648 <vfprintf+0x254>
    2640:	b0 c0       	rjmp	.+352    	; 0x27a2 <vfprintf+0x3ae>
    2642:	e9 2f       	mov	r30, r25
    2644:	e0 61       	ori	r30, 0x10	; 16
    2646:	be 2e       	mov	r11, r30
    2648:	b4 fe       	sbrs	r11, 4
    264a:	0d c0       	rjmp	.+26     	; 0x2666 <vfprintf+0x272>
    264c:	fb 2d       	mov	r31, r11
    264e:	f4 60       	ori	r31, 0x04	; 4
    2650:	bf 2e       	mov	r11, r31
    2652:	09 c0       	rjmp	.+18     	; 0x2666 <vfprintf+0x272>
    2654:	34 fe       	sbrs	r3, 4
    2656:	0a c0       	rjmp	.+20     	; 0x266c <vfprintf+0x278>
    2658:	29 2f       	mov	r18, r25
    265a:	26 60       	ori	r18, 0x06	; 6
    265c:	b2 2e       	mov	r11, r18
    265e:	06 c0       	rjmp	.+12     	; 0x266c <vfprintf+0x278>
    2660:	28 e0       	ldi	r18, 0x08	; 8
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <vfprintf+0x27c>
    2666:	20 e1       	ldi	r18, 0x10	; 16
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <vfprintf+0x27c>
    266c:	20 e1       	ldi	r18, 0x10	; 16
    266e:	32 e0       	ldi	r19, 0x02	; 2
    2670:	f8 01       	movw	r30, r16
    2672:	b7 fe       	sbrs	r11, 7
    2674:	07 c0       	rjmp	.+14     	; 0x2684 <vfprintf+0x290>
    2676:	60 81       	ld	r22, Z
    2678:	71 81       	ldd	r23, Z+1	; 0x01
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	0c 5f       	subi	r16, 0xFC	; 252
    2680:	1f 4f       	sbci	r17, 0xFF	; 255
    2682:	06 c0       	rjmp	.+12     	; 0x2690 <vfprintf+0x29c>
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 5f       	subi	r16, 0xFE	; 254
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	a3 01       	movw	r20, r6
    2692:	0e 94 2d 14 	call	0x285a	; 0x285a <__ultoa_invert>
    2696:	88 2e       	mov	r8, r24
    2698:	86 18       	sub	r8, r6
    269a:	fb 2d       	mov	r31, r11
    269c:	ff 77       	andi	r31, 0x7F	; 127
    269e:	3f 2e       	mov	r3, r31
    26a0:	36 fe       	sbrs	r3, 6
    26a2:	0d c0       	rjmp	.+26     	; 0x26be <vfprintf+0x2ca>
    26a4:	23 2d       	mov	r18, r3
    26a6:	2e 7f       	andi	r18, 0xFE	; 254
    26a8:	a2 2e       	mov	r10, r18
    26aa:	89 14       	cp	r8, r9
    26ac:	58 f4       	brcc	.+22     	; 0x26c4 <vfprintf+0x2d0>
    26ae:	34 fe       	sbrs	r3, 4
    26b0:	0b c0       	rjmp	.+22     	; 0x26c8 <vfprintf+0x2d4>
    26b2:	32 fc       	sbrc	r3, 2
    26b4:	09 c0       	rjmp	.+18     	; 0x26c8 <vfprintf+0x2d4>
    26b6:	83 2d       	mov	r24, r3
    26b8:	8e 7e       	andi	r24, 0xEE	; 238
    26ba:	a8 2e       	mov	r10, r24
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <vfprintf+0x2d4>
    26be:	b8 2c       	mov	r11, r8
    26c0:	a3 2c       	mov	r10, r3
    26c2:	03 c0       	rjmp	.+6      	; 0x26ca <vfprintf+0x2d6>
    26c4:	b8 2c       	mov	r11, r8
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <vfprintf+0x2d6>
    26c8:	b9 2c       	mov	r11, r9
    26ca:	a4 fe       	sbrs	r10, 4
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <vfprintf+0x2f8>
    26ce:	fe 01       	movw	r30, r28
    26d0:	e8 0d       	add	r30, r8
    26d2:	f1 1d       	adc	r31, r1
    26d4:	80 81       	ld	r24, Z
    26d6:	80 33       	cpi	r24, 0x30	; 48
    26d8:	21 f4       	brne	.+8      	; 0x26e2 <vfprintf+0x2ee>
    26da:	9a 2d       	mov	r25, r10
    26dc:	99 7e       	andi	r25, 0xE9	; 233
    26de:	a9 2e       	mov	r10, r25
    26e0:	09 c0       	rjmp	.+18     	; 0x26f4 <vfprintf+0x300>
    26e2:	a2 fe       	sbrs	r10, 2
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <vfprintf+0x2fe>
    26e6:	b3 94       	inc	r11
    26e8:	b3 94       	inc	r11
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <vfprintf+0x300>
    26ec:	8a 2d       	mov	r24, r10
    26ee:	86 78       	andi	r24, 0x86	; 134
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <vfprintf+0x300>
    26f2:	b3 94       	inc	r11
    26f4:	a3 fc       	sbrc	r10, 3
    26f6:	11 c0       	rjmp	.+34     	; 0x271a <vfprintf+0x326>
    26f8:	a0 fe       	sbrs	r10, 0
    26fa:	06 c0       	rjmp	.+12     	; 0x2708 <vfprintf+0x314>
    26fc:	b2 14       	cp	r11, r2
    26fe:	88 f4       	brcc	.+34     	; 0x2722 <vfprintf+0x32e>
    2700:	28 0c       	add	r2, r8
    2702:	92 2c       	mov	r9, r2
    2704:	9b 18       	sub	r9, r11
    2706:	0e c0       	rjmp	.+28     	; 0x2724 <vfprintf+0x330>
    2708:	b2 14       	cp	r11, r2
    270a:	60 f4       	brcc	.+24     	; 0x2724 <vfprintf+0x330>
    270c:	b6 01       	movw	r22, r12
    270e:	80 e2       	ldi	r24, 0x20	; 32
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2716:	b3 94       	inc	r11
    2718:	f7 cf       	rjmp	.-18     	; 0x2708 <vfprintf+0x314>
    271a:	b2 14       	cp	r11, r2
    271c:	18 f4       	brcc	.+6      	; 0x2724 <vfprintf+0x330>
    271e:	2b 18       	sub	r2, r11
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <vfprintf+0x332>
    2722:	98 2c       	mov	r9, r8
    2724:	21 2c       	mov	r2, r1
    2726:	a4 fe       	sbrs	r10, 4
    2728:	10 c0       	rjmp	.+32     	; 0x274a <vfprintf+0x356>
    272a:	b6 01       	movw	r22, r12
    272c:	80 e3       	ldi	r24, 0x30	; 48
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2734:	a2 fe       	sbrs	r10, 2
    2736:	17 c0       	rjmp	.+46     	; 0x2766 <vfprintf+0x372>
    2738:	a1 fc       	sbrc	r10, 1
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <vfprintf+0x34e>
    273c:	88 e7       	ldi	r24, 0x78	; 120
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x352>
    2742:	88 e5       	ldi	r24, 0x58	; 88
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	b6 01       	movw	r22, r12
    2748:	0c c0       	rjmp	.+24     	; 0x2762 <vfprintf+0x36e>
    274a:	8a 2d       	mov	r24, r10
    274c:	86 78       	andi	r24, 0x86	; 134
    274e:	59 f0       	breq	.+22     	; 0x2766 <vfprintf+0x372>
    2750:	a1 fe       	sbrs	r10, 1
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <vfprintf+0x364>
    2754:	8b e2       	ldi	r24, 0x2B	; 43
    2756:	01 c0       	rjmp	.+2      	; 0x275a <vfprintf+0x366>
    2758:	80 e2       	ldi	r24, 0x20	; 32
    275a:	a7 fc       	sbrc	r10, 7
    275c:	8d e2       	ldi	r24, 0x2D	; 45
    275e:	b6 01       	movw	r22, r12
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2766:	89 14       	cp	r8, r9
    2768:	38 f4       	brcc	.+14     	; 0x2778 <vfprintf+0x384>
    276a:	b6 01       	movw	r22, r12
    276c:	80 e3       	ldi	r24, 0x30	; 48
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2774:	9a 94       	dec	r9
    2776:	f7 cf       	rjmp	.-18     	; 0x2766 <vfprintf+0x372>
    2778:	8a 94       	dec	r8
    277a:	f3 01       	movw	r30, r6
    277c:	e8 0d       	add	r30, r8
    277e:	f1 1d       	adc	r31, r1
    2780:	80 81       	ld	r24, Z
    2782:	b6 01       	movw	r22, r12
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    278a:	81 10       	cpse	r8, r1
    278c:	f5 cf       	rjmp	.-22     	; 0x2778 <vfprintf+0x384>
    278e:	22 20       	and	r2, r2
    2790:	09 f4       	brne	.+2      	; 0x2794 <vfprintf+0x3a0>
    2792:	42 ce       	rjmp	.-892    	; 0x2418 <vfprintf+0x24>
    2794:	b6 01       	movw	r22, r12
    2796:	80 e2       	ldi	r24, 0x20	; 32
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    279e:	2a 94       	dec	r2
    27a0:	f6 cf       	rjmp	.-20     	; 0x278e <vfprintf+0x39a>
    27a2:	f6 01       	movw	r30, r12
    27a4:	86 81       	ldd	r24, Z+6	; 0x06
    27a6:	97 81       	ldd	r25, Z+7	; 0x07
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x3ba>
    27aa:	8f ef       	ldi	r24, 0xFF	; 255
    27ac:	9f ef       	ldi	r25, 0xFF	; 255
    27ae:	2b 96       	adiw	r28, 0x0b	; 11
    27b0:	e2 e1       	ldi	r30, 0x12	; 18
    27b2:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__epilogue_restores__>

000027b6 <strnlen_P>:
    27b6:	fc 01       	movw	r30, r24
    27b8:	05 90       	lpm	r0, Z+
    27ba:	61 50       	subi	r22, 0x01	; 1
    27bc:	70 40       	sbci	r23, 0x00	; 0
    27be:	01 10       	cpse	r0, r1
    27c0:	d8 f7       	brcc	.-10     	; 0x27b8 <strnlen_P+0x2>
    27c2:	80 95       	com	r24
    27c4:	90 95       	com	r25
    27c6:	8e 0f       	add	r24, r30
    27c8:	9f 1f       	adc	r25, r31
    27ca:	08 95       	ret

000027cc <strnlen>:
    27cc:	fc 01       	movw	r30, r24
    27ce:	61 50       	subi	r22, 0x01	; 1
    27d0:	70 40       	sbci	r23, 0x00	; 0
    27d2:	01 90       	ld	r0, Z+
    27d4:	01 10       	cpse	r0, r1
    27d6:	d8 f7       	brcc	.-10     	; 0x27ce <strnlen+0x2>
    27d8:	80 95       	com	r24
    27da:	90 95       	com	r25
    27dc:	8e 0f       	add	r24, r30
    27de:	9f 1f       	adc	r25, r31
    27e0:	08 95       	ret

000027e2 <fputc>:
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	fb 01       	movw	r30, r22
    27ec:	23 81       	ldd	r18, Z+3	; 0x03
    27ee:	21 fd       	sbrc	r18, 1
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <fputc+0x16>
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	9f ef       	ldi	r25, 0xFF	; 255
    27f6:	2c c0       	rjmp	.+88     	; 0x2850 <fputc+0x6e>
    27f8:	22 ff       	sbrs	r18, 2
    27fa:	16 c0       	rjmp	.+44     	; 0x2828 <fputc+0x46>
    27fc:	46 81       	ldd	r20, Z+6	; 0x06
    27fe:	57 81       	ldd	r21, Z+7	; 0x07
    2800:	24 81       	ldd	r18, Z+4	; 0x04
    2802:	35 81       	ldd	r19, Z+5	; 0x05
    2804:	42 17       	cp	r20, r18
    2806:	53 07       	cpc	r21, r19
    2808:	44 f4       	brge	.+16     	; 0x281a <fputc+0x38>
    280a:	a0 81       	ld	r26, Z
    280c:	b1 81       	ldd	r27, Z+1	; 0x01
    280e:	9d 01       	movw	r18, r26
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	31 83       	std	Z+1, r19	; 0x01
    2816:	20 83       	st	Z, r18
    2818:	8c 93       	st	X, r24
    281a:	26 81       	ldd	r18, Z+6	; 0x06
    281c:	37 81       	ldd	r19, Z+7	; 0x07
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	37 83       	std	Z+7, r19	; 0x07
    2824:	26 83       	std	Z+6, r18	; 0x06
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <fputc+0x6e>
    2828:	8b 01       	movw	r16, r22
    282a:	ec 01       	movw	r28, r24
    282c:	fb 01       	movw	r30, r22
    282e:	00 84       	ldd	r0, Z+8	; 0x08
    2830:	f1 85       	ldd	r31, Z+9	; 0x09
    2832:	e0 2d       	mov	r30, r0
    2834:	09 95       	icall
    2836:	89 2b       	or	r24, r25
    2838:	e1 f6       	brne	.-72     	; 0x27f2 <fputc+0x10>
    283a:	d8 01       	movw	r26, r16
    283c:	16 96       	adiw	r26, 0x06	; 6
    283e:	8d 91       	ld	r24, X+
    2840:	9c 91       	ld	r25, X
    2842:	17 97       	sbiw	r26, 0x07	; 7
    2844:	01 96       	adiw	r24, 0x01	; 1
    2846:	17 96       	adiw	r26, 0x07	; 7
    2848:	9c 93       	st	X, r25
    284a:	8e 93       	st	-X, r24
    284c:	16 97       	sbiw	r26, 0x06	; 6
    284e:	ce 01       	movw	r24, r28
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	08 95       	ret

0000285a <__ultoa_invert>:
    285a:	fa 01       	movw	r30, r20
    285c:	aa 27       	eor	r26, r26
    285e:	28 30       	cpi	r18, 0x08	; 8
    2860:	51 f1       	breq	.+84     	; 0x28b6 <__ultoa_invert+0x5c>
    2862:	20 31       	cpi	r18, 0x10	; 16
    2864:	81 f1       	breq	.+96     	; 0x28c6 <__ultoa_invert+0x6c>
    2866:	e8 94       	clt
    2868:	6f 93       	push	r22
    286a:	6e 7f       	andi	r22, 0xFE	; 254
    286c:	6e 5f       	subi	r22, 0xFE	; 254
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	8f 4f       	sbci	r24, 0xFF	; 255
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	af 4f       	sbci	r26, 0xFF	; 255
    2876:	b1 e0       	ldi	r27, 0x01	; 1
    2878:	3e d0       	rcall	.+124    	; 0x28f6 <__ultoa_invert+0x9c>
    287a:	b4 e0       	ldi	r27, 0x04	; 4
    287c:	3c d0       	rcall	.+120    	; 0x28f6 <__ultoa_invert+0x9c>
    287e:	67 0f       	add	r22, r23
    2880:	78 1f       	adc	r23, r24
    2882:	89 1f       	adc	r24, r25
    2884:	9a 1f       	adc	r25, r26
    2886:	a1 1d       	adc	r26, r1
    2888:	68 0f       	add	r22, r24
    288a:	79 1f       	adc	r23, r25
    288c:	8a 1f       	adc	r24, r26
    288e:	91 1d       	adc	r25, r1
    2890:	a1 1d       	adc	r26, r1
    2892:	6a 0f       	add	r22, r26
    2894:	71 1d       	adc	r23, r1
    2896:	81 1d       	adc	r24, r1
    2898:	91 1d       	adc	r25, r1
    289a:	a1 1d       	adc	r26, r1
    289c:	20 d0       	rcall	.+64     	; 0x28de <__ultoa_invert+0x84>
    289e:	09 f4       	brne	.+2      	; 0x28a2 <__ultoa_invert+0x48>
    28a0:	68 94       	set
    28a2:	3f 91       	pop	r19
    28a4:	2a e0       	ldi	r18, 0x0A	; 10
    28a6:	26 9f       	mul	r18, r22
    28a8:	11 24       	eor	r1, r1
    28aa:	30 19       	sub	r19, r0
    28ac:	30 5d       	subi	r19, 0xD0	; 208
    28ae:	31 93       	st	Z+, r19
    28b0:	de f6       	brtc	.-74     	; 0x2868 <__ultoa_invert+0xe>
    28b2:	cf 01       	movw	r24, r30
    28b4:	08 95       	ret
    28b6:	46 2f       	mov	r20, r22
    28b8:	47 70       	andi	r20, 0x07	; 7
    28ba:	40 5d       	subi	r20, 0xD0	; 208
    28bc:	41 93       	st	Z+, r20
    28be:	b3 e0       	ldi	r27, 0x03	; 3
    28c0:	0f d0       	rcall	.+30     	; 0x28e0 <__ultoa_invert+0x86>
    28c2:	c9 f7       	brne	.-14     	; 0x28b6 <__ultoa_invert+0x5c>
    28c4:	f6 cf       	rjmp	.-20     	; 0x28b2 <__ultoa_invert+0x58>
    28c6:	46 2f       	mov	r20, r22
    28c8:	4f 70       	andi	r20, 0x0F	; 15
    28ca:	40 5d       	subi	r20, 0xD0	; 208
    28cc:	4a 33       	cpi	r20, 0x3A	; 58
    28ce:	18 f0       	brcs	.+6      	; 0x28d6 <__ultoa_invert+0x7c>
    28d0:	49 5d       	subi	r20, 0xD9	; 217
    28d2:	31 fd       	sbrc	r19, 1
    28d4:	40 52       	subi	r20, 0x20	; 32
    28d6:	41 93       	st	Z+, r20
    28d8:	02 d0       	rcall	.+4      	; 0x28de <__ultoa_invert+0x84>
    28da:	a9 f7       	brne	.-22     	; 0x28c6 <__ultoa_invert+0x6c>
    28dc:	ea cf       	rjmp	.-44     	; 0x28b2 <__ultoa_invert+0x58>
    28de:	b4 e0       	ldi	r27, 0x04	; 4
    28e0:	a6 95       	lsr	r26
    28e2:	97 95       	ror	r25
    28e4:	87 95       	ror	r24
    28e6:	77 95       	ror	r23
    28e8:	67 95       	ror	r22
    28ea:	ba 95       	dec	r27
    28ec:	c9 f7       	brne	.-14     	; 0x28e0 <__ultoa_invert+0x86>
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	61 05       	cpc	r22, r1
    28f2:	71 05       	cpc	r23, r1
    28f4:	08 95       	ret
    28f6:	9b 01       	movw	r18, r22
    28f8:	ac 01       	movw	r20, r24
    28fa:	0a 2e       	mov	r0, r26
    28fc:	06 94       	lsr	r0
    28fe:	57 95       	ror	r21
    2900:	47 95       	ror	r20
    2902:	37 95       	ror	r19
    2904:	27 95       	ror	r18
    2906:	ba 95       	dec	r27
    2908:	c9 f7       	brne	.-14     	; 0x28fc <__ultoa_invert+0xa2>
    290a:	62 0f       	add	r22, r18
    290c:	73 1f       	adc	r23, r19
    290e:	84 1f       	adc	r24, r20
    2910:	95 1f       	adc	r25, r21
    2912:	a0 1d       	adc	r26, r0
    2914:	08 95       	ret

00002916 <eeprom_read_byte>:
    2916:	f9 99       	sbic	0x1f, 1	; 31
    2918:	fe cf       	rjmp	.-4      	; 0x2916 <eeprom_read_byte>
    291a:	92 bd       	out	0x22, r25	; 34
    291c:	81 bd       	out	0x21, r24	; 33
    291e:	f8 9a       	sbi	0x1f, 0	; 31
    2920:	99 27       	eor	r25, r25
    2922:	80 b5       	in	r24, 0x20	; 32
    2924:	08 95       	ret

00002926 <eeprom_read_dword>:
    2926:	a6 e1       	ldi	r26, 0x16	; 22
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	44 e0       	ldi	r20, 0x04	; 4
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <eeprom_read_blraw>

00002932 <eeprom_read_word>:
    2932:	a8 e1       	ldi	r26, 0x18	; 24
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	42 e0       	ldi	r20, 0x02	; 2
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <eeprom_read_blraw>

0000293e <eeprom_write_byte>:
    293e:	26 2f       	mov	r18, r22

00002940 <eeprom_write_r18>:
    2940:	f9 99       	sbic	0x1f, 1	; 31
    2942:	fe cf       	rjmp	.-4      	; 0x2940 <eeprom_write_r18>
    2944:	1f ba       	out	0x1f, r1	; 31
    2946:	92 bd       	out	0x22, r25	; 34
    2948:	81 bd       	out	0x21, r24	; 33
    294a:	20 bd       	out	0x20, r18	; 32
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	fa 9a       	sbi	0x1f, 2	; 31
    2952:	f9 9a       	sbi	0x1f, 1	; 31
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	01 96       	adiw	r24, 0x01	; 1
    2958:	08 95       	ret

0000295a <eeprom_write_dword>:
    295a:	24 2f       	mov	r18, r20
    295c:	0e 94 a0 14 	call	0x2940	; 0x2940 <eeprom_write_r18>
    2960:	25 2f       	mov	r18, r21
    2962:	0e 94 a0 14 	call	0x2940	; 0x2940 <eeprom_write_r18>
    2966:	0c 94 b5 14 	jmp	0x296a	; 0x296a <eeprom_write_word>

0000296a <eeprom_write_word>:
    296a:	0e 94 9f 14 	call	0x293e	; 0x293e <eeprom_write_byte>
    296e:	27 2f       	mov	r18, r23
    2970:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <eeprom_write_r18>

00002974 <eeprom_read_block>:
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22

00002978 <eeprom_read_blraw>:
    2978:	fc 01       	movw	r30, r24
    297a:	f9 99       	sbic	0x1f, 1	; 31
    297c:	fe cf       	rjmp	.-4      	; 0x297a <eeprom_read_blraw+0x2>
    297e:	06 c0       	rjmp	.+12     	; 0x298c <eeprom_read_blraw+0x14>
    2980:	f2 bd       	out	0x22, r31	; 34
    2982:	e1 bd       	out	0x21, r30	; 33
    2984:	f8 9a       	sbi	0x1f, 0	; 31
    2986:	31 96       	adiw	r30, 0x01	; 1
    2988:	00 b4       	in	r0, 0x20	; 32
    298a:	0d 92       	st	X+, r0
    298c:	41 50       	subi	r20, 0x01	; 1
    298e:	50 40       	sbci	r21, 0x00	; 0
    2990:	b8 f7       	brcc	.-18     	; 0x2980 <eeprom_read_blraw+0x8>
    2992:	08 95       	ret

00002994 <__prologue_saves__>:
    2994:	2f 92       	push	r2
    2996:	3f 92       	push	r3
    2998:	4f 92       	push	r4
    299a:	5f 92       	push	r5
    299c:	6f 92       	push	r6
    299e:	7f 92       	push	r7
    29a0:	8f 92       	push	r8
    29a2:	9f 92       	push	r9
    29a4:	af 92       	push	r10
    29a6:	bf 92       	push	r11
    29a8:	cf 92       	push	r12
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	ca 1b       	sub	r28, r26
    29be:	db 0b       	sbc	r29, r27
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	09 94       	ijmp

000029cc <__epilogue_restores__>:
    29cc:	2a 88       	ldd	r2, Y+18	; 0x12
    29ce:	39 88       	ldd	r3, Y+17	; 0x11
    29d0:	48 88       	ldd	r4, Y+16	; 0x10
    29d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29da:	9b 84       	ldd	r9, Y+11	; 0x0b
    29dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29de:	b9 84       	ldd	r11, Y+9	; 0x09
    29e0:	c8 84       	ldd	r12, Y+8	; 0x08
    29e2:	df 80       	ldd	r13, Y+7	; 0x07
    29e4:	ee 80       	ldd	r14, Y+6	; 0x06
    29e6:	fd 80       	ldd	r15, Y+5	; 0x05
    29e8:	0c 81       	ldd	r16, Y+4	; 0x04
    29ea:	1b 81       	ldd	r17, Y+3	; 0x03
    29ec:	aa 81       	ldd	r26, Y+2	; 0x02
    29ee:	b9 81       	ldd	r27, Y+1	; 0x01
    29f0:	ce 0f       	add	r28, r30
    29f2:	d1 1d       	adc	r29, r1
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	ed 01       	movw	r28, r26
    2a00:	08 95       	ret

00002a02 <_exit>:
    2a02:	f8 94       	cli

00002a04 <__stop_program>:
    2a04:	ff cf       	rjmp	.-2      	; 0x2a04 <__stop_program>
