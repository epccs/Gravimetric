
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00003a9e  00003b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023d  008001ac  008001ac  00003bde  2**0
                  ALLOC
  3 .stab         0000cda4  00000000  00000000  00003be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000312d  00000000  00000000  00010984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00013ab1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00013ac4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  00013b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2d  00000000  00000000  00013be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  00014915  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000052c  00000000  00000000  0001520f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  0001573b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__vector_18>
      4c:	0c 94 be 18 	jmp	0x317c	; 0x317c <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 86 13 	jmp	0x270c	; 0x270c <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ee e9       	ldi	r30, 0x9E	; 158
      ce:	fa e3       	ldi	r31, 0x3A	; 58
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 3a       	cpi	r26, 0xAC	; 172
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac ea       	ldi	r26, 0xAC	; 172
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a9 3e       	cpi	r26, 0xE9	; 233
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <main>
      f0:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
      f8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <host_is_foreign>
      fc:	88 23       	and	r24, r24
      fe:	c1 f0       	breq	.+48     	; 0x130 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     104:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     110:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <local_mcu_is_rpu_aware>
     114:	88 23       	and	r24, r24
     116:	21 f0       	breq	.+8      	; 0x120 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	5d 9a       	sbi	0x0b, 5	; 11
     11e:	03 c0       	rjmp	.+6      	; 0x126 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
     122:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     124:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	42 9a       	sbi	0x08, 2	; 8
     12e:	17 c0       	rjmp	.+46     	; 0x15e <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     13c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     140:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <local_mcu_is_rpu_aware>
     144:	88 23       	and	r24, r24
     146:	21 f0       	breq	.+8      	; 0x150 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	5d 9a       	sbi	0x0b, 5	; 11
     14e:	03 c0       	rjmp	.+6      	; 0x156 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
     152:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     154:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     15c:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     160:	08 95       	ret

00000162 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     162:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <host_is_foreign>
     166:	88 23       	and	r24, r24
     168:	81 f0       	breq	.+32     	; 0x18a <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     16a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     16e:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     170:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     172:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     174:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     176:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     178:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     17a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17e:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     180:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     182:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     184:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     186:	42 9a       	sbi	0x08, 2	; 8
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     18a:	8f b7       	in	r24, 0x3f	; 63
     18c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18e:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     190:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     192:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     194:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     196:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     198:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     19a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     19e:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1a6:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     1aa:	08 95       	ret

000001ac <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     1ac:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <host_is_foreign>
     1b0:	88 23       	and	r24, r24
     1b2:	81 f0       	breq	.+32     	; 0x1d4 <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1b6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1b8:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ba:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1be:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1c0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1c2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1c4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1c6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1c8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1ce:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1d0:	42 9a       	sbi	0x08, 2	; 8
     1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <connect_lockout_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1d4:	8f b7       	in	r24, 0x3f	; 63
     1d6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1d8:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1da:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1de:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1e0:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1e2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1e4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1e6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1e8:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ea:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1ee:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1f0:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1f2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     1f4:	08 95       	ret

000001f6 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     1fa:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <shutdown_detected>
     1fe:	81 11       	cpse	r24, r1
     200:	a6 c0       	rjmp	.+332    	; 0x34e <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     202:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     206:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <blink_started_at>
     20a:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <blink_started_at+0x1>
     20e:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <blink_started_at+0x2>
     212:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <blink_started_at+0x3>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	80 1b       	sub	r24, r16
     21c:	91 0b       	sbc	r25, r17
     21e:	a2 0b       	sbc	r26, r18
     220:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     222:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <status_byt>
     226:	27 7f       	andi	r18, 0xF7	; 247
     228:	09 f0       	breq	.+2      	; 0x22c <blink_on_activate+0x36>
     22a:	6d c0       	rjmp	.+218    	; 0x306 <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     22c:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <host_is_foreign>
     230:	22 23       	and	r18, r18
     232:	21 f0       	breq	.+8      	; 0x23c <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     234:	b6 95       	lsr	r27
     236:	a7 95       	ror	r26
     238:	97 95       	ror	r25
     23a:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     23c:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <bootloader_started>
     240:	22 23       	and	r18, r18
     242:	e9 f0       	breq	.+58     	; 0x27e <blink_on_activate+0x88>
     244:	8c 34       	cpi	r24, 0x4C	; 76
     246:	91 05       	cpc	r25, r1
     248:	a1 05       	cpc	r26, r1
     24a:	b1 05       	cpc	r27, r1
     24c:	c0 f0       	brcs	.+48     	; 0x27e <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     24e:	25 9b       	sbis	0x04, 5	; 4
     250:	09 c0       	rjmp	.+18     	; 0x264 <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     252:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     254:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     256:	f8 94       	cli
    {
        if (value_for_bit) 
     258:	95 fd       	sbrc	r25, 5
     25a:	02 c0       	rjmp	.+4      	; 0x260 <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     25c:	2d 9a       	sbi	0x05, 5	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     260:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     262:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     264:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <blink_started_at>
     268:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <blink_started_at+0x1>
     26c:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <blink_started_at+0x2>
     270:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <blink_started_at+0x3>
     274:	85 5b       	subi	r24, 0xB5	; 181
     276:	9f 4f       	sbci	r25, 0xFF	; 255
     278:	af 4f       	sbci	r26, 0xFF	; 255
     27a:	bf 4f       	sbci	r27, 0xFF	; 255
     27c:	60 c0       	rjmp	.+192    	; 0x33e <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     27e:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <lockout_active>
     282:	22 23       	and	r18, r18
     284:	f1 f0       	breq	.+60     	; 0x2c2 <blink_on_activate+0xcc>
     286:	81 3d       	cpi	r24, 0xD1	; 209
     288:	27 e0       	ldi	r18, 0x07	; 7
     28a:	92 07       	cpc	r25, r18
     28c:	a1 05       	cpc	r26, r1
     28e:	b1 05       	cpc	r27, r1
     290:	c0 f0       	brcs	.+48     	; 0x2c2 <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     292:	25 9b       	sbis	0x04, 5	; 4
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     296:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     298:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     29a:	f8 94       	cli
    {
        if (value_for_bit) 
     29c:	95 fd       	sbrc	r25, 5
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     2a0:	2d 9a       	sbi	0x05, 5	; 5
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     2a4:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2a6:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     2a8:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <blink_started_at>
     2ac:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <blink_started_at+0x1>
     2b0:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <blink_started_at+0x2>
     2b4:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <blink_started_at+0x3>
     2b8:	80 53       	subi	r24, 0x30	; 48
     2ba:	98 4f       	sbci	r25, 0xF8	; 248
     2bc:	af 4f       	sbci	r26, 0xFF	; 255
     2be:	bf 4f       	sbci	r27, 0xFF	; 255
     2c0:	3e c0       	rjmp	.+124    	; 0x33e <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     2c2:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <host_active>
     2c6:	22 23       	and	r18, r18
     2c8:	09 f4       	brne	.+2      	; 0x2cc <blink_on_activate+0xd6>
     2ca:	41 c0       	rjmp	.+130    	; 0x34e <blink_on_activate+0x158>
     2cc:	85 3f       	cpi	r24, 0xF5	; 245
     2ce:	91 40       	sbci	r25, 0x01	; 1
     2d0:	a1 05       	cpc	r26, r1
     2d2:	b1 05       	cpc	r27, r1
     2d4:	e0 f1       	brcs	.+120    	; 0x34e <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     2d6:	25 9b       	sbis	0x04, 5	; 4
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     2da:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     2dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2de:	f8 94       	cli
    {
        if (value_for_bit) 
     2e0:	95 fd       	sbrc	r25, 5
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     2e4:	2d 9a       	sbi	0x05, 5	; 5
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     2e8:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ea:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     2ec:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <blink_started_at>
     2f0:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <blink_started_at+0x1>
     2f4:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <blink_started_at+0x2>
     2f8:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <blink_started_at+0x3>
     2fc:	8c 50       	subi	r24, 0x0C	; 12
     2fe:	9e 4f       	sbci	r25, 0xFE	; 254
     300:	af 4f       	sbci	r26, 0xFF	; 255
     302:	bf 4f       	sbci	r27, 0xFF	; 255
     304:	1c c0       	rjmp	.+56     	; 0x33e <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     306:	89 3c       	cpi	r24, 0xC9	; 201
     308:	91 05       	cpc	r25, r1
     30a:	a1 05       	cpc	r26, r1
     30c:	b1 05       	cpc	r27, r1
     30e:	f8 f0       	brcs	.+62     	; 0x34e <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     310:	25 9b       	sbis	0x04, 5	; 4
     312:	09 c0       	rjmp	.+18     	; 0x326 <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     314:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     316:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     318:	f8 94       	cli
    {
        if (value_for_bit) 
     31a:	95 fd       	sbrc	r25, 5
     31c:	02 c0       	rjmp	.+4      	; 0x322 <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     31e:	2d 9a       	sbi	0x05, 5	; 5
     320:	01 c0       	rjmp	.+2      	; 0x324 <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     322:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     324:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     326:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <blink_started_at>
     32a:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <blink_started_at+0x1>
     32e:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <blink_started_at+0x2>
     332:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <blink_started_at+0x3>
     336:	88 53       	subi	r24, 0x38	; 56
     338:	9f 4f       	sbci	r25, 0xFF	; 255
     33a:	af 4f       	sbci	r26, 0xFF	; 255
     33c:	bf 4f       	sbci	r27, 0xFF	; 255
     33e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <blink_started_at>
     342:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <blink_started_at+0x1>
     346:	a0 93 0a 03 	sts	0x030A, r26	; 0x80030a <blink_started_at+0x2>
     34a:	b0 93 0b 03 	sts	0x030B, r27	; 0x80030b <blink_started_at+0x3>
        }
    }
}
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
    if (bootloader_started)
     358:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <bootloader_started>
     35c:	88 23       	and	r24, r24
     35e:	01 f1       	breq	.+64     	; 0x3a0 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     360:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     364:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <arduino_mode>
     368:	21 11       	cpse	r18, r1
     36a:	1a c0       	rjmp	.+52     	; 0x3a0 <check_Bootload_Time+0x4c>
     36c:	00 91 f5 02 	lds	r16, 0x02F5	; 0x8002f5 <bootloader_started_at>
     370:	10 91 f6 02 	lds	r17, 0x02F6	; 0x8002f6 <bootloader_started_at+0x1>
     374:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <bootloader_started_at+0x2>
     378:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <bootloader_started_at+0x3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	80 1b       	sub	r24, r16
     382:	91 0b       	sbc	r25, r17
     384:	a2 0b       	sbc	r26, r18
     386:	b3 0b       	sbc	r27, r19
     388:	89 33       	cpi	r24, 0x39	; 57
     38a:	91 4c       	sbci	r25, 0xC1	; 193
     38c:	a1 40       	sbci	r26, 0x01	; 1
     38e:	b1 05       	cpc	r27, r1
     390:	38 f0       	brcs	.+14     	; 0x3a0 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     392:	0e 94 7c 00 	call	0xf8	; 0xf8 <connect_normal_mode>
            host_active =1;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <host_active>
            bootloader_started = 0;
     39c:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <bootloader_started>
        }
    }
}
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     3aa:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     3ae:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <arduino_mode>
     3b2:	21 11       	cpse	r18, r1
     3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <check_lockout+0x4c>
     3b6:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <lockout_active>
     3ba:	22 23       	and	r18, r18
     3bc:	d1 f0       	breq	.+52     	; 0x3f2 <check_lockout+0x4c>
     3be:	00 91 f9 02 	lds	r16, 0x02F9	; 0x8002f9 <lockout_started_at>
     3c2:	10 91 fa 02 	lds	r17, 0x02FA	; 0x8002fa <lockout_started_at+0x1>
     3c6:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <lockout_started_at+0x2>
     3ca:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <lockout_started_at+0x3>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	80 1b       	sub	r24, r16
     3d4:	91 0b       	sbc	r25, r17
     3d6:	a2 0b       	sbc	r26, r18
     3d8:	b3 0b       	sbc	r27, r19
     3da:	81 3c       	cpi	r24, 0xC1	; 193
     3dc:	94 4d       	sbci	r25, 0xD4	; 212
     3de:	a1 40       	sbci	r26, 0x01	; 1
     3e0:	b1 05       	cpc	r27, r1
     3e2:	38 f0       	brcs	.+14     	; 0x3f2 <check_lockout+0x4c>
    {
        connect_normal_mode();
     3e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <connect_normal_mode>

        host_active = 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <host_active>
        lockout_active =0;
     3ee:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <lockout_active>
    }
}
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <check_shutdown>:


void check_shutdown(void)
{
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
    if (shutdown_started)
     3fc:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <shutdown_started>
     400:	88 23       	and	r24, r24
     402:	19 f1       	breq	.+70     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     404:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     408:	00 91 0d 03 	lds	r16, 0x030D	; 0x80030d <shutdown_started_at>
     40c:	10 91 0e 03 	lds	r17, 0x030E	; 0x80030e <shutdown_started_at+0x1>
     410:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <shutdown_started_at+0x2>
     414:	30 91 10 03 	lds	r19, 0x0310	; 0x800310 <shutdown_started_at+0x3>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	80 1b       	sub	r24, r16
     41e:	91 0b       	sbc	r25, r17
     420:	a2 0b       	sbc	r26, r18
     422:	b3 0b       	sbc	r27, r19
     424:	89 3e       	cpi	r24, 0xE9	; 233
     426:	93 40       	sbci	r25, 0x03	; 3
     428:	a1 05       	cpc	r26, r1
     42a:	b1 05       	cpc	r27, r1
     42c:	98 f1       	brcs	.+102    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     42e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     430:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     432:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     434:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     436:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     438:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     43a:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     43c:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     43e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <shutdown_detected>
     448:	25 c0       	rjmp	.+74     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
        }
    }
    else
        if (!shutdown_detected) 
     44a:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <shutdown_detected>
     44e:	81 11       	cpse	r24, r1
     450:	21 c0       	rjmp	.+66     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     452:	18 99       	sbic	0x03, 0	; 3
     454:	1f c0       	rjmp	.+62     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     456:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     458:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     45a:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     45c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     45e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     460:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     462:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     464:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     466:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     468:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     46a:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     46c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     46e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     470:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     472:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     474:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     476:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <shutdown_started>
                shutdown_started_at = millis();
     480:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     484:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <shutdown_started_at>
     488:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <shutdown_started_at+0x1>
     48c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <shutdown_started_at+0x2>
     490:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <shutdown_started_at+0x3>
            }
        }
}
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <check_DTR>:
uint8_t uart_previous_byte;
uint8_t my_mcu_is_target_and_i_have_it_reset;

void check_DTR(void)
{
    if (!host_is_foreign) 
     49a:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <host_is_foreign>
     49e:	81 11       	cpse	r24, r1
     4a0:	b5 c0       	rjmp	.+362    	; 0x60c <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     4a2:	4b 99       	sbic	0x09, 3	; 9
     4a4:	56 c0       	rjmp	.+172    	; 0x552 <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     4a6:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <status_byt>
     4aa:	83 fd       	sbrc	r24, 3
     4ac:	af c0       	rjmp	.+350    	; 0x60c <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     4ae:	4a 9b       	sbis	0x09, 2	; 9
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4b2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4b4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4b6:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4b8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     4ba:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     4bc:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <bootloader_started>
     4c0:	81 11       	cpse	r24, r1
     4c2:	a4 c0       	rjmp	.+328    	; 0x60c <check_DTR+0x172>
     4c4:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <lockout_active>
     4c8:	81 11       	cpse	r24, r1
     4ca:	a0 c0       	rjmp	.+320    	; 0x60c <check_DTR+0x172>
     4cc:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <host_active>
     4d0:	81 11       	cpse	r24, r1
     4d2:	9c c0       	rjmp	.+312    	; 0x60c <check_DTR+0x172>
     4d4:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <uart_has_TTL>
     4d8:	81 11       	cpse	r24, r1
     4da:	98 c0       	rjmp	.+304    	; 0x60c <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     4dc:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     4e0:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
     4e4:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
     4e8:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
     4ec:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     4f0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bootloader_address>
     4f4:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     4f8:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
     4fc:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
     500:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <uart_output>
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	20 95       	com	r18
     508:	30 95       	com	r19
     50a:	2a 70       	andi	r18, 0x0A	; 10
     50c:	33 27       	eor	r19, r19
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	6a 95       	dec	r22
     516:	e1 f7       	brne	.-8      	; 0x510 <check_DTR+0x76>
     518:	89 2f       	mov	r24, r25
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	80 95       	com	r24
     51e:	90 95       	com	r25
     520:	80 75       	andi	r24, 0x50	; 80
     522:	99 27       	eor	r25, r25
     524:	74 e0       	ldi	r23, 0x04	; 4
     526:	95 95       	asr	r25
     528:	87 95       	ror	r24
     52a:	7a 95       	dec	r23
     52c:	e1 f7       	brne	.-8      	; 0x526 <check_DTR+0x8c>
     52e:	82 2b       	or	r24, r18
     530:	93 2b       	or	r25, r19
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	1f 92       	push	r1
     538:	4f 93       	push	r20
     53a:	86 e1       	ldi	r24, 0x16	; 22
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
                        uart_has_TTL = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <uart_has_TTL>
                        localhost_active = 1;
     54c:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <localhost_active>
     550:	57 c0       	rjmp	.+174    	; 0x600 <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     552:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <host_active>
     556:	88 23       	and	r24, r24
     558:	09 f4       	brne	.+2      	; 0x55c <check_DTR+0xc2>
     55a:	58 c0       	rjmp	.+176    	; 0x60c <check_DTR+0x172>
     55c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <localhost_active>
     560:	88 23       	and	r24, r24
     562:	09 f4       	brne	.+2      	; 0x566 <check_DTR+0xcc>
     564:	53 c0       	rjmp	.+166    	; 0x60c <check_DTR+0x172>
     566:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <uart_has_TTL>
     56a:	81 11       	cpse	r24, r1
     56c:	4f c0       	rjmp	.+158    	; 0x60c <check_DTR+0x172>
     56e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <bootloader_started>
     572:	81 11       	cpse	r24, r1
     574:	4b c0       	rjmp	.+150    	; 0x60c <check_DTR+0x172>
     576:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <lockout_active>
     57a:	81 11       	cpse	r24, r1
     57c:	47 c0       	rjmp	.+142    	; 0x60c <check_DTR+0x172>
            {
                // send a byte on the DTR pair when local host serial nRTS becomes non-active
                uart_started_at = millis();
     57e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     582:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
     586:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
     58a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
     58e:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     592:	8f ec       	ldi	r24, 0xCF	; 207
     594:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     598:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
     59c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
     5a0:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <uart_output>
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	20 95       	com	r18
     5a8:	30 95       	com	r19
     5aa:	2a 70       	andi	r18, 0x0A	; 10
     5ac:	33 27       	eor	r19, r19
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	22 0f       	add	r18, r18
     5b2:	33 1f       	adc	r19, r19
     5b4:	8a 95       	dec	r24
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <check_DTR+0x116>
     5b8:	89 2f       	mov	r24, r25
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	80 95       	com	r24
     5be:	90 95       	com	r25
     5c0:	80 75       	andi	r24, 0x50	; 80
     5c2:	99 27       	eor	r25, r25
     5c4:	54 e0       	ldi	r21, 0x04	; 4
     5c6:	95 95       	asr	r25
     5c8:	87 95       	ror	r24
     5ca:	5a 95       	dec	r21
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <check_DTR+0x12c>
     5ce:	82 2b       	or	r24, r18
     5d0:	93 2b       	or	r25, r19
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	1f 92       	push	r1
     5d8:	4f 93       	push	r20
     5da:	86 e1       	ldi	r24, 0x16	; 22
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
                uart_has_TTL = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     5ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ee:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     5f0:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5f2:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     5f4:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     5f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     5fc:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5fe:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	08 95       	ret

0000060e <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     62e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     632:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <uart_has_TTL>
     636:	22 23       	and	r18, r18
     638:	d9 f0       	breq	.+54     	; 0x670 <check_uart+0x62>
     63a:	40 90 1a 03 	lds	r4, 0x031A	; 0x80031a <uart_started_at>
     63e:	50 90 1b 03 	lds	r5, 0x031B	; 0x80031b <uart_started_at+0x1>
     642:	60 90 1c 03 	lds	r6, 0x031C	; 0x80031c <uart_started_at+0x2>
     646:	70 90 1d 03 	lds	r7, 0x031D	; 0x80031d <uart_started_at+0x3>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	84 19       	sub	r24, r4
     650:	95 09       	sbc	r25, r5
     652:	a6 09       	sbc	r26, r6
     654:	b7 09       	sbc	r27, r7
     656:	85 3f       	cpi	r24, 0xF5	; 245
     658:	91 40       	sbci	r25, 0x01	; 1
     65a:	a1 05       	cpc	r26, r1
     65c:	b1 05       	cpc	r27, r1
     65e:	40 f0       	brcs	.+16     	; 0x670 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     660:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <status_byt>
     664:	81 70       	andi	r24, 0x01	; 1
     666:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <status_byt>
        uart_has_TTL = 0;
     66a:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <uart_has_TTL>
     66e:	f0 c1       	rjmp	.+992    	; 0xa50 <__stack+0x151>
    }
    else
    {
        if ( uart0_available() )
     670:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <uart0_available>
     674:	89 2b       	or	r24, r25
     676:	09 f4       	brne	.+2      	; 0x67a <check_uart+0x6c>
     678:	eb c1       	rjmp	.+982    	; 0xa50 <__stack+0x151>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     67a:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <__iob>
     67e:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <__iob+0x1>
     682:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     686:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <uart_previous_byte>
     68a:	26 2f       	mov	r18, r22
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	20 95       	com	r18
     690:	30 95       	com	r19
     692:	a9 01       	movw	r20, r18
     694:	4a 70       	andi	r20, 0x0A	; 10
     696:	55 27       	eor	r21, r21
     698:	74 e0       	ldi	r23, 0x04	; 4
     69a:	44 0f       	add	r20, r20
     69c:	55 1f       	adc	r21, r21
     69e:	7a 95       	dec	r23
     6a0:	e1 f7       	brne	.-8      	; 0x69a <check_uart+0x8c>
     6a2:	20 75       	andi	r18, 0x50	; 80
     6a4:	33 27       	eor	r19, r19
     6a6:	e4 e0       	ldi	r30, 0x04	; 4
     6a8:	35 95       	asr	r19
     6aa:	27 95       	ror	r18
     6ac:	ea 95       	dec	r30
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <check_uart+0x9a>
     6b0:	24 2b       	or	r18, r20
     6b2:	35 2b       	or	r19, r21
     6b4:	ac 01       	movw	r20, r24
     6b6:	55 27       	eor	r21, r21
     6b8:	24 17       	cp	r18, r20
     6ba:	35 07       	cpc	r19, r21
     6bc:	39 f4       	brne	.+14     	; 0x6cc <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     6be:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently since I 
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     6c2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <uart_has_TTL>
     6c6:	81 11       	cpse	r24, r1
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <check_uart+0xc4>
     6ca:	0f c0       	rjmp	.+30     	; 0x6ea <check_uart+0xdc>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     6cc:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <uart_previous_byte>
                return;
     6d0:	bf c1       	rjmp	.+894    	; 0xa50 <__stack+0x151>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently since I 
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     6d2:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <uart_output>
     6d6:	68 17       	cp	r22, r24
     6d8:	29 f0       	breq	.+10     	; 0x6e4 <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     6da:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <status_byt>
     6de:	84 70       	andi	r24, 0x04	; 4
     6e0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <status_byt>
                }
                uart_has_TTL = 0;
     6e4:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <uart_has_TTL>
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <check_uart+0xe4>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     6ea:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <localhost_active>
     6ee:	88 23       	and	r24, r24
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <check_uart+0xea>
                {
                    host_is_foreign = 0; // used to connect the host
     6f2:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <host_is_foreign>
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <check_uart+0xf0>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     6fe:	61 11       	cpse	r22, r1
     700:	27 c0       	rjmp	.+78     	; 0x750 <check_uart+0x142>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     702:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     706:	dc 01       	movw	r26, r24
     708:	cb 01       	movw	r24, r22
     70a:	80 5c       	subi	r24, 0xC0	; 192
     70c:	94 4d       	sbci	r25, 0xD4	; 212
     70e:	a1 40       	sbci	r26, 0x01	; 1
     710:	b1 09       	sbc	r27, r1
     712:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <lockout_started_at>
     716:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <lockout_started_at+0x1>
     71a:	a0 93 fb 02 	sts	0x02FB, r26	; 0x8002fb <lockout_started_at+0x2>
     71e:	b0 93 fc 02 	sts	0x02FC, r27	; 0x8002fc <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     722:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     726:	dc 01       	movw	r26, r24
     728:	cb 01       	movw	r24, r22
     72a:	88 53       	subi	r24, 0x38	; 56
     72c:	91 4c       	sbci	r25, 0xC1	; 193
     72e:	a1 40       	sbci	r26, 0x01	; 1
     730:	b1 09       	sbc	r27, r1
     732:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <bootloader_started_at>
     736:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <bootloader_started_at+0x1>
     73a:	a0 93 f7 02 	sts	0x02F7, r26	; 0x8002f7 <bootloader_started_at+0x2>
     73e:	b0 93 f8 02 	sts	0x02F8, r27	; 0x8002f8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     742:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     744:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     746:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     748:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     74a:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <arduino_mode>
     74e:	59 c1       	rjmp	.+690    	; 0xa02 <__stack+0x103>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     750:	6f 3f       	cpi	r22, 0xFF	; 255
     752:	31 f4       	brne	.+12     	; 0x760 <check_uart+0x152>
            {
                arduino_mode_started = 0;
     754:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <arduino_mode_started>
                arduino_mode = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <arduino_mode>
                return;
     75e:	78 c1       	rjmp	.+752    	; 0xa50 <__stack+0x151>
            }
            if (input == RPU_START_TEST_MODE) 
     760:	61 30       	cpi	r22, 0x01	; 1
     762:	09 f0       	breq	.+2      	; 0x766 <check_uart+0x158>
     764:	6f c0       	rjmp	.+222    	; 0x844 <check_uart+0x236>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     766:	f9 b1       	in	r31, 0x09	; 9
     768:	e9 b1       	in	r30, 0x09	; 9
     76a:	56 b1       	in	r21, 0x06	; 6
     76c:	49 b1       	in	r20, 0x09	; 9
     76e:	39 b1       	in	r19, 0x09	; 9
     770:	89 b1       	in	r24, 0x09	; 9
     772:	29 b1       	in	r18, 0x09	; 9
     774:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	88 0f       	add	r24, r24
     77a:	89 2f       	mov	r24, r25
     77c:	88 1f       	adc	r24, r24
     77e:	99 0b       	sbc	r25, r25
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	73 fb       	bst	r23, 3
     78a:	99 27       	eor	r25, r25
     78c:	90 f9       	bld	r25, 0
     78e:	89 2b       	or	r24, r25
     790:	f3 fb       	bst	r31, 3
     792:	aa 24       	eor	r10, r10
     794:	a0 f8       	bld	r10, 0
     796:	b1 2c       	mov	r11, r1
     798:	b6 94       	lsr	r11
     79a:	ba 2c       	mov	r11, r10
     79c:	aa 24       	eor	r10, r10
     79e:	b7 94       	ror	r11
     7a0:	a7 94       	ror	r10
     7a2:	a8 2a       	or	r10, r24
     7a4:	e2 fb       	bst	r30, 2
     7a6:	cc 24       	eor	r12, r12
     7a8:	c0 f8       	bld	r12, 0
     7aa:	d1 2c       	mov	r13, r1
     7ac:	d6 e0       	ldi	r29, 0x06	; 6
     7ae:	cc 0c       	add	r12, r12
     7b0:	dd 1c       	adc	r13, r13
     7b2:	da 95       	dec	r29
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <check_uart+0x1a0>
     7b6:	ca 28       	or	r12, r10
     7b8:	52 fb       	bst	r21, 2
     7ba:	ee 24       	eor	r14, r14
     7bc:	e0 f8       	bld	r14, 0
     7be:	f1 2c       	mov	r15, r1
     7c0:	15 e0       	ldi	r17, 0x05	; 5
     7c2:	ee 0c       	add	r14, r14
     7c4:	ff 1c       	adc	r15, r15
     7c6:	1a 95       	dec	r17
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <check_uart+0x1b4>
     7ca:	ec 28       	or	r14, r12
     7cc:	45 fb       	bst	r20, 5
     7ce:	00 27       	eor	r16, r16
     7d0:	00 f9       	bld	r16, 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	00 0f       	add	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <check_uart+0x1c8>
     7de:	0e 29       	or	r16, r14
     7e0:	36 fb       	bst	r19, 6
     7e2:	33 27       	eor	r19, r19
     7e4:	30 f9       	bld	r19, 0
     7e6:	c3 2f       	mov	r28, r19
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	d8 2f       	mov	r29, r24
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	cc 0f       	add	r28, r28
     7f0:	dd 1f       	adc	r29, r29
     7f2:	9a 95       	dec	r25
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <check_uart+0x1e0>
     7f6:	c0 2b       	or	r28, r16
     7f8:	24 fb       	bst	r18, 4
     7fa:	88 24       	eor	r8, r8
     7fc:	80 f8       	bld	r8, 0
     7fe:	91 2c       	mov	r9, r1
     800:	88 0c       	add	r8, r8
     802:	99 1c       	adc	r9, r9
     804:	8c 2a       	or	r8, r28
     806:	80 92 04 03 	sts	0x0304, r8	; 0x800304 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     80a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     80c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     80e:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     810:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     812:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     814:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     816:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     818:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     81a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     81c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     81e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     820:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     822:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     824:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     826:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     828:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     82a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     82c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     82e:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     830:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     832:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     834:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     836:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     838:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     83a:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <test_mode_started>
                test_mode = 1;
     83e:	60 93 16 03 	sts	0x0316, r22	; 0x800316 <test_mode>
                return;
     842:	06 c1       	rjmp	.+524    	; 0xa50 <__stack+0x151>
            }
            if (input == RPU_END_TEST_MODE) 
     844:	6e 3f       	cpi	r22, 0xFE	; 254
     846:	09 f0       	breq	.+2      	; 0x84a <check_uart+0x23c>
     848:	76 c0       	rjmp	.+236    	; 0x936 <__stack+0x37>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     84a:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     84e:	88 1f       	adc	r24, r24
     850:	88 27       	eor	r24, r24
     852:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     854:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     856:	f8 94       	cli
    {
        if (value_for_bit) 
     858:	88 23       	and	r24, r24
     85a:	11 f0       	breq	.+4      	; 0x860 <check_uart+0x252>
        {
            *register_addr |= 1 << bit_offset;
     85c:	5b 9a       	sbi	0x0b, 3	; 11
     85e:	01 c0       	rjmp	.+2      	; 0x862 <check_uart+0x254>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     860:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     862:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     864:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     868:	86 fb       	bst	r24, 6
     86a:	88 27       	eor	r24, r24
     86c:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     86e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     870:	f8 94       	cli
    {
        if (value_for_bit) 
     872:	88 23       	and	r24, r24
     874:	11 f0       	breq	.+4      	; 0x87a <check_uart+0x26c>
        {
            *register_addr |= 1 << bit_offset;
     876:	5a 9a       	sbi	0x0b, 2	; 11
     878:	01 c0       	rjmp	.+2      	; 0x87c <check_uart+0x26e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     87a:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     87c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     87e:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     882:	85 fb       	bst	r24, 5
     884:	88 27       	eor	r24, r24
     886:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     888:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     88a:	f8 94       	cli
    {
        if (value_for_bit) 
     88c:	88 23       	and	r24, r24
     88e:	11 f0       	breq	.+4      	; 0x894 <check_uart+0x286>
        {
            *register_addr |= 1 << bit_offset;
     890:	42 9a       	sbi	0x08, 2	; 8
     892:	01 c0       	rjmp	.+2      	; 0x896 <check_uart+0x288>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     894:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     896:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     898:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     89c:	82 95       	swap	r24
     89e:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8a0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8a2:	f8 94       	cli
    {
        if (value_for_bit) 
     8a4:	88 23       	and	r24, r24
     8a6:	11 f0       	breq	.+4      	; 0x8ac <check_uart+0x29e>
        {
            *register_addr |= 1 << bit_offset;
     8a8:	5d 9a       	sbi	0x0b, 5	; 11
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <check_uart+0x2a0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8ac:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8ae:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8b0:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     8b4:	83 fb       	bst	r24, 3
     8b6:	88 27       	eor	r24, r24
     8b8:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8ba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8bc:	f8 94       	cli
    {
        if (value_for_bit) 
     8be:	88 23       	and	r24, r24
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <check_uart+0x2b8>
        {
            *register_addr |= 1 << bit_offset;
     8c2:	5e 9a       	sbi	0x0b, 6	; 11
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <check_uart+0x2ba>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8c6:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8c8:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8cc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     8ce:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8d0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8d4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8d6:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8d8:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     8da:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     8de:	88 61       	ori	r24, 0x18	; 24
     8e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     8e4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     8e8:	82 fb       	bst	r24, 2
     8ea:	88 27       	eor	r24, r24
     8ec:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     8ee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8f0:	f8 94       	cli
    {
        if (value_for_bit) 
     8f2:	88 23       	and	r24, r24
     8f4:	11 f0       	breq	.+4      	; 0x8fa <check_uart+0x2ec>
        {
            *register_addr |= 1 << bit_offset;
     8f6:	5f 9a       	sbi	0x0b, 7	; 11
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <check_uart+0x2ee>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     8fa:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8fc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8fe:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     902:	86 95       	lsr	r24
     904:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     906:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     908:	f8 94       	cli
    {
        if (value_for_bit) 
     90a:	88 23       	and	r24, r24
     90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
        {
            *register_addr |= 1 << bit_offset;
     90e:	5c 9a       	sbi	0x0b, 4	; 11
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     912:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     914:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     916:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
     91a:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     91c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     91e:	f8 94       	cli
    {
        if (value_for_bit) 
     920:	88 23       	and	r24, r24
     922:	11 f0       	breq	.+4      	; 0x928 <__stack+0x29>
        {
            *register_addr |= 1 << bit_offset;
     924:	43 9a       	sbi	0x08, 3	; 8
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     928:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     92a:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     92c:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <test_mode_started>
                test_mode = 0;
     930:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <test_mode>
                return;
     934:	8d c0       	rjmp	.+282    	; 0xa50 <__stack+0x151>
            }
            if (input == rpu_address) // that is my local address
     936:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <rpu_address>
     93a:	68 13       	cpse	r22, r24
     93c:	4d c0       	rjmp	.+154    	; 0x9d8 <__stack+0xd9>
            {
                if(!my_mcu_is_target_and_i_have_it_reset)
     93e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <my_mcu_is_target_and_i_have_it_reset>
     942:	81 11       	cpse	r24, r1
     944:	14 c0       	rjmp	.+40     	; 0x96e <__stack+0x6f>
                {
                    connect_bootload_mode();
     946:	0e 94 b1 00 	call	0x162	; 0x162 <connect_bootload_mode>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     94a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     94c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     94e:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     950:	8f bf       	out	0x3f, r24	; 63

                    // start the bootloader
                    digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                    target_reset_started_at = millis();
     952:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     956:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <target_reset_started_at>
     95a:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <target_reset_started_at+0x1>
     95e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <target_reset_started_at+0x2>
     962:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <target_reset_started_at+0x3>
                    my_mcu_is_target_and_i_have_it_reset = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <my_mcu_is_target_and_i_have_it_reset>
                    return; 
     96c:	71 c0       	rjmp	.+226    	; 0xa50 <__stack+0x151>
                }
                unsigned long kRuntime= millis() - target_reset_started_at;
     96e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
                if (kRuntime < 20UL) // hold reset low for a short time but don't delay (the mcu runs 200k instruction in 20 mSec)
     972:	00 91 1e 03 	lds	r16, 0x031E	; 0x80031e <target_reset_started_at>
     976:	10 91 1f 03 	lds	r17, 0x031F	; 0x80031f <target_reset_started_at+0x1>
     97a:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <target_reset_started_at+0x2>
     97e:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <target_reset_started_at+0x3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	80 1b       	sub	r24, r16
     988:	91 0b       	sbc	r25, r17
     98a:	a2 0b       	sbc	r26, r18
     98c:	b3 0b       	sbc	r27, r19
     98e:	44 97       	sbiw	r24, 0x14	; 20
     990:	a1 05       	cpc	r26, r1
     992:	b1 05       	cpc	r27, r1
     994:	08 f4       	brcc	.+2      	; 0x998 <__stack+0x99>
     996:	5c c0       	rjmp	.+184    	; 0xa50 <__stack+0x151>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     998:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     99a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     99c:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     99e:	8f bf       	out	0x3f, r24	; 63
                {
                    return;
                } 
                //_delay_ms(20);  // hold reset low for a short time, but this locks the mcu which which blocks i2c, SMBus, and ADC burst. 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                my_mcu_is_target_and_i_have_it_reset = 0;
     9a0:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <my_mcu_is_target_and_i_have_it_reset>
                bootloader_started = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <bootloader_started>
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     9aa:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     9ae:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     9b2:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <blink_started_at>
     9b6:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <blink_started_at+0x1>
     9ba:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blink_started_at+0x2>
     9be:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <blink_started_at+0x3>
                bootloader_started_at = millis();
     9c2:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     9c6:	60 93 f5 02 	sts	0x02F5, r22	; 0x8002f5 <bootloader_started_at>
     9ca:	70 93 f6 02 	sts	0x02F6, r23	; 0x8002f6 <bootloader_started_at+0x1>
     9ce:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <bootloader_started_at+0x2>
     9d2:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <bootloader_started_at+0x3>
                return;
     9d6:	3c c0       	rjmp	.+120    	; 0xa50 <__stack+0x151>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     9d8:	67 fd       	sbrc	r22, 7
     9da:	1e c0       	rjmp	.+60     	; 0xa18 <__stack+0x119>
            {  
                lockout_active =1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <lockout_active>
                bootloader_started = 0;
     9e2:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <bootloader_started>
                host_active =0;
     9e6:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <host_active>

                connect_lockout_mode();
     9ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <connect_lockout_mode>

                lockout_started_at = millis();
     9ee:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     9f2:	60 93 f9 02 	sts	0x02F9, r22	; 0x8002f9 <lockout_started_at>
     9f6:	70 93 fa 02 	sts	0x02FA, r23	; 0x8002fa <lockout_started_at+0x1>
     9fa:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <lockout_started_at+0x2>
     9fe:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <lockout_started_at+0x3>
                blink_started_at = millis();
     a02:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     a06:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <blink_started_at>
     a0a:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <blink_started_at+0x1>
     a0e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blink_started_at+0x2>
     a12:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <blink_started_at+0x3>
                return;
     a16:	1c c0       	rjmp	.+56     	; 0xa50 <__stack+0x151>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     a18:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <host_is_foreign>
                lockout_active =0;
     a1c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <lockout_active>
                host_active =0;
     a20:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <host_active>
                bootloader_started = 0;
     a24:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a2a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a2c:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a2e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a30:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a32:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a34:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a36:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a3c:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a42:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a44:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a46:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a48:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a4c:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4e:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	08 95       	ret

00000a72 <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     a72:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <bootloader_address>
     a76:	fc 01       	movw	r30, r24
     a78:	21 83       	std	Z+1, r18	; 0x01
     a7a:	08 95       	ret

00000a7c <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     a7c:	fc 01       	movw	r30, r24
     a7e:	81 81       	ldd	r24, Z+1	; 0x01
     a80:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <bootloader_address>
     a84:	08 95       	ret

00000a86 <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     a86:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <shutdown_detected>
     a8a:	fc 01       	movw	r30, r24
     a8c:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     a8e:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <shutdown_detected>
     a92:	08 95       	ret

00000a94 <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     a94:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     a96:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <status_byt>
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	81 83       	std	Z+1, r24	; 0x01
    if (digitalRead(ALT_EN)) i2cBuffer[1] += (1<<4); // include bit 4 if alternat power is enabled
     a9e:	1b 9b       	sbis	0x03, 3	; 3
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <fnRdStatus+0x12>
     aa2:	80 5f       	subi	r24, 0xF0	; 240
     aa4:	81 83       	std	Z+1, r24	; 0x01
    if (digitalRead(PIPWR_EN)) i2cBuffer[1] += (1<<5); // include bit 5 if sbc has power
     aa6:	19 9b       	sbis	0x03, 1	; 3
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <fnRdStatus+0x1c>
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	80 5e       	subi	r24, 0xE0	; 224
     aae:	81 83       	std	Z+1, r24	; 0x01
    if (daynight_state==DAYNIGHT_FAIL_STATE) i2cBuffer[1] += (1<<6); //  include bit 6 if daynight state has failed
     ab0:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <daynight_state>
     ab4:	87 30       	cpi	r24, 0x07	; 7
     ab6:	19 f4       	brne	.+6      	; 0xabe <fnRdStatus+0x2a>
     ab8:	81 81       	ldd	r24, Z+1	; 0x01
     aba:	80 5c       	subi	r24, 0xC0	; 192
     abc:	81 83       	std	Z+1, r24	; 0x01
     abe:	08 95       	ret

00000ac0 <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
     ac0:	fc 01       	movw	r30, r24
    if ( (i2cBuffer[1] & 0x10) ) 
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
     ac4:	84 ff       	sbrs	r24, 4
     ac6:	0b c0       	rjmp	.+22     	; 0xade <fnWtStatus+0x1e>
    {
        enable_alternate_power = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <enable_alternate_power>
        alt_pwm_accum_charge_time = 0; // clear charge time
     ace:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <alt_pwm_accum_charge_time>
     ad2:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <alt_pwm_accum_charge_time+0x1>
     ad6:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <alt_pwm_accum_charge_time+0x2>
     ada:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <alt_pwm_accum_charge_time+0x3>
    }
    if ( ( i2cBuffer[1] & (1<<5) ) && !shutdown_started && !shutdown_detected )
     ade:	81 81       	ldd	r24, Z+1	; 0x01
     ae0:	85 ff       	sbrs	r24, 5
     ae2:	0c c0       	rjmp	.+24     	; 0xafc <fnWtStatus+0x3c>
     ae4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <shutdown_started>
     ae8:	81 11       	cpse	r24, r1
     aea:	08 c0       	rjmp	.+16     	; 0xafc <fnWtStatus+0x3c>
     aec:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <shutdown_detected>
     af0:	81 11       	cpse	r24, r1
     af2:	04 c0       	rjmp	.+8      	; 0xafc <fnWtStatus+0x3c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     af4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     af6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     af8:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     afa:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(PIPWR_EN,HIGH); //restart SBC 
    } 
    if ( ( i2cBuffer[1] & (1<<6) ) ) daynight_state = DAYNIGHT_START_STATE; // restart the state machine
     afc:	81 81       	ldd	r24, Z+1	; 0x01
     afe:	86 fd       	sbrc	r24, 6
     b00:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <daynight_state>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     b04:	8f 70       	andi	r24, 0x0F	; 15
     b06:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <status_byt>
     b0a:	08 95       	ret

00000b0c <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     b0c:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <arduino_mode>
     b10:	fc 01       	movw	r30, r24
     b12:	21 83       	std	Z+1, r18	; 0x01
     b14:	08 95       	ret

00000b16 <fnBatStartChrg>:
}

// I2C command for Battery charge start limit (uint16_t)
void fnBatStartChrg(uint8_t* i2cBuffer)
{
     b16:	fc 01       	movw	r30, r24
    // battery_low_limit is a uint16_t e.g., two bytes
    uint16_t old = battery_low_limit;
     b18:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <battery_low_limit>
     b1c:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <battery_low_limit+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     b20:	21 81       	ldd	r18, Z+1	; 0x01
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	32 2f       	mov	r19, r18
     b26:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     b28:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     b2a:	92 81       	ldd	r25, Z+2	; 0x02
     b2c:	29 0f       	add	r18, r25
     b2e:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     b30:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    battery_low_limit = new;
     b32:	30 93 a8 03 	sts	0x03A8, r19	; 0x8003a8 <battery_low_limit+0x1>
     b36:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <battery_low_limit>

    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <bat_limit_loaded>
     b40:	08 95       	ret

00000b42 <fnBatDoneChrg>:
}

// I2C command for Battery charge done limit (uint16_t)
void fnBatDoneChrg(uint8_t* i2cBuffer)
{
     b42:	fc 01       	movw	r30, r24
    // battery_high_limit is a uint16_t e.g., two bytes
    uint16_t old = battery_high_limit;
     b44:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <battery_high_limit>
     b48:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <battery_high_limit+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     b4c:	21 81       	ldd	r18, Z+1	; 0x01
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	32 2f       	mov	r19, r18
     b52:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     b54:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     b56:	92 81       	ldd	r25, Z+2	; 0x02
     b58:	29 0f       	add	r18, r25
     b5a:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     b5c:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    battery_high_limit = new;
     b5e:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <battery_high_limit+0x1>
     b62:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <battery_high_limit>

    bat_limit_loaded = BAT_HIGH_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <bat_limit_loaded>
     b6c:	08 95       	ret

00000b6e <fnRdBatChrgTime>:
}

// I2C command to read battery charging time while doing pwm e.g., absorption time
void fnRdBatChrgTime(uint8_t* i2cBuffer)
{
     b6e:	fc 01       	movw	r30, r24
    // there are four bytes in an unsigned long
    unsigned long my_copy = alt_pwm_accum_charge_time; //updates in ISR so copy first (when SMBus is done this is not used as an ISR callback)
     b70:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <alt_pwm_accum_charge_time>
     b74:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <alt_pwm_accum_charge_time+0x1>
     b78:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <alt_pwm_accum_charge_time+0x2>
     b7c:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <alt_pwm_accum_charge_time+0x3>

    i2cBuffer[1] = ( (0xFF000000UL & my_copy) >>24 ); 
     b80:	31 83       	std	Z+1, r19	; 0x01
    i2cBuffer[2] = ( (0x00FF0000UL & my_copy) >>16 ); 
     b82:	22 83       	std	Z+2, r18	; 0x02
    i2cBuffer[3] = ( (0x0000FF00UL & my_copy) >>8 ); 
     b84:	93 83       	std	Z+3, r25	; 0x03
    i2cBuffer[4] = ( (0x000000FFUL & my_copy) );
     b86:	84 83       	std	Z+4, r24	; 0x04
     b88:	08 95       	ret

00000b8a <fnMorningThreshold>:
}

// I2C command for day-night Morning Threshold (uint16_t)
void fnMorningThreshold(uint8_t* i2cBuffer)
{
     b8a:	fc 01       	movw	r30, r24
    // daynight_morning_threshold is a uint16_t e.g., two bytes
    uint16_t old = daynight_morning_threshold;
     b8c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <daynight_morning_threshold>
     b90:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <daynight_morning_threshold+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     b94:	21 81       	ldd	r18, Z+1	; 0x01
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	32 2f       	mov	r19, r18
     b9a:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     b9c:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     b9e:	92 81       	ldd	r25, Z+2	; 0x02
     ba0:	29 0f       	add	r18, r25
     ba2:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     ba4:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    daynight_morning_threshold = new;
     ba6:	30 93 ae 03 	sts	0x03AE, r19	; 0x8003ae <daynight_morning_threshold+0x1>
     baa:	20 93 ad 03 	sts	0x03AD, r18	; 0x8003ad <daynight_morning_threshold>
    
    daynight_values_loaded = DAYNIGHT_MORNING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_values_loaded>
     bb4:	08 95       	ret

00000bb6 <fnEveningThreshold>:
}

// I2C command for day-night Evening Threshold (uint16_t)
void fnEveningThreshold(uint8_t* i2cBuffer)
{
     bb6:	fc 01       	movw	r30, r24
    // daynight_evening_threshold is a uint16_t e.g., two bytes
    uint16_t old = daynight_evening_threshold;
     bb8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <daynight_evening_threshold>
     bbc:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <daynight_evening_threshold+0x1>
    uint16_t new = 0;

    new += ((uint16_t)i2cBuffer[1])<<8;
     bc0:	21 81       	ldd	r18, Z+1	; 0x01
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	32 2f       	mov	r19, r18
     bc6:	22 27       	eor	r18, r18
    i2cBuffer[1] =  ( (0xFF00 & old) >>8 ); 
     bc8:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint16_t)i2cBuffer[2]);
     bca:	92 81       	ldd	r25, Z+2	; 0x02
     bcc:	29 0f       	add	r18, r25
     bce:	31 1d       	adc	r19, r1
    i2cBuffer[2] =  ( (0x00FF & old) ); 
     bd0:	82 83       	std	Z+2, r24	; 0x02

    // new is ready
    daynight_evening_threshold = new;
     bd2:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <daynight_evening_threshold+0x1>
     bd6:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <daynight_evening_threshold>

    daynight_values_loaded = DAYNIGHT_EVENING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_values_loaded>
     be0:	08 95       	ret

00000be2 <fnCalibrationRead>:
    i2cBuffer[1] = ( (0xFF00 & adc_reading) >>8 ); 
    i2cBuffer[2] = ( (0x00FF & adc_reading) ); 
}

void fnCalibrationRead(uint8_t* i2cBuffer)
{
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	cf 93       	push	r28
     bec:	fc 01       	movw	r30, r24
    uint8_t is_channel_with_writebit = i2cBuffer[1];
     bee:	91 81       	ldd	r25, Z+1	; 0x01
    uint8_t channel  = is_channel_with_writebit & CAL_CHANNEL_MASK; // removed the writebit
     bf0:	a9 2f       	mov	r26, r25
     bf2:	af 77       	andi	r26, 0x7F	; 127
    if ( (channel == ALT_I) || (channel == ALT_V) \
     bf4:	a2 30       	cpi	r26, 0x02	; 2
     bf6:	28 f0       	brcs	.+10     	; 0xc02 <fnCalibrationRead+0x20>
            || (channel == PWR_I) || (channel == PWR_V) )
     bf8:	8a ef       	ldi	r24, 0xFA	; 250
     bfa:	8a 0f       	add	r24, r26
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <fnCalibrationRead+0x20>
     c00:	55 c0       	rjmp	.+170    	; 0xcac <fnCalibrationRead+0xca>
    {
        channel_with_writebit = is_channel_with_writebit;
     c02:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <channel_with_writebit>

        // place float in a uint32_t
        uint32_t old;
        float temp_calibration = calMap[channelMap[channel].cal_map].calibration;
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	a5 5a       	subi	r26, 0xA5	; 165
     c0a:	be 4f       	sbci	r27, 0xFE	; 254
     c0c:	2c 91       	ld	r18, X
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	28 9f       	mul	r18, r24
     c12:	b0 01       	movw	r22, r0
     c14:	11 24       	eor	r1, r1
     c16:	db 01       	movw	r26, r22
     c18:	af 52       	subi	r26, 0x2F	; 47
     c1a:	bc 4f       	sbci	r27, 0xFC	; 252
        memcpy(&old, &temp_calibration, sizeof old);
     c1c:	cd 90       	ld	r12, X+
     c1e:	dd 90       	ld	r13, X+
     c20:	ed 90       	ld	r14, X+
     c22:	fc 90       	ld	r15, X
        if (old == 0) old = 0xFFFFFFFFUL; //I keep getting zero, so change it for debug
     c24:	c1 14       	cp	r12, r1
     c26:	d1 04       	cpc	r13, r1
     c28:	e1 04       	cpc	r14, r1
     c2a:	f1 04       	cpc	r15, r1
     c2c:	21 f4       	brne	.+8      	; 0xc36 <fnCalibrationRead+0x54>
     c2e:	cc 24       	eor	r12, r12
     c30:	ca 94       	dec	r12
     c32:	dc 2c       	mov	r13, r12
     c34:	76 01       	movw	r14, r12

        uint32_t new = 0;
        new += ((uint32_t)i2cBuffer[2])<<24; // cast, multiply by 2**24, and sum 
     c36:	82 81       	ldd	r24, Z+2	; 0x02
        i2cBuffer[2] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     c38:	f2 82       	std	Z+2, r15	; 0x02

        new += ((uint32_t)i2cBuffer[3])<<16;
     c3a:	43 81       	ldd	r20, Z+3	; 0x03
        i2cBuffer[3] =  ( (0x00FF0000UL & old) >>16 ); 
     c3c:	e3 82       	std	Z+3, r14	; 0x03

        new += ((uint32_t)i2cBuffer[4])<<8;
     c3e:	34 81       	ldd	r19, Z+4	; 0x04
        i2cBuffer[4] =  ( (0x0000FF00UL & old) >>8 ); 
     c40:	d4 82       	std	Z+4, r13	; 0x04

        new += ((uint32_t)i2cBuffer[5]);
     c42:	c5 81       	ldd	r28, Z+5	; 0x05
        i2cBuffer[5] =  ( (0x000000FFUL & old) ); 
     c44:	c5 82       	std	Z+5, r12	; 0x05

        // new is ready
        if (is_channel_with_writebit & CAL_CHANNEL_WRITEBIT) // keep in SRAM if writebit is set
     c46:	97 ff       	sbrs	r25, 7
     c48:	38 c0       	rjmp	.+112    	; 0xcba <fnCalibrationRead+0xd8>
        {
            // copy bytes into the memory footprint used for our tempary float
            memcpy(&temp_calibration, &new, sizeof temp_calibration);
            calMap[channelMap[channel].cal_map].calibration = temp_calibration;
     c4a:	fb 01       	movw	r30, r22
     c4c:	ef 52       	subi	r30, 0x2F	; 47
     c4e:	fc 4f       	sbci	r31, 0xFC	; 252

        // new is ready
        if (is_channel_with_writebit & CAL_CHANNEL_WRITEBIT) // keep in SRAM if writebit is set
        {
            // copy bytes into the memory footprint used for our tempary float
            memcpy(&temp_calibration, &new, sizeof temp_calibration);
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	a0 e0       	ldi	r26, 0x00	; 0
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	b8 2f       	mov	r27, r24
     c58:	aa 27       	eor	r26, r26
     c5a:	99 27       	eor	r25, r25
     c5c:	88 27       	eor	r24, r24
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	ba 01       	movw	r22, r20
     c66:	55 27       	eor	r21, r21
     c68:	44 27       	eor	r20, r20
     c6a:	84 0f       	add	r24, r20
     c6c:	95 1f       	adc	r25, r21
     c6e:	a6 1f       	adc	r26, r22
     c70:	b7 1f       	adc	r27, r23
     c72:	8c 0f       	add	r24, r28
     c74:	91 1d       	adc	r25, r1
     c76:	a1 1d       	adc	r26, r1
     c78:	b1 1d       	adc	r27, r1
     c7a:	43 2f       	mov	r20, r19
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	76 2f       	mov	r23, r22
     c84:	65 2f       	mov	r22, r21
     c86:	54 2f       	mov	r21, r20
     c88:	44 27       	eor	r20, r20
     c8a:	84 0f       	add	r24, r20
     c8c:	95 1f       	adc	r25, r21
     c8e:	a6 1f       	adc	r26, r22
     c90:	b7 1f       	adc	r27, r23
            calMap[channelMap[channel].cal_map].calibration = temp_calibration;
     c92:	80 83       	st	Z, r24
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	a2 83       	std	Z+2, r26	; 0x02
     c98:	b3 83       	std	Z+3, r27	; 0x03

            // CAL_0_TOSAVE << channelMap[channel].cal_map 
            // if cal_map is 1 then CAL_0_TOSAVE << 1 gives CAL_1_TOSAVE 
            cal_loaded = CAL_0_TOSAVE << channelMap[channel].cal_map; // main loop will save to eeprom or load default value if out of range
     c9a:	80 e1       	ldi	r24, 0x10	; 16
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <fnCalibrationRead+0xc0>
     ca0:	88 0f       	add	r24, r24
     ca2:	2a 95       	dec	r18
     ca4:	ea f7       	brpl	.-6      	; 0xca0 <fnCalibrationRead+0xbe>
     ca6:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <cal_loaded>
     caa:	07 c0       	rjmp	.+14     	; 0xcba <fnCalibrationRead+0xd8>
        }
    }
    else // bad channel  
    {
        i2cBuffer[1] = 0x7F;
     cac:	8f e7       	ldi	r24, 0x7F	; 127
     cae:	81 83       	std	Z+1, r24	; 0x01
        i2cBuffer[2] = 0xFF; // 0xFFFFFFFF is nan as a float
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	82 83       	std	Z+2, r24	; 0x02
        i2cBuffer[3] = 0xFF;
     cb4:	83 83       	std	Z+3, r24	; 0x03
        i2cBuffer[4] = 0xFF;
     cb6:	84 83       	std	Z+4, r24	; 0x04
        i2cBuffer[5] = 0xFF;
     cb8:	85 83       	std	Z+5, r24	; 0x05
    }
}
     cba:	cf 91       	pop	r28
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	08 95       	ret

00000cc6 <fnRdTimedAccum>:

// I2C command to read timed accumulation of analog channel ALT_I or PWR_I sent
void fnRdTimedAccum(uint8_t* i2cBuffer)
{
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	fc 01       	movw	r30, r24
     ccc:	01 81       	ldd	r16, Z+1	; 0x01
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	30 2f       	mov	r19, r16
     cd6:	22 27       	eor	r18, r18
     cd8:	11 27       	eor	r17, r17
     cda:	00 27       	eor	r16, r16
     cdc:	92 81       	ldd	r25, Z+2	; 0x02
     cde:	49 2f       	mov	r20, r25
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	ba 01       	movw	r22, r20
     ce8:	55 27       	eor	r21, r21
     cea:	44 27       	eor	r20, r20
     cec:	40 0f       	add	r20, r16
     cee:	51 1f       	adc	r21, r17
     cf0:	62 1f       	adc	r22, r18
     cf2:	73 1f       	adc	r23, r19
     cf4:	84 81       	ldd	r24, Z+4	; 0x04
     cf6:	8a 01       	movw	r16, r20
     cf8:	9b 01       	movw	r18, r22
     cfa:	08 0f       	add	r16, r24
     cfc:	11 1d       	adc	r17, r1
     cfe:	21 1d       	adc	r18, r1
     d00:	31 1d       	adc	r19, r1
    uint32_t channel = 0;
    channel += ((uint32_t)i2cBuffer[1])<<24;
    channel += ((uint32_t)i2cBuffer[2])<<16;
    channel += ((uint32_t)i2cBuffer[3])<<8;
    channel += ((uint32_t)i2cBuffer[4]);
     d02:	43 81       	ldd	r20, Z+3	; 0x03
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	76 2f       	mov	r23, r22
     d0c:	65 2f       	mov	r22, r21
     d0e:	54 2f       	mov	r21, r20
     d10:	44 27       	eor	r20, r20
     d12:	40 0f       	add	r20, r16
     d14:	51 1f       	adc	r21, r17
     d16:	62 1f       	adc	r22, r18
     d18:	73 1f       	adc	r23, r19
    unsigned long my_copy; //I2C runs this in ISR but durring SMBus this is not run in ISR context
    if (channel == ALT_I)
     d1a:	41 15       	cp	r20, r1
     d1c:	51 05       	cpc	r21, r1
     d1e:	61 05       	cpc	r22, r1
     d20:	71 05       	cpc	r23, r1
     d22:	49 f4       	brne	.+18     	; 0xd36 <fnRdTimedAccum+0x70>
    {
        my_copy = accumulate_alt_ti;
     d24:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <accumulate_alt_ti>
     d28:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <accumulate_alt_ti+0x1>
     d2c:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <accumulate_alt_ti+0x2>
     d30:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <accumulate_alt_ti+0x3>
     d34:	12 c0       	rjmp	.+36     	; 0xd5a <fnRdTimedAccum+0x94>
    }
    else if (channel == PWR_I)
     d36:	46 30       	cpi	r20, 0x06	; 6
     d38:	51 05       	cpc	r21, r1
     d3a:	61 05       	cpc	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	49 f4       	brne	.+18     	; 0xd52 <fnRdTimedAccum+0x8c>
    {
        my_copy = accumulate_pwr_ti;
     d40:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <accumulate_pwr_ti>
     d44:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <accumulate_pwr_ti+0x1>
     d48:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <accumulate_pwr_ti+0x2>
     d4c:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <accumulate_pwr_ti+0x3>
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <fnRdTimedAccum+0x94>
    }
    else
    {
        my_copy = 0; 
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
    }

    // there are four bytes in the unsigned long to send back
    i2cBuffer[1] = ( (0xFF000000UL & my_copy) >>24 ); 
     d5a:	31 83       	std	Z+1, r19	; 0x01
    i2cBuffer[2] = ( (0x00FF0000UL & my_copy) >>16 ); 
     d5c:	22 83       	std	Z+2, r18	; 0x02
    i2cBuffer[3] = ( (0x0000FF00UL & my_copy) >>8 ); 
     d5e:	93 83       	std	Z+3, r25	; 0x03
    i2cBuffer[4] = ( (0x000000FFUL & my_copy) );
     d60:	84 83       	std	Z+4, r24	; 0x04
}
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <fnAnalogRefExternAVCC>:
// I2C command for Analog referance EXTERNAL_AVCC
// swap the I2C buffer with the ref_extern_avcc_uV in use
// set ref_loaded so main loop will try to save it to EEPROM
// the main loop will reload EEPROM or default value if new is out of range
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_extern_avcc_uV;
     d72:	c0 91 93 03 	lds	r28, 0x0393	; 0x800393 <ref_extern_avcc_uV>
     d76:	d0 91 94 03 	lds	r29, 0x0394	; 0x800394 <ref_extern_avcc_uV+0x1>
     d7a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <ref_extern_avcc_uV+0x2>
     d7e:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <ref_extern_avcc_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     d82:	41 81       	ldd	r20, Z+1	; 0x01
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	34 2f       	mov	r19, r20
     d8c:	22 27       	eor	r18, r18
     d8e:	11 27       	eor	r17, r17
     d90:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     d92:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     d94:	42 81       	ldd	r20, Z+2	; 0x02
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	ba 01       	movw	r22, r20
     d9e:	55 27       	eor	r21, r21
     da0:	44 27       	eor	r20, r20
     da2:	40 0f       	add	r20, r16
     da4:	51 1f       	adc	r21, r17
     da6:	62 1f       	adc	r22, r18
     da8:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     daa:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     dac:	83 81       	ldd	r24, Z+3	; 0x03
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ba 2f       	mov	r27, r26
     db6:	a9 2f       	mov	r26, r25
     db8:	98 2f       	mov	r25, r24
     dba:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     dbc:	d3 83       	std	Z+3, r29	; 0x03
     dbe:	24 81       	ldd	r18, Z+4	; 0x04
     dc0:	42 0f       	add	r20, r18
     dc2:	51 1d       	adc	r21, r1
     dc4:	61 1d       	adc	r22, r1
     dc6:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     dc8:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_extern_avcc_uV = new;
     dca:	84 0f       	add	r24, r20
     dcc:	95 1f       	adc	r25, r21
     dce:	a6 1f       	adc	r26, r22
     dd0:	b7 1f       	adc	r27, r23
     dd2:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <ref_extern_avcc_uV>
     dd6:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <ref_extern_avcc_uV+0x1>
     dda:	a0 93 95 03 	sts	0x0395, r26	; 0x800395 <ref_extern_avcc_uV+0x2>
     dde:	b0 93 96 03 	sts	0x0396, r27	; 0x800396 <ref_extern_avcc_uV+0x3>

    ref_loaded = REF_AVCC_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <ref_loaded>
}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <fnAnalogRefIntern1V1>:

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	fc 01       	movw	r30, r24
    // I work with ref_extern_avcc_uV as a uint32_t, but it is a float (both are four bytes)
    uint32_t old = ref_intern_1v1_uV;
     dfc:	c0 91 97 03 	lds	r28, 0x0397	; 0x800397 <ref_intern_1v1_uV>
     e00:	d0 91 98 03 	lds	r29, 0x0398	; 0x800398 <ref_intern_1v1_uV+0x1>
     e04:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <ref_intern_1v1_uV+0x2>
     e08:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <ref_intern_1v1_uV+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     e0c:	41 81       	ldd	r20, Z+1	; 0x01
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	34 2f       	mov	r19, r20
     e16:	22 27       	eor	r18, r18
     e18:	11 27       	eor	r17, r17
     e1a:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     e1c:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     e1e:	42 81       	ldd	r20, Z+2	; 0x02
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	ba 01       	movw	r22, r20
     e28:	55 27       	eor	r21, r21
     e2a:	44 27       	eor	r20, r20
     e2c:	40 0f       	add	r20, r16
     e2e:	51 1f       	adc	r21, r17
     e30:	62 1f       	adc	r22, r18
     e32:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     e34:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     e36:	83 81       	ldd	r24, Z+3	; 0x03
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 e0       	ldi	r26, 0x00	; 0
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ba 2f       	mov	r27, r26
     e40:	a9 2f       	mov	r26, r25
     e42:	98 2f       	mov	r25, r24
     e44:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     e46:	d3 83       	std	Z+3, r29	; 0x03
     e48:	24 81       	ldd	r18, Z+4	; 0x04
     e4a:	42 0f       	add	r20, r18
     e4c:	51 1d       	adc	r21, r1
     e4e:	61 1d       	adc	r22, r1
     e50:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     e52:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    ref_intern_1v1_uV = new;
     e54:	84 0f       	add	r24, r20
     e56:	95 1f       	adc	r25, r21
     e58:	a6 1f       	adc	r26, r22
     e5a:	b7 1f       	adc	r27, r23
     e5c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <ref_intern_1v1_uV>
     e60:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <ref_intern_1v1_uV+0x1>
     e64:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <ref_intern_1v1_uV+0x2>
     e68:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <ref_intern_1v1_uV+0x3>
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <ref_loaded>
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <fnMorningDebounce>:
    }
}

// I2C command for day-night morning debounce time (unsigned long)
void fnMorningDebounce(uint8_t* i2cBuffer)
{
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	fc 01       	movw	r30, r24
    // daynight_morning_debounce is a unsigned long and has four bytes
    uint32_t old = daynight_morning_debounce;
     e86:	c0 91 b2 03 	lds	r28, 0x03B2	; 0x8003b2 <daynight_morning_debounce>
     e8a:	d0 91 b3 03 	lds	r29, 0x03B3	; 0x8003b3 <daynight_morning_debounce+0x1>
     e8e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <daynight_morning_debounce+0x2>
     e92:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <daynight_morning_debounce+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     e96:	41 81       	ldd	r20, Z+1	; 0x01
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	34 2f       	mov	r19, r20
     ea0:	22 27       	eor	r18, r18
     ea2:	11 27       	eor	r17, r17
     ea4:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     ea6:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     ea8:	42 81       	ldd	r20, Z+2	; 0x02
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	ba 01       	movw	r22, r20
     eb2:	55 27       	eor	r21, r21
     eb4:	44 27       	eor	r20, r20
     eb6:	40 0f       	add	r20, r16
     eb8:	51 1f       	adc	r21, r17
     eba:	62 1f       	adc	r22, r18
     ebc:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     ebe:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     ec0:	83 81       	ldd	r24, Z+3	; 0x03
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ba 2f       	mov	r27, r26
     eca:	a9 2f       	mov	r26, r25
     ecc:	98 2f       	mov	r25, r24
     ece:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     ed0:	d3 83       	std	Z+3, r29	; 0x03
     ed2:	24 81       	ldd	r18, Z+4	; 0x04
     ed4:	42 0f       	add	r20, r18
     ed6:	51 1d       	adc	r21, r1
     ed8:	61 1d       	adc	r22, r1
     eda:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     edc:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    daynight_morning_debounce = new;
     ede:	84 0f       	add	r24, r20
     ee0:	95 1f       	adc	r25, r21
     ee2:	a6 1f       	adc	r26, r22
     ee4:	b7 1f       	adc	r27, r23
     ee6:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <daynight_morning_debounce>
     eea:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <daynight_morning_debounce+0x1>
     eee:	a0 93 b4 03 	sts	0x03B4, r26	; 0x8003b4 <daynight_morning_debounce+0x2>
     ef2:	b0 93 b5 03 	sts	0x03B5, r27	; 0x8003b5 <daynight_morning_debounce+0x3>

    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_values_loaded>
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <fnEveningDebounce>:

// I2C command for day-night evening debounce time (unsigned long)
void fnEveningDebounce(uint8_t* i2cBuffer)
{
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	fc 01       	movw	r30, r24
    // daynight_evening_debounce is a unsigned long and has four bytes
    uint32_t old = daynight_evening_debounce;
     f10:	c0 91 a9 03 	lds	r28, 0x03A9	; 0x8003a9 <daynight_evening_debounce>
     f14:	d0 91 aa 03 	lds	r29, 0x03AA	; 0x8003aa <daynight_evening_debounce+0x1>
     f18:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <daynight_evening_debounce+0x2>
     f1c:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <daynight_evening_debounce+0x3>
    uint32_t new = 0;
    new += ((uint32_t)i2cBuffer[1])<<24; // cast, multiply by 2**24, and sum 
     f20:	41 81       	ldd	r20, Z+1	; 0x01
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	34 2f       	mov	r19, r20
     f2a:	22 27       	eor	r18, r18
     f2c:	11 27       	eor	r17, r17
     f2e:	00 27       	eor	r16, r16
    i2cBuffer[1] = ( (0xFF000000UL & old) >>24 ); // swap the return value with the old byte
     f30:	91 83       	std	Z+1, r25	; 0x01

    new += ((uint32_t)i2cBuffer[2])<<16;
     f32:	42 81       	ldd	r20, Z+2	; 0x02
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	ba 01       	movw	r22, r20
     f3c:	55 27       	eor	r21, r21
     f3e:	44 27       	eor	r20, r20
     f40:	40 0f       	add	r20, r16
     f42:	51 1f       	adc	r21, r17
     f44:	62 1f       	adc	r22, r18
     f46:	73 1f       	adc	r23, r19
    i2cBuffer[2] =  ( (0x00FF0000UL & old) >>16 ); 
     f48:	82 83       	std	Z+2, r24	; 0x02

    new += ((uint32_t)i2cBuffer[3])<<8;
     f4a:	83 81       	ldd	r24, Z+3	; 0x03
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ba 2f       	mov	r27, r26
     f54:	a9 2f       	mov	r26, r25
     f56:	98 2f       	mov	r25, r24
     f58:	88 27       	eor	r24, r24
    i2cBuffer[3] =  ( (0x0000FF00UL & old) >>8 ); 
     f5a:	d3 83       	std	Z+3, r29	; 0x03
     f5c:	24 81       	ldd	r18, Z+4	; 0x04
     f5e:	42 0f       	add	r20, r18
     f60:	51 1d       	adc	r21, r1
     f62:	61 1d       	adc	r22, r1
     f64:	71 1d       	adc	r23, r1

    new += ((uint32_t)i2cBuffer[4]);
    i2cBuffer[4] =  ( (0x000000FFUL & old) ); 
     f66:	c4 83       	std	Z+4, r28	; 0x04

    // new is ready
    daynight_evening_debounce = new;
     f68:	84 0f       	add	r24, r20
     f6a:	95 1f       	adc	r25, r21
     f6c:	a6 1f       	adc	r26, r22
     f6e:	b7 1f       	adc	r27, r23
     f70:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <daynight_evening_debounce>
     f74:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <daynight_evening_debounce+0x1>
     f78:	a0 93 ab 03 	sts	0x03AB, r26	; 0x8003ab <daynight_evening_debounce+0x2>
     f7c:	b0 93 ac 03 	sts	0x03AC, r27	; 0x8003ac <daynight_evening_debounce+0x3>

    daynight_values_loaded = DAYNIGHT_EVENING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f80:	85 e0       	ldi	r24, 0x05	; 5
     f82:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_values_loaded>
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <fnNull>:
    i2cBuffer[4] =  ( (0x000000FFUL & daynight_timer) );
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     f90:	08 95       	ret

00000f92 <fnDayNightTimer>:
    daynight_values_loaded = DAYNIGHT_EVENING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
}

// I2C command to read day daynight timer offset
void fnDayNightTimer(uint8_t* i2cBuffer)
{
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
    unsigned long daynight_timer = millis() - dayTmrStarted;
     f9c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
     fa0:	00 91 b8 03 	lds	r16, 0x03B8	; 0x8003b8 <dayTmrStarted>
     fa4:	10 91 b9 03 	lds	r17, 0x03B9	; 0x8003b9 <dayTmrStarted+0x1>
     fa8:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <dayTmrStarted+0x2>
     fac:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <dayTmrStarted+0x3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	80 1b       	sub	r24, r16
     fb6:	91 0b       	sbc	r25, r17
     fb8:	a2 0b       	sbc	r26, r18
     fba:	b3 0b       	sbc	r27, r19
    // there are four bytes in an unsigned long
    i2cBuffer[1] = ( (0xFF000000UL & daynight_timer) >>24 ); 
     fbc:	b9 83       	std	Y+1, r27	; 0x01
    i2cBuffer[2] =  ( (0x00FF0000UL & daynight_timer) >>16 ); 
     fbe:	aa 83       	std	Y+2, r26	; 0x02
    i2cBuffer[3] =  ( (0x0000FF00UL & daynight_timer) >>8 ); 
     fc0:	9b 83       	std	Y+3, r25	; 0x03
    i2cBuffer[4] =  ( (0x000000FFUL & daynight_timer) );
     fc2:	8c 83       	std	Y+4, r24	; 0x04
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <fnAnalogRead>:
// I2C command to read the analog channel sent.
// returns analogRead with high byte after command byte, then low byte next.
// Most AVR have ten analog bits, thus range is: 0..1023
// returns zero when given an invalid channel
void fnAnalogRead(uint8_t* i2cBuffer)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
    uint16_t channel = 0;
    channel += ((uint16_t)i2cBuffer[1])<<8;
    channel += ((uint16_t)i2cBuffer[2]);
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	98 2f       	mov	r25, r24
     fda:	88 27       	eor	r24, r24
     fdc:	2a 81       	ldd	r18, Y+2	; 0x02
     fde:	82 0f       	add	r24, r18
     fe0:	91 1d       	adc	r25, r1
    uint16_t adc_reading;
    if ( (channel == ALT_I) || (channel == ALT_V) || (channel == PWR_I) || (channel == PWR_V) )
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	91 05       	cpc	r25, r1
     fe6:	30 f0       	brcs	.+12     	; 0xff4 <fnAnalogRead+0x26>
     fe8:	9c 01       	movw	r18, r24
     fea:	26 50       	subi	r18, 0x06	; 6
     fec:	31 09       	sbc	r19, r1
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	18 f4       	brcc	.+6      	; 0xffa <fnAnalogRead+0x2c>
    {
        adc_reading = analogRead((uint8_t)channel);
     ff4:	0e 94 cd 11 	call	0x239a	; 0x239a <analogRead>
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <fnAnalogRead+0x30>
    }
    else
    {
        adc_reading = 0; 
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
    }
    i2cBuffer[1] = ( (0xFF00 & adc_reading) >>8 ); 
     ffe:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] = ( (0x00FF & adc_reading) ); 
    1000:	8a 83       	std	Y+2, r24	; 0x02
}
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <fnDayNightState>:
// I2C command to read Day-Night state. It is one byte,
// the low nimmble has daynight_state, the high nimmble has daynight_work
// bit 4 set from master will clear daynight_work (readback depends on if bit 5 is set)
// bit 5 set from master will include daynight_work otherwise only daynight_state is in readback.
void fnDayNightState(uint8_t* i2cBuffer)
{ 
    1008:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] & (1<<4) )
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	84 fd       	sbrc	r24, 4
    {
        daynight_work = 0;  // clear daynight_work
    100e:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <daynight_work>
    1012:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <daynight_state>
    }
    if (i2cBuffer[1] & (1<<5) ) 
    1016:	85 ff       	sbrs	r24, 5
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <fnDayNightState+0x1c>
    {
        i2cBuffer[1] = daynight_state + daynight_work;  // send back daynight_state + daynignt_work
    101a:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <daynight_work>
    101e:	89 0f       	add	r24, r25
    1020:	81 83       	std	Z+1, r24	; 0x01
    1022:	08 95       	ret
    }
    else
    {
        i2cBuffer[1] = daynight_state;  // send back only daynight_state
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	08 95       	ret

00001028 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    if (test_mode)
    1042:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <test_mode>
    1046:	ee 23       	and	r30, r30
    1048:	09 f4       	brne	.+2      	; 0x104c <fnRdXcvrCntlInTestMode+0x24>
    104a:	55 c0       	rjmp	.+170    	; 0x10f6 <fnRdXcvrCntlInTestMode+0xce>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
    104c:	e9 b1       	in	r30, 0x09	; 9
    104e:	b9 b1       	in	r27, 0x09	; 9
    1050:	f6 b1       	in	r31, 0x06	; 6
    1052:	79 b0       	in	r7, 0x09	; 9
    1054:	a9 b0       	in	r10, 0x09	; 9
    1056:	09 b1       	in	r16, 0x09	; 9
    1058:	b9 b0       	in	r11, 0x09	; 9
    105a:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
    105c:	10 e0       	ldi	r17, 0x00	; 0
    105e:	00 0f       	add	r16, r16
    1060:	01 2f       	mov	r16, r17
    1062:	00 1f       	adc	r16, r16
    1064:	11 0b       	sbc	r17, r17
    1066:	00 0f       	add	r16, r16
    1068:	11 1f       	adc	r17, r17
    106a:	00 0f       	add	r16, r16
    106c:	11 1f       	adc	r17, r17
    106e:	c3 fb       	bst	r28, 3
    1070:	cc 27       	eor	r28, r28
    1072:	c0 f9       	bld	r28, 0
    1074:	ac 2f       	mov	r26, r28
    1076:	a0 2b       	or	r26, r16
    1078:	e3 fb       	bst	r30, 3
    107a:	88 24       	eor	r8, r8
    107c:	80 f8       	bld	r8, 0
    107e:	91 2c       	mov	r9, r1
    1080:	e4 01       	movw	r28, r8
    1082:	d6 95       	lsr	r29
    1084:	dc 2f       	mov	r29, r28
    1086:	cc 27       	eor	r28, r28
    1088:	d7 95       	ror	r29
    108a:	c7 95       	ror	r28
    108c:	ca 2b       	or	r28, r26
    108e:	b2 fb       	bst	r27, 2
    1090:	cc 24       	eor	r12, r12
    1092:	c0 f8       	bld	r12, 0
    1094:	d1 2c       	mov	r13, r1
    1096:	d6 01       	movw	r26, r12
    1098:	56 e0       	ldi	r21, 0x06	; 6
    109a:	aa 0f       	add	r26, r26
    109c:	bb 1f       	adc	r27, r27
    109e:	5a 95       	dec	r21
    10a0:	e1 f7       	brne	.-8      	; 0x109a <fnRdXcvrCntlInTestMode+0x72>
    10a2:	ac 2b       	or	r26, r28
    10a4:	f2 fb       	bst	r31, 2
    10a6:	ee 24       	eor	r14, r14
    10a8:	e0 f8       	bld	r14, 0
    10aa:	f1 2c       	mov	r15, r1
    10ac:	f7 01       	movw	r30, r14
    10ae:	65 e0       	ldi	r22, 0x05	; 5
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	6a 95       	dec	r22
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <fnRdXcvrCntlInTestMode+0x88>
    10b8:	ea 2b       	or	r30, r26
    10ba:	75 fa       	bst	r7, 5
    10bc:	66 27       	eor	r22, r22
    10be:	60 f9       	bld	r22, 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	f4 e0       	ldi	r31, 0x04	; 4
    10c4:	66 0f       	add	r22, r22
    10c6:	77 1f       	adc	r23, r23
    10c8:	fa 95       	dec	r31
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <fnRdXcvrCntlInTestMode+0x9c>
    10cc:	6e 2b       	or	r22, r30
    10ce:	a6 fa       	bst	r10, 6
    10d0:	44 27       	eor	r20, r20
    10d2:	40 f9       	bld	r20, 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	a3 e0       	ldi	r26, 0x03	; 3
    10d8:	44 0f       	add	r20, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	aa 95       	dec	r26
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <fnRdXcvrCntlInTestMode+0xb0>
    10e0:	46 2b       	or	r20, r22
    10e2:	b4 fa       	bst	r11, 4
    10e4:	22 27       	eor	r18, r18
    10e6:	20 f9       	bld	r18, 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	24 2b       	or	r18, r20
    10f0:	fc 01       	movw	r30, r24
    10f2:	21 83       	std	Z+1, r18	; 0x01
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    10f6:	fc 01       	movw	r30, r24
    10f8:	11 82       	std	Z+1, r1	; 0x01
    }
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	7f 90       	pop	r7
    1114:	08 95       	ret

00001116 <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	fc 01       	movw	r30, r24
    if (test_mode)
    111c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <test_mode>
    1120:	88 23       	and	r24, r24
    1122:	09 f4       	brne	.+2      	; 0x1126 <fnWtXcvrCntlInTestMode+0x10>
    1124:	6e c0       	rjmp	.+220    	; 0x1202 <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    1126:	81 81       	ldd	r24, Z+1	; 0x01
    1128:	88 1f       	adc	r24, r24
    112a:	88 27       	eor	r24, r24
    112c:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    112e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1130:	f8 94       	cli
    {
        if (value_for_bit) 
    1132:	88 23       	and	r24, r24
    1134:	11 f0       	breq	.+4      	; 0x113a <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    1136:	5b 9a       	sbi	0x0b, 3	; 11
    1138:	01 c0       	rjmp	.+2      	; 0x113c <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    113a:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    113c:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    113e:	81 81       	ldd	r24, Z+1	; 0x01
    1140:	86 fb       	bst	r24, 6
    1142:	88 27       	eor	r24, r24
    1144:	80 f9       	bld	r24, 0
    1146:	c8 2f       	mov	r28, r24
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    114c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    114e:	f8 94       	cli
    {
        if (value_for_bit) 
    1150:	cd 2b       	or	r28, r29
    1152:	11 f0       	breq	.+4      	; 0x1158 <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    1154:	5a 9a       	sbi	0x0b, 2	; 11
    1156:	01 c0       	rjmp	.+2      	; 0x115a <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1158:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    115a:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    115c:	81 81       	ldd	r24, Z+1	; 0x01
    115e:	85 fb       	bst	r24, 5
    1160:	aa 27       	eor	r26, r26
    1162:	a0 f9       	bld	r26, 0
    1164:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1166:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1168:	f8 94       	cli
    {
        if (value_for_bit) 
    116a:	ab 2b       	or	r26, r27
    116c:	11 f0       	breq	.+4      	; 0x1172 <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    116e:	42 9a       	sbi	0x08, 2	; 8
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1172:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1174:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	84 fb       	bst	r24, 4
    117a:	66 27       	eor	r22, r22
    117c:	60 f9       	bld	r22, 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1182:	f8 94       	cli
    {
        if (value_for_bit) 
    1184:	67 2b       	or	r22, r23
    1186:	11 f0       	breq	.+4      	; 0x118c <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    1188:	5d 9a       	sbi	0x0b, 5	; 11
    118a:	01 c0       	rjmp	.+2      	; 0x118e <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    118c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    118e:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	83 fb       	bst	r24, 3
    1194:	44 27       	eor	r20, r20
    1196:	40 f9       	bld	r20, 0
    1198:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    119a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    119c:	f8 94       	cli
    {
        if (value_for_bit) 
    119e:	45 2b       	or	r20, r21
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    11a2:	5e 9a       	sbi	0x0b, 6	; 11
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11a6:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11a8:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    11aa:	81 81       	ldd	r24, Z+1	; 0x01
    11ac:	82 ff       	sbrs	r24, 2
    11ae:	11 c0       	rjmp	.+34     	; 0x11d2 <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    11b0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11b4:	87 7e       	andi	r24, 0xE7	; 231
    11b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11bc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    11be:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11c0:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11c2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11c4:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11c6:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11c8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11ca:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11cc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    11ce:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11d0:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    11d2:	81 81       	ldd	r24, Z+1	; 0x01
    11d4:	81 fb       	bst	r24, 1
    11d6:	22 27       	eor	r18, r18
    11d8:	20 f9       	bld	r18, 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11de:	f8 94       	cli
    {
        if (value_for_bit) 
    11e0:	23 2b       	or	r18, r19
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    11e4:	5c 9a       	sbi	0x0b, 4	; 11
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11e8:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11ea:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    11ec:	81 81       	ldd	r24, Z+1	; 0x01
    11ee:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    11f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11f2:	f8 94       	cli
    {
        if (value_for_bit) 
    11f4:	88 23       	and	r24, r24
    11f6:	11 f0       	breq	.+4      	; 0x11fc <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    11f8:	43 9a       	sbi	0x08, 3	; 8
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    11fc:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11fe:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    1202:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    120a:	fc 01       	movw	r30, r24
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	f1 f4       	brne	.+60     	; 0x124e <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1212:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1214:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1216:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1218:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    121a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    121c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    121e:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1220:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1222:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1224:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1226:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1228:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    122a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    122c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    122e:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1230:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    1232:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    1236:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <shutdown_detected>
        shutdown_started_at = millis();
    123a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    123e:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <shutdown_started_at>
    1242:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <shutdown_started_at+0x1>
    1246:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <shutdown_started_at+0x2>
    124a:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <shutdown_started_at+0x3>
    124e:	08 95       	ret

00001250 <fnRdMgrAddr>:
  *    all managers lockout serial except the address to bootload and the host */

// I2C command to access manager address and set RPU_NORMAL_MODE
// if given a valid address (ASCII 48..122) it will save that rather than setting normal mode.
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
    1250:	cf 93       	push	r28
    1252:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
    1256:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <rpu_address>
    125a:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
    125c:	80 ed       	ldi	r24, 0xD0	; 208
    125e:	89 0f       	add	r24, r25
    1260:	8b 34       	cpi	r24, 0x4B	; 75
    1262:	30 f4       	brcc	.+12     	; 0x1270 <fnRdMgrAddr+0x20>
    {
        rpu_address = tmp_addr;
    1264:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <rpu_address>
        write_rpu_address_to_eeprom = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <write_rpu_address_to_eeprom>
        return;
    126e:	9d c0       	rjmp	.+314    	; 0x13aa <fnRdMgrAddr+0x15a>
    }
    local_mcu_is_rpu_aware =1; 
    1270:	c1 e0       	ldi	r28, 0x01	; 1
    1272:	c0 93 06 03 	sts	0x0306, r28	; 0x800306 <local_mcu_is_rpu_aware>
    // end the local mcu lockout. 
    if (localhost_active) 
    1276:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <localhost_active>
    127a:	88 23       	and	r24, r24
    127c:	b1 f1       	breq	.+108    	; 0x12ea <fnRdMgrAddr+0x9a>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
    127e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    1282:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
    1286:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
    128a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
    128e:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
    1292:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1296:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
    129a:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
    129e:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <uart_output>
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	20 95       	com	r18
    12a6:	30 95       	com	r19
    12a8:	2a 70       	andi	r18, 0x0A	; 10
    12aa:	33 27       	eor	r19, r19
    12ac:	64 e0       	ldi	r22, 0x04	; 4
    12ae:	22 0f       	add	r18, r18
    12b0:	33 1f       	adc	r19, r19
    12b2:	6a 95       	dec	r22
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <fnRdMgrAddr+0x5e>
    12b6:	89 2f       	mov	r24, r25
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	80 95       	com	r24
    12bc:	90 95       	com	r25
    12be:	80 75       	andi	r24, 0x50	; 80
    12c0:	99 27       	eor	r25, r25
    12c2:	74 e0       	ldi	r23, 0x04	; 4
    12c4:	95 95       	asr	r25
    12c6:	87 95       	ror	r24
    12c8:	7a 95       	dec	r23
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <fnRdMgrAddr+0x74>
    12cc:	82 2b       	or	r24, r18
    12ce:	93 2b       	or	r25, r19
    12d0:	9f 93       	push	r25
    12d2:	8f 93       	push	r24
    12d4:	1f 92       	push	r1
    12d6:	4f 93       	push	r20
    12d8:	86 e1       	ldi	r24, 0x16	; 22
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	9f 93       	push	r25
    12de:	8f 93       	push	r24
    12e0:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
    12e4:	c0 93 15 03 	sts	0x0315, r28	; 0x800315 <uart_has_TTL>
    12e8:	39 c0       	rjmp	.+114    	; 0x135c <fnRdMgrAddr+0x10c>
    }
    else 
        if (bootloader_started)
    12ea:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <bootloader_started>
    12ee:	88 23       	and	r24, r24
    12f0:	e1 f1       	breq	.+120    	; 0x136a <fnRdMgrAddr+0x11a>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
    12f2:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    12f6:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
    12fa:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
    12fe:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
    1302:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
    1306:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    130a:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
    130e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
    1312:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <uart_output>
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	20 95       	com	r18
    131a:	30 95       	com	r19
    131c:	2a 70       	andi	r18, 0x0A	; 10
    131e:	33 27       	eor	r19, r19
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	8a 95       	dec	r24
    1328:	e1 f7       	brne	.-8      	; 0x1322 <fnRdMgrAddr+0xd2>
    132a:	89 2f       	mov	r24, r25
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	80 95       	com	r24
    1330:	90 95       	com	r25
    1332:	80 75       	andi	r24, 0x50	; 80
    1334:	99 27       	eor	r25, r25
    1336:	54 e0       	ldi	r21, 0x04	; 4
    1338:	95 95       	asr	r25
    133a:	87 95       	ror	r24
    133c:	5a 95       	dec	r21
    133e:	e1 f7       	brne	.-8      	; 0x1338 <fnRdMgrAddr+0xe8>
    1340:	82 2b       	or	r24, r18
    1342:	93 2b       	or	r25, r19
    1344:	9f 93       	push	r25
    1346:	8f 93       	push	r24
    1348:	1f 92       	push	r1
    134a:	4f 93       	push	r20
    134c:	86 e1       	ldi	r24, 0x16	; 22
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	9f 93       	push	r25
    1352:	8f 93       	push	r24
    1354:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
    1358:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <uart_has_TTL>
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	20 c0       	rjmp	.+64     	; 0x13aa <fnRdMgrAddr+0x15a>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
    136a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	80 5c       	subi	r24, 0xC0	; 192
    1374:	94 4d       	sbci	r25, 0xD4	; 212
    1376:	a1 40       	sbci	r26, 0x01	; 1
    1378:	b1 09       	sbc	r27, r1
    137a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <lockout_started_at>
    137e:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <lockout_started_at+0x1>
    1382:	a0 93 fb 02 	sts	0x02FB, r26	; 0x8002fb <lockout_started_at+0x2>
    1386:	b0 93 fc 02 	sts	0x02FC, r27	; 0x8002fc <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
    138a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	88 53       	subi	r24, 0x38	; 56
    1394:	91 4c       	sbci	r25, 0xC1	; 193
    1396:	a1 40       	sbci	r26, 0x01	; 1
    1398:	b1 09       	sbc	r27, r1
    139a:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <bootloader_started_at>
    139e:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <bootloader_started_at+0x1>
    13a2:	a0 93 f7 02 	sts	0x02F7, r26	; 0x8002f7 <bootloader_started_at+0x2>
    13a6:	b0 93 f8 02 	sts	0x02F8, r27	; 0x8002f8 <bootloader_started_at+0x3>
        }
        
}
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    13ae:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    13b0:	fc 01       	movw	r30, r24
    13b2:	c1 81       	ldd	r28, Z+1	; 0x01
    13b4:	c1 30       	cpi	r28, 0x01	; 1
    13b6:	09 f0       	breq	.+2      	; 0x13ba <fnWtArduinMode+0xc>
    13b8:	45 c0       	rjmp	.+138    	; 0x1444 <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    13ba:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <arduino_mode_started>
    13be:	21 11       	cpse	r18, r1
    13c0:	41 c0       	rjmp	.+130    	; 0x1444 <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    13c2:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    13c6:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
    13ca:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
    13ce:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
    13d2:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    13dc:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
    13e0:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
    13e4:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <uart_output>
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	20 95       	com	r18
    13ec:	30 95       	com	r19
    13ee:	2a 70       	andi	r18, 0x0A	; 10
    13f0:	33 27       	eor	r19, r19
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	8a 95       	dec	r24
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <fnWtArduinMode+0x46>
    13fc:	89 2f       	mov	r24, r25
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	80 75       	andi	r24, 0x50	; 80
    1406:	99 27       	eor	r25, r25
    1408:	54 e0       	ldi	r21, 0x04	; 4
    140a:	95 95       	asr	r25
    140c:	87 95       	ror	r24
    140e:	5a 95       	dec	r21
    1410:	e1 f7       	brne	.-8      	; 0x140a <fnWtArduinMode+0x5c>
    1412:	82 2b       	or	r24, r18
    1414:	93 2b       	or	r25, r19
    1416:	9f 93       	push	r25
    1418:	8f 93       	push	r24
    141a:	1f 92       	push	r1
    141c:	4f 93       	push	r20
    141e:	86 e1       	ldi	r24, 0x16	; 22
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	9f 93       	push	r25
    1424:	8f 93       	push	r24
    1426:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    142a:	c0 93 15 03 	sts	0x0315, r28	; 0x800315 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    142e:	c0 93 14 03 	sts	0x0314, r28	; 0x800314 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    1432:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <arduino_mode>
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    1444:	fc 01       	movw	r30, r24
    1446:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    144c:	cf 93       	push	r28
    144e:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    1450:	c1 81       	ldd	r28, Z+1	; 0x01
    1452:	c1 30       	cpi	r28, 0x01	; 1
    1454:	09 f0       	breq	.+2      	; 0x1458 <fnStartTestMode+0xc>
    1456:	48 c0       	rjmp	.+144    	; 0x14e8 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    1458:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <test_mode_started>
    145c:	81 11       	cpse	r24, r1
    145e:	42 c0       	rjmp	.+132    	; 0x14e4 <fnStartTestMode+0x98>
    1460:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <test_mode>
    1464:	81 11       	cpse	r24, r1
    1466:	3e c0       	rjmp	.+124    	; 0x14e4 <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    1468:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    146c:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
    1470:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
    1474:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
    1478:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    147c:	c0 93 17 03 	sts	0x0317, r28	; 0x800317 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1480:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
    1484:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
    1488:	40 91 17 03 	lds	r20, 0x0317	; 0x800317 <uart_output>
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	20 95       	com	r18
    1490:	30 95       	com	r19
    1492:	2a 70       	andi	r18, 0x0A	; 10
    1494:	33 27       	eor	r19, r19
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	22 0f       	add	r18, r18
    149a:	33 1f       	adc	r19, r19
    149c:	8a 95       	dec	r24
    149e:	e1 f7       	brne	.-8      	; 0x1498 <fnStartTestMode+0x4c>
    14a0:	89 2f       	mov	r24, r25
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	80 95       	com	r24
    14a6:	90 95       	com	r25
    14a8:	80 75       	andi	r24, 0x50	; 80
    14aa:	99 27       	eor	r25, r25
    14ac:	54 e0       	ldi	r21, 0x04	; 4
    14ae:	95 95       	asr	r25
    14b0:	87 95       	ror	r24
    14b2:	5a 95       	dec	r21
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <fnStartTestMode+0x62>
    14b6:	82 2b       	or	r24, r18
    14b8:	93 2b       	or	r25, r19
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	1f 92       	push	r1
    14c0:	4f 93       	push	r20
    14c2:	86 e1       	ldi	r24, 0x16	; 22
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	9f 93       	push	r25
    14c8:	8f 93       	push	r24
    14ca:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    14ce:	c0 93 15 03 	sts	0x0315, r28	; 0x800315 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    14d2:	c0 93 fd 02 	sts	0x02FD, r28	; 0x8002fd <test_mode_started>
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	81 83       	std	Z+1, r24	; 0x01
    }
}
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    14f8:	19 81       	ldd	r17, Y+1	; 0x01
    14fa:	11 30       	cpi	r17, 0x01	; 1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <fnEndTestMode+0x10>
    14fe:	61 c0       	rjmp	.+194    	; 0x15c2 <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    1500:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <test_mode_started>
    1504:	81 11       	cpse	r24, r1
    1506:	5d c0       	rjmp	.+186    	; 0x15c2 <fnEndTestMode+0xd2>
    1508:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <test_mode>
    150c:	88 23       	and	r24, r24
    150e:	09 f4       	brne	.+2      	; 0x1512 <fnEndTestMode+0x22>
    1510:	58 c0       	rjmp	.+176    	; 0x15c2 <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1512:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1514:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1516:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1518:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    151a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    151c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    151e:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1520:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    1522:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1526:	88 61       	ori	r24, 0x18	; 24
    1528:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    152c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    152e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1530:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1532:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1534:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1536:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1538:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    153a:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    153c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    1540:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <uart_started_at>
    1544:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <uart_started_at+0x1>
    1548:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <uart_started_at+0x2>
    154c:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    1550:	8e ef       	ldi	r24, 0xFE	; 254
    1552:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1556:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <uart_output>
    155a:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <uart_output>
    155e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <uart_output>
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	20 95       	com	r18
    1566:	30 95       	com	r19
    1568:	2a 70       	andi	r18, 0x0A	; 10
    156a:	33 27       	eor	r19, r19
    156c:	a9 01       	movw	r20, r18
    156e:	24 e0       	ldi	r18, 0x04	; 4
    1570:	44 0f       	add	r20, r20
    1572:	55 1f       	adc	r21, r21
    1574:	2a 95       	dec	r18
    1576:	e1 f7       	brne	.-8      	; 0x1570 <fnEndTestMode+0x80>
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	20 95       	com	r18
    157e:	30 95       	com	r19
    1580:	20 75       	andi	r18, 0x50	; 80
    1582:	33 27       	eor	r19, r19
    1584:	64 e0       	ldi	r22, 0x04	; 4
    1586:	35 95       	asr	r19
    1588:	27 95       	ror	r18
    158a:	6a 95       	dec	r22
    158c:	e1 f7       	brne	.-8      	; 0x1586 <fnEndTestMode+0x96>
    158e:	24 2b       	or	r18, r20
    1590:	35 2b       	or	r19, r21
    1592:	3f 93       	push	r19
    1594:	2f 93       	push	r18
    1596:	1f 92       	push	r1
    1598:	9f 93       	push	r25
    159a:	86 e1       	ldi	r24, 0x16	; 22
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	9f 93       	push	r25
    15a0:	8f 93       	push	r24
    15a2:	0e 94 27 1a 	call	0x344e	; 0x344e <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    15a6:	10 93 15 03 	sts	0x0315, r17	; 0x800315 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    15aa:	10 93 fd 02 	sts	0x02FD, r17	; 0x8002fd <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    15ae:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <transceiver_state>
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    15c2:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	08 95       	ret

000015cc <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    15cc:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnDayNightTimer, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	29 2f       	mov	r18, r25
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	26 17       	cp	r18, r22
    15d6:	37 07       	cpc	r19, r23
    15d8:	54 f4       	brge	.+20     	; 0x15ee <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    15da:	fa 01       	movw	r30, r20
    15dc:	e2 0f       	add	r30, r18
    15de:	f3 1f       	adc	r31, r19
    15e0:	80 81       	ld	r24, Z
    15e2:	f9 01       	movw	r30, r18
    15e4:	ee 5d       	subi	r30, 0xDE	; 222
    15e6:	fc 4f       	sbci	r31, 0xFC	; 252
    15e8:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnDayNightTimer, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    15ea:	9f 5f       	subi	r25, 0xFF	; 255
    15ec:	f1 cf       	rjmp	.-30     	; 0x15d0 <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    15ee:	90 32       	cpi	r25, 0x20	; 32
    15f0:	20 f4       	brcc	.+8      	; 0x15fa <receive_i2c_event+0x2e>
    15f2:	f9 01       	movw	r30, r18
    15f4:	ee 5d       	subi	r30, 0xDE	; 222
    15f6:	fc 4f       	sbci	r31, 0xFC	; 252
    15f8:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    15fa:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    15fe:	62 30       	cpi	r22, 0x02	; 2
    1600:	10 f4       	brcc	.+4      	; 0x1606 <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    1606:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <i2c0Buffer>
    160a:	e8 2f       	mov	r30, r24
    160c:	e2 95       	swap	r30
    160e:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    1610:	e4 30       	cpi	r30, 0x04	; 4
    1612:	10 f0       	brcs	.+4      	; 0x1618 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    1614:	8e ef       	ldi	r24, 0xFE	; 254
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    1618:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    161a:	88 30       	cpi	r24, 0x08	; 8
    161c:	20 f0       	brcs	.+8      	; 0x1626 <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    161e:	8d ef       	ldi	r24, 0xFD	; 253
    1620:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    1624:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    1626:	98 e0       	ldi	r25, 0x08	; 8
    1628:	e9 9f       	mul	r30, r25
    162a:	f0 01       	movw	r30, r0
    162c:	11 24       	eor	r1, r1
    162e:	e8 0f       	add	r30, r24
    1630:	f1 1d       	adc	r31, r1
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	e5 5e       	subi	r30, 0xE5	; 229
    1638:	fe 4f       	sbci	r31, 0xFE	; 254
    163a:	01 90       	ld	r0, Z+
    163c:	f0 81       	ld	r31, Z
    163e:	e0 2d       	mov	r30, r0
    1640:	82 e2       	ldi	r24, 0x22	; 34
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	09 94       	ijmp

00001646 <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    1646:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <__data_end>
    164a:	82 e2       	ldi	r24, 0x22	; 34
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <twi0_transmit>
    if (return_code != 0)
    1652:	88 23       	and	r24, r24
    1654:	29 f0       	breq	.+10     	; 0x1660 <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    1656:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <status_byt>
    165a:	82 70       	andi	r24, 0x02	; 2
    165c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <status_byt>
    1660:	08 95       	ret

00001662 <fnRdMgrAddrQuietly>:
        
}

//I2C command to access manager address (used with SMBus in place of above)
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    1662:	fc 01       	movw	r30, r24
    uint8_t tmp_addr = i2cBuffer[1];
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    i2cBuffer[1] = rpu_address; // ASCII values in range 0x30..0x7A. e.g.,'1' is 0x31
    1666:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <rpu_address>
    166a:	81 83       	std	Z+1, r24	; 0x01
    if ( (tmp_addr>='0') && (tmp_addr<='z') ) 
    166c:	80 ed       	ldi	r24, 0xD0	; 208
    166e:	89 0f       	add	r24, r25
    1670:	8b 34       	cpi	r24, 0x4B	; 75
    1672:	28 f4       	brcc	.+10     	; 0x167e <fnRdMgrAddrQuietly+0x1c>
    {
        rpu_address = tmp_addr;
    1674:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <rpu_address>
        write_rpu_address_to_eeprom = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <write_rpu_address_to_eeprom>
    167e:	08 95       	ret

00001680 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    1680:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <inBytes_to_handle+0x1>
    1684:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    1688:	70 93 65 03 	sts	0x0365, r23	; 0x800365 <smbus_has_numBytes_to_handle+0x1>
    168c:	60 93 64 03 	sts	0x0364, r22	; 0x800364 <smbus_has_numBytes_to_handle>
    1690:	08 95       	ret

00001692 <handle_smbus_receive>:

// twi1.c has been modified, so it has an interleaved buffer that allows  
// the event to put a copy of the pointer where I can use it outside the ISR.
void handle_smbus_receive(void)
{
    if (smbus_has_numBytes_to_handle)
    1692:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <smbus_has_numBytes_to_handle>
    1696:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <smbus_has_numBytes_to_handle+0x1>
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <handle_smbus_receive+0x10>
    16a0:	6b c0       	rjmp	.+214    	; 0x1778 <handle_smbus_receive+0xe6>
            {fnAnalogRead, fnCalibrationRead, fnNull, fnNull, fnRdTimedAccum, fnNull, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
            {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnDayNightTimer, fnNull}
        };

        int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
        smbus_has_numBytes_to_handle = 0; 
    16a2:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <smbus_has_numBytes_to_handle+0x1>
    16a6:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <smbus_has_numBytes_to_handle>
    16aa:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <inBytes_to_handle>
    16ae:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <inBytes_to_handle+0x1>
        // read_i2c_block_data has a single command byte in its data set
        // it will write i2c address, the command* byte, and then cause a repeated start
        // followed by the i2c address (again) and then reading** the data
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
    16b2:	21 30       	cpi	r18, 0x01	; 1
    16b4:	31 05       	cpc	r19, r1
    16b6:	11 f0       	breq	.+4      	; 0x16bc <handle_smbus_receive+0x2a>
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	23 c0       	rjmp	.+70     	; 0x1702 <handle_smbus_receive+0x70>
        // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
        // ** and the transmit events
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    16bc:	90 81       	ld	r25, Z
    16be:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <smbusBuffer>
    16c2:	98 13       	cpse	r25, r24
    16c4:	59 c0       	rjmp	.+178    	; 0x1778 <handle_smbus_receive+0xe6>
    16c6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <transmit_data_ready>
    16ca:	81 11       	cpse	r24, r1
    16cc:	55 c0       	rjmp	.+170    	; 0x1778 <handle_smbus_receive+0xe6>
            {
                for(i = 0; i < smbusBufferLength; ++i)
    16ce:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <smbusBufferLength>
    16d2:	a2 e4       	ldi	r26, 0x42	; 66
    16d4:	b3 e0       	ldi	r27, 0x03	; 3
    16d6:	e6 e6       	ldi	r30, 0x66	; 102
    16d8:	f3 e0       	ldi	r31, 0x03	; 3
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	98 17       	cp	r25, r24
    16de:	21 f0       	breq	.+8      	; 0x16e8 <handle_smbus_receive+0x56>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
    16e0:	2d 91       	ld	r18, X+
    16e2:	21 93       	st	Z+, r18
        if( (numBytes == 1)  )
        {
            // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
            if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
            {
                for(i = 0; i < smbusBufferLength; ++i)
    16e4:	9f 5f       	subi	r25, 0xFF	; 255
    16e6:	fa cf       	rjmp	.-12     	; 0x16dc <handle_smbus_receive+0x4a>
                {
                    smbus_oldBuffer[i] = smbusBuffer[i];
                }
                if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    16e8:	80 32       	cpi	r24, 0x20	; 32
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <handle_smbus_receive+0x64>
    16ec:	e8 2f       	mov	r30, r24
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	ea 59       	subi	r30, 0x9A	; 154
    16f2:	fc 4f       	sbci	r31, 0xFC	; 252
    16f4:	11 82       	std	Z+1, r1	; 0x01
                smbus_oldBufferLength = smbusBufferLength;
    16f6:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <smbus_oldBufferLength>
                transmit_data_ready = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <transmit_data_ready>
    1700:	08 95       	ret
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    1702:	84 2f       	mov	r24, r20
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	82 17       	cp	r24, r18
    1708:	93 07       	cpc	r25, r19
    170a:	54 f4       	brge	.+20     	; 0x1720 <handle_smbus_receive+0x8e>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
    170c:	df 01       	movw	r26, r30
    170e:	a8 0f       	add	r26, r24
    1710:	b9 1f       	adc	r27, r25
    1712:	5c 91       	ld	r21, X
    1714:	dc 01       	movw	r26, r24
    1716:	ae 5b       	subi	r26, 0xBE	; 190
    1718:	bc 4f       	sbci	r27, 0xFC	; 252
    171a:	5c 93       	st	X, r21
                smbus_oldBufferLength = smbusBufferLength;
                transmit_data_ready = 1;
            }
            return; // done. Even if command does not match.
        }
        for(i = 0; i < numBytes; ++i)
    171c:	4f 5f       	subi	r20, 0xFF	; 255
    171e:	f1 cf       	rjmp	.-30     	; 0x1702 <handle_smbus_receive+0x70>
        {
            smbusBuffer[i] = inBytes_to_handle[i];    
        }
        if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    1720:	40 32       	cpi	r20, 0x20	; 32
    1722:	20 f4       	brcc	.+8      	; 0x172c <handle_smbus_receive+0x9a>
    1724:	fc 01       	movw	r30, r24
    1726:	ee 5b       	subi	r30, 0xBE	; 190
    1728:	fc 4f       	sbci	r31, 0xFC	; 252
    172a:	11 82       	std	Z+1, r1	; 0x01
        smbusBufferLength = numBytes;
    172c:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <smbusBufferLength>

        // an read_i2c_block_data has a command byte 
        if( !(smbusBufferLength > 0) ) 
    1730:	21 11       	cpse	r18, r1
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <handle_smbus_receive+0xa6>
        {
            smbusBuffer[0] = 0xFF; // error code for small size.
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <handle_smbus_receive+0xc0>
            return; // not valid, do nothing just echo an error code.
        }

        // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
        uint8_t group;
        group = (smbusBuffer[0] & 0xF0) >> 4;
    1738:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <smbusBuffer>
    173c:	e8 2f       	mov	r30, r24
    173e:	e2 95       	swap	r30
    1740:	ef 70       	andi	r30, 0x0F	; 15
        if(group >= GROUP) 
    1742:	e4 30       	cpi	r30, 0x04	; 4
    1744:	10 f0       	brcs	.+4      	; 0x174a <handle_smbus_receive+0xb8>
        {
            smbusBuffer[0] = 0xFE; // error code for bad group.
    1746:	8e ef       	ldi	r24, 0xFE	; 254
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <handle_smbus_receive+0xc0>
            return; 
        }

        // mask the command bits (0..3) so they can be used as an index.
        uint8_t command;
        command = smbusBuffer[0] & 0x0F;
    174a:	8f 70       	andi	r24, 0x0F	; 15
        if(command >= MGR_CMDS) 
    174c:	88 30       	cpi	r24, 0x08	; 8
    174e:	20 f0       	brcs	.+8      	; 0x1758 <handle_smbus_receive+0xc6>
        {
            smbusBuffer[0] = 0xFD; // error code for bad command.
    1750:	8d ef       	ldi	r24, 0xFD	; 253
    1752:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <smbusBuffer>
            return; // not valid, do nothing but echo error code.
    1756:	08 95       	ret
        }

        // Call the i2c command function and return
        (* pf[group][command])(smbusBuffer);
    1758:	98 e0       	ldi	r25, 0x08	; 8
    175a:	e9 9f       	mul	r30, r25
    175c:	f0 01       	movw	r30, r0
    175e:	11 24       	eor	r1, r1
    1760:	e8 0f       	add	r30, r24
    1762:	f1 1d       	adc	r31, r1
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ed 59       	subi	r30, 0x9D	; 157
    176a:	fe 4f       	sbci	r31, 0xFE	; 254
    176c:	01 90       	ld	r0, Z+
    176e:	f0 81       	ld	r31, Z
    1770:	e0 2d       	mov	r30, r0
    1772:	82 e4       	ldi	r24, 0x42	; 66
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	09 94       	ijmp
    1778:	08 95       	ret

0000177a <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    177a:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <smbus_oldBufferLength>
    177e:	86 e6       	ldi	r24, 0x66	; 102
    1780:	93 e0       	ldi	r25, 0x03	; 3
    1782:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <twi1_transmit>
    transmit_data_ready = 0;
    1786:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <transmit_data_ready>
    178a:	08 95       	ret

0000178c <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    178c:	cf 93       	push	r28
    if (write_rpu_address_to_eeprom && eeprom_is_ready())
    178e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <write_rpu_address_to_eeprom>
    1792:	88 23       	and	r24, r24
    1794:	21 f1       	breq	.+72     	; 0x17de <save_rpu_addr_state+0x52>
    1796:	f9 99       	sbic	0x1f, 1	; 31
    1798:	22 c0       	rjmp	.+68     	; 0x17de <save_rpu_addr_state+0x52>
    {
        // up to first EE_RPU_IDMAX locations may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	98 0f       	add	r25, r24
    179e:	9a 30       	cpi	r25, 0x0A	; 10
    17a0:	90 f4       	brcc	.+36     	; 0x17c6 <save_rpu_addr_state+0x3a>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	fc 01       	movw	r30, r24
    17a6:	ed 54       	subi	r30, 0x4D	; 77
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	c4 91       	lpm	r28, Z
            eeprom_update_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    17ac:	6c 2f       	mov	r22, r28
    17ae:	87 96       	adiw	r24, 0x27	; 39
    17b0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <eeprom_update_byte>
            
            if (value == '\0') 
    17b4:	c1 11       	cpse	r28, r1
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <save_rpu_addr_state+0x30>
            {
                write_rpu_address_to_eeprom = 11;
    17b8:	8b e0       	ldi	r24, 0x0B	; 11
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <save_rpu_addr_state+0x36>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    17bc:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <write_rpu_address_to_eeprom>
    17c0:	8f 5f       	subi	r24, 0xFF	; 255
    17c2:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    17c6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <write_rpu_address_to_eeprom>
    17ca:	8b 30       	cpi	r24, 0x0B	; 11
    17cc:	41 f4       	brne	.+16     	; 0x17de <save_rpu_addr_state+0x52>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_update_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    17ce:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <rpu_address>
    17d2:	82 e3       	ldi	r24, 0x32	; 50
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <eeprom_update_byte>
            write_rpu_address_to_eeprom = 0;
    17da:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <write_rpu_address_to_eeprom>
        }
    }
}
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	c8 e2       	ldi	r28, 0x28	; 40
    17ea:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    17ec:	fe 01       	movw	r30, r28
    17ee:	e4 57       	subi	r30, 0x74	; 116
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 ce 1c 	call	0x399c	; 0x399c <eeprom_read_byte>
        if (id != ee_id) 
    17fa:	18 13       	cpse	r17, r24
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    17fe:	11 23       	and	r17, r17
    1800:	31 f0       	breq	.+12     	; 0x180e <check_for_eeprom_id+0x2c>
    1802:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    1804:	c2 33       	cpi	r28, 0x32	; 50
    1806:	d1 05       	cpc	r29, r1
    1808:	89 f7       	brne	.-30     	; 0x17ec <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	08 95       	ret

00001818 <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    181c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    1820:	00 91 8e 03 	lds	r16, 0x038E	; 0x80038e <adc_started_at>
    1824:	10 91 8f 03 	lds	r17, 0x038F	; 0x80038f <adc_started_at+0x1>
    1828:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <adc_started_at+0x2>
    182c:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <adc_started_at+0x3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	80 1b       	sub	r24, r16
    1836:	91 0b       	sbc	r25, r17
    1838:	a2 0b       	sbc	r26, r18
    183a:	b3 0b       	sbc	r27, r19
    183c:	0b 97       	sbiw	r24, 0x0b	; 11
    183e:	a1 05       	cpc	r26, r1
    1840:	b1 05       	cpc	r27, r1
    1842:	08 f4       	brcc	.+2      	; 0x1846 <adc_burst+0x2e>
    1844:	4c c0       	rjmp	.+152    	; 0x18de <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	0e 94 cd 11 	call	0x239a	; 0x239a <analogRead>
    184c:	09 2e       	mov	r0, r25
    184e:	00 0c       	add	r0, r0
    1850:	aa 0b       	sbc	r26, r26
    1852:	bb 0b       	sbc	r27, r27
    1854:	40 91 86 03 	lds	r20, 0x0386	; 0x800386 <accumulate_alt_ti>
    1858:	50 91 87 03 	lds	r21, 0x0387	; 0x800387 <accumulate_alt_ti+0x1>
    185c:	60 91 88 03 	lds	r22, 0x0388	; 0x800388 <accumulate_alt_ti+0x2>
    1860:	70 91 89 03 	lds	r23, 0x0389	; 0x800389 <accumulate_alt_ti+0x3>
    1864:	84 0f       	add	r24, r20
    1866:	95 1f       	adc	r25, r21
    1868:	a6 1f       	adc	r26, r22
    186a:	b7 1f       	adc	r27, r23
    186c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <accumulate_alt_ti>
    1870:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <accumulate_alt_ti+0x1>
    1874:	a0 93 88 03 	sts	0x0388, r26	; 0x800388 <accumulate_alt_ti+0x2>
    1878:	b0 93 89 03 	sts	0x0389, r27	; 0x800389 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    187c:	86 e0       	ldi	r24, 0x06	; 6
    187e:	0e 94 cd 11 	call	0x239a	; 0x239a <analogRead>
    1882:	09 2e       	mov	r0, r25
    1884:	00 0c       	add	r0, r0
    1886:	aa 0b       	sbc	r26, r26
    1888:	bb 0b       	sbc	r27, r27
    188a:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <accumulate_pwr_ti>
    188e:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <accumulate_pwr_ti+0x1>
    1892:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <accumulate_pwr_ti+0x2>
    1896:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <accumulate_pwr_ti+0x3>
    189a:	84 0f       	add	r24, r20
    189c:	95 1f       	adc	r25, r21
    189e:	a6 1f       	adc	r26, r22
    18a0:	b7 1f       	adc	r27, r23
    18a2:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <accumulate_pwr_ti>
    18a6:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <accumulate_pwr_ti+0x1>
    18aa:	a0 93 8c 03 	sts	0x038C, r26	; 0x80038c <accumulate_pwr_ti+0x2>
    18ae:	b0 93 8d 03 	sts	0x038D, r27	; 0x80038d <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	0e 94 76 12 	call	0x24ec	; 0x24ec <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    18b8:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <adc_started_at>
    18bc:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <adc_started_at+0x1>
    18c0:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <adc_started_at+0x2>
    18c4:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <adc_started_at+0x3>
    18c8:	0a 96       	adiw	r24, 0x0a	; 10
    18ca:	a1 1d       	adc	r26, r1
    18cc:	b1 1d       	adc	r27, r1
    18ce:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <adc_started_at>
    18d2:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <adc_started_at+0x1>
    18d6:	a0 93 90 03 	sts	0x0390, r26	; 0x800390 <adc_started_at+0x2>
    18da:	b0 93 91 03 	sts	0x0391, r27	; 0x800391 <adc_started_at+0x3>
    } 
}
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <IsValidValForAvccRef>:
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

// 
uint8_t IsValidValForAvccRef() 
{
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    float tmp_avcc;
    memcpy(&tmp_avcc, &ref_extern_avcc_uV, sizeof tmp_avcc);
    18ec:	c0 90 93 03 	lds	r12, 0x0393	; 0x800393 <ref_extern_avcc_uV>
    18f0:	d0 90 94 03 	lds	r13, 0x0394	; 0x800394 <ref_extern_avcc_uV+0x1>
    18f4:	e0 90 95 03 	lds	r14, 0x0395	; 0x800395 <ref_extern_avcc_uV+0x2>
    18f8:	f0 90 96 03 	lds	r15, 0x0396	; 0x800396 <ref_extern_avcc_uV+0x3>
    if ( ((tmp_avcc > REF_EXTERN_AVCC_MIN) && (tmp_avcc < REF_EXTERN_AVCC_MAX)) )
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e9       	ldi	r20, 0x90	; 144
    1902:	50 e4       	ldi	r21, 0x40	; 64
    1904:	c7 01       	movw	r24, r14
    1906:	b6 01       	movw	r22, r12
    1908:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__gesf2>
    190c:	18 16       	cp	r1, r24
    190e:	64 f4       	brge	.+24     	; 0x1928 <IsValidValForAvccRef+0x44>
    {
        return 1;
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 eb       	ldi	r20, 0xB0	; 176
    1916:	50 e4       	ldi	r21, 0x40	; 64
    1918:	c7 01       	movw	r24, r14
    191a:	b6 01       	movw	r22, r12
    191c:	0e 94 bb 19 	call	0x3376	; 0x3376 <__cmpsf2>
    1920:	88 1f       	adc	r24, r24
    1922:	88 27       	eor	r24, r24
    1924:	88 1f       	adc	r24, r24
    1926:	01 c0       	rjmp	.+2      	; 0x192a <IsValidValForAvccRef+0x46>
    }
    else
    {
        return 0;
    1928:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	df 90       	pop	r13
    1930:	cf 90       	pop	r12
    1932:	08 95       	ret

00001934 <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref() 
{
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    float tmp_1v1;
    memcpy(&tmp_1v1, &ref_intern_1v1_uV, sizeof tmp_1v1);
    193c:	c0 90 97 03 	lds	r12, 0x0397	; 0x800397 <ref_intern_1v1_uV>
    1940:	d0 90 98 03 	lds	r13, 0x0398	; 0x800398 <ref_intern_1v1_uV+0x1>
    1944:	e0 90 99 03 	lds	r14, 0x0399	; 0x800399 <ref_intern_1v1_uV+0x2>
    1948:	f0 90 9a 03 	lds	r15, 0x039A	; 0x80039a <ref_intern_1v1_uV+0x3>
    if ( ((tmp_1v1 > REF_INTERN_1V1_MIN) && (tmp_1v1 < REF_INTERN_1V1_MAX)) )
    194c:	26 e6       	ldi	r18, 0x66	; 102
    194e:	36 e6       	ldi	r19, 0x66	; 102
    1950:	46 e6       	ldi	r20, 0x66	; 102
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	c7 01       	movw	r24, r14
    1956:	b6 01       	movw	r22, r12
    1958:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__gesf2>
    195c:	18 16       	cp	r1, r24
    195e:	64 f4       	brge	.+24     	; 0x1978 <IsValidValFor1V1Ref+0x44>
    {
        return 1;
    1960:	26 e6       	ldi	r18, 0x66	; 102
    1962:	36 e6       	ldi	r19, 0x66	; 102
    1964:	46 ea       	ldi	r20, 0xA6	; 166
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	c7 01       	movw	r24, r14
    196a:	b6 01       	movw	r22, r12
    196c:	0e 94 bb 19 	call	0x3376	; 0x3376 <__cmpsf2>
    1970:	88 1f       	adc	r24, r24
    1972:	88 27       	eor	r24, r24
    1974:	88 1f       	adc	r24, r24
    1976:	01 c0       	rjmp	.+2      	; 0x197a <IsValidValFor1V1Ref+0x46>
    }
    else
    {
        return 0;
    1978:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	08 95       	ret

00001984 <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1984:	8e e1       	ldi	r24, 0x1E	; 30
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    if ( eeprom_is_ready() )
    198c:	f9 99       	sbic	0x1f, 1	; 31
    198e:	0a c0       	rjmp	.+20     	; 0x19a4 <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    1990:	84 34       	cpi	r24, 0x44	; 68
    1992:	91 44       	sbci	r25, 0x41	; 65
    1994:	49 f0       	breq	.+18     	; 0x19a8 <WriteEeReferenceId+0x24>
        {
            eeprom_update_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    1996:	64 e4       	ldi	r22, 0x44	; 68
    1998:	71 e4       	ldi	r23, 0x41	; 65
    199a:	8e e1       	ldi	r24, 0x1E	; 30
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <eeprom_update_word>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_update_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    19aa:	08 95       	ret

000019ac <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    19ac:	80 e2       	ldi	r24, 0x20	; 32
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    19b8:	f9 99       	sbic	0x1f, 1	; 31
    19ba:	12 c0       	rjmp	.+36     	; 0x19e0 <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    19bc:	40 91 93 03 	lds	r20, 0x0393	; 0x800393 <ref_extern_avcc_uV>
    19c0:	50 91 94 03 	lds	r21, 0x0394	; 0x800394 <ref_extern_avcc_uV+0x1>
    19c4:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <ref_extern_avcc_uV+0x2>
    19c8:	70 91 96 03 	lds	r23, 0x0396	; 0x800396 <ref_extern_avcc_uV+0x3>
    19cc:	84 17       	cp	r24, r20
    19ce:	95 07       	cpc	r25, r21
    19d0:	a6 07       	cpc	r26, r22
    19d2:	b7 07       	cpc	r27, r23
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <WriteEeReferenceAvcc+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    19d6:	80 e2       	ldi	r24, 0x20	; 32
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_update_dword>
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    19e6:	08 95       	ret

000019e8 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    19e8:	84 e2       	ldi	r24, 0x24	; 36
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    19f4:	f9 99       	sbic	0x1f, 1	; 31
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    19f8:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <ref_intern_1v1_uV>
    19fc:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <ref_intern_1v1_uV+0x1>
    1a00:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <ref_intern_1v1_uV+0x2>
    1a04:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <ref_intern_1v1_uV+0x3>
    1a08:	84 17       	cp	r24, r20
    1a0a:	95 07       	cpc	r25, r21
    1a0c:	a6 07       	cpc	r26, r22
    1a0e:	b7 07       	cpc	r27, r23
    1a10:	39 f0       	breq	.+14     	; 0x1a20 <WriteEeReference1V1+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    1a12:	84 e2       	ldi	r24, 0x24	; 36
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_update_dword>
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_update_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1a22:	08 95       	ret

00001a24 <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1a24:	8e e1       	ldi	r24, 0x1E	; 30
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1a2c:	84 34       	cpi	r24, 0x44	; 68
    1a2e:	91 44       	sbci	r25, 0x41	; 65
    1a30:	81 f5       	brne	.+96     	; 0x1a92 <LoadAnalogRefFromEEPROM+0x6e>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC));
    1a32:	80 e2       	ldi	r24, 0x20	; 32
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    1a3a:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <ref_extern_avcc_uV>
    1a3e:	70 93 94 03 	sts	0x0394, r23	; 0x800394 <ref_extern_avcc_uV+0x1>
    1a42:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <ref_extern_avcc_uV+0x2>
    1a46:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <ref_extern_avcc_uV+0x3>
        if ( IsValidValForAvccRef() ) 
    1a4a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <IsValidValForAvccRef>
    1a4e:	88 23       	and	r24, r24
    1a50:	01 f1       	breq	.+64     	; 0x1a92 <LoadAnalogRefFromEEPROM+0x6e>
        {
            ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    1a52:	84 e2       	ldi	r24, 0x24	; 36
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    1a5a:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <ref_intern_1v1_uV>
    1a5e:	70 93 98 03 	sts	0x0398, r23	; 0x800398 <ref_intern_1v1_uV+0x1>
    1a62:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <ref_intern_1v1_uV+0x2>
    1a66:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <ref_intern_1v1_uV+0x3>
            if ( IsValidValFor1V1Ref() )
    1a6a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <IsValidValFor1V1Ref>
    1a6e:	81 11       	cpse	r24, r1
    1a70:	0c c0       	rjmp	.+24     	; 0x1a8a <LoadAnalogRefFromEEPROM+0x66>
                return 1;
            }
            else
            { // 1v1 is not used (should it be removed?)
                float tmp_1v1 = 1.08;
                memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    1a72:	81 e7       	ldi	r24, 0x71	; 113
    1a74:	9d e3       	ldi	r25, 0x3D	; 61
    1a76:	aa e8       	ldi	r26, 0x8A	; 138
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <ref_intern_1v1_uV>
    1a7e:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <ref_intern_1v1_uV+0x1>
    1a82:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <ref_intern_1v1_uV+0x2>
    1a86:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <ref_intern_1v1_uV+0x3>
                ref_loaded = REF_LOADED;
    1a8a:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <ref_loaded>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	08 95       	ret
    }

    // use defaults
    // on AVR sizeof(float) == sizeof(uint32_t)
    float tmp_avcc = 5.0;
    memcpy(&ref_extern_avcc_uV, &tmp_avcc, sizeof ref_extern_avcc_uV);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 ea       	ldi	r26, 0xA0	; 160
    1a98:	b0 e4       	ldi	r27, 0x40	; 64
    1a9a:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <ref_extern_avcc_uV>
    1a9e:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <ref_extern_avcc_uV+0x1>
    1aa2:	a0 93 95 03 	sts	0x0395, r26	; 0x800395 <ref_extern_avcc_uV+0x2>
    1aa6:	b0 93 96 03 	sts	0x0396, r27	; 0x800396 <ref_extern_avcc_uV+0x3>
    float tmp_1v1 = 1.08;
    memcpy(&ref_intern_1v1_uV, &tmp_1v1, sizeof ref_intern_1v1_uV);
    1aaa:	81 e7       	ldi	r24, 0x71	; 113
    1aac:	9d e3       	ldi	r25, 0x3D	; 61
    1aae:	aa e8       	ldi	r26, 0x8A	; 138
    1ab0:	bf e3       	ldi	r27, 0x3F	; 63
    1ab2:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <ref_intern_1v1_uV>
    1ab6:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <ref_intern_1v1_uV+0x1>
    1aba:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <ref_intern_1v1_uV+0x2>
    1abe:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <ref_intern_1v1_uV+0x3>
    ref_loaded = REF_DEFAULT;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <ref_loaded>
    return 0;
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
}
    1aca:	08 95       	ret

00001acc <ReferancesFromI2CtoEE>:

// save referances from I2C to EEPROM (if valid)
void ReferancesFromI2CtoEE(void)
{
    1acc:	cf 93       	push	r28
    if (ref_loaded > REF_DEFAULT)
    1ace:	c0 91 92 03 	lds	r28, 0x0392	; 0x800392 <ref_loaded>
    1ad2:	c2 30       	cpi	r28, 0x02	; 2
    1ad4:	38 f1       	brcs	.+78     	; 0x1b24 <ReferancesFromI2CtoEE+0x58>
    {
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
    1ad6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <IsValidValForAvccRef>
    1ada:	88 23       	and	r24, r24
    1adc:	01 f1       	breq	.+64     	; 0x1b1e <ReferancesFromI2CtoEE+0x52>
    1ade:	0e 94 9a 0c 	call	0x1934	; 0x1934 <IsValidValFor1V1Ref>
    1ae2:	88 23       	and	r24, r24
    1ae4:	e1 f0       	breq	.+56     	; 0x1b1e <ReferancesFromI2CtoEE+0x52>
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    1ae6:	8e e1       	ldi	r24, 0x1E	; 30
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1aee:	84 34       	cpi	r24, 0x44	; 68
    1af0:	91 44       	sbci	r25, 0x41	; 65
    1af2:	19 f0       	breq	.+6      	; 0x1afa <ReferancesFromI2CtoEE+0x2e>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1af4:	cf 91       	pop	r28
        if ( IsValidValForAvccRef() && IsValidValFor1V1Ref() )
        {
            uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
            if (id != 0x4144) // 'A' is 0x41 and 'D' is 0x44
            {
                WriteEeReferenceId();
    1af6:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <WriteEeReferenceId>
                return; // that is enough for this loop
            }
            else 
            {
                if (ref_loaded == REF_1V1_TOSAVE)
    1afa:	c3 30       	cpi	r28, 0x03	; 3
    1afc:	39 f4       	brne	.+14     	; 0x1b0c <ReferancesFromI2CtoEE+0x40>
                {
                    if (WriteEeReference1V1())
    1afe:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <WriteEeReference1V1>
    1b02:	88 23       	and	r24, r24
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <ReferancesFromI2CtoEE+0x40>
                    {
                        ref_loaded = REF_LOADED;
    1b06:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <ref_loaded>
                        return; // all done
    1b0a:	0c c0       	rjmp	.+24     	; 0x1b24 <ReferancesFromI2CtoEE+0x58>
                    }
                }
                if (ref_loaded == REF_AVCC_TOSAVE)
    1b0c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <ref_loaded>
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	41 f4       	brne	.+16     	; 0x1b24 <ReferancesFromI2CtoEE+0x58>
                {
                    if (WriteEeReferenceAvcc())
    1b14:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <WriteEeReferenceAvcc>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	f5 cf       	rjmp	.-22     	; 0x1b06 <ReferancesFromI2CtoEE+0x3a>
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <ReferancesFromI2CtoEE+0x58>
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
        }
    }
}
    1b1e:	cf 91       	pop	r28
                }
            }       
        }
        else
        {
            LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1b20:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <LoadAnalogRefFromEEPROM>
        }
    }
}
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <check_if_alt_should_be_on>:


// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    if (enable_alternate_power)
    1b3c:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <enable_alternate_power>
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <check_if_alt_should_be_on+0x1e>
    1b44:	d1 c0       	rjmp	.+418    	; 0x1ce8 <check_if_alt_should_be_on+0x1c0>
    {
        int battery = analogRead(PWR_V);
    1b46:	87 e0       	ldi	r24, 0x07	; 7
    1b48:	0e 94 cd 11 	call	0x239a	; 0x239a <analogRead>
    1b4c:	7c 01       	movw	r14, r24
        if (battery >= battery_high_limit)
    1b4e:	c0 91 a4 03 	lds	r28, 0x03A4	; 0x8003a4 <battery_high_limit>
    1b52:	d0 91 a5 03 	lds	r29, 0x03A5	; 0x8003a5 <battery_high_limit+0x1>
    1b56:	8c 17       	cp	r24, r28
    1b58:	9d 07       	cpc	r25, r29
    1b5a:	4c f0       	brlt	.+18     	; 0x1b6e <check_if_alt_should_be_on+0x46>
        {
            if (digitalRead(ALT_EN))
    1b5c:	1b 9b       	sbis	0x03, 3	; 3
    1b5e:	c8 c0       	rjmp	.+400    	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b60:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b62:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1b64:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b66:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                enable_alternate_power = 0; // charge is done
    1b68:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <enable_alternate_power>
    1b6c:	c1 c0       	rjmp	.+386    	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
            }
            return; // if alt_en is not on do nothing
        }
        int pwm_range = ( (battery_high_limit - battery_low_limit)>>1 ); // half the diff between high and low limit
    1b6e:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <battery_low_limit>
    1b72:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <battery_low_limit+0x1>
    1b76:	c8 1b       	sub	r28, r24
    1b78:	d9 0b       	sbc	r29, r25
    1b7a:	d5 95       	asr	r29
    1b7c:	c7 95       	ror	r28
        unsigned long kRuntime = millis() - alt_pwm_started_at;
    1b7e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    1b82:	00 91 9c 03 	lds	r16, 0x039C	; 0x80039c <alt_pwm_started_at>
    1b86:	10 91 9d 03 	lds	r17, 0x039D	; 0x80039d <alt_pwm_started_at+0x1>
    1b8a:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <alt_pwm_started_at+0x2>
    1b8e:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <alt_pwm_started_at+0x3>
    1b92:	5b 01       	movw	r10, r22
    1b94:	6c 01       	movw	r12, r24
    1b96:	a0 1a       	sub	r10, r16
    1b98:	b1 0a       	sbc	r11, r17
    1b9a:	c2 0a       	sbc	r12, r18
    1b9c:	d3 0a       	sbc	r13, r19
    1b9e:	96 01       	movw	r18, r12
    1ba0:	85 01       	movw	r16, r10
        if (battery < (battery_low_limit + pwm_range ) )
    1ba2:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <battery_low_limit>
    1ba6:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <battery_low_limit+0x1>
    1baa:	8c 0f       	add	r24, r28
    1bac:	9d 1f       	adc	r25, r29
    1bae:	e8 16       	cp	r14, r24
    1bb0:	f9 06       	cpc	r15, r25
    1bb2:	0c f0       	brlt	.+2      	; 0x1bb6 <check_if_alt_should_be_on+0x8e>
    1bb4:	5b c0       	rjmp	.+182    	; 0x1c6c <check_if_alt_should_be_on+0x144>
        { // half way between high and low limit pwm will occure at 2 sec intervals
            unsigned long offtime = ALT_PWM_PERIOD * ( (battery_high_limit - battery) / pwm_range );
            if (digitalRead(ALT_EN))
    1bb6:	1b 9b       	sbis	0x03, 3	; 3
    1bb8:	39 c0       	rjmp	.+114    	; 0x1c2c <check_if_alt_should_be_on+0x104>
            {
                if ( (kRuntime + offtime) > ALT_PWM_PERIOD )
    1bba:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <battery_high_limit>
    1bbe:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <battery_high_limit+0x1>
    1bc2:	8e 19       	sub	r24, r14
    1bc4:	9f 09       	sbc	r25, r15
    1bc6:	be 01       	movw	r22, r28
    1bc8:	0e 94 71 19 	call	0x32e2	; 0x32e2 <__divmodhi4>
    1bcc:	40 ed       	ldi	r20, 0xD0	; 208
    1bce:	57 e0       	ldi	r21, 0x07	; 7
    1bd0:	64 9f       	mul	r22, r20
    1bd2:	c0 01       	movw	r24, r0
    1bd4:	65 9f       	mul	r22, r21
    1bd6:	90 0d       	add	r25, r0
    1bd8:	74 9f       	mul	r23, r20
    1bda:	90 0d       	add	r25, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	09 2e       	mov	r0, r25
    1be0:	00 0c       	add	r0, r0
    1be2:	aa 0b       	sbc	r26, r26
    1be4:	bb 0b       	sbc	r27, r27
    1be6:	8a 0d       	add	r24, r10
    1be8:	9b 1d       	adc	r25, r11
    1bea:	ac 1d       	adc	r26, r12
    1bec:	bd 1d       	adc	r27, r13
    1bee:	81 3d       	cpi	r24, 0xD1	; 209
    1bf0:	97 40       	sbci	r25, 0x07	; 7
    1bf2:	a1 05       	cpc	r26, r1
    1bf4:	b1 05       	cpc	r27, r1
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <check_if_alt_should_be_on+0xd2>
    1bf8:	7b c0       	rjmp	.+246    	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1bfa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bfc:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1bfe:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c00:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,LOW);
                    alt_pwm_accum_charge_time += kRuntime;
    1c02:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <alt_pwm_accum_charge_time>
    1c06:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <alt_pwm_accum_charge_time+0x1>
    1c0a:	a0 91 a2 03 	lds	r26, 0x03A2	; 0x8003a2 <alt_pwm_accum_charge_time+0x2>
    1c0e:	b0 91 a3 03 	lds	r27, 0x03A3	; 0x8003a3 <alt_pwm_accum_charge_time+0x3>
    1c12:	08 0f       	add	r16, r24
    1c14:	19 1f       	adc	r17, r25
    1c16:	2a 1f       	adc	r18, r26
    1c18:	3b 1f       	adc	r19, r27
    1c1a:	00 93 a0 03 	sts	0x03A0, r16	; 0x8003a0 <alt_pwm_accum_charge_time>
    1c1e:	10 93 a1 03 	sts	0x03A1, r17	; 0x8003a1 <alt_pwm_accum_charge_time+0x1>
    1c22:	20 93 a2 03 	sts	0x03A2, r18	; 0x8003a2 <alt_pwm_accum_charge_time+0x2>
    1c26:	30 93 a3 03 	sts	0x03A3, r19	; 0x8003a3 <alt_pwm_accum_charge_time+0x3>
    1c2a:	62 c0       	rjmp	.+196    	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
                }
            }
            else 
            {
                if ( kRuntime > ALT_PWM_PERIOD )
    1c2c:	81 ed       	ldi	r24, 0xD1	; 209
    1c2e:	a8 16       	cp	r10, r24
    1c30:	87 e0       	ldi	r24, 0x07	; 7
    1c32:	b8 06       	cpc	r11, r24
    1c34:	c1 04       	cpc	r12, r1
    1c36:	d1 04       	cpc	r13, r1
    1c38:	08 f4       	brcc	.+2      	; 0x1c3c <check_if_alt_should_be_on+0x114>
    1c3a:	5a c0       	rjmp	.+180    	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c3c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c3e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1c40:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c42:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,HIGH);
                    if (kRuntime > (ALT_PWM_PERIOD<<1) )
    1c44:	41 ea       	ldi	r20, 0xA1	; 161
    1c46:	a4 16       	cp	r10, r20
    1c48:	4f e0       	ldi	r20, 0x0F	; 15
    1c4a:	b4 06       	cpc	r11, r20
    1c4c:	c1 04       	cpc	r12, r1
    1c4e:	d1 04       	cpc	r13, r1
    1c50:	58 f5       	brcc	.+86     	; 0x1ca8 <check_if_alt_should_be_on+0x180>
                    {
                        alt_pwm_started_at = millis();
                    }
                    else
                    {
                        alt_pwm_started_at += ALT_PWM_PERIOD;
    1c52:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <alt_pwm_started_at>
    1c56:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <alt_pwm_started_at+0x1>
    1c5a:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <alt_pwm_started_at+0x2>
    1c5e:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <alt_pwm_started_at+0x3>
    1c62:	80 53       	subi	r24, 0x30	; 48
    1c64:	98 4f       	sbci	r25, 0xF8	; 248
    1c66:	af 4f       	sbci	r26, 0xFF	; 255
    1c68:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6a:	35 c0       	rjmp	.+106    	; 0x1cd6 <check_if_alt_should_be_on+0x1ae>
                    }
                }
            }
            return;
        }
        else if (digitalRead(ALT_EN))
    1c6c:	1b 9b       	sbis	0x03, 3	; 3
    1c6e:	0a c0       	rjmp	.+20     	; 0x1c84 <check_if_alt_should_be_on+0x15c>
        { // if pwm is not occuring we still need to rest every so often to measure the battery
            if ( (kRuntime + ALT_REST) > ALT_REST_PERIOD )
    1c70:	06 50       	subi	r16, 0x06	; 6
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	2f 4f       	sbci	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	01 31       	cpi	r16, 0x11	; 17
    1c7a:	17 42       	sbci	r17, 0x27	; 39
    1c7c:	21 05       	cpc	r18, r1
    1c7e:	31 05       	cpc	r19, r1
    1c80:	b8 f1       	brcs	.+110    	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
    1c82:	32 c0       	rjmp	.+100    	; 0x1ce8 <check_if_alt_should_be_on+0x1c0>
            }
            return;
        }
        else 
        {
            if ( kRuntime > ALT_REST_PERIOD)
    1c84:	41 e1       	ldi	r20, 0x11	; 17
    1c86:	a4 16       	cp	r10, r20
    1c88:	47 e2       	ldi	r20, 0x27	; 39
    1c8a:	b4 06       	cpc	r11, r20
    1c8c:	c1 04       	cpc	r12, r1
    1c8e:	d1 04       	cpc	r13, r1
    1c90:	78 f1       	brcs	.+94     	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1c92:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1c94:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1c96:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1c98:	8f bf       	out	0x3f, r24	; 63
            { // end of resting time, start charging
                digitalWrite(ALT_EN,HIGH);
                if (kRuntime > (ALT_REST_PERIOD<<1) )
    1c9a:	81 e2       	ldi	r24, 0x21	; 33
    1c9c:	a8 16       	cp	r10, r24
    1c9e:	8e e4       	ldi	r24, 0x4E	; 78
    1ca0:	b8 06       	cpc	r11, r24
    1ca2:	c1 04       	cpc	r12, r1
    1ca4:	d1 04       	cpc	r13, r1
    1ca6:	58 f0       	brcs	.+22     	; 0x1cbe <check_if_alt_should_be_on+0x196>
                {
                    alt_pwm_started_at = millis();
    1ca8:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    1cac:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <alt_pwm_started_at>
    1cb0:	70 93 9d 03 	sts	0x039D, r23	; 0x80039d <alt_pwm_started_at+0x1>
    1cb4:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <alt_pwm_started_at+0x2>
    1cb8:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <alt_pwm_started_at+0x3>
    1cbc:	19 c0       	rjmp	.+50     	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
                }
                else
                {
                    alt_pwm_started_at += ALT_REST_PERIOD;
    1cbe:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <alt_pwm_started_at>
    1cc2:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <alt_pwm_started_at+0x1>
    1cc6:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <alt_pwm_started_at+0x2>
    1cca:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <alt_pwm_started_at+0x3>
    1cce:	80 5f       	subi	r24, 0xF0	; 240
    1cd0:	98 4d       	sbci	r25, 0xD8	; 216
    1cd2:	af 4f       	sbci	r26, 0xFF	; 255
    1cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd6:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <alt_pwm_started_at>
    1cda:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <alt_pwm_started_at+0x1>
    1cde:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <alt_pwm_started_at+0x2>
    1ce2:	b0 93 9f 03 	sts	0x039F, r27	; 0x80039f <alt_pwm_started_at+0x3>
    1ce6:	04 c0       	rjmp	.+8      	; 0x1cf0 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1ce8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cea:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1cec:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cee:	8f bf       	out	0x3f, r24	; 63
    }
    else 
    {
        digitalWrite(ALT_EN,LOW);
    }
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	ff 90       	pop	r15
    1cfa:	ef 90       	pop	r14
    1cfc:	df 90       	pop	r13
    1cfe:	cf 90       	pop	r12
    1d00:	bf 90       	pop	r11
    1d02:	af 90       	pop	r10
    1d04:	08 95       	ret

00001d06 <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 81       	ld	r18, Z
    1d0a:	31 81       	ldd	r19, Z+1	; 0x01
    1d0c:	2b 54       	subi	r18, 0x4B	; 75
    1d0e:	31 40       	sbci	r19, 0x01	; 1
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	27 38       	cpi	r18, 0x87	; 135
    1d14:	31 05       	cpc	r19, r1
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <IsValidBatHighLimFor12V+0x14>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d1a:	08 95       	ret

00001d1c <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	20 81       	ld	r18, Z
    1d20:	31 81       	ldd	r19, Z+1	; 0x01
    1d22:	2e 53       	subi	r18, 0x3E	; 62
    1d24:	31 40       	sbci	r19, 0x01	; 1
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	26 36       	cpi	r18, 0x66	; 102
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <IsValidBatLowLimFor12V+0x14>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d30:	08 95       	ret

00001d32 <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    1d32:	fc 01       	movw	r30, r24
    1d34:	20 81       	ld	r18, Z
    1d36:	31 81       	ldd	r19, Z+1	; 0x01
    1d38:	25 59       	subi	r18, 0x95	; 149
    1d3a:	32 40       	sbci	r19, 0x02	; 2
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	2f 30       	cpi	r18, 0x0F	; 15
    1d40:	31 40       	sbci	r19, 0x01	; 1
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <IsValidBatHighLimFor24V+0x14>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d46:	08 95       	ret

00001d48 <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 81       	ld	r18, Z
    1d4c:	31 81       	ldd	r19, Z+1	; 0x01
    1d4e:	2c 57       	subi	r18, 0x7C	; 124
    1d50:	32 40       	sbci	r19, 0x02	; 2
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	2b 3c       	cpi	r18, 0xCB	; 203
    1d56:	31 05       	cpc	r19, r1
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <IsValidBatLowLimFor24V+0x14>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1d5c:	08 95       	ret

00001d5e <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1d5e:	8c e3       	ldi	r24, 0x3C	; 60
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1d66:	f9 99       	sbic	0x1f, 1	; 31
    1d68:	0c c0       	rjmp	.+24     	; 0x1d82 <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1d6a:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <battery_high_limit>
    1d6e:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <battery_high_limit+0x1>
    1d72:	86 17       	cp	r24, r22
    1d74:	97 07       	cpc	r25, r23
    1d76:	39 f0       	breq	.+14     	; 0x1d86 <WriteEEBatHighLim+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    1d78:	8c e3       	ldi	r24, 0x3C	; 60
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <eeprom_update_word>
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1d88:	08 95       	ret

00001d8a <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1d8a:	8e e3       	ldi	r24, 0x3E	; 62
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1d92:	f9 99       	sbic	0x1f, 1	; 31
    1d94:	0c c0       	rjmp	.+24     	; 0x1dae <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    1d96:	60 91 a7 03 	lds	r22, 0x03A7	; 0x8003a7 <battery_low_limit>
    1d9a:	70 91 a8 03 	lds	r23, 0x03A8	; 0x8003a8 <battery_low_limit+0x1>
    1d9e:	86 17       	cp	r24, r22
    1da0:	97 07       	cpc	r25, r23
    1da2:	39 f0       	breq	.+14     	; 0x1db2 <WriteEEBatLowLim+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    1da4:	8e e3       	ldi	r24, 0x3E	; 62
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <eeprom_update_word>
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_update_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1db4:	08 95       	ret

00001db6 <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <LoadBatLimitsFromEEPROM+0xe>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LoadBatLimitsFromEEPROM+0x10>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1dca:	8c e3       	ldi	r24, 0x3C	; 60
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    1dd2:	7c 01       	movw	r14, r24
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    1dd8:	8e e3       	ldi	r24, 0x3E	; 62
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    1de0:	8c 01       	movw	r16, r24
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    1de6:	ce 01       	movw	r24, r28
    1de8:	03 96       	adiw	r24, 0x03	; 3
    1dea:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <IsValidBatHighLimFor12V>
    1dee:	81 11       	cpse	r24, r1
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <LoadBatLimitsFromEEPROM+0x48>
    1df2:	ce 01       	movw	r24, r28
    1df4:	03 96       	adiw	r24, 0x03	; 3
    1df6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <IsValidBatHighLimFor24V>
    1dfa:	88 23       	and	r24, r24
    1dfc:	c1 f0       	breq	.+48     	; 0x1e2e <LoadBatLimitsFromEEPROM+0x78>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <IsValidBatLowLimFor12V>
    1e06:	81 11       	cpse	r24, r1
    1e08:	06 c0       	rjmp	.+12     	; 0x1e16 <LoadBatLimitsFromEEPROM+0x60>
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <IsValidBatLowLimFor24V>
    1e12:	88 23       	and	r24, r24
    1e14:	61 f0       	breq	.+24     	; 0x1e2e <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    1e16:	f0 92 a5 03 	sts	0x03A5, r15	; 0x8003a5 <battery_high_limit+0x1>
    1e1a:	e0 92 a4 03 	sts	0x03A4, r14	; 0x8003a4 <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    1e1e:	10 93 a8 03 	sts	0x03A8, r17	; 0x8003a8 <battery_low_limit+0x1>
    1e22:	00 93 a7 03 	sts	0x03A7, r16	; 0x8003a7 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    1e26:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <bat_limit_loaded>
        return 1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	10 c0       	rjmp	.+32     	; 0x1e4e <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    1e2e:	8d e8       	ldi	r24, 0x8D	; 141
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <battery_high_limit+0x1>
    1e36:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1e3a:	86 e7       	ldi	r24, 0x76	; 118
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <battery_low_limit+0x1>
    1e42:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <bat_limit_loaded>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	08 95       	ret

00001e64 <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if (bat_limit_loaded > BAT_LIM_DEFAULT)
    1e64:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <bat_limit_loaded>
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	58 f1       	brcs	.+86     	; 0x1ec2 <BatLimitsFromI2CtoEE+0x5e>
    {
        if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	99 f4       	brne	.+38     	; 0x1e96 <BatLimitsFromI2CtoEE+0x32>
        {
            if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1e70:	84 ea       	ldi	r24, 0xA4	; 164
    1e72:	93 e0       	ldi	r25, 0x03	; 3
    1e74:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <IsValidBatHighLimFor12V>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	06 c0       	rjmp	.+12     	; 0x1e88 <BatLimitsFromI2CtoEE+0x24>
    1e7c:	84 ea       	ldi	r24, 0xA4	; 164
    1e7e:	93 e0       	ldi	r25, 0x03	; 3
    1e80:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <IsValidBatHighLimFor24V>
    1e84:	88 23       	and	r24, r24
    1e86:	39 f0       	breq	.+14     	; 0x1e96 <BatLimitsFromI2CtoEE+0x32>
            {
                if (WriteEEBatHighLim())
    1e88:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <WriteEEBatHighLim>
    1e8c:	88 23       	and	r24, r24
    1e8e:	19 f0       	breq	.+6      	; 0x1e96 <BatLimitsFromI2CtoEE+0x32>
                {
                    bat_limit_loaded = BAT_LIM_LOADED;
    1e90:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <bat_limit_loaded>
                    return; // all done
    1e94:	08 95       	ret
                }
            }
        }
        if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1e96:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <bat_limit_loaded>
    1e9a:	83 30       	cpi	r24, 0x03	; 3
    1e9c:	81 f4       	brne	.+32     	; 0x1ebe <BatLimitsFromI2CtoEE+0x5a>
        {    
            if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1e9e:	87 ea       	ldi	r24, 0xA7	; 167
    1ea0:	93 e0       	ldi	r25, 0x03	; 3
    1ea2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <IsValidBatLowLimFor12V>
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <BatLimitsFromI2CtoEE+0x52>
    1eaa:	87 ea       	ldi	r24, 0xA7	; 167
    1eac:	93 e0       	ldi	r25, 0x03	; 3
    1eae:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <IsValidBatLowLimFor24V>
    1eb2:	88 23       	and	r24, r24
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <BatLimitsFromI2CtoEE+0x5a>
            {
                if (WriteEEBatLowLim())
    1eb6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <WriteEEBatLowLim>
    1eba:	81 11       	cpse	r24, r1
    1ebc:	e9 cf       	rjmp	.-46     	; 0x1e90 <BatLimitsFromI2CtoEE+0x2c>
                    bat_limit_loaded = BAT_LIM_LOADED;
                    return; // all done
                }
            }
        }
        LoadBatLimitsFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    1ebe:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <LoadBatLimitsFromEEPROM>
    1ec2:	08 95       	ret

00001ec4 <IsValidMorningThresholdFor12V>:
int daynight_evening_threshold;
unsigned long daynight_morning_debounce;
unsigned long daynight_evening_debounce;

uint8_t IsValidMorningThresholdFor12V(int *value) 
{
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	20 81       	ld	r18, Z
    1ec8:	31 81       	ldd	r19, Z+1	; 0x01
    1eca:	2b 53       	subi	r18, 0x3B	; 59
    1ecc:	31 09       	sbc	r19, r1
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	25 39       	cpi	r18, 0x95	; 149
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <IsValidMorningThresholdFor12V+0x14>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1ed8:	08 95       	ret

00001eda <IsValidEveningThresholdFor12V>:

uint8_t IsValidEveningThresholdFor12V(int *value) 
{
    1eda:	fc 01       	movw	r30, r24
    1edc:	20 81       	ld	r18, Z
    1ede:	31 81       	ldd	r19, Z+1	; 0x01
    1ee0:	29 51       	subi	r18, 0x19	; 25
    1ee2:	31 09       	sbc	r19, r1
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	20 35       	cpi	r18, 0x50	; 80
    1ee8:	31 05       	cpc	r19, r1
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <IsValidEveningThresholdFor12V+0x14>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1eee:	08 95       	ret

00001ef0 <IsValidMorningThresholdFor24V>:

uint8_t IsValidMorningThresholdFor24V(int *value) 
{
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	20 81       	ld	r18, Z
    1ef4:	31 81       	ldd	r19, Z+1	; 0x01
    1ef6:	26 57       	subi	r18, 0x76	; 118
    1ef8:	31 09       	sbc	r19, r1
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	29 32       	cpi	r18, 0x29	; 41
    1efe:	31 40       	sbci	r19, 0x01	; 1
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <IsValidMorningThresholdFor24V+0x14>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1f04:	08 95       	ret

00001f06 <IsValidEveningThresholdFor24V>:

uint8_t IsValidEveningThresholdFor24V(int *value) 
{
    1f06:	fc 01       	movw	r30, r24
    1f08:	20 81       	ld	r18, Z
    1f0a:	31 81       	ldd	r19, Z+1	; 0x01
    1f0c:	22 53       	subi	r18, 0x32	; 50
    1f0e:	31 09       	sbc	r19, r1
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	2e 39       	cpi	r18, 0x9E	; 158
    1f14:	31 05       	cpc	r19, r1
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <IsValidEveningThresholdFor24V+0x14>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1f1a:	08 95       	ret

00001f1c <IsValidEveningDebounce>:
        return 0;
    }
}

uint8_t IsValidEveningDebounce(unsigned long *value) 
{
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	40 81       	ld	r20, Z
    1f20:	51 81       	ldd	r21, Z+1	; 0x01
    1f22:	62 81       	ldd	r22, Z+2	; 0x02
    1f24:	73 81       	ldd	r23, Z+3	; 0x03
    1f26:	40 54       	subi	r20, 0x40	; 64
    1f28:	5f 41       	sbci	r21, 0x1F	; 31
    1f2a:	61 09       	sbc	r22, r1
    1f2c:	71 09       	sbc	r23, r1
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	41 34       	cpi	r20, 0x41	; 65
    1f32:	5f 4c       	sbci	r21, 0xCF	; 207
    1f34:	66 43       	sbci	r22, 0x36	; 54
    1f36:	71 05       	cpc	r23, r1
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <IsValidEveningDebounce+0x20>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1f3c:	08 95       	ret

00001f3e <WriteEEMorningThreshold>:

// wrtite daynight_morning_threshold (when morning debounce starts) to EEPROM
uint8_t WriteEEMorningThreshold() 
{
    uint16_t tmp_daynight_morning_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)); 
    1f3e:	86 e4       	ldi	r24, 0x46	; 70
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1f46:	f9 99       	sbic	0x1f, 1	; 31
    1f48:	0c c0       	rjmp	.+24     	; 0x1f62 <WriteEEMorningThreshold+0x24>
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
    1f4a:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <daynight_morning_threshold>
    1f4e:	70 91 ae 03 	lds	r23, 0x03AE	; 0x8003ae <daynight_morning_threshold+0x1>
    1f52:	86 17       	cp	r24, r22
    1f54:	97 07       	cpc	r25, r23
    1f56:	39 f0       	breq	.+14     	; 0x1f66 <WriteEEMorningThreshold+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
    1f58:	86 e4       	ldi	r24, 0x46	; 70
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <eeprom_update_word>
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <WriteEEMorningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	08 95       	ret
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
        }
        return 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f68:	08 95       	ret

00001f6a <WriteEEEveningThreshold>:

// wrtite daynight_evening_threshold (when evening debounce starts) to EEPROM
uint8_t WriteEEEveningThreshold() 
{
    uint16_t tmp_daynight_evening_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)); 
    1f6a:	88 e4       	ldi	r24, 0x48	; 72
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1f72:	f9 99       	sbic	0x1f, 1	; 31
    1f74:	0c c0       	rjmp	.+24     	; 0x1f8e <WriteEEEveningThreshold+0x24>
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
    1f76:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <daynight_evening_threshold>
    1f7a:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <daynight_evening_threshold+0x1>
    1f7e:	86 17       	cp	r24, r22
    1f80:	97 07       	cpc	r25, r23
    1f82:	39 f0       	breq	.+14     	; 0x1f92 <WriteEEEveningThreshold+0x28>
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
    1f84:	88 e4       	ldi	r24, 0x48	; 72
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <eeprom_update_word>
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <WriteEEEveningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	08 95       	ret
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
        {
            eeprom_update_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
        }
        return 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f94:	08 95       	ret

00001f96 <WriteEEMorningDebounce>:

// wrtite daynight_morning_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEMorningDebounce() 
{
    uint32_t tmp_daynight_morning_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)); 
    1f96:	8a e4       	ldi	r24, 0x4A	; 74
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1fa2:	f9 99       	sbic	0x1f, 1	; 31
    1fa4:	12 c0       	rjmp	.+36     	; 0x1fca <WriteEEMorningDebounce+0x34>
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
    1fa6:	40 91 b2 03 	lds	r20, 0x03B2	; 0x8003b2 <daynight_morning_debounce>
    1faa:	50 91 b3 03 	lds	r21, 0x03B3	; 0x8003b3 <daynight_morning_debounce+0x1>
    1fae:	60 91 b4 03 	lds	r22, 0x03B4	; 0x8003b4 <daynight_morning_debounce+0x2>
    1fb2:	70 91 b5 03 	lds	r23, 0x03B5	; 0x8003b5 <daynight_morning_debounce+0x3>
    1fb6:	84 17       	cp	r24, r20
    1fb8:	95 07       	cpc	r25, r21
    1fba:	a6 07       	cpc	r26, r22
    1fbc:	b7 07       	cpc	r27, r23
    1fbe:	39 f0       	breq	.+14     	; 0x1fce <WriteEEMorningDebounce+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
    1fc0:	8a e4       	ldi	r24, 0x4A	; 74
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_update_dword>
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <WriteEEMorningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
        }
        return 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1fd0:	08 95       	ret

00001fd2 <WriteEEEveningDebounce>:

// wrtite daynight_evening_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEEveningDebounce() 
{
    uint32_t tmp_daynight_evening_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)); 
    1fd2:	8e e4       	ldi	r24, 0x4E	; 78
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1fde:	f9 99       	sbic	0x1f, 1	; 31
    1fe0:	12 c0       	rjmp	.+36     	; 0x2006 <WriteEEEveningDebounce+0x34>
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
    1fe2:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <daynight_evening_debounce>
    1fe6:	50 91 aa 03 	lds	r21, 0x03AA	; 0x8003aa <daynight_evening_debounce+0x1>
    1fea:	60 91 ab 03 	lds	r22, 0x03AB	; 0x8003ab <daynight_evening_debounce+0x2>
    1fee:	70 91 ac 03 	lds	r23, 0x03AC	; 0x8003ac <daynight_evening_debounce+0x3>
    1ff2:	84 17       	cp	r24, r20
    1ff4:	95 07       	cpc	r25, r21
    1ff6:	a6 07       	cpc	r26, r22
    1ff8:	b7 07       	cpc	r27, r23
    1ffa:	39 f0       	breq	.+14     	; 0x200a <WriteEEEveningDebounce+0x38>
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
    1ffc:	8e e4       	ldi	r24, 0x4E	; 78
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_update_dword>
    2004:	02 c0       	rjmp	.+4      	; 0x200a <WriteEEEveningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	08 95       	ret
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
        {
            eeprom_update_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
        }
        return 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    200c:	08 95       	ret

0000200e <LoadDayNightValuesFromEEPROM>:

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	2c 97       	sbiw	r28, 0x0c	; 12
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    uint8_t use_defaults = 0;
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    202c:	86 e4       	ldi	r24, 0x46	; 70
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    2034:	7c 01       	movw	r14, r24
    2036:	9c 87       	std	Y+12, r25	; 0x0c
    2038:	8b 87       	std	Y+11, r24	; 0x0b
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    203a:	ce 01       	movw	r24, r28
    203c:	0b 96       	adiw	r24, 0x0b	; 11
    203e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <IsValidMorningThresholdFor12V>
    2042:	81 11       	cpse	r24, r1
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <LoadDayNightValuesFromEEPROM+0x44>
    2046:	ce 01       	movw	r24, r28
    2048:	0b 96       	adiw	r24, 0x0b	; 11
    204a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <IsValidMorningThresholdFor24V>
    204e:	88 23       	and	r24, r24
    2050:	31 f0       	breq	.+12     	; 0x205e <LoadDayNightValuesFromEEPROM+0x50>
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    2052:	f0 92 ae 03 	sts	0x03AE, r15	; 0x8003ae <daynight_morning_threshold+0x1>
    2056:	e0 92 ad 03 	sts	0x03AD, r14	; 0x8003ad <daynight_morning_threshold>
}

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    uint8_t use_defaults = 0;
    205a:	10 e0       	ldi	r17, 0x00	; 0
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <LoadDayNightValuesFromEEPROM+0x52>
    }
    else
    {
        use_defaults = 1;
    205e:	11 e0       	ldi	r17, 0x01	; 1
    }
    int tmp_daynight_evening_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)));
    2060:	88 e4       	ldi	r24, 0x48	; 72
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <eeprom_read_word>
    2068:	7c 01       	movw	r14, r24
    206a:	9a 87       	std	Y+10, r25	; 0x0a
    206c:	89 87       	std	Y+9, r24	; 0x09
    if ( (IsValidEveningThresholdFor12V(&tmp_daynight_evening_threshold) || IsValidEveningThresholdFor24V(&tmp_daynight_evening_threshold)) )
    206e:	ce 01       	movw	r24, r28
    2070:	09 96       	adiw	r24, 0x09	; 9
    2072:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <IsValidEveningThresholdFor12V>
    2076:	81 11       	cpse	r24, r1
    2078:	06 c0       	rjmp	.+12     	; 0x2086 <LoadDayNightValuesFromEEPROM+0x78>
    207a:	ce 01       	movw	r24, r28
    207c:	09 96       	adiw	r24, 0x09	; 9
    207e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <IsValidEveningThresholdFor24V>
    2082:	88 23       	and	r24, r24
    2084:	29 f0       	breq	.+10     	; 0x2090 <LoadDayNightValuesFromEEPROM+0x82>
    {
        daynight_evening_threshold = tmp_daynight_evening_threshold;
    2086:	f0 92 b1 03 	sts	0x03B1, r15	; 0x8003b1 <daynight_evening_threshold+0x1>
    208a:	e0 92 b0 03 	sts	0x03B0, r14	; 0x8003b0 <daynight_evening_threshold>
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <LoadDayNightValuesFromEEPROM+0x84>
    }
    else
    {
        use_defaults = 1;
    2090:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_morning_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)));
    2092:	8a e4       	ldi	r24, 0x4A	; 74
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    209a:	6b 01       	movw	r12, r22
    209c:	7c 01       	movw	r14, r24
    209e:	6d 83       	std	Y+5, r22	; 0x05
    20a0:	7e 83       	std	Y+6, r23	; 0x06
    20a2:	8f 83       	std	Y+7, r24	; 0x07
    20a4:	98 87       	std	Y+8, r25	; 0x08
    if ( IsValidMorningDebounce(&tmp_daynight_morning_debounce) )
    20a6:	ce 01       	movw	r24, r28
    20a8:	05 96       	adiw	r24, 0x05	; 5
    20aa:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <IsValidEveningDebounce>
    20ae:	88 23       	and	r24, r24
    20b0:	49 f0       	breq	.+18     	; 0x20c4 <LoadDayNightValuesFromEEPROM+0xb6>
    {
        daynight_morning_debounce = tmp_daynight_morning_debounce;
    20b2:	c0 92 b2 03 	sts	0x03B2, r12	; 0x8003b2 <daynight_morning_debounce>
    20b6:	d0 92 b3 03 	sts	0x03B3, r13	; 0x8003b3 <daynight_morning_debounce+0x1>
    20ba:	e0 92 b4 03 	sts	0x03B4, r14	; 0x8003b4 <daynight_morning_debounce+0x2>
    20be:	f0 92 b5 03 	sts	0x03B5, r15	; 0x8003b5 <daynight_morning_debounce+0x3>
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <LoadDayNightValuesFromEEPROM+0xb8>
    }
    else
    {
        use_defaults = 1;
    20c4:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    20c6:	8e e4       	ldi	r24, 0x4E	; 78
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    20ce:	6b 01       	movw	r12, r22
    20d0:	7c 01       	movw	r14, r24
    20d2:	69 83       	std	Y+1, r22	; 0x01
    20d4:	7a 83       	std	Y+2, r23	; 0x02
    20d6:	8b 83       	std	Y+3, r24	; 0x03
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    20da:	ce 01       	movw	r24, r28
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <IsValidEveningDebounce>
    20e2:	81 11       	cpse	r24, r1
    20e4:	25 c0       	rjmp	.+74     	; 0x2130 <LoadDayNightValuesFromEEPROM+0x122>
        use_defaults = 1;
    }
    if (use_defaults)
    {
        // default values are for 12V PV measured with ALT_V channel with 5V referance
        daynight_morning_threshold = 80; // 4.3/(((5.0)/1024.0)*(110.0/10.0))
    20e6:	80 e5       	ldi	r24, 0x50	; 80
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <daynight_morning_threshold+0x1>
    20ee:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <daynight_morning_threshold>
        daynight_evening_threshold = 40; // 2.15/(((5.0)/1024.0)*(110.0/10.0))
    20f2:	88 e2       	ldi	r24, 0x28	; 40
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <daynight_evening_threshold+0x1>
    20fa:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <daynight_evening_threshold>
        daynight_morning_debounce = 1200000UL; // 20 min
    20fe:	80 e8       	ldi	r24, 0x80	; 128
    2100:	9f e4       	ldi	r25, 0x4F	; 79
    2102:	a2 e1       	ldi	r26, 0x12	; 18
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <daynight_morning_debounce>
    210a:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <daynight_morning_debounce+0x1>
    210e:	a0 93 b4 03 	sts	0x03B4, r26	; 0x8003b4 <daynight_morning_debounce+0x2>
    2112:	b0 93 b5 03 	sts	0x03B5, r27	; 0x8003b5 <daynight_morning_debounce+0x3>
        daynight_evening_debounce = 1200000UL; // 20 min
    2116:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <daynight_evening_debounce>
    211a:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <daynight_evening_debounce+0x1>
    211e:	a0 93 ab 03 	sts	0x03AB, r26	; 0x8003ab <daynight_evening_debounce+0x2>
    2122:	b0 93 ac 03 	sts	0x03AC, r27	; 0x8003ac <daynight_evening_debounce+0x3>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <daynight_values_loaded>
        return 0;
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0d c0       	rjmp	.+26     	; 0x214a <LoadDayNightValuesFromEEPROM+0x13c>
        use_defaults = 1;
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    {
        daynight_evening_debounce = tmp_daynight_evening_debounce;
    2130:	c0 92 a9 03 	sts	0x03A9, r12	; 0x8003a9 <daynight_evening_debounce>
    2134:	d0 92 aa 03 	sts	0x03AA, r13	; 0x8003aa <daynight_evening_debounce+0x1>
    2138:	e0 92 ab 03 	sts	0x03AB, r14	; 0x8003ab <daynight_evening_debounce+0x2>
    213c:	f0 92 ac 03 	sts	0x03AC, r15	; 0x8003ac <daynight_evening_debounce+0x3>
    }
    else
    {
        use_defaults = 1;
    }
    if (use_defaults)
    2140:	11 11       	cpse	r17, r1
    2142:	d1 cf       	rjmp	.-94     	; 0x20e6 <LoadDayNightValuesFromEEPROM+0xd8>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
        return 0;
    }
    else
    {
        daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    2144:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <daynight_values_loaded>
        return 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    214a:	2c 96       	adiw	r28, 0x0c	; 12
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	ff 90       	pop	r15
    215e:	ef 90       	pop	r14
    2160:	df 90       	pop	r13
    2162:	cf 90       	pop	r12
    2164:	08 95       	ret

00002166 <DayNightValuesFromI2CtoEE>:

// Save day-night state machine values from I2C to EEPROM (if valid), one will change per loop, and I2C will take several loop cycles to get another.
void DayNightValuesFromI2CtoEE(void)
{
    if (daynight_values_loaded > DAYNIGHT_VALUES_DEFAULT)
    2166:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <daynight_values_loaded>
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	08 f4       	brcc	.+2      	; 0x2170 <DayNightValuesFromI2CtoEE+0xa>
    216e:	47 c0       	rjmp	.+142    	; 0x21fe <DayNightValuesFromI2CtoEE+0x98>
    {
        if (daynight_values_loaded == DAYNIGHT_MORNING_THRESHOLD_TOSAVE)
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	99 f4       	brne	.+38     	; 0x219a <DayNightValuesFromI2CtoEE+0x34>
        {
            if ( IsValidMorningThresholdFor12V(&daynight_morning_threshold) || IsValidMorningThresholdFor24V(&daynight_morning_threshold) )
    2174:	8d ea       	ldi	r24, 0xAD	; 173
    2176:	93 e0       	ldi	r25, 0x03	; 3
    2178:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <IsValidMorningThresholdFor12V>
    217c:	81 11       	cpse	r24, r1
    217e:	06 c0       	rjmp	.+12     	; 0x218c <DayNightValuesFromI2CtoEE+0x26>
    2180:	8d ea       	ldi	r24, 0xAD	; 173
    2182:	93 e0       	ldi	r25, 0x03	; 3
    2184:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <IsValidMorningThresholdFor24V>
    2188:	88 23       	and	r24, r24
    218a:	39 f0       	breq	.+14     	; 0x219a <DayNightValuesFromI2CtoEE+0x34>
            {
                if (WriteEEMorningThreshold())
    218c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <WriteEEMorningThreshold>
    2190:	88 23       	and	r24, r24
    2192:	19 f0       	breq	.+6      	; 0x219a <DayNightValuesFromI2CtoEE+0x34>
                {
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    2194:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <daynight_values_loaded>
                    return; // all done
    2198:	08 95       	ret
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_THRESHOLD_TOSAVE)
    219a:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <daynight_values_loaded>
    219e:	83 30       	cpi	r24, 0x03	; 3
    21a0:	81 f4       	brne	.+32     	; 0x21c2 <DayNightValuesFromI2CtoEE+0x5c>
        {    
            if ( IsValidEveningThresholdFor12V(&daynight_evening_threshold) || IsValidEveningThresholdFor24V(&daynight_evening_threshold) )
    21a2:	80 eb       	ldi	r24, 0xB0	; 176
    21a4:	93 e0       	ldi	r25, 0x03	; 3
    21a6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <IsValidEveningThresholdFor12V>
    21aa:	81 11       	cpse	r24, r1
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <DayNightValuesFromI2CtoEE+0x54>
    21ae:	80 eb       	ldi	r24, 0xB0	; 176
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <IsValidEveningThresholdFor24V>
    21b6:	88 23       	and	r24, r24
    21b8:	21 f0       	breq	.+8      	; 0x21c2 <DayNightValuesFromI2CtoEE+0x5c>
            {
                if (WriteEEEveningThreshold())
    21ba:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <WriteEEEveningThreshold>
    21be:	81 11       	cpse	r24, r1
    21c0:	e9 cf       	rjmp	.-46     	; 0x2194 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_MORNING_DEBOUNCE_TOSAVE)
    21c2:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <daynight_values_loaded>
    21c6:	84 30       	cpi	r24, 0x04	; 4
    21c8:	51 f4       	brne	.+20     	; 0x21de <DayNightValuesFromI2CtoEE+0x78>
        {
            if ( IsValidMorningDebounce(&daynight_morning_debounce) )
    21ca:	82 eb       	ldi	r24, 0xB2	; 178
    21cc:	93 e0       	ldi	r25, 0x03	; 3
    21ce:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <IsValidEveningDebounce>
    21d2:	88 23       	and	r24, r24
    21d4:	21 f0       	breq	.+8      	; 0x21de <DayNightValuesFromI2CtoEE+0x78>
            {
                if (WriteEEMorningDebounce())
    21d6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <WriteEEMorningDebounce>
    21da:	81 11       	cpse	r24, r1
    21dc:	db cf       	rjmp	.-74     	; 0x2194 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        if (daynight_values_loaded == DAYNIGHT_EVENING_DEBOUNCE_TOSAVE)
    21de:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <daynight_values_loaded>
    21e2:	85 30       	cpi	r24, 0x05	; 5
    21e4:	51 f4       	brne	.+20     	; 0x21fa <DayNightValuesFromI2CtoEE+0x94>
        {
            if ( IsValidEveningDebounce(&daynight_evening_debounce) )
    21e6:	89 ea       	ldi	r24, 0xA9	; 169
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <IsValidEveningDebounce>
    21ee:	88 23       	and	r24, r24
    21f0:	21 f0       	breq	.+8      	; 0x21fa <DayNightValuesFromI2CtoEE+0x94>
            {
                if (WriteEEEveningDebounce())
    21f2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <WriteEEEveningDebounce>
    21f6:	81 11       	cpse	r24, r1
    21f8:	cd cf       	rjmp	.-102    	; 0x2194 <DayNightValuesFromI2CtoEE+0x2e>
                    daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                    return; // all done
                }
            }
        }
        LoadDayNightValuesFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    21fa:	0c 94 07 10 	jmp	0x200e	; 0x200e <LoadDayNightValuesFromEEPROM>
    21fe:	08 95       	ret

00002200 <check_daynight>:
    bit 6 is set when day_work needs done
    bit 5 is used with I2C, which if a 1 is passed then bits 7 and 6 are returned with the state
    bit 4 is used with I2C, which if set with the bytes from master/host will clear bits 7 and 6 if they are also clear on the data byte from master/host.
*/
void check_daynight(void)
{
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    // check light on solar pannel with ALT_V, reading are only taken when !ALT_EN.
    int sensor_val = analogRead(ALT_V);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	0e 94 cd 11 	call	0x239a	; 0x239a <analogRead>
    2212:	ec 01       	movw	r28, r24
    unsigned long kRuntime= millis() - dayTmrStarted;
    2214:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    2218:	c0 90 b8 03 	lds	r12, 0x03B8	; 0x8003b8 <dayTmrStarted>
    221c:	d0 90 b9 03 	lds	r13, 0x03B9	; 0x8003b9 <dayTmrStarted+0x1>
    2220:	e0 90 ba 03 	lds	r14, 0x03BA	; 0x8003ba <dayTmrStarted+0x2>
    2224:	f0 90 bb 03 	lds	r15, 0x03BB	; 0x8003bb <dayTmrStarted+0x3>
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	2c 19       	sub	r18, r12
    222e:	3d 09       	sbc	r19, r13
    2230:	4e 09       	sbc	r20, r14
    2232:	5f 09       	sbc	r21, r15
    2234:	69 01       	movw	r12, r18
    2236:	7a 01       	movw	r14, r20
    
    if(daynight_state == DAYNIGHT_START_STATE) 
    2238:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <daynight_state>
    223c:	81 11       	cpse	r24, r1
    223e:	1f c0       	rjmp	.+62     	; 0x227e <check_daynight+0x7e>
    { 
        if (kRuntime > STARTUP_DELAY) 
    2240:	39 ef       	ldi	r19, 0xF9	; 249
    2242:	c3 16       	cp	r12, r19
    2244:	3a e2       	ldi	r19, 0x2A	; 42
    2246:	d3 06       	cpc	r13, r19
    2248:	e1 04       	cpc	r14, r1
    224a:	f1 04       	cpc	r15, r1
    224c:	08 f4       	brcc	.+2      	; 0x2250 <check_daynight+0x50>
    224e:	9e c0       	rjmp	.+316    	; 0x238c <check_daynight+0x18c>
        {
            if(sensor_val > daynight_evening_threshold ) 
    2250:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <daynight_evening_threshold>
    2254:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <daynight_evening_threshold+0x1>
    2258:	8c 17       	cp	r24, r28
    225a:	9d 07       	cpc	r25, r29
    225c:	14 f4       	brge	.+4      	; 0x2262 <check_daynight+0x62>
            {
                daynight_state = DAYNIGHT_DAY_STATE; 
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <check_daynight+0x64>
                dayTmrStarted = millis();
            } 
            else 
            {
                daynight_state = DAYNIGHT_NIGHT_STATE;
    2262:	84 e0       	ldi	r24, 0x04	; 4
    2264:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <daynight_state>
                dayTmrStarted = millis();
    2268:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    226c:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <dayTmrStarted>
    2270:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <dayTmrStarted+0x1>
    2274:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <dayTmrStarted+0x2>
    2278:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <dayTmrStarted+0x3>
    227c:	87 c0       	rjmp	.+270    	; 0x238c <check_daynight+0x18c>
            }
        }
        return;
    } 
  
    if(daynight_state == DAYNIGHT_DAY_STATE) 
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	f9 f4       	brne	.+62     	; 0x22c0 <check_daynight+0xc0>
    { //day
        if (sensor_val < daynight_evening_threshold ) 
    2282:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <daynight_evening_threshold>
    2286:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <daynight_evening_threshold+0x1>
    228a:	c8 17       	cp	r28, r24
    228c:	d9 07       	cpc	r29, r25
    228e:	6c f4       	brge	.+26     	; 0x22aa <check_daynight+0xaa>
        {
            daynight_state = DAYNIGHT_EVENING_DEBOUNCE_STATE;
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <daynight_state>
            dayTmrStarted = millis();
    2296:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    229a:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <dayTmrStarted>
    229e:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <dayTmrStarted+0x1>
    22a2:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <dayTmrStarted+0x2>
    22a6:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <dayTmrStarted+0x3>
        }
        if (kRuntime > DAYNIGHT_TO_LONG) 
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	c4 16       	cp	r12, r20
    22ae:	42 ea       	ldi	r20, 0xA2	; 162
    22b0:	d4 06       	cpc	r13, r20
    22b2:	4a e4       	ldi	r20, 0x4A	; 74
    22b4:	e4 06       	cpc	r14, r20
    22b6:	44 e0       	ldi	r20, 0x04	; 4
    22b8:	f4 06       	cpc	r15, r20
    22ba:	08 f4       	brcc	.+2      	; 0x22be <check_daynight+0xbe>
    22bc:	67 c0       	rjmp	.+206    	; 0x238c <check_daynight+0x18c>
    22be:	3e c0       	rjmp	.+124    	; 0x233c <check_daynight+0x13c>
            dayTmrStarted = millis();
        }
        return;
    }
  
    if(daynight_state == DAYNIGHT_EVENING_DEBOUNCE_STATE) 
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	b9 f4       	brne	.+46     	; 0x22f2 <check_daynight+0xf2>
    { //evening_debounce
        if (sensor_val < daynight_evening_threshold ) 
    22c4:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <daynight_evening_threshold>
    22c8:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <daynight_evening_threshold+0x1>
    22cc:	c8 17       	cp	r28, r24
    22ce:	d9 07       	cpc	r29, r25
    22d0:	34 f6       	brge	.-116    	; 0x225e <check_daynight+0x5e>
        {
            if (kRuntime > daynight_evening_debounce) 
    22d2:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <daynight_evening_debounce>
    22d6:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <daynight_evening_debounce+0x1>
    22da:	a0 91 ab 03 	lds	r26, 0x03AB	; 0x8003ab <daynight_evening_debounce+0x2>
    22de:	b0 91 ac 03 	lds	r27, 0x03AC	; 0x8003ac <daynight_evening_debounce+0x3>
    22e2:	82 17       	cp	r24, r18
    22e4:	93 07       	cpc	r25, r19
    22e6:	a4 07       	cpc	r26, r20
    22e8:	b5 07       	cpc	r27, r21
    22ea:	08 f0       	brcs	.+2      	; 0x22ee <check_daynight+0xee>
    22ec:	4f c0       	rjmp	.+158    	; 0x238c <check_daynight+0x18c>
            {
                daynight_state = DAYNIGHT_NIGHTWORK_STATE;
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	b9 cf       	rjmp	.-142    	; 0x2264 <check_daynight+0x64>
            dayTmrStarted = millis();
        }
        return;
    }

    if(daynight_state == DAYNIGHT_NIGHTWORK_STATE) 
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	21 f4       	brne	.+8      	; 0x22fe <check_daynight+0xfe>
    { //work befor night
        //set the night work bit 7
        daynight_work = 0x80; // note the day work bit 6 is clear
    22f6:	80 e8       	ldi	r24, 0x80	; 128
    22f8:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <daynight_work>
    22fc:	39 c0       	rjmp	.+114    	; 0x2370 <check_daynight+0x170>
        daynight_state = DAYNIGHT_NIGHT_STATE;
        return;
    }

    if(daynight_state == DAYNIGHT_NIGHT_STATE) 
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	f9 f4       	brne	.+62     	; 0x2340 <check_daynight+0x140>
    { //night
        if (sensor_val > daynight_morning_threshold ) 
    2302:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <daynight_morning_threshold>
    2306:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <daynight_morning_threshold+0x1>
    230a:	8c 17       	cp	r24, r28
    230c:	9d 07       	cpc	r25, r29
    230e:	6c f4       	brge	.+26     	; 0x232a <check_daynight+0x12a>
        {
            daynight_state = DAYNIGHT_MORNING_DEBOUNCE_STATE;
    2310:	85 e0       	ldi	r24, 0x05	; 5
    2312:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <daynight_state>
            dayTmrStarted = millis();
    2316:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    231a:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <dayTmrStarted>
    231e:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <dayTmrStarted+0x1>
    2322:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <dayTmrStarted+0x2>
    2326:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <dayTmrStarted+0x3>
        }
        if (kRuntime > DAYNIGHT_TO_LONG) 
    232a:	51 e0       	ldi	r21, 0x01	; 1
    232c:	c5 16       	cp	r12, r21
    232e:	52 ea       	ldi	r21, 0xA2	; 162
    2330:	d5 06       	cpc	r13, r21
    2332:	5a e4       	ldi	r21, 0x4A	; 74
    2334:	e5 06       	cpc	r14, r21
    2336:	54 e0       	ldi	r21, 0x04	; 4
    2338:	f5 06       	cpc	r15, r21
    233a:	40 f1       	brcs	.+80     	; 0x238c <check_daynight+0x18c>
        {
            daynight_state = DAYNIGHT_FAIL_STATE;
    233c:	87 e0       	ldi	r24, 0x07	; 7
    233e:	92 cf       	rjmp	.-220    	; 0x2264 <check_daynight+0x64>
            dayTmrStarted = millis();
        }
        return;
    }

    if(daynight_state == DAYNIGHT_MORNING_DEBOUNCE_STATE) 
    2340:	85 30       	cpi	r24, 0x05	; 5
    2342:	c1 f4       	brne	.+48     	; 0x2374 <check_daynight+0x174>
    { //morning_debounce
        if (sensor_val > daynight_morning_threshold ) 
    2344:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <daynight_morning_threshold>
    2348:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <daynight_morning_threshold+0x1>
    234c:	8c 17       	cp	r24, r28
    234e:	9d 07       	cpc	r25, r29
    2350:	7c f4       	brge	.+30     	; 0x2370 <check_daynight+0x170>
        {
            if (kRuntime > daynight_morning_debounce) 
    2352:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <daynight_morning_debounce>
    2356:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <daynight_morning_debounce+0x1>
    235a:	a0 91 b4 03 	lds	r26, 0x03B4	; 0x8003b4 <daynight_morning_debounce+0x2>
    235e:	b0 91 b5 03 	lds	r27, 0x03B5	; 0x8003b5 <daynight_morning_debounce+0x3>
    2362:	82 17       	cp	r24, r18
    2364:	93 07       	cpc	r25, r19
    2366:	a4 07       	cpc	r26, r20
    2368:	b5 07       	cpc	r27, r21
    236a:	80 f4       	brcc	.+32     	; 0x238c <check_daynight+0x18c>
            {
                daynight_state = DAYNIGHT_DAYWORK_STATE;
    236c:	86 e0       	ldi	r24, 0x06	; 6
    236e:	0c c0       	rjmp	.+24     	; 0x2388 <check_daynight+0x188>
            }
        }
        else 
        {
            daynight_state = DAYNIGHT_NIGHT_STATE;
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	0a c0       	rjmp	.+20     	; 0x2388 <check_daynight+0x188>
        }
        return;
    }

    if(daynight_state == DAYNIGHT_DAYWORK_STATE) 
    2374:	86 30       	cpi	r24, 0x06	; 6
    2376:	29 f4       	brne	.+10     	; 0x2382 <check_daynight+0x182>
    { //work befor day
        //set the day work bit 6
        daynight_work = 0x40; // and clear the night work bit 7
    2378:	80 e4       	ldi	r24, 0x40	; 64
    237a:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <daynight_work>
        daynight_state = DAYNIGHT_DAY_STATE;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <check_daynight+0x188>
        return;
    }

    //fail state can be restart by clearing status bit 6 with i2c command 7
    if(daynight_state > DAYNIGHT_FAIL_STATE) 
    2382:	87 30       	cpi	r24, 0x07	; 7
    2384:	19 f0       	breq	.+6      	; 0x238c <check_daynight+0x18c>
    { 
        daynight_state = DAYNIGHT_FAIL_STATE;
    2386:	87 e0       	ldi	r24, 0x07	; 7
    2388:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <daynight_state>
        return;
    }
    return;
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	08 95       	ret

0000239a <analogRead>:
// uses interrupt driven buffer when available
// otherwise does busy waiting
// api is a well know LGPL software, respect it as such.
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    239a:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <ADC_auto_conversion>
    239e:	99 23       	and	r25, r25
    23a0:	61 f0       	breq	.+24     	; 0x23ba <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    23a2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23a4:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    23a6:	e8 2f       	mov	r30, r24
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	e2 54       	subi	r30, 0x42	; 66
    23b0:	fc 4f       	sbci	r31, 0xFC	; 252
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    23b6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    23b8:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    23ba:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    23be:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    23c0:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    23c4:	e8 2f       	mov	r30, r24
    23c6:	e7 70       	andi	r30, 0x07	; 7
    23c8:	82 2f       	mov	r24, r18
    23ca:	89 2b       	or	r24, r25
    23cc:	e8 2b       	or	r30, r24
    23ce:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    23d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23d6:	80 64       	ori	r24, 0x40	; 64
    23d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    23dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23e0:	86 fd       	sbrc	r24, 6
    23e2:	fc cf       	rjmp	.-8      	; 0x23dc <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    23e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    23e8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    23f0:	08 95       	ret

000023f2 <__vector_21>:
volatile uint8_t adc_isr_status;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
    23fc:	2f 93       	push	r18
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	ef 93       	push	r30
    2404:	ff 93       	push	r31
    adc[adc_channel] = ADC;
    2406:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <adc_channel>
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2410:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	e2 54       	subi	r30, 0x42	; 66
    241a:	fc 4f       	sbci	r31, 0xFC	; 252
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    
    ++adc_channel;
    2420:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <adc_channel>
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <adc_channel>
    
    // ch 0 is ALT_I, always read
    // ch 1 is ALT_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 1) && digitalRead(ALT_EN) )
    242a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <adc_channel>
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	29 f4       	brne	.+10     	; 0x243c <__vector_21+0x4a>
    2432:	1b 9b       	sbis	0x03, 3	; 3
    2434:	03 c0       	rjmp	.+6      	; 0x243c <__vector_21+0x4a>
    {
        adc_channel = 6; // skip channel 1
    2436:	86 e0       	ldi	r24, 0x06	; 6
    2438:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <adc_channel>
    }
    // skip channels 3..5
    if (adc_channel == 2)
    243c:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <adc_channel>
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	19 f4       	brne	.+6      	; 0x244a <__vector_21+0x58>
    {
        adc_channel = 6;
    2444:	86 e0       	ldi	r24, 0x06	; 6
    2446:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <adc_channel>
    }
    // ch 6 is PWR_I, always read
    // ch 7 is PWR_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 7) && digitalRead(ALT_EN) )
    244a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <adc_channel>
    244e:	87 30       	cpi	r24, 0x07	; 7
    2450:	29 f4       	brne	.+10     	; 0x245c <__vector_21+0x6a>
    2452:	1b 9b       	sbis	0x03, 3	; 3
    2454:	03 c0       	rjmp	.+6      	; 0x245c <__vector_21+0x6a>
    {
        adc_channel = 8; // skip channel 7
    2456:	88 e0       	ldi	r24, 0x08	; 8
    2458:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <adc_channel>
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    245c:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <adc_channel>
    2460:	88 30       	cpi	r24, 0x08	; 8
    2462:	b0 f4       	brcc	.+44     	; 0x2490 <__vector_21+0x9e>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2464:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2468:	80 7f       	andi	r24, 0xF0	; 240
    246a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    246e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2472:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <analog_reference>
    2476:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <adc_channel>
    247a:	8f 71       	andi	r24, 0x1F	; 31
    247c:	82 2b       	or	r24, r18
    247e:	89 0f       	add	r24, r25
    2480:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    2484:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2488:	80 64       	ori	r24, 0x40	; 64
    248a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    248e:	09 c0       	rjmp	.+18     	; 0x24a2 <__vector_21+0xb0>
        adc_channel = 8; // skip channel 7
    }
    
    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    2490:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <adc_channel>
        adc_isr_status = ISR_ADCBURST_DONE; // mark to notify burst is done
    2494:	8f e7       	ldi	r24, 0x7F	; 127
    2496:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <adc_isr_status>
        if (!free_running)
    249a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <free_running>
    249e:	81 11       	cpse	r24, r1
    24a0:	e1 cf       	rjmp	.-62     	; 0x2464 <__vector_21+0x72>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30
    24a6:	9f 91       	pop	r25
    24a8:	8f 91       	pop	r24
    24aa:	2f 91       	pop	r18
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	0f 90       	pop	r0
    24b2:	1f 90       	pop	r1
    24b4:	18 95       	reti

000024b6 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a user pin.
    analog_reference = reference;
    24b6:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <analog_reference>
    free_running = 0;
    24ba:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    24be:	ec e7       	ldi	r30, 0x7C	; 124
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    24c4:	90 73       	andi	r25, 0x30	; 48
    24c6:	89 2b       	or	r24, r25
    24c8:	80 83       	st	Z, r24
    
// On most avr5 core chips the adc_clock needs to run between 50kHz<adc_clock<200kHz
// for maximum resolution
#if defined(ADCSRA)
	#if (50000 < F_CPU/128) && (F_CPU/128 < 200000 ) // set prescaler /128
		ADCSRA |= (1<<ADPS2);
    24ca:	ea e7       	ldi	r30, 0x7A	; 122
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	84 60       	ori	r24, 0x04	; 4
    24d2:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    24d4:	80 81       	ld	r24, Z
    24d6:	82 60       	ori	r24, 0x02	; 2
    24d8:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS0);
    24da:	80 81       	ld	r24, Z
    24dc:	81 60       	ori	r24, 0x01	; 1
    24de:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
    #else 
    #   error can not set adc_clock for maximum resolution
	#endif
	ADCSRA |= (1<<ADEN); // enable adc conversion
    24e0:	80 81       	ld	r24, Z
    24e2:	80 68       	ori	r24, 0x80	; 128
    24e4:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0; 
    24e6:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <ADC_auto_conversion>
    24ea:	08 95       	ret

000024ec <enable_ADC_auto_conversion>:
// to select reference and set the adc_clock pre-scaler. This call will start 
// taking readings on each channel the ISR iterates over and holds the result 
// in a buffer.
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    24ec:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <adc_channel>
    adc_isr_status = ISR_ADCBURST_START; // mark so we know new readings are arriving
    24f0:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <adc_isr_status>
    free_running = free_run;
    24f4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <free_running>

#if defined(ADCSRA)
	// Power up the ADC and set it for conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    24f8:	ea e7       	ldi	r30, 0x7A	; 122
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	87 75       	andi	r24, 0x57	; 87
    2500:	88 68       	ori	r24, 0x88	; 136
    2502:	80 83       	st	Z, r24

    // Start the first Conversion (ISR will start each one after the previous is done)
    ADCSRA |= (1<<ADSC);
    2504:	80 81       	ld	r24, Z
    2506:	80 64       	ori	r24, 0x40	; 64
    2508:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <ADC_auto_conversion>
    2510:	08 95       	ret

00002512 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2512:	1f 92       	push	r1
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	0f 92       	push	r0
    251a:	11 24       	eor	r1, r1
    251c:	2f 93       	push	r18
    251e:	3f 93       	push	r19
    2520:	8f 93       	push	r24
    2522:	9f 93       	push	r25
    2524:	af 93       	push	r26
    2526:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2528:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <timer0_millis>
    252c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <timer0_millis+0x1>
    2530:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <timer0_millis+0x2>
    2534:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2538:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    253c:	2d e2       	ldi	r18, 0x2D	; 45
    253e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2540:	2d 37       	cpi	r18, 0x7D	; 125
    2542:	20 f4       	brcc	.+8      	; 0x254c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	a1 1d       	adc	r26, r1
    2548:	b1 1d       	adc	r27, r1
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    254c:	20 eb       	ldi	r18, 0xB0	; 176
    254e:	23 0f       	add	r18, r19
		m += 1;
    2550:	02 96       	adiw	r24, 0x02	; 2
    2552:	a1 1d       	adc	r26, r1
    2554:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2556:	20 93 b1 01 	sts	0x01B1, r18	; 0x8001b1 <timer0_fract>
	timer0_millis = m;
    255a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <timer0_millis>
    255e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <timer0_millis+0x1>
    2562:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <timer0_millis+0x2>
    2566:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <timer0_millis+0x3>
	timer0_overflow_count++;
    256a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_overflow_count>
    256e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x1>
    2572:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <timer0_overflow_count+0x2>
    2576:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <timer0_overflow_count+0x3>
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	a1 1d       	adc	r26, r1
    257e:	b1 1d       	adc	r27, r1
    2580:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <timer0_overflow_count>
    2584:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <timer0_overflow_count+0x1>
    2588:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <timer0_overflow_count+0x2>
    258c:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <timer0_overflow_count+0x3>
}
    2590:	bf 91       	pop	r27
    2592:	af 91       	pop	r26
    2594:	9f 91       	pop	r25
    2596:	8f 91       	pop	r24
    2598:	3f 91       	pop	r19
    259a:	2f 91       	pop	r18
    259c:	0f 90       	pop	r0
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	0f 90       	pop	r0
    25a2:	1f 90       	pop	r1
    25a4:	18 95       	reti

000025a6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    25a6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    25a8:	f8 94       	cli
	m = timer0_millis;
    25aa:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <timer0_millis>
    25ae:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <timer0_millis+0x1>
    25b2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_millis+0x2>
    25b6:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_millis+0x3>
	SREG = oldSREG;
    25ba:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    25bc:	08 95       	ret

000025be <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    25be:	84 b5       	in	r24, 0x24	; 36
    25c0:	82 60       	ori	r24, 0x02	; 2
    25c2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    25c4:	84 b5       	in	r24, 0x24	; 36
    25c6:	81 60       	ori	r24, 0x01	; 1
    25c8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    25ca:	85 b5       	in	r24, 0x25	; 37
    25cc:	82 60       	ori	r24, 0x02	; 2
    25ce:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    25d0:	85 b5       	in	r24, 0x25	; 37
    25d2:	81 60       	ori	r24, 0x01	; 1
    25d4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    25d6:	ee e6       	ldi	r30, 0x6E	; 110
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	81 60       	ori	r24, 0x01	; 1
    25de:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    25e0:	e1 e8       	ldi	r30, 0x81	; 129
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    25e6:	80 81       	ld	r24, Z
    25e8:	82 60       	ori	r24, 0x02	; 2
    25ea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    25ec:	80 81       	ld	r24, Z
    25ee:	81 60       	ori	r24, 0x01	; 1
    25f0:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    25f2:	e0 e8       	ldi	r30, 0x80	; 128
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	81 60       	ori	r24, 0x01	; 1
    25fa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    25fc:	e1 eb       	ldi	r30, 0xB1	; 177
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	84 60       	ori	r24, 0x04	; 4
    2604:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    2606:	e0 eb       	ldi	r30, 0xB0	; 176
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	81 60       	ori	r24, 0x01	; 1
    260e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    2610:	e1 e9       	ldi	r30, 0x91	; 145
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	82 60       	ori	r24, 0x02	; 2
    2618:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    261a:	80 81       	ld	r24, Z
    261c:	81 60       	ori	r24, 0x01	; 1
    261e:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2620:	e0 e9       	ldi	r30, 0x90	; 144
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	81 60       	ori	r24, 0x01	; 1
    2628:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    262a:	e1 ea       	ldi	r30, 0xA1	; 161
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	82 60       	ori	r24, 0x02	; 2
    2632:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    2634:	80 81       	ld	r24, Z
    2636:	81 60       	ori	r24, 0x01	; 1
    2638:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    263a:	e0 ea       	ldi	r30, 0xA0	; 160
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	81 60       	ori	r24, 0x01	; 1
    2642:	80 83       	st	Z, r24
    2644:	08 95       	ret

00002646 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    2646:	08 95       	ret

00002648 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2648:	08 95       	ret

0000264a <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    264a:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <twi0_state>
    twi0_sendStop = 1;		// default value
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <twi0_sendStop>
    twi0_inRepStart = 0;
    2654:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <twi0_inRepStart>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2658:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    265a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    265c:	3d 98       	cbi	0x07, 5	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    265e:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2660:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2662:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2664:	3c 98       	cbi	0x07, 4	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2666:	9f bf       	out	0x3f, r25	; 63
    pinMode(SCL0,INPUT); // DDRC &= ~(1 << DDC4)
    pinMode(SDA0,INPUT); // DDRC &= ~(1 << DDC5)

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2668:	88 23       	and	r24, r24
    266a:	41 f0       	breq	.+16     	; 0x267c <twi0_init+0x32>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    266c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    266e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2670:	45 9a       	sbi	0x08, 5	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2672:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2674:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2676:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2678:	44 9a       	sbi	0x08, 4	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    267a:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(SCL0,HIGH); // PORTC |= (1 << PORTC4) weak pullup
        digitalWrite(SDA0,HIGH); // PORTC |= (1 << PORTC5) weak pullup
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    267c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2680:	8e 7f       	andi	r24, 0xFE	; 254
    2682:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    2686:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    268a:	8d 7f       	andi	r24, 0xFD	; 253
    268c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    2690:	84 e3       	ldi	r24, 0x34	; 52
    2692:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2696:	85 e4       	ldi	r24, 0x45	; 69
    2698:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    269c:	08 95       	ret

0000269e <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    269e:	88 0f       	add	r24, r24
    26a0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    26a4:	08 95       	ret

000026a6 <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    26a6:	61 32       	cpi	r22, 0x21	; 33
    26a8:	98 f4       	brcc	.+38     	; 0x26d0 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    26aa:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <twi0_state>
    26ae:	24 30       	cpi	r18, 0x04	; 4
    26b0:	89 f4       	brne	.+34     	; 0x26d4 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    26b2:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <twi0_txBufferLength>
    26b6:	28 2f       	mov	r18, r24
    26b8:	ae ed       	ldi	r26, 0xDE	; 222
    26ba:	b1 e0       	ldi	r27, 0x01	; 1
    for(i = 0; i < length; ++i)
    26bc:	fc 01       	movw	r30, r24
    26be:	8e 2f       	mov	r24, r30
    26c0:	82 1b       	sub	r24, r18
    26c2:	86 17       	cp	r24, r22
    26c4:	18 f4       	brcc	.+6      	; 0x26cc <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    26c6:	81 91       	ld	r24, Z+
    26c8:	8d 93       	st	X+, r24
    26ca:	f9 cf       	rjmp	.-14     	; 0x26be <twi0_transmit+0x18>
    }
  
    return 0;
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    26d6:	08 95       	ret

000026d8 <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    26d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    26dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    26e0:	08 95       	ret

000026e2 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    26e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <twi0_onSlaveTransmit+0x1>
    26e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <twi0_onSlaveTransmit>
    26ea:	08 95       	ret

000026ec <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    26ec:	85 ed       	ldi	r24, 0xD5	; 213
    26ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    26f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    26f6:	84 fd       	sbrc	r24, 4
    26f8:	fc cf       	rjmp	.-8      	; 0x26f2 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    26fa:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <twi0_state>
    26fe:	08 95       	ret

00002700 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2700:	85 ec       	ldi	r24, 0xC5	; 197
    2702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    2706:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <twi0_state>
    270a:	08 95       	ret

0000270c <__vector_24>:
}

ISR(TWI0_vect)
{
    270c:	1f 92       	push	r1
    270e:	0f 92       	push	r0
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	0f 92       	push	r0
    2714:	11 24       	eor	r1, r1
    2716:	2f 93       	push	r18
    2718:	3f 93       	push	r19
    271a:	4f 93       	push	r20
    271c:	5f 93       	push	r21
    271e:	6f 93       	push	r22
    2720:	7f 93       	push	r23
    2722:	8f 93       	push	r24
    2724:	9f 93       	push	r25
    2726:	af 93       	push	r26
    2728:	bf 93       	push	r27
    272a:	ef 93       	push	r30
    272c:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    272e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2732:	88 7f       	andi	r24, 0xF8	; 248
    2734:	80 36       	cpi	r24, 0x60	; 96
    2736:	09 f4       	brne	.+2      	; 0x273a <__vector_24+0x2e>
    2738:	9e c0       	rjmp	.+316    	; 0x2876 <__vector_24+0x16a>
    273a:	78 f5       	brcc	.+94     	; 0x279a <__vector_24+0x8e>
    273c:	88 32       	cpi	r24, 0x28	; 40
    273e:	09 f4       	brne	.+2      	; 0x2742 <__vector_24+0x36>
    2740:	5d c0       	rjmp	.+186    	; 0x27fc <__vector_24+0xf0>
    2742:	90 f4       	brcc	.+36     	; 0x2768 <__vector_24+0x5c>
    2744:	80 31       	cpi	r24, 0x10	; 16
    2746:	09 f4       	brne	.+2      	; 0x274a <__vector_24+0x3e>
    2748:	56 c0       	rjmp	.+172    	; 0x27f6 <__vector_24+0xea>
    274a:	38 f4       	brcc	.+14     	; 0x275a <__vector_24+0x4e>
    274c:	88 23       	and	r24, r24
    274e:	09 f4       	brne	.+2      	; 0x2752 <__vector_24+0x46>
    2750:	f5 c0       	rjmp	.+490    	; 0x293c <__vector_24+0x230>
    2752:	88 30       	cpi	r24, 0x08	; 8
    2754:	09 f4       	brne	.+2      	; 0x2758 <__vector_24+0x4c>
    2756:	4f c0       	rjmp	.+158    	; 0x27f6 <__vector_24+0xea>
    2758:	f5 c0       	rjmp	.+490    	; 0x2944 <__vector_24+0x238>
    275a:	88 31       	cpi	r24, 0x18	; 24
    275c:	09 f4       	brne	.+2      	; 0x2760 <__vector_24+0x54>
    275e:	4e c0       	rjmp	.+156    	; 0x27fc <__vector_24+0xf0>
    2760:	80 32       	cpi	r24, 0x20	; 32
    2762:	09 f4       	brne	.+2      	; 0x2766 <__vector_24+0x5a>
    2764:	5f c0       	rjmp	.+190    	; 0x2824 <__vector_24+0x118>
    2766:	ee c0       	rjmp	.+476    	; 0x2944 <__vector_24+0x238>
    2768:	80 34       	cpi	r24, 0x40	; 64
    276a:	09 f4       	brne	.+2      	; 0x276e <__vector_24+0x62>
    276c:	6a c0       	rjmp	.+212    	; 0x2842 <__vector_24+0x136>
    276e:	58 f4       	brcc	.+22     	; 0x2786 <__vector_24+0x7a>
    2770:	80 33       	cpi	r24, 0x30	; 48
    2772:	09 f4       	brne	.+2      	; 0x2776 <__vector_24+0x6a>
    2774:	57 c0       	rjmp	.+174    	; 0x2824 <__vector_24+0x118>
    2776:	88 33       	cpi	r24, 0x38	; 56
    2778:	09 f0       	breq	.+2      	; 0x277c <__vector_24+0x70>
    277a:	e4 c0       	rjmp	.+456    	; 0x2944 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    277c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <twi0_error>
            twi0_releaseBus();
    2780:	0e 94 80 13 	call	0x2700	; 0x2700 <twi0_releaseBus>
            break;
    2784:	df c0       	rjmp	.+446    	; 0x2944 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    2786:	80 35       	cpi	r24, 0x50	; 80
    2788:	09 f4       	brne	.+2      	; 0x278c <__vector_24+0x80>
    278a:	4f c0       	rjmp	.+158    	; 0x282a <__vector_24+0x11e>
    278c:	88 35       	cpi	r24, 0x58	; 88
    278e:	09 f4       	brne	.+2      	; 0x2792 <__vector_24+0x86>
    2790:	5d c0       	rjmp	.+186    	; 0x284c <__vector_24+0x140>
    2792:	88 34       	cpi	r24, 0x48	; 72
    2794:	09 f0       	breq	.+2      	; 0x2798 <__vector_24+0x8c>
    2796:	d6 c0       	rjmp	.+428    	; 0x2944 <__vector_24+0x238>
    2798:	d3 c0       	rjmp	.+422    	; 0x2940 <__vector_24+0x234>
    279a:	88 39       	cpi	r24, 0x98	; 152
    279c:	09 f4       	brne	.+2      	; 0x27a0 <__vector_24+0x94>
    279e:	c4 c0       	rjmp	.+392    	; 0x2928 <__vector_24+0x21c>
    27a0:	a8 f4       	brcc	.+42     	; 0x27cc <__vector_24+0xc0>
    27a2:	88 37       	cpi	r24, 0x78	; 120
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <__vector_24+0x9c>
    27a6:	67 c0       	rjmp	.+206    	; 0x2876 <__vector_24+0x16a>
    27a8:	38 f4       	brcc	.+14     	; 0x27b8 <__vector_24+0xac>
    27aa:	88 36       	cpi	r24, 0x68	; 104
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <__vector_24+0xa4>
    27ae:	63 c0       	rjmp	.+198    	; 0x2876 <__vector_24+0x16a>
    27b0:	80 37       	cpi	r24, 0x70	; 112
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <__vector_24+0xaa>
    27b4:	60 c0       	rjmp	.+192    	; 0x2876 <__vector_24+0x16a>
    27b6:	c6 c0       	rjmp	.+396    	; 0x2944 <__vector_24+0x238>
    27b8:	88 38       	cpi	r24, 0x88	; 136
    27ba:	09 f4       	brne	.+2      	; 0x27be <__vector_24+0xb2>
    27bc:	b5 c0       	rjmp	.+362    	; 0x2928 <__vector_24+0x21c>
    27be:	80 39       	cpi	r24, 0x90	; 144
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <__vector_24+0xb8>
    27c2:	5f c0       	rjmp	.+190    	; 0x2882 <__vector_24+0x176>
    27c4:	80 38       	cpi	r24, 0x80	; 128
    27c6:	09 f0       	breq	.+2      	; 0x27ca <__vector_24+0xbe>
    27c8:	bd c0       	rjmp	.+378    	; 0x2944 <__vector_24+0x238>
    27ca:	5b c0       	rjmp	.+182    	; 0x2882 <__vector_24+0x176>
    27cc:	80 3b       	cpi	r24, 0xB0	; 176
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <__vector_24+0xc6>
    27d0:	83 c0       	rjmp	.+262    	; 0x28d8 <__vector_24+0x1cc>
    27d2:	38 f4       	brcc	.+14     	; 0x27e2 <__vector_24+0xd6>
    27d4:	80 3a       	cpi	r24, 0xA0	; 160
    27d6:	09 f4       	brne	.+2      	; 0x27da <__vector_24+0xce>
    27d8:	66 c0       	rjmp	.+204    	; 0x28a6 <__vector_24+0x19a>
    27da:	88 3a       	cpi	r24, 0xA8	; 168
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <__vector_24+0xd4>
    27de:	7c c0       	rjmp	.+248    	; 0x28d8 <__vector_24+0x1cc>
    27e0:	b1 c0       	rjmp	.+354    	; 0x2944 <__vector_24+0x238>
    27e2:	80 3c       	cpi	r24, 0xC0	; 192
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <__vector_24+0xdc>
    27e6:	a4 c0       	rjmp	.+328    	; 0x2930 <__vector_24+0x224>
    27e8:	88 3c       	cpi	r24, 0xC8	; 200
    27ea:	09 f4       	brne	.+2      	; 0x27ee <__vector_24+0xe2>
    27ec:	a1 c0       	rjmp	.+322    	; 0x2930 <__vector_24+0x224>
    27ee:	88 3b       	cpi	r24, 0xB8	; 184
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <__vector_24+0xe8>
    27f2:	87 c0       	rjmp	.+270    	; 0x2902 <__vector_24+0x1f6>
    27f4:	a7 c0       	rjmp	.+334    	; 0x2944 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    27f6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <twi0_slarw>
    27fa:	10 c0       	rjmp	.+32     	; 0x281c <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    27fc:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <twi0_masterBufferIndex>
    2800:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi0_masterBufferLength>
    2804:	98 17       	cp	r25, r24
    2806:	70 f5       	brcc	.+92     	; 0x2864 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    2808:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <twi0_masterBufferIndex>
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	8e 0f       	add	r24, r30
    2810:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi0_masterBufferIndex>
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	e0 50       	subi	r30, 0x00	; 0
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	80 81       	ld	r24, Z
    281c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2820:	85 ec       	ldi	r24, 0xC5	; 197
    2822:	83 c0       	rjmp	.+262    	; 0x292a <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    2824:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <twi0_error>
    2828:	8b c0       	rjmp	.+278    	; 0x2940 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    282a:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <twi0_masterBufferIndex>
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	8e 0f       	add	r24, r30
    2832:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi0_masterBufferIndex>
    2836:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	e0 50       	subi	r30, 0x00	; 0
    283e:	fe 4f       	sbci	r31, 0xFE	; 254
    2840:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2842:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <twi0_masterBufferIndex>
    2846:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi0_masterBufferLength>
    284a:	6b c0       	rjmp	.+214    	; 0x2922 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    284c:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <twi0_masterBufferIndex>
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	8e 0f       	add	r24, r30
    2854:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi0_masterBufferIndex>
    2858:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	e0 50       	subi	r30, 0x00	; 0
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	80 83       	st	Z, r24
            if (twi0_sendStop)
    2864:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <twi0_sendStop>
    2868:	81 11       	cpse	r24, r1
    286a:	6a c0       	rjmp	.+212    	; 0x2940 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2872:	84 ea       	ldi	r24, 0xA4	; 164
    2874:	5e c0       	rjmp	.+188    	; 0x2932 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    287c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <twi0_rxBufferIndex>
    2880:	cf cf       	rjmp	.-98     	; 0x2820 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2882:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <twi0_rxBufferIndex>
    2886:	80 32       	cpi	r24, 0x20	; 32
    2888:	08 f0       	brcs	.+2      	; 0x288c <__vector_24+0x180>
    288a:	4e c0       	rjmp	.+156    	; 0x2928 <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    288c:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <twi0_rxBufferIndex>
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	8e 0f       	add	r24, r30
    2894:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <twi0_rxBufferIndex>
    2898:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	e4 54       	subi	r30, 0x44	; 68
    28a0:	fe 4f       	sbci	r31, 0xFE	; 254
    28a2:	80 83       	st	Z, r24
    28a4:	bd cf       	rjmp	.-134    	; 0x2820 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    28a6:	0e 94 80 13 	call	0x2700	; 0x2700 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    28aa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <twi0_rxBufferIndex>
    28ae:	80 32       	cpi	r24, 0x20	; 32
    28b0:	30 f4       	brcc	.+12     	; 0x28be <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    28b2:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <twi0_rxBufferIndex>
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	e4 54       	subi	r30, 0x44	; 68
    28ba:	fe 4f       	sbci	r31, 0xFE	; 254
    28bc:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    28be:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <twi0_rxBufferIndex>
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    28c8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    28cc:	8c eb       	ldi	r24, 0xBC	; 188
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    28d2:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <twi0_rxBufferIndex>
            break;
    28d6:	36 c0       	rjmp	.+108    	; 0x2944 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    28d8:	84 e0       	ldi	r24, 0x04	; 4
    28da:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    28de:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    28e2:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    28e6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <twi0_onSlaveTransmit>
    28ea:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <twi0_onSlaveTransmit+0x1>
    28ee:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    28f0:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi0_txBufferLength>
    28f4:	81 11       	cpse	r24, r1
    28f6:	05 c0       	rjmp	.+10     	; 0x2902 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    28fe:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    2902:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <twi0_txBufferIndex>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	8e 0f       	add	r24, r30
    290a:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <twi0_txBufferIndex>
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	e2 52       	subi	r30, 0x22	; 34
    2912:	fe 4f       	sbci	r31, 0xFE	; 254
    2914:	80 81       	ld	r24, Z
    2916:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    291a:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <twi0_txBufferIndex>
    291e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <twi0_txBufferLength>
    2922:	98 17       	cp	r25, r24
    2924:	08 f4       	brcc	.+2      	; 0x2928 <__vector_24+0x21c>
    2926:	7c cf       	rjmp	.-264    	; 0x2820 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2928:	85 e8       	ldi	r24, 0x85	; 133
    292a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    292e:	0a c0       	rjmp	.+20     	; 0x2944 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2930:	85 ec       	ldi	r24, 0xC5	; 197
    2932:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    2936:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <twi0_state>
            break;
    293a:	04 c0       	rjmp	.+8      	; 0x2944 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    293c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <twi0_error>
            twi0_stop();
    2940:	0e 94 76 13 	call	0x26ec	; 0x26ec <twi0_stop>
            break;
    }
}
    2944:	ff 91       	pop	r31
    2946:	ef 91       	pop	r30
    2948:	bf 91       	pop	r27
    294a:	af 91       	pop	r26
    294c:	9f 91       	pop	r25
    294e:	8f 91       	pop	r24
    2950:	7f 91       	pop	r23
    2952:	6f 91       	pop	r22
    2954:	5f 91       	pop	r21
    2956:	4f 91       	pop	r20
    2958:	3f 91       	pop	r19
    295a:	2f 91       	pop	r18
    295c:	0f 90       	pop	r0
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	0f 90       	pop	r0
    2962:	1f 90       	pop	r1
    2964:	18 95       	reti

00002966 <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    2966:	08 95       	ret

00002968 <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    2968:	08 95       	ret

0000296a <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    296a:	28 e4       	ldi	r18, 0x48	; 72
    296c:	32 e0       	ldi	r19, 0x02	; 2
    296e:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <twi1_rxBuffer+0x1>
    2972:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    2976:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <twi1_state>
    twi1_sendStop = 1;		// default value
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <twi1_sendStop>
    twi1_inRepStart = 0;
    2980:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <twi1_inRepStart>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2984:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2986:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2988:	69 98       	cbi	0x0d, 1	; 13
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    298a:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    298c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    298e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2990:	68 98       	cbi	0x0d, 0	; 13
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2992:	9f bf       	out	0x3f, r25	; 63
    pinMode(SCL1,INPUT); // 328pb DDRE &= ~(1 << DDE0)
    pinMode(SDA1,INPUT); // 328pb DDRE &= ~(1 << DDE1)

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    2994:	88 23       	and	r24, r24
    2996:	41 f0       	breq	.+16     	; 0x29a8 <twi1_init+0x3e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2998:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    299a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    299c:	71 9a       	sbi	0x0e, 1	; 14
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    299e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    29a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    29a4:	70 9a       	sbi	0x0e, 0	; 14
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29a6:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(SCL1,HIGH); // 328pb PORTE |= (1 << PORTE0)
        digitalWrite(SDA1,HIGH); // 328pb PORTE |= (1 << PORTE1)
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    29a8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    29ac:	8e 7f       	andi	r24, 0xFE	; 254
    29ae:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    29b2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    29b6:	8d 7f       	andi	r24, 0xFD	; 253
    29b8:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    29bc:	84 e3       	ldi	r24, 0x34	; 52
    29be:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    29c2:	85 e4       	ldi	r24, 0x45	; 69
    29c4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    29c8:	08 95       	ret

000029ca <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    29ca:	88 0f       	add	r24, r24
    29cc:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    29d0:	08 95       	ret

000029d2 <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    29d2:	61 32       	cpi	r22, 0x21	; 33
    29d4:	98 f4       	brcc	.+38     	; 0x29fc <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    29d6:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <twi1_state>
    29da:	24 30       	cpi	r18, 0x04	; 4
    29dc:	89 f4       	brne	.+34     	; 0x2a00 <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    29de:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <twi1_txBufferLength>
    29e2:	28 2f       	mov	r18, r24
    29e4:	aa e6       	ldi	r26, 0x6A	; 106
    29e6:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    29e8:	fc 01       	movw	r30, r24
    29ea:	8e 2f       	mov	r24, r30
    29ec:	82 1b       	sub	r24, r18
    29ee:	86 17       	cp	r24, r22
    29f0:	18 f4       	brcc	.+6      	; 0x29f8 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    29f2:	81 91       	ld	r24, Z+
    29f4:	8d 93       	st	X+, r24
    29f6:	f9 cf       	rjmp	.-14     	; 0x29ea <twi1_transmit+0x18>
    }
  
    return 0;
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    2a02:	08 95       	ret

00002a04 <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2a04:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <twi1_onSlaveReceive+0x1>
    2a08:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <twi1_onSlaveReceive>
    2a0c:	08 95       	ret

00002a0e <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    2a0e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <twi1_onSlaveTransmit+0x1>
    2a12:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <twi1_onSlaveTransmit>
    2a16:	08 95       	ret

00002a18 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2a18:	85 ed       	ldi	r24, 0xD5	; 213
    2a1a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    2a1e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2a22:	84 fd       	sbrc	r24, 4
    2a24:	fc cf       	rjmp	.-8      	; 0x2a1e <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2a26:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <twi1_state>
    2a2a:	08 95       	ret

00002a2c <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2a2c:	85 ec       	ldi	r24, 0xC5	; 197
    2a2e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    2a32:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <twi1_state>
    2a36:	08 95       	ret

00002a38 <__vector_40>:
}

ISR(TWI1_vect)
{
    2a38:	1f 92       	push	r1
    2a3a:	0f 92       	push	r0
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	0f 92       	push	r0
    2a40:	11 24       	eor	r1, r1
    2a42:	2f 93       	push	r18
    2a44:	3f 93       	push	r19
    2a46:	4f 93       	push	r20
    2a48:	5f 93       	push	r21
    2a4a:	6f 93       	push	r22
    2a4c:	7f 93       	push	r23
    2a4e:	8f 93       	push	r24
    2a50:	9f 93       	push	r25
    2a52:	af 93       	push	r26
    2a54:	bf 93       	push	r27
    2a56:	ef 93       	push	r30
    2a58:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2a5a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    2a5e:	88 7f       	andi	r24, 0xF8	; 248
    2a60:	80 36       	cpi	r24, 0x60	; 96
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <__vector_40+0x2e>
    2a64:	9e c0       	rjmp	.+316    	; 0x2ba2 <__vector_40+0x16a>
    2a66:	78 f5       	brcc	.+94     	; 0x2ac6 <__vector_40+0x8e>
    2a68:	88 32       	cpi	r24, 0x28	; 40
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <__vector_40+0x36>
    2a6c:	5d c0       	rjmp	.+186    	; 0x2b28 <__vector_40+0xf0>
    2a6e:	90 f4       	brcc	.+36     	; 0x2a94 <__vector_40+0x5c>
    2a70:	80 31       	cpi	r24, 0x10	; 16
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <__vector_40+0x3e>
    2a74:	56 c0       	rjmp	.+172    	; 0x2b22 <__vector_40+0xea>
    2a76:	38 f4       	brcc	.+14     	; 0x2a86 <__vector_40+0x4e>
    2a78:	88 23       	and	r24, r24
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <__vector_40+0x46>
    2a7c:	0a c1       	rjmp	.+532    	; 0x2c92 <__vector_40+0x25a>
    2a7e:	88 30       	cpi	r24, 0x08	; 8
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <__vector_40+0x4c>
    2a82:	4f c0       	rjmp	.+158    	; 0x2b22 <__vector_40+0xea>
    2a84:	0a c1       	rjmp	.+532    	; 0x2c9a <__vector_40+0x262>
    2a86:	88 31       	cpi	r24, 0x18	; 24
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <__vector_40+0x54>
    2a8a:	4e c0       	rjmp	.+156    	; 0x2b28 <__vector_40+0xf0>
    2a8c:	80 32       	cpi	r24, 0x20	; 32
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <__vector_40+0x5a>
    2a90:	5f c0       	rjmp	.+190    	; 0x2b50 <__vector_40+0x118>
    2a92:	03 c1       	rjmp	.+518    	; 0x2c9a <__vector_40+0x262>
    2a94:	80 34       	cpi	r24, 0x40	; 64
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <__vector_40+0x62>
    2a98:	6a c0       	rjmp	.+212    	; 0x2b6e <__vector_40+0x136>
    2a9a:	58 f4       	brcc	.+22     	; 0x2ab2 <__vector_40+0x7a>
    2a9c:	80 33       	cpi	r24, 0x30	; 48
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <__vector_40+0x6a>
    2aa0:	57 c0       	rjmp	.+174    	; 0x2b50 <__vector_40+0x118>
    2aa2:	88 33       	cpi	r24, 0x38	; 56
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <__vector_40+0x70>
    2aa6:	f9 c0       	rjmp	.+498    	; 0x2c9a <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    2aa8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <twi1_error>
            twi1_releaseBus();
    2aac:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <twi1_releaseBus>
            break;
    2ab0:	f4 c0       	rjmp	.+488    	; 0x2c9a <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2ab2:	80 35       	cpi	r24, 0x50	; 80
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <__vector_40+0x80>
    2ab6:	4f c0       	rjmp	.+158    	; 0x2b56 <__vector_40+0x11e>
    2ab8:	88 35       	cpi	r24, 0x58	; 88
    2aba:	09 f4       	brne	.+2      	; 0x2abe <__vector_40+0x86>
    2abc:	5d c0       	rjmp	.+186    	; 0x2b78 <__vector_40+0x140>
    2abe:	88 34       	cpi	r24, 0x48	; 72
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <__vector_40+0x8c>
    2ac2:	eb c0       	rjmp	.+470    	; 0x2c9a <__vector_40+0x262>
    2ac4:	e8 c0       	rjmp	.+464    	; 0x2c96 <__vector_40+0x25e>
    2ac6:	88 39       	cpi	r24, 0x98	; 152
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <__vector_40+0x94>
    2aca:	d9 c0       	rjmp	.+434    	; 0x2c7e <__vector_40+0x246>
    2acc:	a8 f4       	brcc	.+42     	; 0x2af8 <__vector_40+0xc0>
    2ace:	88 37       	cpi	r24, 0x78	; 120
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <__vector_40+0x9c>
    2ad2:	67 c0       	rjmp	.+206    	; 0x2ba2 <__vector_40+0x16a>
    2ad4:	38 f4       	brcc	.+14     	; 0x2ae4 <__vector_40+0xac>
    2ad6:	88 36       	cpi	r24, 0x68	; 104
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <__vector_40+0xa4>
    2ada:	63 c0       	rjmp	.+198    	; 0x2ba2 <__vector_40+0x16a>
    2adc:	80 37       	cpi	r24, 0x70	; 112
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <__vector_40+0xaa>
    2ae0:	60 c0       	rjmp	.+192    	; 0x2ba2 <__vector_40+0x16a>
    2ae2:	db c0       	rjmp	.+438    	; 0x2c9a <__vector_40+0x262>
    2ae4:	88 38       	cpi	r24, 0x88	; 136
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <__vector_40+0xb2>
    2ae8:	ca c0       	rjmp	.+404    	; 0x2c7e <__vector_40+0x246>
    2aea:	80 39       	cpi	r24, 0x90	; 144
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <__vector_40+0xb8>
    2aee:	5f c0       	rjmp	.+190    	; 0x2bae <__vector_40+0x176>
    2af0:	80 38       	cpi	r24, 0x80	; 128
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <__vector_40+0xbe>
    2af4:	d2 c0       	rjmp	.+420    	; 0x2c9a <__vector_40+0x262>
    2af6:	5b c0       	rjmp	.+182    	; 0x2bae <__vector_40+0x176>
    2af8:	80 3b       	cpi	r24, 0xB0	; 176
    2afa:	09 f4       	brne	.+2      	; 0x2afe <__vector_40+0xc6>
    2afc:	98 c0       	rjmp	.+304    	; 0x2c2e <__vector_40+0x1f6>
    2afe:	38 f4       	brcc	.+14     	; 0x2b0e <__vector_40+0xd6>
    2b00:	80 3a       	cpi	r24, 0xA0	; 160
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <__vector_40+0xce>
    2b04:	69 c0       	rjmp	.+210    	; 0x2bd8 <__vector_40+0x1a0>
    2b06:	88 3a       	cpi	r24, 0xA8	; 168
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <__vector_40+0xd4>
    2b0a:	91 c0       	rjmp	.+290    	; 0x2c2e <__vector_40+0x1f6>
    2b0c:	c6 c0       	rjmp	.+396    	; 0x2c9a <__vector_40+0x262>
    2b0e:	80 3c       	cpi	r24, 0xC0	; 192
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <__vector_40+0xdc>
    2b12:	b9 c0       	rjmp	.+370    	; 0x2c86 <__vector_40+0x24e>
    2b14:	88 3c       	cpi	r24, 0xC8	; 200
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <__vector_40+0xe2>
    2b18:	b6 c0       	rjmp	.+364    	; 0x2c86 <__vector_40+0x24e>
    2b1a:	88 3b       	cpi	r24, 0xB8	; 184
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <__vector_40+0xe8>
    2b1e:	9c c0       	rjmp	.+312    	; 0x2c58 <__vector_40+0x220>
    2b20:	bc c0       	rjmp	.+376    	; 0x2c9a <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    2b22:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <twi1_slarw>
    2b26:	10 c0       	rjmp	.+32     	; 0x2b48 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2b28:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <twi1_masterBufferIndex>
    2b2c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi1_masterBufferLength>
    2b30:	98 17       	cp	r25, r24
    2b32:	70 f5       	brcc	.+92     	; 0x2b90 <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2b34:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <twi1_masterBufferIndex>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	8e 0f       	add	r24, r30
    2b3c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi1_masterBufferIndex>
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	e4 57       	subi	r30, 0x74	; 116
    2b44:	fd 4f       	sbci	r31, 0xFD	; 253
    2b46:	80 81       	ld	r24, Z
    2b48:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2b4c:	85 ec       	ldi	r24, 0xC5	; 197
    2b4e:	98 c0       	rjmp	.+304    	; 0x2c80 <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    2b50:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <twi1_error>
    2b54:	a0 c0       	rjmp	.+320    	; 0x2c96 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2b56:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <twi1_masterBufferIndex>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	8e 0f       	add	r24, r30
    2b5e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi1_masterBufferIndex>
    2b62:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	e4 57       	subi	r30, 0x74	; 116
    2b6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b6c:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2b6e:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <twi1_masterBufferIndex>
    2b72:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi1_masterBufferLength>
    2b76:	80 c0       	rjmp	.+256    	; 0x2c78 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2b78:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <twi1_masterBufferIndex>
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	8e 0f       	add	r24, r30
    2b80:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi1_masterBufferIndex>
    2b84:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	e4 57       	subi	r30, 0x74	; 116
    2b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b8e:	80 83       	st	Z, r24
            if (twi1_sendStop)
    2b90:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <twi1_sendStop>
    2b94:	81 11       	cpse	r24, r1
    2b96:	7f c0       	rjmp	.+254    	; 0x2c96 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2b9e:	84 ea       	ldi	r24, 0xA4	; 164
    2ba0:	73 c0       	rjmp	.+230    	; 0x2c88 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2ba2:	83 e0       	ldi	r24, 0x03	; 3
    2ba4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2ba8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <twi1_rxBufferIndex>
    2bac:	cf cf       	rjmp	.-98     	; 0x2b4c <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2bae:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <twi1_rxBufferIndex>
    2bb2:	80 32       	cpi	r24, 0x20	; 32
    2bb4:	08 f0       	brcs	.+2      	; 0x2bb8 <__vector_40+0x180>
    2bb6:	63 c0       	rjmp	.+198    	; 0x2c7e <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2bb8:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <twi1_rxBuffer>
    2bbc:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <twi1_rxBuffer+0x1>
    2bc0:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <twi1_rxBufferIndex>
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	98 0f       	add	r25, r24
    2bc8:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <twi1_rxBufferIndex>
    2bcc:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2bd0:	e8 0f       	add	r30, r24
    2bd2:	f1 1d       	adc	r31, r1
    2bd4:	90 83       	st	Z, r25
    2bd6:	ba cf       	rjmp	.-140    	; 0x2b4c <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2bd8:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2bdc:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <twi1_rxBufferIndex>
    2be0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <twi1_rxBuffer>
    2be4:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <twi1_rxBuffer+0x1>
    2be8:	20 32       	cpi	r18, 0x20	; 32
    2bea:	30 f4       	brcc	.+12     	; 0x2bf8 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2bec:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <twi1_rxBufferIndex>
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e2 0f       	add	r30, r18
    2bf4:	f1 1d       	adc	r31, r1
    2bf6:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2bf8:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <twi1_rxBufferIndex>
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <twi1_onSlaveReceive>
    2c02:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <twi1_onSlaveReceive+0x1>
    2c06:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2c08:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <twi1_rxBuffer>
    2c0c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <twi1_rxBuffer+0x1>
    2c10:	88 54       	subi	r24, 0x48	; 72
    2c12:	92 40       	sbci	r25, 0x02	; 2
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2c16:	88 e2       	ldi	r24, 0x28	; 40
    2c18:	92 e0       	ldi	r25, 0x02	; 2
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2c1c:	88 e4       	ldi	r24, 0x48	; 72
    2c1e:	92 e0       	ldi	r25, 0x02	; 2
    2c20:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <twi1_rxBuffer+0x1>
    2c24:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2c28:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <twi1_rxBufferIndex>
            break;
    2c2c:	36 c0       	rjmp	.+108    	; 0x2c9a <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2c34:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2c38:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2c3c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <twi1_onSlaveTransmit>
    2c40:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <twi1_onSlaveTransmit+0x1>
    2c44:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2c46:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi1_txBufferLength>
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2c54:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2c58:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <twi1_txBufferIndex>
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	8e 0f       	add	r24, r30
    2c60:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <twi1_txBufferIndex>
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	e6 59       	subi	r30, 0x96	; 150
    2c68:	fd 4f       	sbci	r31, 0xFD	; 253
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    2c70:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <twi1_txBufferIndex>
    2c74:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <twi1_txBufferLength>
    2c78:	98 17       	cp	r25, r24
    2c7a:	08 f4       	brcc	.+2      	; 0x2c7e <__vector_40+0x246>
    2c7c:	67 cf       	rjmp	.-306    	; 0x2b4c <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2c7e:	85 e8       	ldi	r24, 0x85	; 133
    2c80:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2c84:	0a c0       	rjmp	.+20     	; 0x2c9a <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2c86:	85 ec       	ldi	r24, 0xC5	; 197
    2c88:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    2c8c:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <twi1_state>
            break;
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2c92:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <twi1_error>
            twi1_stop();
    2c96:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <twi1_stop>
            break;
    }
}
    2c9a:	ff 91       	pop	r31
    2c9c:	ef 91       	pop	r30
    2c9e:	bf 91       	pop	r27
    2ca0:	af 91       	pop	r26
    2ca2:	9f 91       	pop	r25
    2ca4:	8f 91       	pop	r24
    2ca6:	7f 91       	pop	r23
    2ca8:	6f 91       	pop	r22
    2caa:	5f 91       	pop	r21
    2cac:	4f 91       	pop	r20
    2cae:	3f 91       	pop	r19
    2cb0:	2f 91       	pop	r18
    2cb2:	0f 90       	pop	r0
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	0f 90       	pop	r0
    2cb8:	1f 90       	pop	r1
    2cba:	18 95       	reti

00002cbc <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cbc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cbe:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2cc0:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cc2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cc4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cc6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2cc8:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2ccc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cce:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2cd0:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cd2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cd4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cd6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2cd8:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cda:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cdc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cde:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2ce0:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ce2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2ce4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ce6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2ce8:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cea:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cee:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2cf0:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cf2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cf4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cf6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2cf8:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cfa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2cfc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cfe:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d00:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d02:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d04:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d06:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2d08:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d0a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d0c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d0e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d10:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d12:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d14:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d16:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d18:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d1a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d1c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d1e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d20:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d22:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d24:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d26:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2d28:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d2a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d2c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d2e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d30:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d32:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d34:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d36:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2d38:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d3a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d3c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d3e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d40:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d42:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d44:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d46:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2d48:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d4a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d4c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d4e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d50:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d52:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d54:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d56:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d58:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d5a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d5c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d5e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    2d60:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d62:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2d64:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d66:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2d68:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d6a:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
    2d6c:	80 e3       	ldi	r24, 0x30	; 48
    2d6e:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <bootloader_address>
    host_active = 0;
    2d72:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <host_active>
    lockout_active = 0;
    2d76:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <lockout_active>
    status_byt = 0;
    2d7a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <status_byt>
    write_rpu_address_to_eeprom = 0;
    2d7e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
    2d82:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <shutdown_detected>
    shutdown_started = 0;
    2d86:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <shutdown_started>
    arduino_mode_started =0;
    2d8a:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <arduino_mode_started>
    arduino_mode = 0;
    2d8e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <arduino_mode>
    test_mode_started = 0;
    2d92:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <test_mode_started>
    test_mode = 0;
    2d96:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <test_mode>
    transceiver_state = 0;
    2d9a:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
    2d9e:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <smbus_has_numBytes_to_handle+0x1>
    2da2:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_output = 0;
    2da6:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
    2daa:	0e 94 df 12 	call	0x25be	; 0x25be <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
    2dae:	80 e4       	ldi	r24, 0x40	; 64
    2db0:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	0e 94 76 12 	call	0x24ec	; 0x24ec <enable_ADC_auto_conversion>
    adc_started_at = millis();
    2dba:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    2dbe:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <adc_started_at>
    2dc2:	70 93 8f 03 	sts	0x038F, r23	; 0x80038f <adc_started_at+0x1>
    2dc6:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <adc_started_at+0x2>
    2dca:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <adc_started_at+0x3>

    /* Initialize UART0 to 250 kbps, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uart0_init(DTR_BAUD,UART0_RX_REPLACE_CR_WITH_NL);
    2dce:	42 e0       	ldi	r20, 0x02	; 2
    2dd0:	60 e9       	ldi	r22, 0x90	; 144
    2dd2:	70 ed       	ldi	r23, 0xD0	; 208
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 1b 19 	call	0x3236	; 0x3236 <uart0_init>
    2ddc:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <__iob+0x1>
    2de0:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <__iob>
    2de4:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <__iob+0x3>
    2de8:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
    2dec:	89 e2       	ldi	r24, 0x29	; 41
    2dee:	0e 94 4f 13 	call	0x269e	; 0x269e <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
    2df2:	83 e2       	ldi	r24, 0x23	; 35
    2df4:	9b e0       	ldi	r25, 0x0B	; 11
    2df6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
    2dfa:	86 ee       	ldi	r24, 0xE6	; 230
    2dfc:	9a e0       	ldi	r25, 0x0A	; 10
    2dfe:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	0e 94 25 13 	call	0x264a	; 0x264a <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
    2e08:	8a e2       	ldi	r24, 0x2A	; 42
    2e0a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
    2e0e:	8d eb       	ldi	r24, 0xBD	; 189
    2e10:	9b e0       	ldi	r25, 0x0B	; 11
    2e12:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
    2e16:	80 e4       	ldi	r24, 0x40	; 64
    2e18:	9b e0       	ldi	r25, 0x0B	; 11
    2e1a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	0e 94 b5 14 	call	0x296a	; 0x296a <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
    2e24:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e26:	2f eb       	ldi	r18, 0xBF	; 191
    2e28:	84 ed       	ldi	r24, 0xD4	; 212
    2e2a:	91 e0       	ldi	r25, 0x01	; 1
    2e2c:	21 50       	subi	r18, 0x01	; 1
    2e2e:	80 40       	sbci	r24, 0x00	; 0
    2e30:	90 40       	sbci	r25, 0x00	; 0
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <setup+0x170>
    2e34:	00 c0       	rjmp	.+0      	; 0x2e36 <setup+0x17a>
    2e36:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2e38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e3a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    2e3c:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e3e:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear, blocking at this point is OK.
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
    2e40:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
    2e44:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <check_for_eeprom_id>
    2e48:	88 23       	and	r24, r24
    2e4a:	29 f0       	breq	.+10     	; 0x2e56 <setup+0x19a>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
    2e4c:	82 e3       	ldi	r24, 0x32	; 50
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 ce 1c 	call	0x399c	; 0x399c <eeprom_read_byte>
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <setup+0x19c>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
    2e56:	81 e3       	ldi	r24, 0x31	; 49
    2e58:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <rpu_address>
    }

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
    2e5c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LoadBatLimitsFromEEPROM>

    // load Day-Night state machine values from EEPROM (or set defaults)
    LoadDayNightValuesFromEEPROM();
    2e60:	0e 94 07 10 	call	0x200e	; 0x200e <LoadDayNightValuesFromEEPROM>
    dayTmrStarted = millis();
    2e64:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    2e68:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <dayTmrStarted>
    2e6c:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <dayTmrStarted+0x1>
    2e70:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <dayTmrStarted+0x2>
    2e74:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <dayTmrStarted+0x3>

    // load Calibration Limits from EEPROM (or set defaults)
    cal_loaded = CAL_CLEAR;
    2e78:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <cal_loaded>
    for (uint8_t cal_index = 0; cal_index < EE_CAL_NUM; cal_index++)
    {
        LoadCalFromEEPROM(cal_index);
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <LoadCalFromEEPROM>
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <LoadCalFromEEPROM>
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <LoadCalFromEEPROM>
    2e8e:	83 e0       	ldi	r24, 0x03	; 3
    2e90:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <LoadCalFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
    // this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
    // status_byt was zero at this point, but this sets the bit without changing the other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
    2e94:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <status_byt>
    2e98:	88 60       	ori	r24, 0x08	; 8
    2e9a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <status_byt>
    2e9e:	08 95       	ret

00002ea0 <main>:
#endif
}

int main(void)
{
    setup();
    2ea0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <setup>

    blink_started_at = millis();
    2ea4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <millis>
    2ea8:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <blink_started_at>
    2eac:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <blink_started_at+0x1>
    2eb0:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <blink_started_at+0x2>
    2eb4:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <blink_started_at+0x3>

    while (1) // scan time for each loop varies depending on how much of each thing needs to be done 
    {
        if (!test_mode) 
    2eb8:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <test_mode>
    2ebc:	81 11       	cpse	r24, r1
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <main+0x34>
        {
            blink_on_activate();
    2ec0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <blink_on_activate>
            check_Bootload_Time();
    2ec4:	0e 94 aa 01 	call	0x354	; 0x354 <check_Bootload_Time>
            check_DTR();
    2ec8:	0e 94 4d 02 	call	0x49a	; 0x49a <check_DTR>
            check_lockout();
    2ecc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <check_lockout>
            check_shutdown();
    2ed0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <check_shutdown>
        }
        save_rpu_addr_state();
    2ed4:	0e 94 c6 0b 	call	0x178c	; 0x178c <save_rpu_addr_state>
        check_uart();
    2ed8:	0e 94 07 03 	call	0x60e	; 0x60e <check_uart>
        adc_burst();
    2edc:	0e 94 0c 0c 	call	0x1818	; 0x1818 <adc_burst>
        ReferancesFromI2CtoEE();
    2ee0:	0e 94 66 0d 	call	0x1acc	; 0x1acc <ReferancesFromI2CtoEE>
        BatLimitsFromI2CtoEE();
    2ee4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <BatLimitsFromI2CtoEE>
        ChannelCalFromI2CtoEE();
    2ee8:	0e 94 27 18 	call	0x304e	; 0x304e <ChannelCalFromI2CtoEE>
        check_if_alt_should_be_on();
    2eec:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <check_if_alt_should_be_on>
        DayNightValuesFromI2CtoEE();
    2ef0:	0e 94 b3 10 	call	0x2166	; 0x2166 <DayNightValuesFromI2CtoEE>
        check_daynight();
    2ef4:	0e 94 00 11 	call	0x2200	; 0x2200 <check_daynight>
        handle_smbus_receive();
    2ef8:	0e 94 49 0b 	call	0x1692	; 0x1692 <handle_smbus_receive>
    }    
    2efc:	dd cf       	rjmp	.-70     	; 0x2eb8 <main+0x18>

00002efe <IsValidValForCal>:
// check if calibration is a valid float
// 0UL and 0xFFFFFFFFUL are not valid
uint8_t IsValidValForCal(uint8_t cal_map)
{
    uint32_t tmp_cal;
    memcpy(&tmp_cal, &calMap[cal_map].calibration, sizeof tmp_cal);
    2efe:	24 e0       	ldi	r18, 0x04	; 4
    2f00:	82 9f       	mul	r24, r18
    2f02:	c0 01       	movw	r24, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	fc 01       	movw	r30, r24
    2f08:	ef 52       	subi	r30, 0x2F	; 47
    2f0a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f0c:	40 81       	ld	r20, Z
    2f0e:	51 81       	ldd	r21, Z+1	; 0x01
    2f10:	62 81       	ldd	r22, Z+2	; 0x02
    2f12:	73 81       	ldd	r23, Z+3	; 0x03
    2f14:	41 50       	subi	r20, 0x01	; 1
    2f16:	51 09       	sbc	r21, r1
    2f18:	61 09       	sbc	r22, r1
    2f1a:	71 09       	sbc	r23, r1
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	4e 3f       	cpi	r20, 0xFE	; 254
    2f20:	5f 4f       	sbci	r21, 0xFF	; 255
    2f22:	6f 4f       	sbci	r22, 0xFF	; 255
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255
    2f26:	08 f0       	brcs	.+2      	; 0x2f2a <IsValidValForCal+0x2c>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    if ( (tmp_cal == 0xFFFFFFFFUL) | (tmp_cal == 0x0UL) )
    {
            return 0;
    }
    return 1;
}
    2f2a:	08 95       	ret

00002f2c <IsValidValForCalChannel>:


// check if channel_with_writebit calibration is a valid
uint8_t IsValidValForCalChannel(void) 
{
    uint8_t channel  = channel_with_writebit & CAL_CHANNEL_MASK; // mask the writebit
    2f2c:	e0 91 e1 03 	lds	r30, 0x03E1	; 0x8003e1 <channel_with_writebit>
    2f30:	ef 77       	andi	r30, 0x7F	; 127
    if ( (channel == ALT_I) || (channel == ALT_V) || (channel == PWR_V) || (channel == PWR_I) )
    2f32:	e2 30       	cpi	r30, 0x02	; 2
    2f34:	20 f0       	brcs	.+8      	; 0x2f3e <IsValidValForCalChannel+0x12>
    2f36:	8a ef       	ldi	r24, 0xFA	; 250
    2f38:	8e 0f       	add	r24, r30
    2f3a:	82 30       	cpi	r24, 0x02	; 2
    2f3c:	30 f4       	brcc	.+12     	; 0x2f4a <IsValidValForCalChannel+0x1e>
    {
        // copy the float to a uint32_t to check if bytes are valid, 
        // python:  unpack('f', pack('BBBB', 0xff, 0xff, 0xff, 0xff)) is (nan,)
        // eeprom that is not yet set is 0xff and should be ignored if passed through i2c
        return IsValidValForCal(channelMap[channel].cal_map);
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	ed 55       	subi	r30, 0x5D	; 93
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	80 81       	ld	r24, Z
    2f46:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <IsValidValForCal>
            
    }
    return 0;
}
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	08 95       	ret

00002f4e <WriteCalToEE>:

// save channel calibration if writebit is set and eeprom is ready
uint8_t WriteCalToEE(void) 
{
    if (channel_with_writebit & 0x80)
    2f4e:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <channel_with_writebit>
    2f52:	87 ff       	sbrs	r24, 7
    2f54:	1a c0       	rjmp	.+52     	; 0x2f8a <WriteCalToEE+0x3c>
    {
        uint8_t channel  = channel_with_writebit & 0x7F; // mask the writebit to select one of ALT_I, ALT_V,PWR_I,PWR_V
    2f56:	e0 91 e1 03 	lds	r30, 0x03E1	; 0x8003e1 <channel_with_writebit>
        uint8_t offset = channelMap[channel].cal_map;
        // use update functions to skip the burning if the old value is the same with new.
        // https://www.microchip.com/webdoc/AVRLibcReferenceManual/group__avr__eeprom.html
        if ( eeprom_is_ready() )
    2f5a:	f9 99       	sbic	0x1f, 1	; 31
    2f5c:	16 c0       	rjmp	.+44     	; 0x2f8a <WriteCalToEE+0x3c>
uint8_t WriteCalToEE(void) 
{
    if (channel_with_writebit & 0x80)
    {
        uint8_t channel  = channel_with_writebit & 0x7F; // mask the writebit to select one of ALT_I, ALT_V,PWR_I,PWR_V
        uint8_t offset = channelMap[channel].cal_map;
    2f5e:	ef 77       	andi	r30, 0x7F	; 127
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	ed 55       	subi	r30, 0x5D	; 93
    2f64:	fe 4f       	sbci	r31, 0xFE	; 254
    2f66:	80 81       	ld	r24, Z
        // use update functions to skip the burning if the old value is the same with new.
        // https://www.microchip.com/webdoc/AVRLibcReferenceManual/group__avr__eeprom.html
        if ( eeprom_is_ready() )
        {
            eeprom_update_float( (float *)(EE_CAL_BASE_ADDR+(EE_CAL_OFFSET*offset)), calMap[offset].calibration);
    2f68:	24 e0       	ldi	r18, 0x04	; 4
    2f6a:	82 9f       	mul	r24, r18
    2f6c:	c0 01       	movw	r24, r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	fc 01       	movw	r30, r24
    2f72:	ef 52       	subi	r30, 0x2F	; 47
    2f74:	fc 4f       	sbci	r31, 0xFC	; 252
    2f76:	40 81       	ld	r20, Z
    2f78:	51 81       	ldd	r21, Z+1	; 0x01
    2f7a:	62 81       	ldd	r22, Z+2	; 0x02
    2f7c:	73 81       	ldd	r23, Z+3	; 0x03
    2f7e:	8e 5a       	subi	r24, 0xAE	; 174
    2f80:	9f 4f       	sbci	r25, 0xFF	; 255
    2f82:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <eeprom_update_dword>
            return 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	08 95       	ret
        }
    }
    return 0;
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f8c:	08 95       	ret

00002f8e <LoadCalFromEEPROM>:

// load a channel calibraion or set default if not valid (0 or 0xFFFFFFFF are not valid for calibration)
// at startup call for each value in range 0..EE_CAL_NUM to fill calMap
// also befor loop do cal_loaded = CAL_CLEAR 
void LoadCalFromEEPROM(uint8_t cal_map) 
{
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	18 2f       	mov	r17, r24
        calMap[cal_map].calibration = eeprom_read_float((float *)(EE_CAL_BASE_ADDR+(EE_CAL_OFFSET*cal_map)));
    2f96:	84 e0       	ldi	r24, 0x04	; 4
    2f98:	18 9f       	mul	r17, r24
    2f9a:	e0 01       	movw	r28, r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	8e 5a       	subi	r24, 0xAE	; 174
    2fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <eeprom_read_dword>
    2fa8:	cf 52       	subi	r28, 0x2F	; 47
    2faa:	dc 4f       	sbci	r29, 0xFC	; 252
    2fac:	68 83       	st	Y, r22
    2fae:	79 83       	std	Y+1, r23	; 0x01
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
    2fb2:	9b 83       	std	Y+3, r25	; 0x03
        if ( !IsValidValForCal(cal_map) ) 
    2fb4:	81 2f       	mov	r24, r17
    2fb6:	0e 94 7f 17 	call	0x2efe	; 0x2efe <IsValidValForCal>
    2fba:	81 11       	cpse	r24, r1
    2fbc:	38 c0       	rjmp	.+112    	; 0x302e <LoadCalFromEEPROM+0xa0>
        {
            if (cal_map == channelMap[ALT_I].cal_map)
    2fbe:	11 11       	cpse	r17, r1
    2fc0:	0c c0       	rjmp	.+24     	; 0x2fda <LoadCalFromEEPROM+0x4c>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))/(0.018*50.0); // ALT_I has  0.018 Ohm sense resistor and gain of 50
    2fc2:	84 ee       	ldi	r24, 0xE4	; 228
    2fc4:	98 e3       	ldi	r25, 0x38	; 56
    2fc6:	ae e8       	ldi	r26, 0x8E	; 142
    2fc8:	ba e3       	ldi	r27, 0x3A	; 58
    2fca:	88 83       	st	Y, r24
    2fcc:	99 83       	std	Y+1, r25	; 0x01
    2fce:	aa 83       	std	Y+2, r26	; 0x02
    2fd0:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_0_DEFAULT;
    2fd2:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    2fd6:	8f 5f       	subi	r24, 0xFF	; 255
    2fd8:	34 c0       	rjmp	.+104    	; 0x3042 <LoadCalFromEEPROM+0xb4>
            }
            if (cal_map == channelMap[ALT_V].cal_map)
    2fda:	11 30       	cpi	r17, 0x01	; 1
    2fdc:	61 f4       	brne	.+24     	; 0x2ff6 <LoadCalFromEEPROM+0x68>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))*(100+10.0)/10.0; // ALT_V has divider with 100k and 10.0k
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 e3       	ldi	r26, 0x30	; 48
    2fe4:	bc e3       	ldi	r27, 0x3C	; 60
    2fe6:	88 83       	st	Y, r24
    2fe8:	99 83       	std	Y+1, r25	; 0x01
    2fea:	aa 83       	std	Y+2, r26	; 0x02
    2fec:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_1_DEFAULT;
    2fee:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    2ff2:	8e 5f       	subi	r24, 0xFE	; 254
    2ff4:	26 c0       	rjmp	.+76     	; 0x3042 <LoadCalFromEEPROM+0xb4>
            }
            if (cal_map == channelMap[PWR_I].cal_map)
    2ff6:	12 30       	cpi	r17, 0x02	; 2
    2ff8:	61 f4       	brne	.+24     	; 0x3012 <LoadCalFromEEPROM+0x84>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))/(0.068*50.0); // PWR_I has  0.068 Ohm sense resistor and gain of 50
    2ffa:	86 e9       	ldi	r24, 0x96	; 150
    2ffc:	96 e9       	ldi	r25, 0x96	; 150
    2ffe:	a6 e9       	ldi	r26, 0x96	; 150
    3000:	b9 e3       	ldi	r27, 0x39	; 57
    3002:	88 83       	st	Y, r24
    3004:	99 83       	std	Y+1, r25	; 0x01
    3006:	aa 83       	std	Y+2, r26	; 0x02
    3008:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_2_DEFAULT;
    300a:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    300e:	8c 5f       	subi	r24, 0xFC	; 252
    3010:	18 c0       	rjmp	.+48     	; 0x3042 <LoadCalFromEEPROM+0xb4>
            }
            if (cal_map == channelMap[PWR_V].cal_map)
    3012:	13 30       	cpi	r17, 0x03	; 3
    3014:	c1 f4       	brne	.+48     	; 0x3046 <LoadCalFromEEPROM+0xb8>
            {
                calMap[cal_map].calibration = (1.0/(1<<10))*(100+15.8)/15.8; // PWR_V has divider with 100k and 15.8k
    3016:	8a e1       	ldi	r24, 0x1A	; 26
    3018:	98 e8       	ldi	r25, 0x88	; 136
    301a:	aa ee       	ldi	r26, 0xEA	; 234
    301c:	bb e3       	ldi	r27, 0x3B	; 59
    301e:	88 83       	st	Y, r24
    3020:	99 83       	std	Y+1, r25	; 0x01
    3022:	aa 83       	std	Y+2, r26	; 0x02
    3024:	bb 83       	std	Y+3, r27	; 0x03
                cal_loaded = cal_loaded + CAL_3_DEFAULT;
    3026:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    302a:	88 5f       	subi	r24, 0xF8	; 248
    302c:	0a c0       	rjmp	.+20     	; 0x3042 <LoadCalFromEEPROM+0xb4>
        else
        {
            // calibration from EEPROM is valid, so it has been kept. It is not a default value so
            // clear the CAL_n_DEFAULT bit (0..3) of cal_loaded
            uint8_t mask_for_cal_default_bit = ~(1<<cal_map);
            cal_loaded = cal_loaded & mask_for_cal_default_bit; // now clear the CAL_n_DEFAULT bit
    302e:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <cal_loaded>
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	01 c0       	rjmp	.+2      	; 0x303a <LoadCalFromEEPROM+0xac>
    3038:	88 0f       	add	r24, r24
    303a:	1a 95       	dec	r17
    303c:	ea f7       	brpl	.-6      	; 0x3038 <LoadCalFromEEPROM+0xaa>
    303e:	80 95       	com	r24
    3040:	82 23       	and	r24, r18
    3042:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <cal_loaded>
        }
}
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	08 95       	ret

0000304e <ChannelCalFromI2CtoEE>:

// save channel calibration from I2C to EEPROM (if valid)
void ChannelCalFromI2CtoEE(void)
{
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    if (cal_loaded & (CAL_0_TOSAVE | CAL_1_TOSAVE | CAL_2_TOSAVE | CAL_3_TOSAVE) )
    3054:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    3058:	80 7f       	andi	r24, 0xF0	; 240
    305a:	a9 f1       	breq	.+106    	; 0x30c6 <ChannelCalFromI2CtoEE+0x78>
    {
        // channel_with_writebit agree (e.g., writebit set)
        if (channel_with_writebit & 0x80)
    305c:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <channel_with_writebit>
    3060:	87 ff       	sbrs	r24, 7
    3062:	31 c0       	rjmp	.+98     	; 0x30c6 <ChannelCalFromI2CtoEE+0x78>
        {
            uint8_t channel = channel_with_writebit & 0x7F;
    3064:	e0 91 e1 03 	lds	r30, 0x03E1	; 0x8003e1 <channel_with_writebit>
            // does the channelMap.cal_map agree, e.g., CAL_0_TOSAVE is 0x10
            // ALT_I is 0; channelMap[0].cal_map is 0; finaly (1<<0) == 0x10>>4
            if ( (1<<channelMap[channel].cal_map) == (cal_loaded>>4) )
    3068:	ef 77       	andi	r30, 0x7F	; 127
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	ed 55       	subi	r30, 0x5D	; 93
    306e:	fe 4f       	sbci	r31, 0xFE	; 254
    3070:	10 81       	ld	r17, Z
    3072:	c1 e0       	ldi	r28, 0x01	; 1
    3074:	d0 e0       	ldi	r29, 0x00	; 0
    3076:	01 2e       	mov	r0, r17
    3078:	02 c0       	rjmp	.+4      	; 0x307e <ChannelCalFromI2CtoEE+0x30>
    307a:	cc 0f       	add	r28, r28
    307c:	dd 1f       	adc	r29, r29
    307e:	0a 94       	dec	r0
    3080:	e2 f7       	brpl	.-8      	; 0x307a <ChannelCalFromI2CtoEE+0x2c>
    3082:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    3086:	82 95       	swap	r24
    3088:	8f 70       	andi	r24, 0x0F	; 15
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	c8 17       	cp	r28, r24
    308e:	d9 07       	cpc	r29, r25
    3090:	d1 f4       	brne	.+52     	; 0x30c6 <ChannelCalFromI2CtoEE+0x78>
            {
                // final check befor trying to save
                if ( IsValidValForCalChannel() )
    3092:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <IsValidValForCalChannel>
    3096:	88 23       	and	r24, r24
    3098:	81 f0       	breq	.+32     	; 0x30ba <ChannelCalFromI2CtoEE+0x6c>
                {
                    if (WriteCalToEE())
    309a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <WriteCalToEE>
    309e:	88 23       	and	r24, r24
    30a0:	91 f0       	breq	.+36     	; 0x30c6 <ChannelCalFromI2CtoEE+0x78>
                    {
                        // clear the CAL_n_TOSAVE bits
                        cal_loaded = cal_loaded & 0x0F;
    30a2:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    30a6:	8f 70       	andi	r24, 0x0F	; 15
    30a8:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <cal_loaded>
                        // also clear the correct CAL_n_DEFAULT bit (calibration is not default)
                        uint8_t mask_for_cal_default_bit = ~(1<<channelMap[channel].cal_map);
                        cal_loaded = cal_loaded & mask_for_cal_default_bit; // now clear the CAL_n_DEFAULT bit
    30ac:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <cal_loaded>
    30b0:	c0 95       	com	r28
    30b2:	c8 23       	and	r28, r24
    30b4:	c0 93 d0 03 	sts	0x03D0, r28	; 0x8003d0 <cal_loaded>
                        return; // all done
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <ChannelCalFromI2CtoEE+0x78>
                    }
                }
                else
                {
                    LoadCalFromEEPROM(channelMap[channel].cal_map); // ignore value since it is not valid
    30ba:	81 2f       	mov	r24, r17
                }
            }       
        }
    }
}
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	1f 91       	pop	r17
                        return; // all done
                    }
                }
                else
                {
                    LoadCalFromEEPROM(channelMap[channel].cal_map); // ignore value since it is not valid
    30c2:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <LoadCalFromEEPROM>
                }
            }       
        }
    }
}
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	08 95       	ret

000030ce <uart0_putchar>:
// putchar for sending to stdio stream
int uart0_putchar(char c, FILE *stream)
{
    uint16_t next_index;

    next_index  = (TxHead + 1) & ( UART0_TX0_SIZE - 1);
    30ce:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <TxHead>
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	2f 5f       	subi	r18, 0xFF	; 255
    30d6:	3f 4f       	sbci	r19, 0xFF	; 255
    30d8:	2f 71       	andi	r18, 0x1F	; 31
    30da:	33 27       	eor	r19, r19

    while ( next_index == TxTail ) 
    30dc:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <TxTail>
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	24 17       	cp	r18, r20
    30e4:	35 07       	cpc	r19, r21
    30e6:	d1 f3       	breq	.-12     	; 0x30dc <uart0_putchar+0xe>
        ;// busy wait for free space in buffer
    }

    // I put a carriage return and newline in the printf string  
    // so I don't use UART0_TX_REPLACE_NL_WITH_CR
    if ( (options & UART0_TX_REPLACE_NL_WITH_CR) && (c == '\n') )
    30e8:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <options>
    30ec:	f9 01       	movw	r30, r18
    30ee:	eb 52       	subi	r30, 0x2B	; 43
    30f0:	fd 4f       	sbci	r31, 0xFD	; 253
    30f2:	90 ff       	sbrs	r25, 0
    30f4:	03 c0       	rjmp	.+6      	; 0x30fc <uart0_putchar+0x2e>
    30f6:	8a 30       	cpi	r24, 0x0A	; 10
    30f8:	09 f4       	brne	.+2      	; 0x30fc <uart0_putchar+0x2e>
    {
        TxBuf[next_index] = (uint8_t)'\r';
    30fa:	8d e0       	ldi	r24, 0x0D	; 13
    }
    else
    {
        TxBuf[next_index] = (uint8_t) c;
    30fc:	80 83       	st	Z, r24
    }
    TxHead = next_index;
    30fe:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <TxHead>

    // Data Register Empty Interrupt Enable (UDRIE)
    // When the UDRIE bit in UCSRnB is written to '1', the USART Data Register Empty Interrupt 
    // will be executed as long as UDRE is set (provided that global interrupts are enabled).
    UCSR0B |= (1<<UDRIE0);
    3102:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3106:	80 62       	ori	r24, 0x20	; 32
    3108:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    return 0;
}
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	08 95       	ret

00003112 <__vector_18>:

static uint8_t options;
volatile uint8_t UART0_error;

ISR(USART0_RX_vect)
{
    3112:	1f 92       	push	r1
    3114:	0f 92       	push	r0
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	0f 92       	push	r0
    311a:	11 24       	eor	r1, r1
    311c:	2f 93       	push	r18
    311e:	3f 93       	push	r19
    3120:	4f 93       	push	r20
    3122:	5f 93       	push	r21
    3124:	8f 93       	push	r24
    3126:	9f 93       	push	r25
    3128:	ef 93       	push	r30
    312a:	ff 93       	push	r31
    uint16_t next_index;
    uint8_t data;
 
    // check USARTn Control and Status Register A for Frame Error (FE) or Data OverRun (DOR)
    uint8_t last_status = (UCSR0A & ((1<<FE0)|(1<<DOR0)) );
    312c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3130:	28 71       	andi	r18, 0x18	; 24

    // above errors are valid until UDR0 is read, e.g., now
    data = UDR0;
    3132:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    next_index = ( RxHead + 1) & ( UART0_RX0_SIZE - 1);
    3136:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <RxHead>
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	01 96       	adiw	r24, 0x01	; 1
    313e:	8f 71       	andi	r24, 0x1F	; 31
    3140:	99 27       	eor	r25, r25
    
    if ( next_index == RxTail ) 
    3142:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <RxTail>
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	84 17       	cp	r24, r20
    314a:	95 07       	cpc	r25, r21
    314c:	11 f4       	brne	.+4      	; 0x3152 <__vector_18+0x40>
    {
        last_status += UART0_BUFFER_OVERFLOW;
    314e:	2e 5f       	subi	r18, 0xFE	; 254
    3150:	06 c0       	rjmp	.+12     	; 0x315e <__vector_18+0x4c>
    } 
    else 
    {
        RxHead = next_index;
    3152:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <RxHead>
        RxBuf[next_index] = data;
    3156:	fc 01       	movw	r30, r24
    3158:	eb 54       	subi	r30, 0x4B	; 75
    315a:	fd 4f       	sbci	r31, 0xFD	; 253
    315c:	30 83       	st	Z, r19
    }
    UART0_error = last_status;   
    315e:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <UART0_error>
}
    3162:	ff 91       	pop	r31
    3164:	ef 91       	pop	r30
    3166:	9f 91       	pop	r25
    3168:	8f 91       	pop	r24
    316a:	5f 91       	pop	r21
    316c:	4f 91       	pop	r20
    316e:	3f 91       	pop	r19
    3170:	2f 91       	pop	r18
    3172:	0f 90       	pop	r0
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	0f 90       	pop	r0
    3178:	1f 90       	pop	r1
    317a:	18 95       	reti

0000317c <__vector_19>:


ISR(USART0_UDRE_vect)
{
    317c:	1f 92       	push	r1
    317e:	0f 92       	push	r0
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	0f 92       	push	r0
    3184:	11 24       	eor	r1, r1
    3186:	8f 93       	push	r24
    3188:	9f 93       	push	r25
    318a:	ef 93       	push	r30
    318c:	ff 93       	push	r31
    uint16_t tmptail;

    if ( TxHead != TxTail) 
    318e:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <TxHead>
    3192:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <TxTail>
    3196:	98 17       	cp	r25, r24
    3198:	79 f0       	breq	.+30     	; 0x31b8 <__vector_19+0x3c>
    {
        tmptail = (TxTail + 1) & ( UART0_TX0_SIZE - 1); // calculate and store new buffer index
    319a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <TxTail>
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	01 96       	adiw	r24, 0x01	; 1
    31a2:	8f 71       	andi	r24, 0x1F	; 31
    31a4:	99 27       	eor	r25, r25
        TxTail = tmptail;
    31a6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <TxTail>
        UDR0 = TxBuf[tmptail]; // get one byte from buffer and send it with UART
    31aa:	fc 01       	movw	r30, r24
    31ac:	eb 52       	subi	r30, 0x2B	; 43
    31ae:	fd 4f       	sbci	r31, 0xFD	; 253
    31b0:	80 81       	ld	r24, Z
    31b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <__vector_19+0x46>
    } 
    else 
    {
        UCSR0B &= ~(1<<UDRIE0); // tx buffer empty, disable UDRE interrupt
    31b8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    31bc:	8f 7d       	andi	r24, 0xDF	; 223
    31be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    31c2:	ff 91       	pop	r31
    31c4:	ef 91       	pop	r30
    31c6:	9f 91       	pop	r25
    31c8:	8f 91       	pop	r24
    31ca:	0f 90       	pop	r0
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	0f 90       	pop	r0
    31d0:	1f 90       	pop	r1
    31d2:	18 95       	reti

000031d4 <uart0_available>:
}

// Number of bytes available in the receive buffer.
int uart0_available(void)
{
    return (UART0_RX0_SIZE + RxHead - RxTail) & ( UART0_RX0_SIZE - 1);
    31d4:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <RxHead>
    31d8:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <RxTail>
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	80 96       	adiw	r24, 0x20	; 32
    31e0:	82 1b       	sub	r24, r18
    31e2:	91 09       	sbc	r25, r1
}
    31e4:	8f 71       	andi	r24, 0x1F	; 31
    31e6:	99 27       	eor	r25, r25
    31e8:	08 95       	ret

000031ea <uart0_getchar>:
int uart0_getchar(FILE *stream)
{
    uint16_t next_index;
    uint8_t data;

    while( !(uart0_available()) );  // wait for input
    31ea:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <uart0_available>
    31ee:	89 2b       	or	r24, r25
    31f0:	e1 f3       	breq	.-8      	; 0x31ea <uart0_getchar>

    if ( RxHead == RxTail ) 
    31f2:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <RxHead>
    31f6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <RxTail>
    31fa:	98 13       	cpse	r25, r24
    31fc:	07 c0       	rjmp	.+14     	; 0x320c <uart0_getchar+0x22>
    {
        UART0_error += UART0_NO_DATA;
    31fe:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <UART0_error>
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <UART0_error>
        data = 0;
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	0c c0       	rjmp	.+24     	; 0x3224 <uart0_getchar+0x3a>
    }
    else
    {
        next_index = (RxTail + 1) & ( UART0_RX0_SIZE - 1);
    320c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <RxTail>
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	8f 71       	andi	r24, 0x1F	; 31
    3216:	99 27       	eor	r25, r25
        RxTail = next_index;
    3218:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <RxTail>
        data = RxBuf[next_index]; // get byte from rx buffer
    321c:	fc 01       	movw	r30, r24
    321e:	eb 54       	subi	r30, 0x4B	; 75
    3220:	fd 4f       	sbci	r31, 0xFD	; 253
    3222:	80 81       	ld	r24, Z
    }

    // I use UART0_RX_REPLACE_CR_WITH_NL to simplify command parsing from a host 
    if ( (options & UART0_RX_REPLACE_CR_WITH_NL) && (data == '\r') ) data = '\n';
    3224:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <options>
    3228:	91 ff       	sbrs	r25, 1
    322a:	03 c0       	rjmp	.+6      	; 0x3232 <uart0_getchar+0x48>
    322c:	8d 30       	cpi	r24, 0x0D	; 13
    322e:	09 f4       	brne	.+2      	; 0x3232 <uart0_getchar+0x48>
    3230:	8a e0       	ldi	r24, 0x0A	; 10
    return (int) data;
}
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	08 95       	ret

00003236 <uart0_init>:
static FILE uartstream0_f = FDEV_SETUP_STREAM(uart0_putchar, uart0_getchar, _FDEV_SETUP_RW);

// Initialize the UART and return file handle, disconnect UART if baudrate is zero.
// choices e.g., UART0_TX_REPLACE_NL_WITH_CR & UART0_RX_REPLACE_CR_WITH_NL
FILE *uart0_init(uint32_t baudrate, uint8_t choices)
{
    3236:	cf 92       	push	r12
    3238:	df 92       	push	r13
    323a:	ef 92       	push	r14
    323c:	ff 92       	push	r15
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	8b 01       	movw	r16, r22
    3246:	9c 01       	movw	r18, r24
    3248:	c4 2f       	mov	r28, r20
    uint16_t ubrr = UART0_BAUD_SELECT(baudrate);
    324a:	6b 01       	movw	r12, r22
    324c:	7c 01       	movw	r14, r24
    324e:	80 e6       	ldi	r24, 0x60	; 96
    3250:	c8 0e       	add	r12, r24
    3252:	83 ee       	ldi	r24, 0xE3	; 227
    3254:	d8 1e       	adc	r13, r24
    3256:	86 e1       	ldi	r24, 0x16	; 22
    3258:	e8 1e       	adc	r14, r24
    325a:	f1 1c       	adc	r15, r1
    325c:	c7 01       	movw	r24, r14
    325e:	b6 01       	movw	r22, r12
    3260:	43 e0       	ldi	r20, 0x03	; 3
    3262:	66 0f       	add	r22, r22
    3264:	77 1f       	adc	r23, r23
    3266:	88 1f       	adc	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	4a 95       	dec	r20
    326c:	d1 f7       	brne	.-12     	; 0x3262 <uart0_init+0x2c>
    326e:	a9 01       	movw	r20, r18
    3270:	98 01       	movw	r18, r16
    3272:	e4 e0       	ldi	r30, 0x04	; 4
    3274:	22 0f       	add	r18, r18
    3276:	33 1f       	adc	r19, r19
    3278:	44 1f       	adc	r20, r20
    327a:	55 1f       	adc	r21, r21
    327c:	ea 95       	dec	r30
    327e:	d1 f7       	brne	.-12     	; 0x3274 <uart0_init+0x3e>
    3280:	0e 94 85 19 	call	0x330a	; 0x330a <__udivmodsi4>
    3284:	21 50       	subi	r18, 0x01	; 1
    3286:	31 09       	sbc	r19, r1
    
    TxHead = 0;
    3288:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <TxHead>
    TxTail = 0;
    328c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <TxTail>
    RxHead = 0;
    3290:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <RxHead>
    RxTail = 0;
    3294:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <RxTail>

    // disconnect UART if baudrate is zero (ubrr is 0/-1 in this case)
    if (ubrr == 0)
    3298:	21 15       	cp	r18, r1
    329a:	31 05       	cpc	r19, r1
    329c:	31 f4       	brne	.+12     	; 0x32aa <uart0_init+0x74>
    {
        uint8_t local_UCSR0B = UCSR0B & ~(1<<TXEN0); // trun off the transmiter
    329e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    32a2:	87 7f       	andi	r24, 0xF7	; 247
        UCSR0B = local_UCSR0B;
    32a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    32a8:	10 c0       	rjmp	.+32     	; 0x32ca <uart0_init+0x94>
    }
    else
    {
        if (ubrr & 0x8000) 
    32aa:	37 ff       	sbrs	r19, 7
    32ac:	04 c0       	rjmp	.+8      	; 0x32b6 <uart0_init+0x80>
        {
            UCSR0A = (1<<U2X0);  //Double speed mode (status register)
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
            ubrr &= ~0x8000;
    32b4:	3f 77       	andi	r19, 0x7F	; 127
        }
        UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); // enable TX and RX
    32b6:	88 e9       	ldi	r24, 0x98	; 152
    32b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
        UCSR0C = (3<<UCSZ00); // control frame format asynchronous, 8data, no parity, 1stop bit
    32bc:	86 e0       	ldi	r24, 0x06	; 6
    32be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
        UBRR0H = (uint8_t)(ubrr>>8);
    32c2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
        UBRR0L = (uint8_t) ubrr;
    32c6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    }

    options = choices;
    32ca:	c0 93 b0 02 	sts	0x02B0, r28	; 0x8002b0 <options>

    return &uartstream0_f;
}
    32ce:	88 e0       	ldi	r24, 0x08	; 8
    32d0:	91 e0       	ldi	r25, 0x01	; 1
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	cf 90       	pop	r12
    32e0:	08 95       	ret

000032e2 <__divmodhi4>:
    32e2:	97 fb       	bst	r25, 7
    32e4:	07 2e       	mov	r0, r23
    32e6:	16 f4       	brtc	.+4      	; 0x32ec <__divmodhi4+0xa>
    32e8:	00 94       	com	r0
    32ea:	07 d0       	rcall	.+14     	; 0x32fa <__divmodhi4_neg1>
    32ec:	77 fd       	sbrc	r23, 7
    32ee:	09 d0       	rcall	.+18     	; 0x3302 <__divmodhi4_neg2>
    32f0:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
    32f4:	07 fc       	sbrc	r0, 7
    32f6:	05 d0       	rcall	.+10     	; 0x3302 <__divmodhi4_neg2>
    32f8:	3e f4       	brtc	.+14     	; 0x3308 <__divmodhi4_exit>

000032fa <__divmodhi4_neg1>:
    32fa:	90 95       	com	r25
    32fc:	81 95       	neg	r24
    32fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3300:	08 95       	ret

00003302 <__divmodhi4_neg2>:
    3302:	70 95       	com	r23
    3304:	61 95       	neg	r22
    3306:	7f 4f       	sbci	r23, 0xFF	; 255

00003308 <__divmodhi4_exit>:
    3308:	08 95       	ret

0000330a <__udivmodsi4>:
    330a:	a1 e2       	ldi	r26, 0x21	; 33
    330c:	1a 2e       	mov	r1, r26
    330e:	aa 1b       	sub	r26, r26
    3310:	bb 1b       	sub	r27, r27
    3312:	fd 01       	movw	r30, r26
    3314:	0d c0       	rjmp	.+26     	; 0x3330 <__udivmodsi4_ep>

00003316 <__udivmodsi4_loop>:
    3316:	aa 1f       	adc	r26, r26
    3318:	bb 1f       	adc	r27, r27
    331a:	ee 1f       	adc	r30, r30
    331c:	ff 1f       	adc	r31, r31
    331e:	a2 17       	cp	r26, r18
    3320:	b3 07       	cpc	r27, r19
    3322:	e4 07       	cpc	r30, r20
    3324:	f5 07       	cpc	r31, r21
    3326:	20 f0       	brcs	.+8      	; 0x3330 <__udivmodsi4_ep>
    3328:	a2 1b       	sub	r26, r18
    332a:	b3 0b       	sbc	r27, r19
    332c:	e4 0b       	sbc	r30, r20
    332e:	f5 0b       	sbc	r31, r21

00003330 <__udivmodsi4_ep>:
    3330:	66 1f       	adc	r22, r22
    3332:	77 1f       	adc	r23, r23
    3334:	88 1f       	adc	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	1a 94       	dec	r1
    333a:	69 f7       	brne	.-38     	; 0x3316 <__udivmodsi4_loop>
    333c:	60 95       	com	r22
    333e:	70 95       	com	r23
    3340:	80 95       	com	r24
    3342:	90 95       	com	r25
    3344:	9b 01       	movw	r18, r22
    3346:	ac 01       	movw	r20, r24
    3348:	bd 01       	movw	r22, r26
    334a:	cf 01       	movw	r24, r30
    334c:	08 95       	ret

0000334e <__udivmodhi4>:
    334e:	aa 1b       	sub	r26, r26
    3350:	bb 1b       	sub	r27, r27
    3352:	51 e1       	ldi	r21, 0x11	; 17
    3354:	07 c0       	rjmp	.+14     	; 0x3364 <__udivmodhi4_ep>

00003356 <__udivmodhi4_loop>:
    3356:	aa 1f       	adc	r26, r26
    3358:	bb 1f       	adc	r27, r27
    335a:	a6 17       	cp	r26, r22
    335c:	b7 07       	cpc	r27, r23
    335e:	10 f0       	brcs	.+4      	; 0x3364 <__udivmodhi4_ep>
    3360:	a6 1b       	sub	r26, r22
    3362:	b7 0b       	sbc	r27, r23

00003364 <__udivmodhi4_ep>:
    3364:	88 1f       	adc	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	5a 95       	dec	r21
    336a:	a9 f7       	brne	.-22     	; 0x3356 <__udivmodhi4_loop>
    336c:	80 95       	com	r24
    336e:	90 95       	com	r25
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	08 95       	ret

00003376 <__cmpsf2>:
    3376:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fp_cmp>
    337a:	08 f4       	brcc	.+2      	; 0x337e <__cmpsf2+0x8>
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	08 95       	ret

00003380 <__fp_cmp>:
    3380:	99 0f       	add	r25, r25
    3382:	00 08       	sbc	r0, r0
    3384:	55 0f       	add	r21, r21
    3386:	aa 0b       	sbc	r26, r26
    3388:	e0 e8       	ldi	r30, 0x80	; 128
    338a:	fe ef       	ldi	r31, 0xFE	; 254
    338c:	16 16       	cp	r1, r22
    338e:	17 06       	cpc	r1, r23
    3390:	e8 07       	cpc	r30, r24
    3392:	f9 07       	cpc	r31, r25
    3394:	c0 f0       	brcs	.+48     	; 0x33c6 <__fp_cmp+0x46>
    3396:	12 16       	cp	r1, r18
    3398:	13 06       	cpc	r1, r19
    339a:	e4 07       	cpc	r30, r20
    339c:	f5 07       	cpc	r31, r21
    339e:	98 f0       	brcs	.+38     	; 0x33c6 <__fp_cmp+0x46>
    33a0:	62 1b       	sub	r22, r18
    33a2:	73 0b       	sbc	r23, r19
    33a4:	84 0b       	sbc	r24, r20
    33a6:	95 0b       	sbc	r25, r21
    33a8:	39 f4       	brne	.+14     	; 0x33b8 <__fp_cmp+0x38>
    33aa:	0a 26       	eor	r0, r26
    33ac:	61 f0       	breq	.+24     	; 0x33c6 <__fp_cmp+0x46>
    33ae:	23 2b       	or	r18, r19
    33b0:	24 2b       	or	r18, r20
    33b2:	25 2b       	or	r18, r21
    33b4:	21 f4       	brne	.+8      	; 0x33be <__fp_cmp+0x3e>
    33b6:	08 95       	ret
    33b8:	0a 26       	eor	r0, r26
    33ba:	09 f4       	brne	.+2      	; 0x33be <__fp_cmp+0x3e>
    33bc:	a1 40       	sbci	r26, 0x01	; 1
    33be:	a6 95       	lsr	r26
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	81 1d       	adc	r24, r1
    33c4:	81 1d       	adc	r24, r1
    33c6:	08 95       	ret

000033c8 <__gesf2>:
    33c8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fp_cmp>
    33cc:	08 f4       	brcc	.+2      	; 0x33d0 <__gesf2+0x8>
    33ce:	8f ef       	ldi	r24, 0xFF	; 255
    33d0:	08 95       	ret

000033d2 <fgetc>:
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	ec 01       	movw	r28, r24
    33d8:	2b 81       	ldd	r18, Y+3	; 0x03
    33da:	20 ff       	sbrs	r18, 0
    33dc:	33 c0       	rjmp	.+102    	; 0x3444 <fgetc+0x72>
    33de:	26 ff       	sbrs	r18, 6
    33e0:	0a c0       	rjmp	.+20     	; 0x33f6 <fgetc+0x24>
    33e2:	2f 7b       	andi	r18, 0xBF	; 191
    33e4:	2b 83       	std	Y+3, r18	; 0x03
    33e6:	8e 81       	ldd	r24, Y+6	; 0x06
    33e8:	9f 81       	ldd	r25, Y+7	; 0x07
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	9f 83       	std	Y+7, r25	; 0x07
    33ee:	8e 83       	std	Y+6, r24	; 0x06
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	29 c0       	rjmp	.+82     	; 0x3448 <fgetc+0x76>
    33f6:	22 ff       	sbrs	r18, 2
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <fgetc+0x46>
    33fa:	e8 81       	ld	r30, Y
    33fc:	f9 81       	ldd	r31, Y+1	; 0x01
    33fe:	80 81       	ld	r24, Z
    3400:	08 2e       	mov	r0, r24
    3402:	00 0c       	add	r0, r0
    3404:	99 0b       	sbc	r25, r25
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	19 f4       	brne	.+6      	; 0x3410 <fgetc+0x3e>
    340a:	20 62       	ori	r18, 0x20	; 32
    340c:	2b 83       	std	Y+3, r18	; 0x03
    340e:	1a c0       	rjmp	.+52     	; 0x3444 <fgetc+0x72>
    3410:	31 96       	adiw	r30, 0x01	; 1
    3412:	f9 83       	std	Y+1, r31	; 0x01
    3414:	e8 83       	st	Y, r30
    3416:	0e c0       	rjmp	.+28     	; 0x3434 <fgetc+0x62>
    3418:	ea 85       	ldd	r30, Y+10	; 0x0a
    341a:	fb 85       	ldd	r31, Y+11	; 0x0b
    341c:	09 95       	icall
    341e:	97 ff       	sbrs	r25, 7
    3420:	09 c0       	rjmp	.+18     	; 0x3434 <fgetc+0x62>
    3422:	2b 81       	ldd	r18, Y+3	; 0x03
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	11 f0       	breq	.+4      	; 0x342c <fgetc+0x5a>
    3428:	80 e2       	ldi	r24, 0x20	; 32
    342a:	01 c0       	rjmp	.+2      	; 0x342e <fgetc+0x5c>
    342c:	80 e1       	ldi	r24, 0x10	; 16
    342e:	82 2b       	or	r24, r18
    3430:	8b 83       	std	Y+3, r24	; 0x03
    3432:	08 c0       	rjmp	.+16     	; 0x3444 <fgetc+0x72>
    3434:	2e 81       	ldd	r18, Y+6	; 0x06
    3436:	3f 81       	ldd	r19, Y+7	; 0x07
    3438:	2f 5f       	subi	r18, 0xFF	; 255
    343a:	3f 4f       	sbci	r19, 0xFF	; 255
    343c:	3f 83       	std	Y+7, r19	; 0x07
    343e:	2e 83       	std	Y+6, r18	; 0x06
    3440:	99 27       	eor	r25, r25
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <fgetc+0x76>
    3444:	8f ef       	ldi	r24, 0xFF	; 255
    3446:	9f ef       	ldi	r25, 0xFF	; 255
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <printf>:
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	ed e2       	ldi	r30, 0x2D	; 45
    3454:	fa e1       	ldi	r31, 0x1A	; 26
    3456:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x20>
    345a:	ae 01       	movw	r20, r28
    345c:	4b 5f       	subi	r20, 0xFB	; 251
    345e:	5f 4f       	sbci	r21, 0xFF	; 255
    3460:	fa 01       	movw	r30, r20
    3462:	61 91       	ld	r22, Z+
    3464:	71 91       	ld	r23, Z+
    3466:	af 01       	movw	r20, r30
    3468:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <__iob+0x2>
    346c:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <__iob+0x3>
    3470:	0e 94 3d 1a 	call	0x347a	; 0x347a <vfprintf>
    3474:	e2 e0       	ldi	r30, 0x02	; 2
    3476:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x20>

0000347a <vfprintf>:
    347a:	ab e0       	ldi	r26, 0x0B	; 11
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	e3 e4       	ldi	r30, 0x43	; 67
    3480:	fa e1       	ldi	r31, 0x1A	; 26
    3482:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__prologue_saves__>
    3486:	6c 01       	movw	r12, r24
    3488:	7b 01       	movw	r14, r22
    348a:	8a 01       	movw	r16, r20
    348c:	fc 01       	movw	r30, r24
    348e:	17 82       	std	Z+7, r1	; 0x07
    3490:	16 82       	std	Z+6, r1	; 0x06
    3492:	83 81       	ldd	r24, Z+3	; 0x03
    3494:	81 ff       	sbrs	r24, 1
    3496:	cc c1       	rjmp	.+920    	; 0x3830 <vfprintf+0x3b6>
    3498:	ce 01       	movw	r24, r28
    349a:	01 96       	adiw	r24, 0x01	; 1
    349c:	3c 01       	movw	r6, r24
    349e:	f6 01       	movw	r30, r12
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	f7 01       	movw	r30, r14
    34a4:	93 fd       	sbrc	r25, 3
    34a6:	85 91       	lpm	r24, Z+
    34a8:	93 ff       	sbrs	r25, 3
    34aa:	81 91       	ld	r24, Z+
    34ac:	7f 01       	movw	r14, r30
    34ae:	88 23       	and	r24, r24
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <vfprintf+0x3a>
    34b2:	ba c1       	rjmp	.+884    	; 0x3828 <vfprintf+0x3ae>
    34b4:	85 32       	cpi	r24, 0x25	; 37
    34b6:	39 f4       	brne	.+14     	; 0x34c6 <vfprintf+0x4c>
    34b8:	93 fd       	sbrc	r25, 3
    34ba:	85 91       	lpm	r24, Z+
    34bc:	93 ff       	sbrs	r25, 3
    34be:	81 91       	ld	r24, Z+
    34c0:	7f 01       	movw	r14, r30
    34c2:	85 32       	cpi	r24, 0x25	; 37
    34c4:	29 f4       	brne	.+10     	; 0x34d0 <vfprintf+0x56>
    34c6:	b6 01       	movw	r22, r12
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    34ce:	e7 cf       	rjmp	.-50     	; 0x349e <vfprintf+0x24>
    34d0:	91 2c       	mov	r9, r1
    34d2:	21 2c       	mov	r2, r1
    34d4:	31 2c       	mov	r3, r1
    34d6:	ff e1       	ldi	r31, 0x1F	; 31
    34d8:	f3 15       	cp	r31, r3
    34da:	d8 f0       	brcs	.+54     	; 0x3512 <vfprintf+0x98>
    34dc:	8b 32       	cpi	r24, 0x2B	; 43
    34de:	79 f0       	breq	.+30     	; 0x34fe <vfprintf+0x84>
    34e0:	38 f4       	brcc	.+14     	; 0x34f0 <vfprintf+0x76>
    34e2:	80 32       	cpi	r24, 0x20	; 32
    34e4:	79 f0       	breq	.+30     	; 0x3504 <vfprintf+0x8a>
    34e6:	83 32       	cpi	r24, 0x23	; 35
    34e8:	a1 f4       	brne	.+40     	; 0x3512 <vfprintf+0x98>
    34ea:	23 2d       	mov	r18, r3
    34ec:	20 61       	ori	r18, 0x10	; 16
    34ee:	1d c0       	rjmp	.+58     	; 0x352a <vfprintf+0xb0>
    34f0:	8d 32       	cpi	r24, 0x2D	; 45
    34f2:	61 f0       	breq	.+24     	; 0x350c <vfprintf+0x92>
    34f4:	80 33       	cpi	r24, 0x30	; 48
    34f6:	69 f4       	brne	.+26     	; 0x3512 <vfprintf+0x98>
    34f8:	23 2d       	mov	r18, r3
    34fa:	21 60       	ori	r18, 0x01	; 1
    34fc:	16 c0       	rjmp	.+44     	; 0x352a <vfprintf+0xb0>
    34fe:	83 2d       	mov	r24, r3
    3500:	82 60       	ori	r24, 0x02	; 2
    3502:	38 2e       	mov	r3, r24
    3504:	e3 2d       	mov	r30, r3
    3506:	e4 60       	ori	r30, 0x04	; 4
    3508:	3e 2e       	mov	r3, r30
    350a:	2a c0       	rjmp	.+84     	; 0x3560 <vfprintf+0xe6>
    350c:	f3 2d       	mov	r31, r3
    350e:	f8 60       	ori	r31, 0x08	; 8
    3510:	1d c0       	rjmp	.+58     	; 0x354c <vfprintf+0xd2>
    3512:	37 fc       	sbrc	r3, 7
    3514:	2d c0       	rjmp	.+90     	; 0x3570 <vfprintf+0xf6>
    3516:	20 ed       	ldi	r18, 0xD0	; 208
    3518:	28 0f       	add	r18, r24
    351a:	2a 30       	cpi	r18, 0x0A	; 10
    351c:	40 f0       	brcs	.+16     	; 0x352e <vfprintf+0xb4>
    351e:	8e 32       	cpi	r24, 0x2E	; 46
    3520:	b9 f4       	brne	.+46     	; 0x3550 <vfprintf+0xd6>
    3522:	36 fc       	sbrc	r3, 6
    3524:	81 c1       	rjmp	.+770    	; 0x3828 <vfprintf+0x3ae>
    3526:	23 2d       	mov	r18, r3
    3528:	20 64       	ori	r18, 0x40	; 64
    352a:	32 2e       	mov	r3, r18
    352c:	19 c0       	rjmp	.+50     	; 0x3560 <vfprintf+0xe6>
    352e:	36 fe       	sbrs	r3, 6
    3530:	06 c0       	rjmp	.+12     	; 0x353e <vfprintf+0xc4>
    3532:	8a e0       	ldi	r24, 0x0A	; 10
    3534:	98 9e       	mul	r9, r24
    3536:	20 0d       	add	r18, r0
    3538:	11 24       	eor	r1, r1
    353a:	92 2e       	mov	r9, r18
    353c:	11 c0       	rjmp	.+34     	; 0x3560 <vfprintf+0xe6>
    353e:	ea e0       	ldi	r30, 0x0A	; 10
    3540:	2e 9e       	mul	r2, r30
    3542:	20 0d       	add	r18, r0
    3544:	11 24       	eor	r1, r1
    3546:	22 2e       	mov	r2, r18
    3548:	f3 2d       	mov	r31, r3
    354a:	f0 62       	ori	r31, 0x20	; 32
    354c:	3f 2e       	mov	r3, r31
    354e:	08 c0       	rjmp	.+16     	; 0x3560 <vfprintf+0xe6>
    3550:	8c 36       	cpi	r24, 0x6C	; 108
    3552:	21 f4       	brne	.+8      	; 0x355c <vfprintf+0xe2>
    3554:	83 2d       	mov	r24, r3
    3556:	80 68       	ori	r24, 0x80	; 128
    3558:	38 2e       	mov	r3, r24
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <vfprintf+0xe6>
    355c:	88 36       	cpi	r24, 0x68	; 104
    355e:	41 f4       	brne	.+16     	; 0x3570 <vfprintf+0xf6>
    3560:	f7 01       	movw	r30, r14
    3562:	93 fd       	sbrc	r25, 3
    3564:	85 91       	lpm	r24, Z+
    3566:	93 ff       	sbrs	r25, 3
    3568:	81 91       	ld	r24, Z+
    356a:	7f 01       	movw	r14, r30
    356c:	81 11       	cpse	r24, r1
    356e:	b3 cf       	rjmp	.-154    	; 0x34d6 <vfprintf+0x5c>
    3570:	98 2f       	mov	r25, r24
    3572:	9f 7d       	andi	r25, 0xDF	; 223
    3574:	95 54       	subi	r25, 0x45	; 69
    3576:	93 30       	cpi	r25, 0x03	; 3
    3578:	28 f4       	brcc	.+10     	; 0x3584 <vfprintf+0x10a>
    357a:	0c 5f       	subi	r16, 0xFC	; 252
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	9f e3       	ldi	r25, 0x3F	; 63
    3580:	99 83       	std	Y+1, r25	; 0x01
    3582:	0d c0       	rjmp	.+26     	; 0x359e <vfprintf+0x124>
    3584:	83 36       	cpi	r24, 0x63	; 99
    3586:	31 f0       	breq	.+12     	; 0x3594 <vfprintf+0x11a>
    3588:	83 37       	cpi	r24, 0x73	; 115
    358a:	71 f0       	breq	.+28     	; 0x35a8 <vfprintf+0x12e>
    358c:	83 35       	cpi	r24, 0x53	; 83
    358e:	09 f0       	breq	.+2      	; 0x3592 <vfprintf+0x118>
    3590:	59 c0       	rjmp	.+178    	; 0x3644 <vfprintf+0x1ca>
    3592:	21 c0       	rjmp	.+66     	; 0x35d6 <vfprintf+0x15c>
    3594:	f8 01       	movw	r30, r16
    3596:	80 81       	ld	r24, Z
    3598:	89 83       	std	Y+1, r24	; 0x01
    359a:	0e 5f       	subi	r16, 0xFE	; 254
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
    359e:	88 24       	eor	r8, r8
    35a0:	83 94       	inc	r8
    35a2:	91 2c       	mov	r9, r1
    35a4:	53 01       	movw	r10, r6
    35a6:	13 c0       	rjmp	.+38     	; 0x35ce <vfprintf+0x154>
    35a8:	28 01       	movw	r4, r16
    35aa:	f2 e0       	ldi	r31, 0x02	; 2
    35ac:	4f 0e       	add	r4, r31
    35ae:	51 1c       	adc	r5, r1
    35b0:	f8 01       	movw	r30, r16
    35b2:	a0 80       	ld	r10, Z
    35b4:	b1 80       	ldd	r11, Z+1	; 0x01
    35b6:	36 fe       	sbrs	r3, 6
    35b8:	03 c0       	rjmp	.+6      	; 0x35c0 <vfprintf+0x146>
    35ba:	69 2d       	mov	r22, r9
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <vfprintf+0x14a>
    35c0:	6f ef       	ldi	r22, 0xFF	; 255
    35c2:	7f ef       	ldi	r23, 0xFF	; 255
    35c4:	c5 01       	movw	r24, r10
    35c6:	0e 94 29 1c 	call	0x3852	; 0x3852 <strnlen>
    35ca:	4c 01       	movw	r8, r24
    35cc:	82 01       	movw	r16, r4
    35ce:	f3 2d       	mov	r31, r3
    35d0:	ff 77       	andi	r31, 0x7F	; 127
    35d2:	3f 2e       	mov	r3, r31
    35d4:	16 c0       	rjmp	.+44     	; 0x3602 <vfprintf+0x188>
    35d6:	28 01       	movw	r4, r16
    35d8:	22 e0       	ldi	r18, 0x02	; 2
    35da:	42 0e       	add	r4, r18
    35dc:	51 1c       	adc	r5, r1
    35de:	f8 01       	movw	r30, r16
    35e0:	a0 80       	ld	r10, Z
    35e2:	b1 80       	ldd	r11, Z+1	; 0x01
    35e4:	36 fe       	sbrs	r3, 6
    35e6:	03 c0       	rjmp	.+6      	; 0x35ee <vfprintf+0x174>
    35e8:	69 2d       	mov	r22, r9
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <vfprintf+0x178>
    35ee:	6f ef       	ldi	r22, 0xFF	; 255
    35f0:	7f ef       	ldi	r23, 0xFF	; 255
    35f2:	c5 01       	movw	r24, r10
    35f4:	0e 94 1e 1c 	call	0x383c	; 0x383c <strnlen_P>
    35f8:	4c 01       	movw	r8, r24
    35fa:	f3 2d       	mov	r31, r3
    35fc:	f0 68       	ori	r31, 0x80	; 128
    35fe:	3f 2e       	mov	r3, r31
    3600:	82 01       	movw	r16, r4
    3602:	33 fc       	sbrc	r3, 3
    3604:	1b c0       	rjmp	.+54     	; 0x363c <vfprintf+0x1c2>
    3606:	82 2d       	mov	r24, r2
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	88 16       	cp	r8, r24
    360c:	99 06       	cpc	r9, r25
    360e:	b0 f4       	brcc	.+44     	; 0x363c <vfprintf+0x1c2>
    3610:	b6 01       	movw	r22, r12
    3612:	80 e2       	ldi	r24, 0x20	; 32
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    361a:	2a 94       	dec	r2
    361c:	f4 cf       	rjmp	.-24     	; 0x3606 <vfprintf+0x18c>
    361e:	f5 01       	movw	r30, r10
    3620:	37 fc       	sbrc	r3, 7
    3622:	85 91       	lpm	r24, Z+
    3624:	37 fe       	sbrs	r3, 7
    3626:	81 91       	ld	r24, Z+
    3628:	5f 01       	movw	r10, r30
    362a:	b6 01       	movw	r22, r12
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    3632:	21 10       	cpse	r2, r1
    3634:	2a 94       	dec	r2
    3636:	21 e0       	ldi	r18, 0x01	; 1
    3638:	82 1a       	sub	r8, r18
    363a:	91 08       	sbc	r9, r1
    363c:	81 14       	cp	r8, r1
    363e:	91 04       	cpc	r9, r1
    3640:	71 f7       	brne	.-36     	; 0x361e <vfprintf+0x1a4>
    3642:	e8 c0       	rjmp	.+464    	; 0x3814 <vfprintf+0x39a>
    3644:	84 36       	cpi	r24, 0x64	; 100
    3646:	11 f0       	breq	.+4      	; 0x364c <vfprintf+0x1d2>
    3648:	89 36       	cpi	r24, 0x69	; 105
    364a:	41 f5       	brne	.+80     	; 0x369c <vfprintf+0x222>
    364c:	f8 01       	movw	r30, r16
    364e:	37 fe       	sbrs	r3, 7
    3650:	07 c0       	rjmp	.+14     	; 0x3660 <vfprintf+0x1e6>
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	0c 5f       	subi	r16, 0xFC	; 252
    365c:	1f 4f       	sbci	r17, 0xFF	; 255
    365e:	08 c0       	rjmp	.+16     	; 0x3670 <vfprintf+0x1f6>
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	07 2e       	mov	r0, r23
    3666:	00 0c       	add	r0, r0
    3668:	88 0b       	sbc	r24, r24
    366a:	99 0b       	sbc	r25, r25
    366c:	0e 5f       	subi	r16, 0xFE	; 254
    366e:	1f 4f       	sbci	r17, 0xFF	; 255
    3670:	f3 2d       	mov	r31, r3
    3672:	ff 76       	andi	r31, 0x6F	; 111
    3674:	3f 2e       	mov	r3, r31
    3676:	97 ff       	sbrs	r25, 7
    3678:	09 c0       	rjmp	.+18     	; 0x368c <vfprintf+0x212>
    367a:	90 95       	com	r25
    367c:	80 95       	com	r24
    367e:	70 95       	com	r23
    3680:	61 95       	neg	r22
    3682:	7f 4f       	sbci	r23, 0xFF	; 255
    3684:	8f 4f       	sbci	r24, 0xFF	; 255
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	f0 68       	ori	r31, 0x80	; 128
    368a:	3f 2e       	mov	r3, r31
    368c:	2a e0       	ldi	r18, 0x0A	; 10
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	a3 01       	movw	r20, r6
    3692:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__ultoa_invert>
    3696:	88 2e       	mov	r8, r24
    3698:	86 18       	sub	r8, r6
    369a:	45 c0       	rjmp	.+138    	; 0x3726 <vfprintf+0x2ac>
    369c:	85 37       	cpi	r24, 0x75	; 117
    369e:	31 f4       	brne	.+12     	; 0x36ac <vfprintf+0x232>
    36a0:	23 2d       	mov	r18, r3
    36a2:	2f 7e       	andi	r18, 0xEF	; 239
    36a4:	b2 2e       	mov	r11, r18
    36a6:	2a e0       	ldi	r18, 0x0A	; 10
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	25 c0       	rjmp	.+74     	; 0x36f6 <vfprintf+0x27c>
    36ac:	93 2d       	mov	r25, r3
    36ae:	99 7f       	andi	r25, 0xF9	; 249
    36b0:	b9 2e       	mov	r11, r25
    36b2:	8f 36       	cpi	r24, 0x6F	; 111
    36b4:	c1 f0       	breq	.+48     	; 0x36e6 <vfprintf+0x26c>
    36b6:	18 f4       	brcc	.+6      	; 0x36be <vfprintf+0x244>
    36b8:	88 35       	cpi	r24, 0x58	; 88
    36ba:	79 f0       	breq	.+30     	; 0x36da <vfprintf+0x260>
    36bc:	b5 c0       	rjmp	.+362    	; 0x3828 <vfprintf+0x3ae>
    36be:	80 37       	cpi	r24, 0x70	; 112
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <vfprintf+0x24e>
    36c2:	88 37       	cpi	r24, 0x78	; 120
    36c4:	21 f0       	breq	.+8      	; 0x36ce <vfprintf+0x254>
    36c6:	b0 c0       	rjmp	.+352    	; 0x3828 <vfprintf+0x3ae>
    36c8:	e9 2f       	mov	r30, r25
    36ca:	e0 61       	ori	r30, 0x10	; 16
    36cc:	be 2e       	mov	r11, r30
    36ce:	b4 fe       	sbrs	r11, 4
    36d0:	0d c0       	rjmp	.+26     	; 0x36ec <vfprintf+0x272>
    36d2:	fb 2d       	mov	r31, r11
    36d4:	f4 60       	ori	r31, 0x04	; 4
    36d6:	bf 2e       	mov	r11, r31
    36d8:	09 c0       	rjmp	.+18     	; 0x36ec <vfprintf+0x272>
    36da:	34 fe       	sbrs	r3, 4
    36dc:	0a c0       	rjmp	.+20     	; 0x36f2 <vfprintf+0x278>
    36de:	29 2f       	mov	r18, r25
    36e0:	26 60       	ori	r18, 0x06	; 6
    36e2:	b2 2e       	mov	r11, r18
    36e4:	06 c0       	rjmp	.+12     	; 0x36f2 <vfprintf+0x278>
    36e6:	28 e0       	ldi	r18, 0x08	; 8
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	05 c0       	rjmp	.+10     	; 0x36f6 <vfprintf+0x27c>
    36ec:	20 e1       	ldi	r18, 0x10	; 16
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <vfprintf+0x27c>
    36f2:	20 e1       	ldi	r18, 0x10	; 16
    36f4:	32 e0       	ldi	r19, 0x02	; 2
    36f6:	f8 01       	movw	r30, r16
    36f8:	b7 fe       	sbrs	r11, 7
    36fa:	07 c0       	rjmp	.+14     	; 0x370a <vfprintf+0x290>
    36fc:	60 81       	ld	r22, Z
    36fe:	71 81       	ldd	r23, Z+1	; 0x01
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	93 81       	ldd	r25, Z+3	; 0x03
    3704:	0c 5f       	subi	r16, 0xFC	; 252
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	06 c0       	rjmp	.+12     	; 0x3716 <vfprintf+0x29c>
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	0e 5f       	subi	r16, 0xFE	; 254
    3714:	1f 4f       	sbci	r17, 0xFF	; 255
    3716:	a3 01       	movw	r20, r6
    3718:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__ultoa_invert>
    371c:	88 2e       	mov	r8, r24
    371e:	86 18       	sub	r8, r6
    3720:	fb 2d       	mov	r31, r11
    3722:	ff 77       	andi	r31, 0x7F	; 127
    3724:	3f 2e       	mov	r3, r31
    3726:	36 fe       	sbrs	r3, 6
    3728:	0d c0       	rjmp	.+26     	; 0x3744 <vfprintf+0x2ca>
    372a:	23 2d       	mov	r18, r3
    372c:	2e 7f       	andi	r18, 0xFE	; 254
    372e:	a2 2e       	mov	r10, r18
    3730:	89 14       	cp	r8, r9
    3732:	58 f4       	brcc	.+22     	; 0x374a <vfprintf+0x2d0>
    3734:	34 fe       	sbrs	r3, 4
    3736:	0b c0       	rjmp	.+22     	; 0x374e <vfprintf+0x2d4>
    3738:	32 fc       	sbrc	r3, 2
    373a:	09 c0       	rjmp	.+18     	; 0x374e <vfprintf+0x2d4>
    373c:	83 2d       	mov	r24, r3
    373e:	8e 7e       	andi	r24, 0xEE	; 238
    3740:	a8 2e       	mov	r10, r24
    3742:	05 c0       	rjmp	.+10     	; 0x374e <vfprintf+0x2d4>
    3744:	b8 2c       	mov	r11, r8
    3746:	a3 2c       	mov	r10, r3
    3748:	03 c0       	rjmp	.+6      	; 0x3750 <vfprintf+0x2d6>
    374a:	b8 2c       	mov	r11, r8
    374c:	01 c0       	rjmp	.+2      	; 0x3750 <vfprintf+0x2d6>
    374e:	b9 2c       	mov	r11, r9
    3750:	a4 fe       	sbrs	r10, 4
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <vfprintf+0x2f8>
    3754:	fe 01       	movw	r30, r28
    3756:	e8 0d       	add	r30, r8
    3758:	f1 1d       	adc	r31, r1
    375a:	80 81       	ld	r24, Z
    375c:	80 33       	cpi	r24, 0x30	; 48
    375e:	21 f4       	brne	.+8      	; 0x3768 <vfprintf+0x2ee>
    3760:	9a 2d       	mov	r25, r10
    3762:	99 7e       	andi	r25, 0xE9	; 233
    3764:	a9 2e       	mov	r10, r25
    3766:	09 c0       	rjmp	.+18     	; 0x377a <vfprintf+0x300>
    3768:	a2 fe       	sbrs	r10, 2
    376a:	06 c0       	rjmp	.+12     	; 0x3778 <vfprintf+0x2fe>
    376c:	b3 94       	inc	r11
    376e:	b3 94       	inc	r11
    3770:	04 c0       	rjmp	.+8      	; 0x377a <vfprintf+0x300>
    3772:	8a 2d       	mov	r24, r10
    3774:	86 78       	andi	r24, 0x86	; 134
    3776:	09 f0       	breq	.+2      	; 0x377a <vfprintf+0x300>
    3778:	b3 94       	inc	r11
    377a:	a3 fc       	sbrc	r10, 3
    377c:	11 c0       	rjmp	.+34     	; 0x37a0 <vfprintf+0x326>
    377e:	a0 fe       	sbrs	r10, 0
    3780:	06 c0       	rjmp	.+12     	; 0x378e <vfprintf+0x314>
    3782:	b2 14       	cp	r11, r2
    3784:	88 f4       	brcc	.+34     	; 0x37a8 <vfprintf+0x32e>
    3786:	28 0c       	add	r2, r8
    3788:	92 2c       	mov	r9, r2
    378a:	9b 18       	sub	r9, r11
    378c:	0e c0       	rjmp	.+28     	; 0x37aa <vfprintf+0x330>
    378e:	b2 14       	cp	r11, r2
    3790:	60 f4       	brcc	.+24     	; 0x37aa <vfprintf+0x330>
    3792:	b6 01       	movw	r22, r12
    3794:	80 e2       	ldi	r24, 0x20	; 32
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    379c:	b3 94       	inc	r11
    379e:	f7 cf       	rjmp	.-18     	; 0x378e <vfprintf+0x314>
    37a0:	b2 14       	cp	r11, r2
    37a2:	18 f4       	brcc	.+6      	; 0x37aa <vfprintf+0x330>
    37a4:	2b 18       	sub	r2, r11
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <vfprintf+0x332>
    37a8:	98 2c       	mov	r9, r8
    37aa:	21 2c       	mov	r2, r1
    37ac:	a4 fe       	sbrs	r10, 4
    37ae:	10 c0       	rjmp	.+32     	; 0x37d0 <vfprintf+0x356>
    37b0:	b6 01       	movw	r22, r12
    37b2:	80 e3       	ldi	r24, 0x30	; 48
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    37ba:	a2 fe       	sbrs	r10, 2
    37bc:	17 c0       	rjmp	.+46     	; 0x37ec <vfprintf+0x372>
    37be:	a1 fc       	sbrc	r10, 1
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <vfprintf+0x34e>
    37c2:	88 e7       	ldi	r24, 0x78	; 120
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <vfprintf+0x352>
    37c8:	88 e5       	ldi	r24, 0x58	; 88
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	b6 01       	movw	r22, r12
    37ce:	0c c0       	rjmp	.+24     	; 0x37e8 <vfprintf+0x36e>
    37d0:	8a 2d       	mov	r24, r10
    37d2:	86 78       	andi	r24, 0x86	; 134
    37d4:	59 f0       	breq	.+22     	; 0x37ec <vfprintf+0x372>
    37d6:	a1 fe       	sbrs	r10, 1
    37d8:	02 c0       	rjmp	.+4      	; 0x37de <vfprintf+0x364>
    37da:	8b e2       	ldi	r24, 0x2B	; 43
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <vfprintf+0x366>
    37de:	80 e2       	ldi	r24, 0x20	; 32
    37e0:	a7 fc       	sbrc	r10, 7
    37e2:	8d e2       	ldi	r24, 0x2D	; 45
    37e4:	b6 01       	movw	r22, r12
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    37ec:	89 14       	cp	r8, r9
    37ee:	38 f4       	brcc	.+14     	; 0x37fe <vfprintf+0x384>
    37f0:	b6 01       	movw	r22, r12
    37f2:	80 e3       	ldi	r24, 0x30	; 48
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    37fa:	9a 94       	dec	r9
    37fc:	f7 cf       	rjmp	.-18     	; 0x37ec <vfprintf+0x372>
    37fe:	8a 94       	dec	r8
    3800:	f3 01       	movw	r30, r6
    3802:	e8 0d       	add	r30, r8
    3804:	f1 1d       	adc	r31, r1
    3806:	80 81       	ld	r24, Z
    3808:	b6 01       	movw	r22, r12
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    3810:	81 10       	cpse	r8, r1
    3812:	f5 cf       	rjmp	.-22     	; 0x37fe <vfprintf+0x384>
    3814:	22 20       	and	r2, r2
    3816:	09 f4       	brne	.+2      	; 0x381a <vfprintf+0x3a0>
    3818:	42 ce       	rjmp	.-892    	; 0x349e <vfprintf+0x24>
    381a:	b6 01       	movw	r22, r12
    381c:	80 e2       	ldi	r24, 0x20	; 32
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0e 94 34 1c 	call	0x3868	; 0x3868 <fputc>
    3824:	2a 94       	dec	r2
    3826:	f6 cf       	rjmp	.-20     	; 0x3814 <vfprintf+0x39a>
    3828:	f6 01       	movw	r30, r12
    382a:	86 81       	ldd	r24, Z+6	; 0x06
    382c:	97 81       	ldd	r25, Z+7	; 0x07
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <vfprintf+0x3ba>
    3830:	8f ef       	ldi	r24, 0xFF	; 255
    3832:	9f ef       	ldi	r25, 0xFF	; 255
    3834:	2b 96       	adiw	r28, 0x0b	; 11
    3836:	e2 e1       	ldi	r30, 0x12	; 18
    3838:	0c 94 32 1d 	jmp	0x3a64	; 0x3a64 <__epilogue_restores__>

0000383c <strnlen_P>:
    383c:	fc 01       	movw	r30, r24
    383e:	05 90       	lpm	r0, Z+
    3840:	61 50       	subi	r22, 0x01	; 1
    3842:	70 40       	sbci	r23, 0x00	; 0
    3844:	01 10       	cpse	r0, r1
    3846:	d8 f7       	brcc	.-10     	; 0x383e <strnlen_P+0x2>
    3848:	80 95       	com	r24
    384a:	90 95       	com	r25
    384c:	8e 0f       	add	r24, r30
    384e:	9f 1f       	adc	r25, r31
    3850:	08 95       	ret

00003852 <strnlen>:
    3852:	fc 01       	movw	r30, r24
    3854:	61 50       	subi	r22, 0x01	; 1
    3856:	70 40       	sbci	r23, 0x00	; 0
    3858:	01 90       	ld	r0, Z+
    385a:	01 10       	cpse	r0, r1
    385c:	d8 f7       	brcc	.-10     	; 0x3854 <strnlen+0x2>
    385e:	80 95       	com	r24
    3860:	90 95       	com	r25
    3862:	8e 0f       	add	r24, r30
    3864:	9f 1f       	adc	r25, r31
    3866:	08 95       	ret

00003868 <fputc>:
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	fb 01       	movw	r30, r22
    3872:	23 81       	ldd	r18, Z+3	; 0x03
    3874:	21 fd       	sbrc	r18, 1
    3876:	03 c0       	rjmp	.+6      	; 0x387e <fputc+0x16>
    3878:	8f ef       	ldi	r24, 0xFF	; 255
    387a:	9f ef       	ldi	r25, 0xFF	; 255
    387c:	2c c0       	rjmp	.+88     	; 0x38d6 <fputc+0x6e>
    387e:	22 ff       	sbrs	r18, 2
    3880:	16 c0       	rjmp	.+44     	; 0x38ae <fputc+0x46>
    3882:	46 81       	ldd	r20, Z+6	; 0x06
    3884:	57 81       	ldd	r21, Z+7	; 0x07
    3886:	24 81       	ldd	r18, Z+4	; 0x04
    3888:	35 81       	ldd	r19, Z+5	; 0x05
    388a:	42 17       	cp	r20, r18
    388c:	53 07       	cpc	r21, r19
    388e:	44 f4       	brge	.+16     	; 0x38a0 <fputc+0x38>
    3890:	a0 81       	ld	r26, Z
    3892:	b1 81       	ldd	r27, Z+1	; 0x01
    3894:	9d 01       	movw	r18, r26
    3896:	2f 5f       	subi	r18, 0xFF	; 255
    3898:	3f 4f       	sbci	r19, 0xFF	; 255
    389a:	31 83       	std	Z+1, r19	; 0x01
    389c:	20 83       	st	Z, r18
    389e:	8c 93       	st	X, r24
    38a0:	26 81       	ldd	r18, Z+6	; 0x06
    38a2:	37 81       	ldd	r19, Z+7	; 0x07
    38a4:	2f 5f       	subi	r18, 0xFF	; 255
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	37 83       	std	Z+7, r19	; 0x07
    38aa:	26 83       	std	Z+6, r18	; 0x06
    38ac:	14 c0       	rjmp	.+40     	; 0x38d6 <fputc+0x6e>
    38ae:	8b 01       	movw	r16, r22
    38b0:	ec 01       	movw	r28, r24
    38b2:	fb 01       	movw	r30, r22
    38b4:	00 84       	ldd	r0, Z+8	; 0x08
    38b6:	f1 85       	ldd	r31, Z+9	; 0x09
    38b8:	e0 2d       	mov	r30, r0
    38ba:	09 95       	icall
    38bc:	89 2b       	or	r24, r25
    38be:	e1 f6       	brne	.-72     	; 0x3878 <fputc+0x10>
    38c0:	d8 01       	movw	r26, r16
    38c2:	16 96       	adiw	r26, 0x06	; 6
    38c4:	8d 91       	ld	r24, X+
    38c6:	9c 91       	ld	r25, X
    38c8:	17 97       	sbiw	r26, 0x07	; 7
    38ca:	01 96       	adiw	r24, 0x01	; 1
    38cc:	17 96       	adiw	r26, 0x07	; 7
    38ce:	9c 93       	st	X, r25
    38d0:	8e 93       	st	-X, r24
    38d2:	16 97       	sbiw	r26, 0x06	; 6
    38d4:	ce 01       	movw	r24, r28
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	1f 91       	pop	r17
    38dc:	0f 91       	pop	r16
    38de:	08 95       	ret

000038e0 <__ultoa_invert>:
    38e0:	fa 01       	movw	r30, r20
    38e2:	aa 27       	eor	r26, r26
    38e4:	28 30       	cpi	r18, 0x08	; 8
    38e6:	51 f1       	breq	.+84     	; 0x393c <__ultoa_invert+0x5c>
    38e8:	20 31       	cpi	r18, 0x10	; 16
    38ea:	81 f1       	breq	.+96     	; 0x394c <__ultoa_invert+0x6c>
    38ec:	e8 94       	clt
    38ee:	6f 93       	push	r22
    38f0:	6e 7f       	andi	r22, 0xFE	; 254
    38f2:	6e 5f       	subi	r22, 0xFE	; 254
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	8f 4f       	sbci	r24, 0xFF	; 255
    38f8:	9f 4f       	sbci	r25, 0xFF	; 255
    38fa:	af 4f       	sbci	r26, 0xFF	; 255
    38fc:	b1 e0       	ldi	r27, 0x01	; 1
    38fe:	3e d0       	rcall	.+124    	; 0x397c <__ultoa_invert+0x9c>
    3900:	b4 e0       	ldi	r27, 0x04	; 4
    3902:	3c d0       	rcall	.+120    	; 0x397c <__ultoa_invert+0x9c>
    3904:	67 0f       	add	r22, r23
    3906:	78 1f       	adc	r23, r24
    3908:	89 1f       	adc	r24, r25
    390a:	9a 1f       	adc	r25, r26
    390c:	a1 1d       	adc	r26, r1
    390e:	68 0f       	add	r22, r24
    3910:	79 1f       	adc	r23, r25
    3912:	8a 1f       	adc	r24, r26
    3914:	91 1d       	adc	r25, r1
    3916:	a1 1d       	adc	r26, r1
    3918:	6a 0f       	add	r22, r26
    391a:	71 1d       	adc	r23, r1
    391c:	81 1d       	adc	r24, r1
    391e:	91 1d       	adc	r25, r1
    3920:	a1 1d       	adc	r26, r1
    3922:	20 d0       	rcall	.+64     	; 0x3964 <__ultoa_invert+0x84>
    3924:	09 f4       	brne	.+2      	; 0x3928 <__ultoa_invert+0x48>
    3926:	68 94       	set
    3928:	3f 91       	pop	r19
    392a:	2a e0       	ldi	r18, 0x0A	; 10
    392c:	26 9f       	mul	r18, r22
    392e:	11 24       	eor	r1, r1
    3930:	30 19       	sub	r19, r0
    3932:	30 5d       	subi	r19, 0xD0	; 208
    3934:	31 93       	st	Z+, r19
    3936:	de f6       	brtc	.-74     	; 0x38ee <__ultoa_invert+0xe>
    3938:	cf 01       	movw	r24, r30
    393a:	08 95       	ret
    393c:	46 2f       	mov	r20, r22
    393e:	47 70       	andi	r20, 0x07	; 7
    3940:	40 5d       	subi	r20, 0xD0	; 208
    3942:	41 93       	st	Z+, r20
    3944:	b3 e0       	ldi	r27, 0x03	; 3
    3946:	0f d0       	rcall	.+30     	; 0x3966 <__ultoa_invert+0x86>
    3948:	c9 f7       	brne	.-14     	; 0x393c <__ultoa_invert+0x5c>
    394a:	f6 cf       	rjmp	.-20     	; 0x3938 <__ultoa_invert+0x58>
    394c:	46 2f       	mov	r20, r22
    394e:	4f 70       	andi	r20, 0x0F	; 15
    3950:	40 5d       	subi	r20, 0xD0	; 208
    3952:	4a 33       	cpi	r20, 0x3A	; 58
    3954:	18 f0       	brcs	.+6      	; 0x395c <__ultoa_invert+0x7c>
    3956:	49 5d       	subi	r20, 0xD9	; 217
    3958:	31 fd       	sbrc	r19, 1
    395a:	40 52       	subi	r20, 0x20	; 32
    395c:	41 93       	st	Z+, r20
    395e:	02 d0       	rcall	.+4      	; 0x3964 <__ultoa_invert+0x84>
    3960:	a9 f7       	brne	.-22     	; 0x394c <__ultoa_invert+0x6c>
    3962:	ea cf       	rjmp	.-44     	; 0x3938 <__ultoa_invert+0x58>
    3964:	b4 e0       	ldi	r27, 0x04	; 4
    3966:	a6 95       	lsr	r26
    3968:	97 95       	ror	r25
    396a:	87 95       	ror	r24
    396c:	77 95       	ror	r23
    396e:	67 95       	ror	r22
    3970:	ba 95       	dec	r27
    3972:	c9 f7       	brne	.-14     	; 0x3966 <__ultoa_invert+0x86>
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	61 05       	cpc	r22, r1
    3978:	71 05       	cpc	r23, r1
    397a:	08 95       	ret
    397c:	9b 01       	movw	r18, r22
    397e:	ac 01       	movw	r20, r24
    3980:	0a 2e       	mov	r0, r26
    3982:	06 94       	lsr	r0
    3984:	57 95       	ror	r21
    3986:	47 95       	ror	r20
    3988:	37 95       	ror	r19
    398a:	27 95       	ror	r18
    398c:	ba 95       	dec	r27
    398e:	c9 f7       	brne	.-14     	; 0x3982 <__ultoa_invert+0xa2>
    3990:	62 0f       	add	r22, r18
    3992:	73 1f       	adc	r23, r19
    3994:	84 1f       	adc	r24, r20
    3996:	95 1f       	adc	r25, r21
    3998:	a0 1d       	adc	r26, r0
    399a:	08 95       	ret

0000399c <eeprom_read_byte>:
    399c:	f9 99       	sbic	0x1f, 1	; 31
    399e:	fe cf       	rjmp	.-4      	; 0x399c <eeprom_read_byte>
    39a0:	92 bd       	out	0x22, r25	; 34
    39a2:	81 bd       	out	0x21, r24	; 33
    39a4:	f8 9a       	sbi	0x1f, 0	; 31
    39a6:	99 27       	eor	r25, r25
    39a8:	80 b5       	in	r24, 0x20	; 32
    39aa:	08 95       	ret

000039ac <eeprom_read_dword>:
    39ac:	a6 e1       	ldi	r26, 0x16	; 22
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	44 e0       	ldi	r20, 0x04	; 4
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <eeprom_read_blraw>

000039b8 <eeprom_read_word>:
    39b8:	a8 e1       	ldi	r26, 0x18	; 24
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	42 e0       	ldi	r20, 0x02	; 2
    39be:	50 e0       	ldi	r21, 0x00	; 0
    39c0:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <eeprom_read_blraw>

000039c4 <eeprom_update_byte>:
    39c4:	26 2f       	mov	r18, r22

000039c6 <eeprom_update_r18>:
    39c6:	f9 99       	sbic	0x1f, 1	; 31
    39c8:	fe cf       	rjmp	.-4      	; 0x39c6 <eeprom_update_r18>
    39ca:	92 bd       	out	0x22, r25	; 34
    39cc:	81 bd       	out	0x21, r24	; 33
    39ce:	f8 9a       	sbi	0x1f, 0	; 31
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	00 b4       	in	r0, 0x20	; 32
    39d4:	02 16       	cp	r0, r18
    39d6:	39 f0       	breq	.+14     	; 0x39e6 <eeprom_update_r18+0x20>
    39d8:	1f ba       	out	0x1f, r1	; 31
    39da:	20 bd       	out	0x20, r18	; 32
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	fa 9a       	sbi	0x1f, 2	; 31
    39e2:	f9 9a       	sbi	0x1f, 1	; 31
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	08 95       	ret

000039e8 <eeprom_update_dword>:
    39e8:	03 96       	adiw	r24, 0x03	; 3
    39ea:	27 2f       	mov	r18, r23
    39ec:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <eeprom_update_r18>
    39f0:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <eeprom_update_byte>
    39f4:	25 2f       	mov	r18, r21
    39f6:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <eeprom_update_r18>
    39fa:	24 2f       	mov	r18, r20
    39fc:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <eeprom_update_r18>

00003a00 <eeprom_update_word>:
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	27 2f       	mov	r18, r23
    3a04:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <eeprom_update_r18>
    3a08:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <eeprom_update_byte>

00003a0c <eeprom_read_block>:
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22

00003a10 <eeprom_read_blraw>:
    3a10:	fc 01       	movw	r30, r24
    3a12:	f9 99       	sbic	0x1f, 1	; 31
    3a14:	fe cf       	rjmp	.-4      	; 0x3a12 <eeprom_read_blraw+0x2>
    3a16:	06 c0       	rjmp	.+12     	; 0x3a24 <eeprom_read_blraw+0x14>
    3a18:	f2 bd       	out	0x22, r31	; 34
    3a1a:	e1 bd       	out	0x21, r30	; 33
    3a1c:	f8 9a       	sbi	0x1f, 0	; 31
    3a1e:	31 96       	adiw	r30, 0x01	; 1
    3a20:	00 b4       	in	r0, 0x20	; 32
    3a22:	0d 92       	st	X+, r0
    3a24:	41 50       	subi	r20, 0x01	; 1
    3a26:	50 40       	sbci	r21, 0x00	; 0
    3a28:	b8 f7       	brcc	.-18     	; 0x3a18 <eeprom_read_blraw+0x8>
    3a2a:	08 95       	ret

00003a2c <__prologue_saves__>:
    3a2c:	2f 92       	push	r2
    3a2e:	3f 92       	push	r3
    3a30:	4f 92       	push	r4
    3a32:	5f 92       	push	r5
    3a34:	6f 92       	push	r6
    3a36:	7f 92       	push	r7
    3a38:	8f 92       	push	r8
    3a3a:	9f 92       	push	r9
    3a3c:	af 92       	push	r10
    3a3e:	bf 92       	push	r11
    3a40:	cf 92       	push	r12
    3a42:	df 92       	push	r13
    3a44:	ef 92       	push	r14
    3a46:	ff 92       	push	r15
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	ca 1b       	sub	r28, r26
    3a56:	db 0b       	sbc	r29, r27
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	09 94       	ijmp

00003a64 <__epilogue_restores__>:
    3a64:	2a 88       	ldd	r2, Y+18	; 0x12
    3a66:	39 88       	ldd	r3, Y+17	; 0x11
    3a68:	48 88       	ldd	r4, Y+16	; 0x10
    3a6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a70:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a72:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a74:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a76:	b9 84       	ldd	r11, Y+9	; 0x09
    3a78:	c8 84       	ldd	r12, Y+8	; 0x08
    3a7a:	df 80       	ldd	r13, Y+7	; 0x07
    3a7c:	ee 80       	ldd	r14, Y+6	; 0x06
    3a7e:	fd 80       	ldd	r15, Y+5	; 0x05
    3a80:	0c 81       	ldd	r16, Y+4	; 0x04
    3a82:	1b 81       	ldd	r17, Y+3	; 0x03
    3a84:	aa 81       	ldd	r26, Y+2	; 0x02
    3a86:	b9 81       	ldd	r27, Y+1	; 0x01
    3a88:	ce 0f       	add	r28, r30
    3a8a:	d1 1d       	adc	r29, r1
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	ed 01       	movw	r28, r26
    3a98:	08 95       	ret

00003a9a <_exit>:
    3a9a:	f8 94       	cli

00003a9c <__stop_program>:
    3a9c:	ff cf       	rjmp	.-2      	; 0x3a9c <__stop_program>
