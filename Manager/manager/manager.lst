
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00003348  000033dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000221  0080019c  0080019c  00003478  2**0
                  ALLOC
  3 .stab         0000b850  00000000  00000000  00003478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002eb6  00000000  00000000  0000ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00011b7e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00011b90  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000e0  00000000  00000000  00011bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000d2a  00000000  00000000  00011cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008fa  00000000  00000000  000129da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004fa  00000000  00000000  000132d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  000137ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__vector_18>
      4c:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__vector_21>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e8 e4       	ldi	r30, 0x48	; 72
      ce:	f3 e3       	ldi	r31, 0x33	; 51
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	ad 3b       	cpi	r26, 0xBD	; 189
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
      f0:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	52 9a       	sbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     12c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     144:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     174:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     194:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     19c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1a4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(MGR_nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
    host_active = 0;
     1ae:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
    lockout_active = 0;
     1b2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    status_byt = 0;
     1b6:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <status_byt>
    write_rpu_address_to_eeprom = 0;
     1ba:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1be:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
    shutdown_started = 0;
     1c2:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
    arduino_mode_started =0;
     1c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
    arduino_mode = 0;
     1ca:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    test_mode_started = 0;
     1ce:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
    test_mode = 0;
     1d2:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
    transceiver_state = 0;
     1d6:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1da:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     1de:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     1e2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
    uart_output = 0;
     1e6:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     1ea:	0e 94 96 12 	call	0x252c	; 0x252c <initTimers>

    // Initialize ADC and put in Auto Trigger mode to fetch an array of channels
    init_ADC_single_conversion(EXTERNAL_AVCC); // warning AREF must not be connected to anything
     1ee:	80 e4       	ldi	r24, 0x40	; 64
     1f0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <init_ADC_single_conversion>
    enable_ADC_auto_conversion(BURST_MODE);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <enable_ADC_auto_conversion>
    adc_started_at = millis();
     1fa:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     1fe:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <adc_started_at>
     202:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <adc_started_at+0x1>
     206:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <adc_started_at+0x2>
     20a:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <adc_started_at+0x3>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20e:	60 e9       	ldi	r22, 0x90	; 144
     210:	70 ed       	ldi	r23, 0xD0	; 208
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 47 11 	call	0x228e	; 0x228e <uartstream0_init>
     21a:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <__iob+0x1>
     21e:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <__iob>
     222:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <__iob+0x3>
     226:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     22a:	89 e2       	ldi	r24, 0x29	; 41
     22c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     230:	86 ef       	ldi	r24, 0xF6	; 246
     232:	9a e0       	ldi	r25, 0x0A	; 10
     234:	0e 94 1c 13 	call	0x2638	; 0x2638 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     238:	89 eb       	ldi	r24, 0xB9	; 185
     23a:	9a e0       	ldi	r25, 0x0A	; 10
     23c:	0e 94 17 13 	call	0x262e	; 0x262e <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     246:	8a e2       	ldi	r24, 0x2A	; 42
     248:	0e 94 84 14 	call	0x2908	; 0x2908 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     24c:	82 e8       	ldi	r24, 0x82	; 130
     24e:	9b e0       	ldi	r25, 0x0B	; 11
     250:	0e 94 a6 14 	call	0x294c	; 0x294c <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     254:	89 e0       	ldi	r24, 0x09	; 9
     256:	9b e0       	ldi	r25, 0x0B	; 11
     258:	0e 94 a1 14 	call	0x2942	; 0x2942 <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     262:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f eb       	ldi	r18, 0xBF	; 191
     266:	84 ed       	ldi	r24, 0xD4	; 212
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <setup+0x172>
     272:	00 c0       	rjmp	.+0      	; 0x274 <setup+0x17c>
     274:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     276:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     278:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     27a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // load reference calibration
    LoadAnalogRefFromEEPROM();
     27e:	0e 94 a7 0c 	call	0x194e	; 0x194e <LoadAnalogRefFromEEPROM>

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id())
     282:	0e 94 b4 0b 	call	0x1768	; 0x1768 <check_for_eeprom_id>
     286:	88 23       	and	r24, r24
     288:	29 f0       	breq	.+10     	; 0x294 <setup+0x19c>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 2c 19 	call	0x3258	; 0x3258 <eeprom_read_byte>
     292:	01 c0       	rjmp	.+2      	; 0x296 <setup+0x19e>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     29a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>

    // load Battery Limits from EEPROM (or set defaults)
    LoadBatLimitsFromEEPROM();
     29e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LoadBatLimitsFromEEPROM>

    // load Day-Night state machien values from EEPROM (or set defaults)
    LoadDayNightValuesFromEEPROM();
     2a2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LoadDayNightValuesFromEEPROM>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     2a6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     2aa:	88 60       	ori	r24, 0x08	; 8
     2ac:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     2b0:	08 95       	ret

000002b2 <main>:
#endif
}

int main(void)
{
    setup();
     2b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2b6:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     2ba:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     2be:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     2c2:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     2c6:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>

    while (1) 
    {
        if (!test_mode) 
     2ca:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
     2ce:	81 11       	cpse	r24, r1
     2d0:	0c c0       	rjmp	.+24     	; 0x2ea <main+0x38>
        {
            blink_on_activate();
     2d2:	0e 94 18 02 	call	0x430	; 0x430 <blink_on_activate>
            check_Bootload_Time();
     2d6:	0e 94 c7 02 	call	0x58e	; 0x58e <check_Bootload_Time>
            check_DTR();
     2da:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <check_DTR>
            check_lockout();
     2de:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <check_lockout>
            check_shutdown();
     2e2:	0e 94 19 03 	call	0x632	; 0x632 <check_shutdown>
            check_if_alt_should_be_on();
     2e6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <check_if_alt_should_be_on>
        }
        if(write_rpu_address_to_eeprom) save_rpu_addr_state();
     2ea:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
     2ee:	81 11       	cpse	r24, r1
     2f0:	0e 94 8b 0b 	call	0x1716	; 0x1716 <save_rpu_addr_state>
        check_uart();
     2f4:	0e 94 24 04 	call	0x848	; 0x848 <check_uart>
        adc_burst();
     2f8:	0e 94 cf 0b 	call	0x179e	; 0x179e <adc_burst>
        if (ref_loaded > REF_DEFAULT) CalReferancesFromI2CtoEE();
     2fc:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
     300:	82 30       	cpi	r24, 0x02	; 2
     302:	10 f0       	brcs	.+4      	; 0x308 <main+0x56>
     304:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <CalReferancesFromI2CtoEE>
        if (bat_limit_loaded > BAT_LIM_DEFAULT) BatLimitsFromI2CtoEE(); 
     308:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	10 f0       	brcs	.+4      	; 0x314 <main+0x62>
     310:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <BatLimitsFromI2CtoEE>
        if (daynight_values_loaded > DAYNIGHT_VALUES_DEFAULT) DayNightValuesFromI2CtoEE(); 
     314:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	10 f0       	brcs	.+4      	; 0x320 <main+0x6e>
     31c:	0e 94 31 10 	call	0x2062	; 0x2062 <DayNightValuesFromI2CtoEE>
        if (smbus_has_numBytes_to_handle) handle_smbus_receive();
     320:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
     324:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
     328:	89 2b       	or	r24, r25
     32a:	79 f2       	breq	.-98     	; 0x2ca <main+0x18>
     32c:	0e 94 12 0b 	call	0x1624	; 0x1624 <handle_smbus_receive>
     330:	cc cf       	rjmp	.-104    	; 0x2ca <main+0x18>

00000332 <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     332:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     336:	88 23       	and	r24, r24
     338:	c1 f0       	breq	.+48     	; 0x36a <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     33a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     33e:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     340:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     342:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     344:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     346:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     348:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     34a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     34e:	88 23       	and	r24, r24
     350:	21 f0       	breq	.+8      	; 0x35a <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     352:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     354:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     356:	5d 9a       	sbi	0x0b, 5	; 11
     358:	03 c0       	rjmp	.+6      	; 0x360 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35a:	8f b7       	in	r24, 0x3f	; 63
     35c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     35e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     360:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     362:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     364:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     366:	42 9a       	sbi	0x08, 2	; 8
     368:	17 c0       	rjmp	.+46     	; 0x398 <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     36a:	8f b7       	in	r24, 0x3f	; 63
     36c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     36e:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     370:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     372:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     374:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     376:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     378:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     37a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <local_mcu_is_rpu_aware>
     37e:	88 23       	and	r24, r24
     380:	21 f0       	breq	.+8      	; 0x38a <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     382:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     384:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     386:	5d 9a       	sbi	0x0b, 5	; 11
     388:	03 c0       	rjmp	.+6      	; 0x390 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     38a:	8f b7       	in	r24, 0x3f	; 63
     38c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     38e:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     390:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     392:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     394:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     396:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     398:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     39a:	08 95       	ret

0000039c <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     39c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3a0:	88 23       	and	r24, r24
     3a2:	81 f0       	breq	.+32     	; 0x3c4 <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3a8:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3aa:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ac:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ae:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3b0:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3b8:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ba:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3bc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3be:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3c0:	42 9a       	sbi	0x08, 2	; 8
     3c2:	0f c0       	rjmp	.+30     	; 0x3e2 <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c4:	8f b7       	in	r24, 0x3f	; 63
     3c6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3c8:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ca:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ce:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3d0:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3d2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d6:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3d8:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3da:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3dc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3de:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3e0:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3e4:	08 95       	ret

000003e6 <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3e6:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     3ea:	88 23       	and	r24, r24
     3ec:	81 f0       	breq	.+32     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3f2:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3f6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3fa:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3fe:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     400:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     402:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     404:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     406:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     408:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     40a:	42 9a       	sbi	0x08, 2	; 8
     40c:	0f c0       	rjmp	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     40e:	8f b7       	in	r24, 0x3f	; 63
     410:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     412:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     414:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     416:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     418:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     41a:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     41c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     41e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     420:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     422:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     424:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     426:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     428:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     42a:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     42c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     42e:	08 95       	ret

00000430 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     434:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     438:	81 11       	cpse	r24, r1
     43a:	a6 c0       	rjmp	.+332    	; 0x588 <blink_on_activate+0x158>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     43c:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     440:	00 91 f8 02 	lds	r16, 0x02F8	; 0x8002f8 <blink_started_at>
     444:	10 91 f9 02 	lds	r17, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     448:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     44c:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	80 1b       	sub	r24, r16
     456:	91 0b       	sbc	r25, r17
     458:	a2 0b       	sbc	r26, r18
     45a:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     45c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <status_byt>
     460:	27 7f       	andi	r18, 0xF7	; 247
     462:	09 f0       	breq	.+2      	; 0x466 <blink_on_activate+0x36>
     464:	6d c0       	rjmp	.+218    	; 0x540 <blink_on_activate+0x110>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     466:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <host_is_foreign>
     46a:	22 23       	and	r18, r18
     46c:	21 f0       	breq	.+8      	; 0x476 <blink_on_activate+0x46>
        {
            kRuntime = kRuntime >> 1;
     46e:	b6 95       	lsr	r27
     470:	a7 95       	ror	r26
     472:	97 95       	ror	r25
     474:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     476:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <bootloader_started>
     47a:	22 23       	and	r18, r18
     47c:	e9 f0       	breq	.+58     	; 0x4b8 <blink_on_activate+0x88>
     47e:	8c 34       	cpi	r24, 0x4C	; 76
     480:	91 05       	cpc	r25, r1
     482:	a1 05       	cpc	r26, r1
     484:	b1 05       	cpc	r27, r1
     486:	c0 f0       	brcs	.+48     	; 0x4b8 <blink_on_activate+0x88>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     488:	25 9b       	sbis	0x04, 5	; 4
     48a:	09 c0       	rjmp	.+18     	; 0x49e <blink_on_activate+0x6e>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     48c:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     48e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     490:	f8 94       	cli
    {
        if (value_for_bit) 
     492:	95 fd       	sbrc	r25, 5
     494:	02 c0       	rjmp	.+4      	; 0x49a <blink_on_activate+0x6a>
        {
            *register_addr |= 1 << bit_offset;
     496:	2d 9a       	sbi	0x05, 5	; 5
     498:	01 c0       	rjmp	.+2      	; 0x49c <blink_on_activate+0x6c>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     49a:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     49c:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     49e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4a2:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4a6:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4aa:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4ae:	85 5b       	subi	r24, 0xB5	; 181
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	af 4f       	sbci	r26, 0xFF	; 255
     4b4:	bf 4f       	sbci	r27, 0xFF	; 255
     4b6:	60 c0       	rjmp	.+192    	; 0x578 <blink_on_activate+0x148>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     4b8:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     4bc:	22 23       	and	r18, r18
     4be:	f1 f0       	breq	.+60     	; 0x4fc <blink_on_activate+0xcc>
     4c0:	81 3d       	cpi	r24, 0xD1	; 209
     4c2:	27 e0       	ldi	r18, 0x07	; 7
     4c4:	92 07       	cpc	r25, r18
     4c6:	a1 05       	cpc	r26, r1
     4c8:	b1 05       	cpc	r27, r1
     4ca:	c0 f0       	brcs	.+48     	; 0x4fc <blink_on_activate+0xcc>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4cc:	25 9b       	sbis	0x04, 5	; 4
     4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <blink_on_activate+0xb2>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4d0:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4d4:	f8 94       	cli
    {
        if (value_for_bit) 
     4d6:	95 fd       	sbrc	r25, 5
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <blink_on_activate+0xae>
        {
            *register_addr |= 1 << bit_offset;
     4da:	2d 9a       	sbi	0x05, 5	; 5
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <blink_on_activate+0xb0>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4de:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4e0:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4e2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     4e6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     4ea:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     4ee:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     4f2:	80 53       	subi	r24, 0x30	; 48
     4f4:	98 4f       	sbci	r25, 0xF8	; 248
     4f6:	af 4f       	sbci	r26, 0xFF	; 255
     4f8:	bf 4f       	sbci	r27, 0xFF	; 255
     4fa:	3e c0       	rjmp	.+124    	; 0x578 <blink_on_activate+0x148>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4fc:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <host_active>
     500:	22 23       	and	r18, r18
     502:	09 f4       	brne	.+2      	; 0x506 <blink_on_activate+0xd6>
     504:	41 c0       	rjmp	.+130    	; 0x588 <blink_on_activate+0x158>
     506:	85 3f       	cpi	r24, 0xF5	; 245
     508:	91 40       	sbci	r25, 0x01	; 1
     50a:	a1 05       	cpc	r26, r1
     50c:	b1 05       	cpc	r27, r1
     50e:	e0 f1       	brcs	.+120    	; 0x588 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     510:	25 9b       	sbis	0x04, 5	; 4
     512:	09 c0       	rjmp	.+18     	; 0x526 <blink_on_activate+0xf6>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     514:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     516:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     518:	f8 94       	cli
    {
        if (value_for_bit) 
     51a:	95 fd       	sbrc	r25, 5
     51c:	02 c0       	rjmp	.+4      	; 0x522 <blink_on_activate+0xf2>
        {
            *register_addr |= 1 << bit_offset;
     51e:	2d 9a       	sbi	0x05, 5	; 5
     520:	01 c0       	rjmp	.+2      	; 0x524 <blink_on_activate+0xf4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     522:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     524:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     526:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     52a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     52e:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     532:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     536:	8c 50       	subi	r24, 0x0C	; 12
     538:	9e 4f       	sbci	r25, 0xFE	; 254
     53a:	af 4f       	sbci	r26, 0xFF	; 255
     53c:	bf 4f       	sbci	r27, 0xFF	; 255
     53e:	1c c0       	rjmp	.+56     	; 0x578 <blink_on_activate+0x148>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     540:	89 3c       	cpi	r24, 0xC9	; 201
     542:	91 05       	cpc	r25, r1
     544:	a1 05       	cpc	r26, r1
     546:	b1 05       	cpc	r27, r1
     548:	f8 f0       	brcs	.+62     	; 0x588 <blink_on_activate+0x158>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     54a:	25 9b       	sbis	0x04, 5	; 4
     54c:	09 c0       	rjmp	.+18     	; 0x560 <blink_on_activate+0x130>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     54e:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     550:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     552:	f8 94       	cli
    {
        if (value_for_bit) 
     554:	95 fd       	sbrc	r25, 5
     556:	02 c0       	rjmp	.+4      	; 0x55c <blink_on_activate+0x12c>
        {
            *register_addr |= 1 << bit_offset;
     558:	2d 9a       	sbi	0x05, 5	; 5
     55a:	01 c0       	rjmp	.+2      	; 0x55e <blink_on_activate+0x12e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     55c:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     55e:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     560:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <blink_started_at>
     564:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <blink_started_at+0x1>
     568:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <blink_started_at+0x2>
     56c:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <blink_started_at+0x3>
     570:	88 53       	subi	r24, 0x38	; 56
     572:	9f 4f       	sbci	r25, 0xFF	; 255
     574:	af 4f       	sbci	r26, 0xFF	; 255
     576:	bf 4f       	sbci	r27, 0xFF	; 255
     578:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <blink_started_at>
     57c:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <blink_started_at+0x1>
     580:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <blink_started_at+0x2>
     584:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <blink_started_at+0x3>
        }
    }
}
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
    if (bootloader_started)
     592:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     596:	88 23       	and	r24, r24
     598:	01 f1       	breq	.+64     	; 0x5da <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     59a:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     59e:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5a2:	21 11       	cpse	r18, r1
     5a4:	1a c0       	rjmp	.+52     	; 0x5da <check_Bootload_Time+0x4c>
     5a6:	00 91 e5 02 	lds	r16, 0x02E5	; 0x8002e5 <bootloader_started_at>
     5aa:	10 91 e6 02 	lds	r17, 0x02E6	; 0x8002e6 <bootloader_started_at+0x1>
     5ae:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <bootloader_started_at+0x2>
     5b2:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <bootloader_started_at+0x3>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	80 1b       	sub	r24, r16
     5bc:	91 0b       	sbc	r25, r17
     5be:	a2 0b       	sbc	r26, r18
     5c0:	b3 0b       	sbc	r27, r19
     5c2:	89 33       	cpi	r24, 0x39	; 57
     5c4:	91 4c       	sbci	r25, 0xC1	; 193
     5c6:	a1 40       	sbci	r26, 0x01	; 1
     5c8:	b1 05       	cpc	r27, r1
     5ca:	38 f0       	brcs	.+14     	; 0x5da <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     5cc:	0e 94 99 01 	call	0x332	; 0x332 <connect_normal_mode>
            host_active =1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
            bootloader_started = 0;
     5d6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
        }
    }
}
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5e4:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5e8:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     5ec:	21 11       	cpse	r18, r1
     5ee:	1e c0       	rjmp	.+60     	; 0x62c <check_lockout+0x4c>
     5f0:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lockout_active>
     5f4:	22 23       	and	r18, r18
     5f6:	d1 f0       	breq	.+52     	; 0x62c <check_lockout+0x4c>
     5f8:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <lockout_started_at>
     5fc:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <lockout_started_at+0x1>
     600:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <lockout_started_at+0x2>
     604:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <lockout_started_at+0x3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	80 1b       	sub	r24, r16
     60e:	91 0b       	sbc	r25, r17
     610:	a2 0b       	sbc	r26, r18
     612:	b3 0b       	sbc	r27, r19
     614:	81 3c       	cpi	r24, 0xC1	; 193
     616:	94 4d       	sbci	r25, 0xD4	; 212
     618:	a1 40       	sbci	r26, 0x01	; 1
     61a:	b1 05       	cpc	r27, r1
     61c:	38 f0       	brcs	.+14     	; 0x62c <check_lockout+0x4c>
    {
        connect_normal_mode();
     61e:	0e 94 99 01 	call	0x332	; 0x332 <connect_normal_mode>

        host_active = 1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <host_active>
        lockout_active =0;
     628:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
    }
}
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	08 95       	ret

00000632 <check_shutdown>:


void check_shutdown(void)
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
    if (shutdown_started)
     636:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_started>
     63a:	88 23       	and	r24, r24
     63c:	19 f1       	breq	.+70     	; 0x684 <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     63e:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     642:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <shutdown_started_at>
     646:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <shutdown_started_at+0x1>
     64a:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <shutdown_started_at+0x2>
     64e:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <shutdown_started_at+0x3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	80 1b       	sub	r24, r16
     658:	91 0b       	sbc	r25, r17
     65a:	a2 0b       	sbc	r26, r18
     65c:	b3 0b       	sbc	r27, r19
     65e:	89 3e       	cpi	r24, 0xE9	; 233
     660:	93 40       	sbci	r25, 0x03	; 3
     662:	a1 05       	cpc	r26, r1
     664:	b1 05       	cpc	r27, r1
     666:	98 f1       	brcs	.+102    	; 0x6ce <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     668:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     66c:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     66e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     670:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     672:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     674:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     676:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     678:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <shutdown_detected>
     682:	25 c0       	rjmp	.+74     	; 0x6ce <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     684:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <shutdown_detected>
     688:	81 11       	cpse	r24, r1
     68a:	21 c0       	rjmp	.+66     	; 0x6ce <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     68c:	18 99       	sbic	0x03, 0	; 3
     68e:	1f c0       	rjmp	.+62     	; 0x6ce <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     690:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     692:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     694:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     696:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     698:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     69a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     69c:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     69e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6a2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     6a4:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6a6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6aa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     6ac:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6ae:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     6b0:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
                shutdown_started_at = millis();
     6ba:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     6be:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
     6c2:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
     6c6:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
     6ca:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
            }
        }
}
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     6d4:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <host_is_foreign>
     6d8:	81 11       	cpse	r24, r1
     6da:	b5 c0       	rjmp	.+362    	; 0x846 <check_DTR+0x172>
    {
        if ( !digitalRead(HOST_nRTS) )  // if HOST_nRTS is set (active low) then assume avrdude wants to use the bootloader
     6dc:	4b 99       	sbic	0x09, 3	; 9
     6de:	56 c0       	rjmp	.+172    	; 0x78c <check_DTR+0xb8>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6e0:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     6e4:	83 fd       	sbrc	r24, 3
     6e6:	af c0       	rjmp	.+350    	; 0x846 <check_DTR+0x172>
            {
                if (digitalRead(HOST_nCTS))
     6e8:	4a 9b       	sbis	0x09, 2	; 9
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <check_DTR+0x22>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6ee:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6f0:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6f2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6f4:	08 95       	ret
                { // tell the host that it is OK to use serial
                    digitalWrite(HOST_nCTS, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6f6:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     6fa:	81 11       	cpse	r24, r1
     6fc:	a4 c0       	rjmp	.+328    	; 0x846 <check_DTR+0x172>
     6fe:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     702:	81 11       	cpse	r24, r1
     704:	a0 c0       	rjmp	.+320    	; 0x846 <check_DTR+0x172>
     706:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     70a:	81 11       	cpse	r24, r1
     70c:	9c c0       	rjmp	.+312    	; 0x846 <check_DTR+0x172>
     70e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     712:	81 11       	cpse	r24, r1
     714:	98 c0       	rjmp	.+304    	; 0x846 <check_DTR+0x172>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     716:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     71a:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     71e:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     722:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     726:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     72a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <bootloader_address>
     72e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     732:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     736:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     73a:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	20 95       	com	r18
     742:	30 95       	com	r19
     744:	2a 70       	andi	r18, 0x0A	; 10
     746:	33 27       	eor	r19, r19
     748:	64 e0       	ldi	r22, 0x04	; 4
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	6a 95       	dec	r22
     750:	e1 f7       	brne	.-8      	; 0x74a <check_DTR+0x76>
     752:	89 2f       	mov	r24, r25
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	80 95       	com	r24
     758:	90 95       	com	r25
     75a:	80 75       	andi	r24, 0x50	; 80
     75c:	99 27       	eor	r25, r25
     75e:	74 e0       	ldi	r23, 0x04	; 4
     760:	95 95       	asr	r25
     762:	87 95       	ror	r24
     764:	7a 95       	dec	r23
     766:	e1 f7       	brne	.-8      	; 0x760 <check_DTR+0x8c>
     768:	82 2b       	or	r24, r18
     76a:	93 2b       	or	r25, r19
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	1f 92       	push	r1
     772:	4f 93       	push	r20
     774:	86 e1       	ldi	r24, 0x16	; 22
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
                        uart_has_TTL = 1;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
                        localhost_active = 1;
     786:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <localhost_active>
     78a:	57 c0       	rjmp	.+174    	; 0x83a <check_DTR+0x166>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     78c:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <host_active>
     790:	88 23       	and	r24, r24
     792:	09 f4       	brne	.+2      	; 0x796 <check_DTR+0xc2>
     794:	58 c0       	rjmp	.+176    	; 0x846 <check_DTR+0x172>
     796:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     79a:	88 23       	and	r24, r24
     79c:	09 f4       	brne	.+2      	; 0x7a0 <check_DTR+0xcc>
     79e:	53 c0       	rjmp	.+166    	; 0x846 <check_DTR+0x172>
     7a0:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     7a4:	81 11       	cpse	r24, r1
     7a6:	4f c0       	rjmp	.+158    	; 0x846 <check_DTR+0x172>
     7a8:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
     7ac:	81 11       	cpse	r24, r1
     7ae:	4b c0       	rjmp	.+150    	; 0x846 <check_DTR+0x172>
     7b0:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <lockout_active>
     7b4:	81 11       	cpse	r24, r1
     7b6:	47 c0       	rjmp	.+142    	; 0x846 <check_DTR+0x172>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     7b8:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     7bc:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     7c0:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     7c4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     7c8:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7cc:	8f ec       	ldi	r24, 0xCF	; 207
     7ce:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7d2:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     7d6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     7da:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	20 95       	com	r18
     7e2:	30 95       	com	r19
     7e4:	2a 70       	andi	r18, 0x0A	; 10
     7e6:	33 27       	eor	r19, r19
     7e8:	84 e0       	ldi	r24, 0x04	; 4
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	8a 95       	dec	r24
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <check_DTR+0x116>
     7f2:	89 2f       	mov	r24, r25
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	80 95       	com	r24
     7f8:	90 95       	com	r25
     7fa:	80 75       	andi	r24, 0x50	; 80
     7fc:	99 27       	eor	r25, r25
     7fe:	54 e0       	ldi	r21, 0x04	; 4
     800:	95 95       	asr	r25
     802:	87 95       	ror	r24
     804:	5a 95       	dec	r21
     806:	e1 f7       	brne	.-8      	; 0x800 <check_DTR+0x12c>
     808:	82 2b       	or	r24, r18
     80a:	93 2b       	or	r25, r19
     80c:	9f 93       	push	r25
     80e:	8f 93       	push	r24
     810:	1f 92       	push	r1
     812:	4f 93       	push	r20
     814:	86 e1       	ldi	r24, 0x16	; 22
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	9f 93       	push	r25
     81a:	8f 93       	push	r24
     81c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
                uart_has_TTL = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     826:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     828:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     82a:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     82c:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     82e:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     832:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     834:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     836:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     838:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	08 95       	ret

00000848 <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     848:	4f 92       	push	r4
     84a:	5f 92       	push	r5
     84c:	6f 92       	push	r6
     84e:	7f 92       	push	r7
     850:	8f 92       	push	r8
     852:	9f 92       	push	r9
     854:	af 92       	push	r10
     856:	bf 92       	push	r11
     858:	cf 92       	push	r12
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     868:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     86c:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <uart_has_TTL>
     870:	22 23       	and	r18, r18
     872:	d9 f0       	breq	.+54     	; 0x8aa <check_uart+0x62>
     874:	40 90 09 03 	lds	r4, 0x0309	; 0x800309 <uart_started_at>
     878:	50 90 0a 03 	lds	r5, 0x030A	; 0x80030a <uart_started_at+0x1>
     87c:	60 90 0b 03 	lds	r6, 0x030B	; 0x80030b <uart_started_at+0x2>
     880:	70 90 0c 03 	lds	r7, 0x030C	; 0x80030c <uart_started_at+0x3>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	84 19       	sub	r24, r4
     88a:	95 09       	sbc	r25, r5
     88c:	a6 09       	sbc	r26, r6
     88e:	b7 09       	sbc	r27, r7
     890:	85 3f       	cpi	r24, 0xF5	; 245
     892:	91 40       	sbci	r25, 0x01	; 1
     894:	a1 05       	cpc	r26, r1
     896:	b1 05       	cpc	r27, r1
     898:	40 f0       	brcs	.+16     	; 0x8aa <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     89a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     89e:	81 70       	andi	r24, 0x01	; 1
     8a0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
        uart_has_TTL = 0;
     8a4:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     8a8:	cd c1       	rjmp	.+922    	; 0xc44 <__stack+0x345>
    }
    else
    {
        if ( uart0_available() )
     8aa:	0e 94 2f 11 	call	0x225e	; 0x225e <uart0_available>
     8ae:	89 2b       	or	r24, r25
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <check_uart+0x6c>
     8b2:	c8 c1       	rjmp	.+912    	; 0xc44 <__stack+0x345>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     8b4:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <__iob>
     8b8:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <__iob+0x1>
     8bc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     8c0:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <uart_previous_byte>
     8c4:	26 2f       	mov	r18, r22
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	20 95       	com	r18
     8ca:	30 95       	com	r19
     8cc:	a9 01       	movw	r20, r18
     8ce:	4a 70       	andi	r20, 0x0A	; 10
     8d0:	55 27       	eor	r21, r21
     8d2:	74 e0       	ldi	r23, 0x04	; 4
     8d4:	44 0f       	add	r20, r20
     8d6:	55 1f       	adc	r21, r21
     8d8:	7a 95       	dec	r23
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <check_uart+0x8c>
     8dc:	20 75       	andi	r18, 0x50	; 80
     8de:	33 27       	eor	r19, r19
     8e0:	e4 e0       	ldi	r30, 0x04	; 4
     8e2:	35 95       	asr	r19
     8e4:	27 95       	ror	r18
     8e6:	ea 95       	dec	r30
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <check_uart+0x9a>
     8ea:	24 2b       	or	r18, r20
     8ec:	35 2b       	or	r19, r21
     8ee:	ac 01       	movw	r20, r24
     8f0:	55 27       	eor	r21, r21
     8f2:	24 17       	cp	r18, r20
     8f4:	35 07       	cpc	r19, r21
     8f6:	39 f4       	brne	.+14     	; 0x906 <__stack+0x7>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8f8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8fc:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <uart_has_TTL>
     900:	81 11       	cpse	r24, r1
     902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
     904:	0f c0       	rjmp	.+30     	; 0x924 <__stack+0x25>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     906:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_previous_byte>
                return;
     90a:	9c c1       	rjmp	.+824    	; 0xc44 <__stack+0x345>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     90c:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
     910:	68 17       	cp	r22, r24
     912:	29 f0       	breq	.+10     	; 0x91e <__stack+0x1f>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     914:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
     918:	84 70       	andi	r24, 0x04	; 4
     91a:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
                }
                uart_has_TTL = 0;
     91e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
     922:	04 c0       	rjmp	.+8      	; 0x92c <__stack+0x2d>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     924:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     928:	88 23       	and	r24, r24
     92a:	19 f0       	breq	.+6      	; 0x932 <__stack+0x33>
                {
                    host_is_foreign = 0; // used to connect the host
     92c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
     930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     938:	61 11       	cpse	r22, r1
     93a:	27 c0       	rjmp	.+78     	; 0x98a <__stack+0x8b>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     93c:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	80 5c       	subi	r24, 0xC0	; 192
     946:	94 4d       	sbci	r25, 0xD4	; 212
     948:	a1 40       	sbci	r26, 0x01	; 1
     94a:	b1 09       	sbc	r27, r1
     94c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
     950:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
     954:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
     958:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     95c:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	88 53       	subi	r24, 0x38	; 56
     966:	91 4c       	sbci	r25, 0xC1	; 193
     968:	a1 40       	sbci	r26, 0x01	; 1
     96a:	b1 09       	sbc	r27, r1
     96c:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
     970:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
     974:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
     978:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     97c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     97e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     980:	2d 98       	cbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     982:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     984:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
     988:	36 c1       	rjmp	.+620    	; 0xbf6 <__stack+0x2f7>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     98a:	6f 3f       	cpi	r22, 0xFF	; 255
     98c:	31 f4       	brne	.+12     	; 0x99a <__stack+0x9b>
            {
                arduino_mode_started = 0;
     98e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <arduino_mode_started>
                arduino_mode = 1;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <arduino_mode>
                return;
     998:	55 c1       	rjmp	.+682    	; 0xc44 <__stack+0x345>
            }
            if (input == RPU_START_TEST_MODE) 
     99a:	61 30       	cpi	r22, 0x01	; 1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	6f c0       	rjmp	.+222    	; 0xa7e <__stack+0x17f>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     9a0:	f9 b1       	in	r31, 0x09	; 9
     9a2:	e9 b1       	in	r30, 0x09	; 9
     9a4:	56 b1       	in	r21, 0x06	; 6
     9a6:	49 b1       	in	r20, 0x09	; 9
     9a8:	39 b1       	in	r19, 0x09	; 9
     9aa:	89 b1       	in	r24, 0x09	; 9
     9ac:	29 b1       	in	r18, 0x09	; 9
     9ae:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	88 0f       	add	r24, r24
     9b4:	89 2f       	mov	r24, r25
     9b6:	88 1f       	adc	r24, r24
     9b8:	99 0b       	sbc	r25, r25
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	73 fb       	bst	r23, 3
     9c4:	99 27       	eor	r25, r25
     9c6:	90 f9       	bld	r25, 0
     9c8:	89 2b       	or	r24, r25
     9ca:	f3 fb       	bst	r31, 3
     9cc:	aa 24       	eor	r10, r10
     9ce:	a0 f8       	bld	r10, 0
     9d0:	b1 2c       	mov	r11, r1
     9d2:	b6 94       	lsr	r11
     9d4:	ba 2c       	mov	r11, r10
     9d6:	aa 24       	eor	r10, r10
     9d8:	b7 94       	ror	r11
     9da:	a7 94       	ror	r10
     9dc:	a8 2a       	or	r10, r24
     9de:	e2 fb       	bst	r30, 2
     9e0:	cc 24       	eor	r12, r12
     9e2:	c0 f8       	bld	r12, 0
     9e4:	d1 2c       	mov	r13, r1
     9e6:	d6 e0       	ldi	r29, 0x06	; 6
     9e8:	cc 0c       	add	r12, r12
     9ea:	dd 1c       	adc	r13, r13
     9ec:	da 95       	dec	r29
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <__stack+0xe9>
     9f0:	ca 28       	or	r12, r10
     9f2:	52 fb       	bst	r21, 2
     9f4:	ee 24       	eor	r14, r14
     9f6:	e0 f8       	bld	r14, 0
     9f8:	f1 2c       	mov	r15, r1
     9fa:	15 e0       	ldi	r17, 0x05	; 5
     9fc:	ee 0c       	add	r14, r14
     9fe:	ff 1c       	adc	r15, r15
     a00:	1a 95       	dec	r17
     a02:	e1 f7       	brne	.-8      	; 0x9fc <__stack+0xfd>
     a04:	ec 28       	or	r14, r12
     a06:	45 fb       	bst	r20, 5
     a08:	00 27       	eor	r16, r16
     a0a:	00 f9       	bld	r16, 0
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	00 0f       	add	r16, r16
     a12:	11 1f       	adc	r17, r17
     a14:	8a 95       	dec	r24
     a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x111>
     a18:	0e 29       	or	r16, r14
     a1a:	36 fb       	bst	r19, 6
     a1c:	33 27       	eor	r19, r19
     a1e:	30 f9       	bld	r19, 0
     a20:	c3 2f       	mov	r28, r19
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	d8 2f       	mov	r29, r24
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	cc 0f       	add	r28, r28
     a2a:	dd 1f       	adc	r29, r29
     a2c:	9a 95       	dec	r25
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <__stack+0x129>
     a30:	c0 2b       	or	r28, r16
     a32:	24 fb       	bst	r18, 4
     a34:	88 24       	eor	r8, r8
     a36:	80 f8       	bld	r8, 0
     a38:	91 2c       	mov	r9, r1
     a3a:	88 0c       	add	r8, r8
     a3c:	99 1c       	adc	r9, r9
     a3e:	8c 2a       	or	r8, r28
     a40:	80 92 f4 02 	sts	0x02F4, r8	; 0x8002f4 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a44:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a46:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a48:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a4a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a4c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a4e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a50:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a52:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a54:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a56:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a58:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a5a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a5c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a5e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a60:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a62:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a64:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a66:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a68:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a6a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a6c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a6e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a70:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a72:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a74:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 1;
     a78:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <test_mode>
                return;
     a7c:	e3 c0       	rjmp	.+454    	; 0xc44 <__stack+0x345>
            }
            if (input == RPU_END_TEST_MODE) 
     a7e:	6e 3f       	cpi	r22, 0xFE	; 254
     a80:	09 f0       	breq	.+2      	; 0xa84 <__stack+0x185>
     a82:	76 c0       	rjmp	.+236    	; 0xb70 <__stack+0x271>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a84:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     a88:	88 1f       	adc	r24, r24
     a8a:	88 27       	eor	r24, r24
     a8c:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a8e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a90:	f8 94       	cli
    {
        if (value_for_bit) 
     a92:	88 23       	and	r24, r24
     a94:	11 f0       	breq	.+4      	; 0xa9a <__stack+0x19b>
        {
            *register_addr |= 1 << bit_offset;
     a96:	5b 9a       	sbi	0x0b, 3	; 11
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <__stack+0x19d>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a9a:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a9c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a9e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     aa2:	86 fb       	bst	r24, 6
     aa4:	88 27       	eor	r24, r24
     aa6:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aa8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aaa:	f8 94       	cli
    {
        if (value_for_bit) 
     aac:	88 23       	and	r24, r24
     aae:	11 f0       	breq	.+4      	; 0xab4 <__stack+0x1b5>
        {
            *register_addr |= 1 << bit_offset;
     ab0:	5a 9a       	sbi	0x0b, 2	; 11
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <__stack+0x1b7>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ab4:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ab6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ab8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     abc:	85 fb       	bst	r24, 5
     abe:	88 27       	eor	r24, r24
     ac0:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ac2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ac4:	f8 94       	cli
    {
        if (value_for_bit) 
     ac6:	88 23       	and	r24, r24
     ac8:	11 f0       	breq	.+4      	; 0xace <__stack+0x1cf>
        {
            *register_addr |= 1 << bit_offset;
     aca:	42 9a       	sbi	0x08, 2	; 8
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <__stack+0x1d1>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ace:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     ad2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     ad6:	82 95       	swap	r24
     ad8:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ada:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     adc:	f8 94       	cli
    {
        if (value_for_bit) 
     ade:	88 23       	and	r24, r24
     ae0:	11 f0       	breq	.+4      	; 0xae6 <__stack+0x1e7>
        {
            *register_addr |= 1 << bit_offset;
     ae2:	5d 9a       	sbi	0x0b, 5	; 11
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <__stack+0x1e9>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ae6:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aea:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     aee:	83 fb       	bst	r24, 3
     af0:	88 27       	eor	r24, r24
     af2:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     af4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     af6:	f8 94       	cli
    {
        if (value_for_bit) 
     af8:	88 23       	and	r24, r24
     afa:	11 f0       	breq	.+4      	; 0xb00 <__stack+0x201>
        {
            *register_addr |= 1 << bit_offset;
     afc:	5e 9a       	sbi	0x0b, 6	; 11
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <__stack+0x203>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b00:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b02:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b04:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b06:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b08:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b0a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b0c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b0e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b10:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b12:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     b14:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b18:	88 61       	ori	r24, 0x18	; 24
     b1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b1e:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b22:	82 fb       	bst	r24, 2
     b24:	88 27       	eor	r24, r24
     b26:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b28:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b2a:	f8 94       	cli
    {
        if (value_for_bit) 
     b2c:	88 23       	and	r24, r24
     b2e:	11 f0       	breq	.+4      	; 0xb34 <__stack+0x235>
        {
            *register_addr |= 1 << bit_offset;
     b30:	5f 9a       	sbi	0x0b, 7	; 11
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <__stack+0x237>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b34:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b36:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b38:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b3c:	86 95       	lsr	r24
     b3e:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b40:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b42:	f8 94       	cli
    {
        if (value_for_bit) 
     b44:	88 23       	and	r24, r24
     b46:	11 f0       	breq	.+4      	; 0xb4c <__stack+0x24d>
        {
            *register_addr |= 1 << bit_offset;
     b48:	5c 9a       	sbi	0x0b, 4	; 11
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <__stack+0x24f>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b4c:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b4e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b50:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
     b54:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b56:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b58:	f8 94       	cli
    {
        if (value_for_bit) 
     b5a:	88 23       	and	r24, r24
     b5c:	11 f0       	breq	.+4      	; 0xb62 <__stack+0x263>
        {
            *register_addr |= 1 << bit_offset;
     b5e:	43 9a       	sbi	0x08, 3	; 8
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <__stack+0x265>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b62:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b64:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b66:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <test_mode_started>
                test_mode = 0;
     b6a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <test_mode>
                return;
     b6e:	6a c0       	rjmp	.+212    	; 0xc44 <__stack+0x345>
            }
            if (input == rpu_address) // that is my local address
     b70:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <rpu_address>
     b74:	68 13       	cpse	r22, r24
     b76:	2a c0       	rjmp	.+84     	; 0xbcc <__stack+0x2cd>
            {
                connect_bootload_mode();
     b78:	0e 94 ce 01 	call	0x39c	; 0x39c <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b82:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b84:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b86:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b88:	8f bf       	out	0x3f, r24	; 63
     b8a:	8f e5       	ldi	r24, 0x5F	; 95
     b8c:	9a ee       	ldi	r25, 0xEA	; 234
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <__stack+0x28f>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <__stack+0x295>
     b94:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b96:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b98:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b9a:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b9c:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(MGR_nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(MGR_nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     b9e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     ba2:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     ba6:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     baa:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     bae:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     bb2:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                bootloader_started_at = millis();
     bb6:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     bba:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <bootloader_started_at>
     bbe:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <bootloader_started_at+0x1>
     bc2:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <bootloader_started_at+0x2>
     bc6:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <bootloader_started_at+0x3>
                return;
     bca:	3c c0       	rjmp	.+120    	; 0xc44 <__stack+0x345>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     bcc:	67 fd       	sbrc	r22, 7
     bce:	1e c0       	rjmp	.+60     	; 0xc0c <__stack+0x30d>
            {  
                lockout_active =1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lockout_active>
                bootloader_started = 0;
     bd6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
                host_active =0;
     bda:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>

                connect_lockout_mode();
     bde:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <connect_lockout_mode>

                lockout_started_at = millis();
     be2:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     be6:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <lockout_started_at>
     bea:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <lockout_started_at+0x1>
     bee:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <lockout_started_at+0x2>
     bf2:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <lockout_started_at+0x3>
                blink_started_at = millis();
     bf6:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     bfa:	60 93 f8 02 	sts	0x02F8, r22	; 0x8002f8 <blink_started_at>
     bfe:	70 93 f9 02 	sts	0x02F9, r23	; 0x8002f9 <blink_started_at+0x1>
     c02:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <blink_started_at+0x2>
     c06:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <blink_started_at+0x3>
                return;
     c0a:	1c c0       	rjmp	.+56     	; 0xc44 <__stack+0x345>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     c0c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <host_is_foreign>
                lockout_active =0;
     c10:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <lockout_active>
                host_active =0;
     c14:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <host_active>
                bootloader_started = 0;
     c18:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c1c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c1e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c20:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c22:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c24:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c26:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c28:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c2a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c2c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c2e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c30:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c32:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c34:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c36:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c38:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c3a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c3c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c3e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c40:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c42:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	4f 90       	pop	r4
     c64:	08 95       	ret

00000c66 <fnWtMgrAddr>:
}

// I2C_COMMAND_TO_SET_RPU_ADDRESS
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
    rpu_address = i2cBuffer[1];
     c66:	fc 01       	movw	r30, r24
     c68:	81 81       	ldd	r24, Z+1	; 0x01
     c6a:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <rpu_address>
    write_rpu_address_to_eeprom = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
     c74:	08 95       	ret

00000c76 <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c76:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <bootloader_address>
     c7a:	fc 01       	movw	r30, r24
     c7c:	21 83       	std	Z+1, r18	; 0x01
     c7e:	08 95       	ret

00000c80 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c80:	fc 01       	movw	r30, r24
     c82:	81 81       	ldd	r24, Z+1	; 0x01
     c84:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <bootloader_address>
     c88:	08 95       	ret

00000c8a <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c8a:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <shutdown_detected>
     c8e:	fc 01       	movw	r30, r24
     c90:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c92:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
     c96:	08 95       	ret

00000c98 <fnRdStatus>:
    // else ignore
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
     c98:	fc 01       	movw	r30, r24
    i2cBuffer[1] = status_byt & 0x0F; // bits 0..3
     c9a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <status_byt>
     c9e:	9f 70       	andi	r25, 0x0F	; 15
     ca0:	91 83       	std	Z+1, r25	; 0x01
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     ca2:	83 b1       	in	r24, 0x03	; 3
    i2cBuffer[1] &= digitalRead(ALT_EN)<<4; // report if alternat power is enabled
     ca4:	11 82       	std	Z+1, r1	; 0x01
     ca6:	83 b1       	in	r24, 0x03	; 3
     ca8:	08 95       	ret

00000caa <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    if ( (i2cBuffer[1] & 0x10) ) 
     caa:	fc 01       	movw	r30, r24
     cac:	21 81       	ldd	r18, Z+1	; 0x01
     cae:	24 ff       	sbrs	r18, 4
     cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <fnWtStatus+0x1e>
    {
        enable_alternate_power = 1;
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <enable_alternate_power>
        alt_pwm_accum_charge_time = 0; // clear charge time
     cb8:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <alt_pwm_accum_charge_time>
     cbc:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <alt_pwm_accum_charge_time+0x1>
     cc0:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <alt_pwm_accum_charge_time+0x2>
     cc4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    }
    if ( (i2cBuffer[1] & 0x20) && !shutdown_started && !shutdown_detected ) enable_sbc_power = 1;
     cc8:	fc 01       	movw	r30, r24
     cca:	81 81       	ldd	r24, Z+1	; 0x01
     ccc:	85 ff       	sbrs	r24, 5
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <fnWtStatus+0x3c>
     cd0:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <shutdown_started>
     cd4:	91 11       	cpse	r25, r1
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <fnWtStatus+0x3c>
     cd8:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <shutdown_detected>
     cdc:	91 11       	cpse	r25, r1
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <fnWtStatus+0x3c>
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <enable_sbc_power>
    status_byt = i2cBuffer[1] & 0x0F; // set bits 0..3
     ce6:	8f 70       	andi	r24, 0x0F	; 15
     ce8:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
     cec:	08 95       	ret

00000cee <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     cee:	20 91 fc 02 	lds	r18, 0x02FC	; 0x8002fc <arduino_mode>
     cf2:	fc 01       	movw	r30, r24
     cf4:	21 83       	std	Z+1, r18	; 0x01
     cf6:	08 95       	ret

00000cf8 <fnBatStartChrg>:

// I2C command for Battery charge start limit (uint16_t)
void fnBatStartChrg(uint8_t* i2cBuffer)
{
    // battery_low_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_low_limit>>8) & 0xFF;
     cf8:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <battery_low_limit+0x1>
    battery_low_limit = 0x00FF & battery_low_limit; // mask out the old value
    battery_low_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_low_limit; // place new value in high byte
     cfc:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <battery_low_limit+0x1>
     d00:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <battery_low_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d04:	fc 01       	movw	r30, r24
     d06:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_low_limit & 0xFF;
     d08:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <battery_low_limit>
    battery_low_limit = 0xFFFFFF00 & battery_low_limit;
    battery_low_limit = ((uint32_t) (i2cBuffer[2])) & battery_low_limit;  
     d0c:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <battery_low_limit+0x1>
     d10:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <battery_low_limit>
    i2cBuffer[2] = temp;
     d14:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
     d1c:	08 95       	ret

00000d1e <fnBatDoneChrg>:

// I2C command for Battery charge done limit (uint16_t)
void fnBatDoneChrg(uint8_t* i2cBuffer)
{
    // battery_high_limit is a uint16_t e.g., two bytes
    uint8_t temp = (battery_high_limit>>8) & 0xFF;
     d1e:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <battery_high_limit+0x1>
    battery_high_limit = 0x00FF & battery_high_limit; // mask out the old value
    battery_high_limit = ((uint32_t) (i2cBuffer[1])<<8) & battery_high_limit; // place new value in high byte
     d22:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <battery_high_limit+0x1>
     d26:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <battery_high_limit>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d2a:	fc 01       	movw	r30, r24
     d2c:	21 83       	std	Z+1, r18	; 0x01

    temp = battery_high_limit & 0xFF;
     d2e:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <battery_high_limit>
    battery_high_limit = 0xFFFFFF00 & battery_high_limit;
    battery_high_limit = ((uint32_t) (i2cBuffer[2])) & battery_high_limit;  
     d32:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <battery_high_limit+0x1>
     d36:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <battery_high_limit>
    i2cBuffer[2] = temp;
     d3a:	22 83       	std	Z+2, r18	; 0x02
    
    bat_limit_loaded = BAT_LOW_LIM_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
     d42:	08 95       	ret

00000d44 <fnRdBatChrgTime>:
}

// I2C command to read battery charging time while doing pwm e.g., absorption time
void fnRdBatChrgTime(uint8_t* i2cBuffer)
{
     d44:	fc 01       	movw	r30, r24
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (alt_pwm_accum_charge_time>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     d46:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <alt_pwm_accum_charge_time+0x3>
     d4a:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (alt_pwm_accum_charge_time>>16) & 0xFF;
     d4c:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <alt_pwm_accum_charge_time+0x2>
     d50:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (alt_pwm_accum_charge_time>>8) & 0xFF;
     d52:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <alt_pwm_accum_charge_time+0x1>
     d56:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  alt_pwm_accum_charge_time & 0xFF; // low byte. Again Mask should optimize out
     d58:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <alt_pwm_accum_charge_time>
     d5c:	84 83       	std	Z+4, r24	; 0x04
     d5e:	08 95       	ret

00000d60 <fnMorningThreshold>:

// I2C command for day-night Morning Threshold (uint16_t)
void fnMorningThreshold(uint8_t* i2cBuffer)
{
    // daynight_morning_threshold is a uint16_t e.g., two bytes
    uint8_t temp = (daynight_morning_threshold>>8) & 0xFF;
     d60:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    daynight_morning_threshold = 0x00FF & daynight_morning_threshold; // mask out the old value
    daynight_morning_threshold = ((uint32_t) (i2cBuffer[1])<<8) & daynight_morning_threshold; // place new value in high byte
     d64:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <daynight_morning_threshold+0x1>
     d68:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <daynight_morning_threshold>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d6c:	fc 01       	movw	r30, r24
     d6e:	21 83       	std	Z+1, r18	; 0x01

    temp = daynight_morning_threshold & 0xFF;
     d70:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <daynight_morning_threshold>
    daynight_morning_threshold = 0xFFFFFF00 & daynight_morning_threshold;
    daynight_morning_threshold = ((uint32_t) (i2cBuffer[2])) & daynight_morning_threshold;  
     d74:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <daynight_morning_threshold+0x1>
     d78:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <daynight_morning_threshold>
    i2cBuffer[2] = temp;
     d7c:	22 83       	std	Z+2, r18	; 0x02
    
    daynight_values_loaded = DAYNIGHT_MORNING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     d84:	08 95       	ret

00000d86 <fnEveningThreshold>:

// I2C command for day-night Evening Threshold (uint16_t)
void fnEveningThreshold(uint8_t* i2cBuffer)
{
    // daynight_evening_threshold is a uint16_t e.g., two bytes
    uint8_t temp = (daynight_evening_threshold>>8) & 0xFF;
     d86:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    daynight_evening_threshold = 0x00FF & daynight_evening_threshold; // mask out the old value
    daynight_evening_threshold = ((uint32_t) (i2cBuffer[1])<<8) & daynight_evening_threshold; // place new value in high byte
     d8a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <daynight_evening_threshold+0x1>
     d8e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <daynight_evening_threshold>
    i2cBuffer[1] = temp; // swap the return value with the old high byte
     d92:	fc 01       	movw	r30, r24
     d94:	21 83       	std	Z+1, r18	; 0x01

    temp = daynight_evening_threshold & 0xFF;
     d96:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <daynight_evening_threshold>
    daynight_evening_threshold = 0xFFFFFF00 & daynight_evening_threshold;
    daynight_evening_threshold = ((uint32_t) (i2cBuffer[2])) & daynight_evening_threshold;  
     d9a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <daynight_evening_threshold+0x1>
     d9e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <daynight_evening_threshold>
    i2cBuffer[2] = temp;
     da2:	22 83       	std	Z+2, r18	; 0x02
    
    daynight_values_loaded = DAYNIGHT_EVENING_THRESHOLD_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     daa:	08 95       	ret

00000dac <fnDayNightState>:

// I2C command to read Day-Night state
void fnDayNightState(uint8_t* i2cBuffer)
{
    // there is one byte in an uint8_t
    i2cBuffer[1] = 0; // dayState;
     dac:	fc 01       	movw	r30, r24
     dae:	11 82       	std	Z+1, r1	; 0x01
     db0:	08 95       	ret

00000db2 <fnRdTimedAccumAltI>:
    i2cBuffer[2] =  adc_buffer & 0xFF; 
}

// I2C command to read timed accumulation of analog channel ALT_I
void fnRdTimedAccumAltI(uint8_t* i2cBuffer)
{
     db2:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_alt_ti>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     db4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
     db8:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_alt_ti>>16) & 0xFF;
     dba:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
     dbe:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_alt_ti>>8) & 0xFF;
     dc0:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
     dc4:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_alt_ti & 0xFF; // low byte. Again Mask should optimize out
     dc6:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <accumulate_alt_ti>
     dca:	84 83       	std	Z+4, r24	; 0x04
     dcc:	08 95       	ret

00000dce <fnRdTimedAccumPwrI>:
}

// I2C command to read timed accumulation of analog channel PWR_I
void fnRdTimedAccumPwrI(uint8_t* i2cBuffer)
{
     dce:	fc 01       	movw	r30, r24
    // there are four bytes in the unsigned long accumulate_alt_ti
    i2cBuffer[1] =  (accumulate_pwr_ti>>24) & 0xFF;
     dd0:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
     dd4:	81 83       	std	Z+1, r24	; 0x01
    i2cBuffer[2] =  (accumulate_pwr_ti>>16) & 0xFF;
     dd6:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
     dda:	82 83       	std	Z+2, r24	; 0x02
    i2cBuffer[3] =  (accumulate_pwr_ti>>8) & 0xFF;
     ddc:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
     de0:	83 83       	std	Z+3, r24	; 0x03
    i2cBuffer[4] =  accumulate_pwr_ti & 0xFF;
     de2:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <accumulate_pwr_ti>
     de6:	84 83       	std	Z+4, r24	; 0x04
     de8:	08 95       	ret

00000dea <fnAnalogRefExternAVCC>:
/* swap the I2C buffer with the ref_extern_avcc_uV in use
    set ref_loaded so main loop will try to save it to eeprom
    the main loop will reload eeprom or default value if new is out of range
*/ 
void fnAnalogRefExternAVCC(uint8_t* i2cBuffer)
{
     dea:	fc 01       	movw	r30, r24
    // ref_extern_avcc_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_extern_avcc_uV>>24) & 0xFF;
     dec:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    ref_extern_avcc_uV = 0x00FFFFFF & ref_extern_avcc_uV; // mask out the old high byte
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_extern_avcc_uV; // place new value in high byte
     df0:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     df4:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     df8:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     dfc:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     e00:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_extern_avcc_uV>>16) & 0xFF;
     e02:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    ref_extern_avcc_uV = 0xFF00FFFF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_extern_avcc_uV; 
     e06:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     e0a:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     e0e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e12:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[2] =  temp;
     e16:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_extern_avcc_uV>>8) & 0xFF;
     e18:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    ref_extern_avcc_uV = 0xFFFF00FF & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_extern_avcc_uV; 
     e1c:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     e20:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     e24:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e28:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[3] =  temp;
     e2c:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_extern_avcc_uV & 0xFF;
     e2e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    ref_extern_avcc_uV = 0xFFFFFF00 & ref_extern_avcc_uV;
    ref_extern_avcc_uV = ((uint32_t) (i2cBuffer[4])) & ref_extern_avcc_uV;  
     e32:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <ref_extern_avcc_uV>
     e36:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <ref_extern_avcc_uV+0x1>
     e3a:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <ref_extern_avcc_uV+0x2>
     e3e:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <ref_extern_avcc_uV+0x3>
    i2cBuffer[4] =  temp;
     e42:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_AVCC_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     e4a:	08 95       	ret

00000e4c <fnAnalogRefIntern1V1>:
}

// I2C command for Analog referance INTERNAL_1V1
void fnAnalogRefIntern1V1(uint8_t* i2cBuffer)
{
     e4c:	fc 01       	movw	r30, r24
    // ref_intern_1v1_uV is a uint32_t and has four bytes
    uint8_t temp = (ref_intern_1v1_uV>>24) & 0xFF;
     e4e:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    ref_intern_1v1_uV = 0x00FFFFFF & ref_intern_1v1_uV; // mask out the old high value
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[1])<<24) & ref_intern_1v1_uV; // place new value in high byte
     e52:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e56:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e5a:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     e5e:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     e62:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (ref_intern_1v1_uV>>16) & 0xFF;
     e64:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    ref_intern_1v1_uV = 0xFF00FFFF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[2])<<16) & ref_intern_1v1_uV; 
     e68:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e6c:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e70:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     e74:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[2] =  temp;
     e78:	82 83       	std	Z+2, r24	; 0x02

    temp = (ref_intern_1v1_uV>>8) & 0xFF;
     e7a:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    ref_intern_1v1_uV = 0xFFFF00FF & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[3])<<8) & ref_intern_1v1_uV; 
     e7e:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e82:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e86:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     e8a:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[3] =  temp;
     e8e:	83 83       	std	Z+3, r24	; 0x03

    temp = ref_intern_1v1_uV & 0xFF;
     e90:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    ref_intern_1v1_uV = 0xFFFFFF00 & ref_intern_1v1_uV;
    ref_intern_1v1_uV = ((uint32_t) (i2cBuffer[4])) & ref_intern_1v1_uV;  
     e94:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <ref_intern_1v1_uV>
     e98:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <ref_intern_1v1_uV+0x1>
     e9c:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <ref_intern_1v1_uV+0x2>
     ea0:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <ref_intern_1v1_uV+0x3>
    i2cBuffer[4] =  temp;
     ea4:	84 83       	std	Z+4, r24	; 0x04
    
    ref_loaded = REF_1V1_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
     eac:	08 95       	ret

00000eae <fnMorningDebounce>:
    }
}

// I2C command for day-night morning debounce time (unsigned long)
void fnMorningDebounce(uint8_t* i2cBuffer)
{
     eae:	fc 01       	movw	r30, r24
    // daynight_morning_debounce is a unsigned long and has four bytes
    uint8_t temp = (daynight_morning_debounce>>24) & 0xFF;
     eb0:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    daynight_morning_debounce = 0x00FFFFFF & daynight_morning_debounce; // mask out the old high value
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[1])<<24) & daynight_morning_debounce; // place new value in high byte
     eb4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     eb8:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     ebc:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     ec0:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     ec4:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (daynight_morning_debounce>>16) & 0xFF;
     ec6:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    daynight_morning_debounce = 0xFF00FFFF & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[2])<<16) & daynight_morning_debounce; 
     eca:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     ece:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     ed2:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     ed6:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[2] =  temp;
     eda:	82 83       	std	Z+2, r24	; 0x02

    temp = (daynight_morning_debounce>>8) & 0xFF;
     edc:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    daynight_morning_debounce = 0xFFFF00FF & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[3])<<8) & daynight_morning_debounce; 
     ee0:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     ee4:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     ee8:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     eec:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[3] =  temp;
     ef0:	83 83       	std	Z+3, r24	; 0x03

    temp = daynight_morning_debounce & 0xFF;
     ef2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <daynight_morning_debounce>
    daynight_morning_debounce = 0xFFFFFF00 & daynight_morning_debounce;
    daynight_morning_debounce = ((unsigned long) (i2cBuffer[4])) & daynight_morning_debounce;  
     ef6:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <daynight_morning_debounce>
     efa:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <daynight_morning_debounce+0x1>
     efe:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <daynight_morning_debounce+0x2>
     f02:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <daynight_morning_debounce+0x3>
    i2cBuffer[4] =  temp;
     f06:	84 83       	std	Z+4, r24	; 0x04
    
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     f0e:	08 95       	ret

00000f10 <fnEveningDebounce>:
}

// I2C command for day-night evening debounce time (unsigned long)
void fnEveningDebounce(uint8_t* i2cBuffer)
{
     f10:	fc 01       	movw	r30, r24
    // daynight_evening_debounce is a unsigned long and has four bytes
    uint8_t temp = (daynight_evening_debounce>>24) & 0xFF;
     f12:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    daynight_evening_debounce = 0x00FFFFFF & daynight_evening_debounce; // mask out the old high value
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[1])<<24) & daynight_evening_debounce; // place new value in high byte
     f16:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f1a:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f1e:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f22:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[1] =  temp; // swap the return value with the old high byte
     f26:	81 83       	std	Z+1, r24	; 0x01
    
    temp = (daynight_evening_debounce>>16) & 0xFF;
     f28:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    daynight_evening_debounce = 0xFF00FFFF & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[2])<<16) & daynight_evening_debounce; 
     f2c:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f30:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f34:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f38:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[2] =  temp;
     f3c:	82 83       	std	Z+2, r24	; 0x02

    temp = (daynight_evening_debounce>>8) & 0xFF;
     f3e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    daynight_evening_debounce = 0xFFFF00FF & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[3])<<8) & daynight_evening_debounce; 
     f42:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f46:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f4a:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f4e:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[3] =  temp;
     f52:	83 83       	std	Z+3, r24	; 0x03

    temp = daynight_evening_debounce & 0xFF;
     f54:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <daynight_evening_debounce>
    daynight_evening_debounce = 0xFFFFFF00 & daynight_evening_debounce;
    daynight_evening_debounce = ((unsigned long) (i2cBuffer[4])) & daynight_evening_debounce;  
     f58:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <daynight_evening_debounce>
     f5c:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <daynight_evening_debounce+0x1>
     f60:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <daynight_evening_debounce+0x2>
     f64:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <daynight_evening_debounce+0x3>
    i2cBuffer[4] =  temp;
     f68:	84 83       	std	Z+4, r24	; 0x04
    
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
     f6a:	84 e0       	ldi	r24, 0x04	; 4
     f6c:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
     f70:	08 95       	ret

00000f72 <fnNull>:
    i2cBuffer[4] =  now & 0xFF; // low byte. Again Mask should optimize out
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     f72:	08 95       	ret

00000f74 <fnMillis>:
    daynight_values_loaded = DAYNIGHT_MORNING_DEBOUNCE_TOSAVE; // main loop will save to eeprom or load default value if new value is out of range
}

// I2C command to read millis time
void fnMillis(uint8_t* i2cBuffer)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
    unsigned long now = millis();
     f7a:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    // there are four bytes in an unsigned long
    i2cBuffer[1] =  (now>>24) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
     f7e:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  (now>>16) & 0xFF;
     f80:	8a 83       	std	Y+2, r24	; 0x02
    i2cBuffer[3] =  (now>>8) & 0xFF;
     f82:	7b 83       	std	Y+3, r23	; 0x03
    i2cBuffer[4] =  now & 0xFF; // low byte. Again Mask should optimize out
     f84:	6c 83       	std	Y+4, r22	; 0x04
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <fnRdMgrAddr>:
  *    the manager broadcast the bootload address when the host serial is active (e.g., nRTS) 
  *    all managers lockout serial except the address to bootload and the host */

// I2C_COMMAND_TO_READ_RPU_ADDRESS and set RPU_NORMAL_MODE
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
     f8c:	cf 93       	push	r28
    i2cBuffer[1] = rpu_address; // '1' is 0x31
     f8e:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
     f92:	fc 01       	movw	r30, r24
     f94:	21 83       	std	Z+1, r18	; 0x01
    local_mcu_is_rpu_aware =1; 
     f96:	c1 e0       	ldi	r28, 0x01	; 1
     f98:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <local_mcu_is_rpu_aware>
    
    // end the local mcu lockout. 
    if (localhost_active) 
     f9c:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <localhost_active>
     fa0:	88 23       	and	r24, r24
     fa2:	b1 f1       	breq	.+108    	; 0x1010 <fnRdMgrAddr+0x84>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
     fa4:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
     fa8:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
     fac:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
     fb0:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
     fb4:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
     fb8:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     fbc:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
     fc0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
     fc4:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	20 95       	com	r18
     fcc:	30 95       	com	r19
     fce:	2a 70       	andi	r18, 0x0A	; 10
     fd0:	33 27       	eor	r19, r19
     fd2:	64 e0       	ldi	r22, 0x04	; 4
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	6a 95       	dec	r22
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <fnRdMgrAddr+0x48>
     fdc:	89 2f       	mov	r24, r25
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	80 95       	com	r24
     fe2:	90 95       	com	r25
     fe4:	80 75       	andi	r24, 0x50	; 80
     fe6:	99 27       	eor	r25, r25
     fe8:	74 e0       	ldi	r23, 0x04	; 4
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	7a 95       	dec	r23
     ff0:	e1 f7       	brne	.-8      	; 0xfea <fnRdMgrAddr+0x5e>
     ff2:	82 2b       	or	r24, r18
     ff4:	93 2b       	or	r25, r19
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	1f 92       	push	r1
     ffc:	4f 93       	push	r20
     ffe:	86 e1       	ldi	r24, 0x16	; 22
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	9f 93       	push	r25
    1004:	8f 93       	push	r24
    1006:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
    100a:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
    100e:	39 c0       	rjmp	.+114    	; 0x1082 <fnRdMgrAddr+0xf6>
    }
    else 
        if (bootloader_started)
    1010:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <bootloader_started>
    1014:	88 23       	and	r24, r24
    1016:	e1 f1       	breq	.+120    	; 0x1090 <fnRdMgrAddr+0x104>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
    1018:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    101c:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1020:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1024:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1028:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
    102c:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1030:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1034:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1038:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	20 95       	com	r18
    1040:	30 95       	com	r19
    1042:	2a 70       	andi	r18, 0x0A	; 10
    1044:	33 27       	eor	r19, r19
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	22 0f       	add	r18, r18
    104a:	33 1f       	adc	r19, r19
    104c:	8a 95       	dec	r24
    104e:	e1 f7       	brne	.-8      	; 0x1048 <fnRdMgrAddr+0xbc>
    1050:	89 2f       	mov	r24, r25
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	80 75       	andi	r24, 0x50	; 80
    105a:	99 27       	eor	r25, r25
    105c:	54 e0       	ldi	r21, 0x04	; 4
    105e:	95 95       	asr	r25
    1060:	87 95       	ror	r24
    1062:	5a 95       	dec	r21
    1064:	e1 f7       	brne	.-8      	; 0x105e <fnRdMgrAddr+0xd2>
    1066:	82 2b       	or	r24, r18
    1068:	93 2b       	or	r25, r19
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	1f 92       	push	r1
    1070:	4f 93       	push	r20
    1072:	86 e1       	ldi	r24, 0x16	; 22
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
    107e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <uart_has_TTL>
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	20 c0       	rjmp	.+64     	; 0x10d0 <fnRdMgrAddr+0x144>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
    1090:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	80 5c       	subi	r24, 0xC0	; 192
    109a:	94 4d       	sbci	r25, 0xD4	; 212
    109c:	a1 40       	sbci	r26, 0x01	; 1
    109e:	b1 09       	sbc	r27, r1
    10a0:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <lockout_started_at>
    10a4:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <lockout_started_at+0x1>
    10a8:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <lockout_started_at+0x2>
    10ac:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
    10b0:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	88 53       	subi	r24, 0x38	; 56
    10ba:	91 4c       	sbci	r25, 0xC1	; 193
    10bc:	a1 40       	sbci	r26, 0x01	; 1
    10be:	b1 09       	sbc	r27, r1
    10c0:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <bootloader_started_at>
    10c4:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <bootloader_started_at+0x1>
    10c8:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <bootloader_started_at+0x2>
    10cc:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <bootloader_started_at+0x3>
        }
}
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <fnRdAdcAltI>:
/********* POWER MANAGER ***********
  *  for ALT_I, ALT_V, PWR_I, PWR_V reading     */

// I2C command to read analog channel 0
void fnRdAdcAltI(uint8_t* i2cBuffer)
{
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_I);
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF; // high byte. Mask is for clarity, the compiler should optimize it out
    10e0:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; // low byte. Again Mask should optimize out
    10e2:	8a 83       	std	Y+2, r24	; 0x02
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <fnRdAdcAltV>:

// I2C command to read analog channel 1
void fnRdAdcAltV(uint8_t* i2cBuffer)
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(ALT_V);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    10f6:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
    10f8:	8a 83       	std	Y+2, r24	; 0x02
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <fnRdAdcPwrI>:

// I2C command to read analog channel 6
void fnRdAdcPwrI(uint8_t* i2cBuffer)
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_I);
    1106:	86 e0       	ldi	r24, 0x06	; 6
    1108:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    110c:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF;
    110e:	8a 83       	std	Y+2, r24	; 0x02
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <fnRdAdcPwrV>:

// I2C command to read analog channel 7
void fnRdAdcPwrV(uint8_t* i2cBuffer)
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
    uint16_t adc_buffer = analogRead(PWR_V);
    111c:	87 e0       	ldi	r24, 0x07	; 7
    111e:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    i2cBuffer[1] =  (adc_buffer>>8) & 0xFF;
    1122:	99 83       	std	Y+1, r25	; 0x01
    i2cBuffer[2] =  adc_buffer & 0xFF; 
    1124:	8a 83       	std	Y+2, r24	; 0x02
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    112c:	7f 92       	push	r7
    112e:	8f 92       	push	r8
    1130:	9f 92       	push	r9
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    if (test_mode)
    1146:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <test_mode>
    114a:	ee 23       	and	r30, r30
    114c:	09 f4       	brne	.+2      	; 0x1150 <fnRdXcvrCntlInTestMode+0x24>
    114e:	55 c0       	rjmp	.+170    	; 0x11fa <fnRdXcvrCntlInTestMode+0xce>
    1150:	e9 b1       	in	r30, 0x09	; 9
    1152:	b9 b1       	in	r27, 0x09	; 9
    1154:	f6 b1       	in	r31, 0x06	; 6
    1156:	79 b0       	in	r7, 0x09	; 9
    1158:	a9 b0       	in	r10, 0x09	; 9
    115a:	09 b1       	in	r16, 0x09	; 9
    115c:	b9 b0       	in	r11, 0x09	; 9
    115e:	c6 b1       	in	r28, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	00 0f       	add	r16, r16
    1164:	01 2f       	mov	r16, r17
    1166:	00 1f       	adc	r16, r16
    1168:	11 0b       	sbc	r17, r17
    116a:	00 0f       	add	r16, r16
    116c:	11 1f       	adc	r17, r17
    116e:	00 0f       	add	r16, r16
    1170:	11 1f       	adc	r17, r17
    1172:	c3 fb       	bst	r28, 3
    1174:	cc 27       	eor	r28, r28
    1176:	c0 f9       	bld	r28, 0
    1178:	ac 2f       	mov	r26, r28
    117a:	a0 2b       	or	r26, r16
    117c:	e3 fb       	bst	r30, 3
    117e:	88 24       	eor	r8, r8
    1180:	80 f8       	bld	r8, 0
    1182:	91 2c       	mov	r9, r1
    1184:	e4 01       	movw	r28, r8
    1186:	d6 95       	lsr	r29
    1188:	dc 2f       	mov	r29, r28
    118a:	cc 27       	eor	r28, r28
    118c:	d7 95       	ror	r29
    118e:	c7 95       	ror	r28
    1190:	ca 2b       	or	r28, r26
    1192:	b2 fb       	bst	r27, 2
    1194:	cc 24       	eor	r12, r12
    1196:	c0 f8       	bld	r12, 0
    1198:	d1 2c       	mov	r13, r1
    119a:	d6 01       	movw	r26, r12
    119c:	56 e0       	ldi	r21, 0x06	; 6
    119e:	aa 0f       	add	r26, r26
    11a0:	bb 1f       	adc	r27, r27
    11a2:	5a 95       	dec	r21
    11a4:	e1 f7       	brne	.-8      	; 0x119e <fnRdXcvrCntlInTestMode+0x72>
    11a6:	ac 2b       	or	r26, r28
    11a8:	f2 fb       	bst	r31, 2
    11aa:	ee 24       	eor	r14, r14
    11ac:	e0 f8       	bld	r14, 0
    11ae:	f1 2c       	mov	r15, r1
    11b0:	f7 01       	movw	r30, r14
    11b2:	65 e0       	ldi	r22, 0x05	; 5
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	6a 95       	dec	r22
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <fnRdXcvrCntlInTestMode+0x88>
    11bc:	ea 2b       	or	r30, r26
    11be:	75 fa       	bst	r7, 5
    11c0:	66 27       	eor	r22, r22
    11c2:	60 f9       	bld	r22, 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	f4 e0       	ldi	r31, 0x04	; 4
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	fa 95       	dec	r31
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <fnRdXcvrCntlInTestMode+0x9c>
    11d0:	6e 2b       	or	r22, r30
    11d2:	a6 fa       	bst	r10, 6
    11d4:	44 27       	eor	r20, r20
    11d6:	40 f9       	bld	r20, 0
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	a3 e0       	ldi	r26, 0x03	; 3
    11dc:	44 0f       	add	r20, r20
    11de:	55 1f       	adc	r21, r21
    11e0:	aa 95       	dec	r26
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <fnRdXcvrCntlInTestMode+0xb0>
    11e4:	46 2b       	or	r20, r22
    11e6:	b4 fa       	bst	r11, 4
    11e8:	22 27       	eor	r18, r18
    11ea:	20 f9       	bld	r18, 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	24 2b       	or	r18, r20
    11f4:	fc 01       	movw	r30, r24
    11f6:	21 83       	std	Z+1, r18	; 0x01
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <fnRdXcvrCntlInTestMode+0xd2>
    }
    else 
    {
        i2cBuffer[1] = 0; 
    11fa:	fc 01       	movw	r30, r24
    11fc:	11 82       	std	Z+1, r1	; 0x01
    }
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	af 90       	pop	r10
    1212:	9f 90       	pop	r9
    1214:	8f 90       	pop	r8
    1216:	7f 90       	pop	r7
    1218:	08 95       	ret

0000121a <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	fc 01       	movw	r30, r24
    if (test_mode)
    1220:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    1224:	88 23       	and	r24, r24
    1226:	09 f4       	brne	.+2      	; 0x122a <fnWtXcvrCntlInTestMode+0x10>
    1228:	6e c0       	rjmp	.+220    	; 0x1306 <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
    122a:	81 81       	ldd	r24, Z+1	; 0x01
    122c:	88 1f       	adc	r24, r24
    122e:	88 27       	eor	r24, r24
    1230:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1232:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1234:	f8 94       	cli
    {
        if (value_for_bit) 
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
    123a:	5b 9a       	sbi	0x0b, 3	; 11
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    123e:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1240:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
    1242:	81 81       	ldd	r24, Z+1	; 0x01
    1244:	86 fb       	bst	r24, 6
    1246:	88 27       	eor	r24, r24
    1248:	80 f9       	bld	r24, 0
    124a:	c8 2f       	mov	r28, r24
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1250:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1252:	f8 94       	cli
    {
        if (value_for_bit) 
    1254:	cd 2b       	or	r28, r29
    1256:	11 f0       	breq	.+4      	; 0x125c <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
    1258:	5a 9a       	sbi	0x0b, 2	; 11
    125a:	01 c0       	rjmp	.+2      	; 0x125e <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    125c:	5a 98       	cbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    125e:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	85 fb       	bst	r24, 5
    1264:	aa 27       	eor	r26, r26
    1266:	a0 f9       	bld	r26, 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    126a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    126c:	f8 94       	cli
    {
        if (value_for_bit) 
    126e:	ab 2b       	or	r26, r27
    1270:	11 f0       	breq	.+4      	; 0x1276 <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
    1272:	42 9a       	sbi	0x08, 2	; 8
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1276:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1278:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	84 fb       	bst	r24, 4
    127e:	66 27       	eor	r22, r22
    1280:	60 f9       	bld	r22, 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1284:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1286:	f8 94       	cli
    {
        if (value_for_bit) 
    1288:	67 2b       	or	r22, r23
    128a:	11 f0       	breq	.+4      	; 0x1290 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
    128c:	5d 9a       	sbi	0x0b, 5	; 11
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1290:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1292:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
    1294:	81 81       	ldd	r24, Z+1	; 0x01
    1296:	83 fb       	bst	r24, 3
    1298:	44 27       	eor	r20, r20
    129a:	40 f9       	bld	r20, 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    129e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12a0:	f8 94       	cli
    {
        if (value_for_bit) 
    12a2:	45 2b       	or	r20, r21
    12a4:	11 f0       	breq	.+4      	; 0x12aa <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
    12a6:	5e 9a       	sbi	0x0b, 6	; 11
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12aa:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12ac:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
    12ae:	81 81       	ldd	r24, Z+1	; 0x01
    12b0:	82 ff       	sbrs	r24, 2
    12b2:	11 c0       	rjmp	.+34     	; 0x12d6 <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
    12b4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12b8:	87 7e       	andi	r24, 0xE7	; 231
    12ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12be:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12c0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12c2:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12c4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12c6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12c8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12ca:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12cc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12ce:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12d0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    12d2:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12d4:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	81 fb       	bst	r24, 1
    12da:	22 27       	eor	r18, r18
    12dc:	20 f9       	bld	r18, 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12e0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12e2:	f8 94       	cli
    {
        if (value_for_bit) 
    12e4:	23 2b       	or	r18, r19
    12e6:	11 f0       	breq	.+4      	; 0x12ec <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
    12e8:	5c 9a       	sbi	0x0b, 4	; 11
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    12ec:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12ee:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
    12f2:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    12f4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12f6:	f8 94       	cli
    {
        if (value_for_bit) 
    12f8:	88 23       	and	r24, r24
    12fa:	11 f0       	breq	.+4      	; 0x1300 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
    12fc:	43 9a       	sbi	0x08, 3	; 8
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1300:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1302:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
    1306:	11 82       	std	Z+1, r1	; 0x01
    }
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
    130e:	fc 01       	movw	r30, r24
    1310:	81 81       	ldd	r24, Z+1	; 0x01
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	f1 f4       	brne	.+60     	; 0x1352 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1316:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1318:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    131a:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    131c:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    131e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1320:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1322:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1324:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1326:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1328:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    132a:	25 9a       	sbi	0x04, 5	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    132c:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    132e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1330:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1332:	2d 9a       	sbi	0x05, 5	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1334:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
    1336:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
    133a:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <shutdown_detected>
        shutdown_started_at = millis();
    133e:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    1342:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <shutdown_started_at>
    1346:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <shutdown_started_at+0x1>
    134a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <shutdown_started_at+0x2>
    134e:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <shutdown_started_at+0x3>
    1352:	08 95       	ret

00001354 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
    1354:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
    1356:	fc 01       	movw	r30, r24
    1358:	c1 81       	ldd	r28, Z+1	; 0x01
    135a:	c1 30       	cpi	r28, 0x01	; 1
    135c:	09 f0       	breq	.+2      	; 0x1360 <fnWtArduinMode+0xc>
    135e:	45 c0       	rjmp	.+138    	; 0x13ea <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    1360:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <arduino_mode_started>
    1364:	21 11       	cpse	r18, r1
    1366:	41 c0       	rjmp	.+130    	; 0x13ea <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    1368:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    136c:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1370:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    1374:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    1378:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1382:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1386:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    138a:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	20 95       	com	r18
    1392:	30 95       	com	r19
    1394:	2a 70       	andi	r18, 0x0A	; 10
    1396:	33 27       	eor	r19, r19
    1398:	84 e0       	ldi	r24, 0x04	; 4
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	8a 95       	dec	r24
    13a0:	e1 f7       	brne	.-8      	; 0x139a <fnWtArduinMode+0x46>
    13a2:	89 2f       	mov	r24, r25
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	80 95       	com	r24
    13a8:	90 95       	com	r25
    13aa:	80 75       	andi	r24, 0x50	; 80
    13ac:	99 27       	eor	r25, r25
    13ae:	54 e0       	ldi	r21, 0x04	; 4
    13b0:	95 95       	asr	r25
    13b2:	87 95       	ror	r24
    13b4:	5a 95       	dec	r21
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <fnWtArduinMode+0x5c>
    13b8:	82 2b       	or	r24, r18
    13ba:	93 2b       	or	r25, r19
    13bc:	9f 93       	push	r25
    13be:	8f 93       	push	r24
    13c0:	1f 92       	push	r1
    13c2:	4f 93       	push	r20
    13c4:	86 e1       	ldi	r24, 0x16	; 22
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	9f 93       	push	r25
    13ca:	8f 93       	push	r24
    13cc:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    13d0:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    13d4:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    13d8:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <arduino_mode>
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    13ea:	fc 01       	movw	r30, r24
    13ec:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    13f2:	cf 93       	push	r28
    13f4:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    13f6:	c1 81       	ldd	r28, Z+1	; 0x01
    13f8:	c1 30       	cpi	r28, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <fnStartTestMode+0xc>
    13fc:	48 c0       	rjmp	.+144    	; 0x148e <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    13fe:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    1402:	81 11       	cpse	r24, r1
    1404:	42 c0       	rjmp	.+132    	; 0x148a <fnStartTestMode+0x98>
    1406:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    140a:	81 11       	cpse	r24, r1
    140c:	3e c0       	rjmp	.+124    	; 0x148a <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    140e:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    1412:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    1416:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    141a:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    141e:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    1422:	c0 93 07 03 	sts	0x0307, r28	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1426:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    142a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    142e:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <uart_output>
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	20 95       	com	r18
    1436:	30 95       	com	r19
    1438:	2a 70       	andi	r18, 0x0A	; 10
    143a:	33 27       	eor	r19, r19
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	8a 95       	dec	r24
    1444:	e1 f7       	brne	.-8      	; 0x143e <fnStartTestMode+0x4c>
    1446:	89 2f       	mov	r24, r25
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	80 95       	com	r24
    144c:	90 95       	com	r25
    144e:	80 75       	andi	r24, 0x50	; 80
    1450:	99 27       	eor	r25, r25
    1452:	54 e0       	ldi	r21, 0x04	; 4
    1454:	95 95       	asr	r25
    1456:	87 95       	ror	r24
    1458:	5a 95       	dec	r21
    145a:	e1 f7       	brne	.-8      	; 0x1454 <fnStartTestMode+0x62>
    145c:	82 2b       	or	r24, r18
    145e:	93 2b       	or	r25, r19
    1460:	9f 93       	push	r25
    1462:	8f 93       	push	r24
    1464:	1f 92       	push	r1
    1466:	4f 93       	push	r20
    1468:	86 e1       	ldi	r24, 0x16	; 22
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	9f 93       	push	r25
    146e:	8f 93       	push	r24
    1470:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1474:	c0 93 05 03 	sts	0x0305, r28	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    1478:	c0 93 ed 02 	sts	0x02ED, r28	; 0x8002ed <test_mode_started>
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    148e:	83 e0       	ldi	r24, 0x03	; 3
    1490:	81 83       	std	Z+1, r24	; 0x01
    }
}
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    149e:	19 81       	ldd	r17, Y+1	; 0x01
    14a0:	11 30       	cpi	r17, 0x01	; 1
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <fnEndTestMode+0x10>
    14a4:	61 c0       	rjmp	.+194    	; 0x1568 <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    14a6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <test_mode_started>
    14aa:	81 11       	cpse	r24, r1
    14ac:	5d c0       	rjmp	.+186    	; 0x1568 <fnEndTestMode+0xd2>
    14ae:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <test_mode>
    14b2:	88 23       	and	r24, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <fnEndTestMode+0x22>
    14b6:	58 c0       	rjmp	.+176    	; 0x1568 <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14ba:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    14bc:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14be:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14c2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    14c4:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c6:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    14c8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14cc:	88 61       	ori	r24, 0x18	; 24
    14ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14d2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14d4:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    14d6:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14d8:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    14da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14dc:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    14de:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14e0:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    14e2:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    14e6:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <uart_started_at>
    14ea:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <uart_started_at+0x1>
    14ee:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <uart_started_at+0x2>
    14f2:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    14f6:	8e ef       	ldi	r24, 0xFE	; 254
    14f8:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    14fc:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <uart_output>
    1500:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <uart_output>
    1504:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <uart_output>
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	20 95       	com	r18
    150c:	30 95       	com	r19
    150e:	2a 70       	andi	r18, 0x0A	; 10
    1510:	33 27       	eor	r19, r19
    1512:	a9 01       	movw	r20, r18
    1514:	24 e0       	ldi	r18, 0x04	; 4
    1516:	44 0f       	add	r20, r20
    1518:	55 1f       	adc	r21, r21
    151a:	2a 95       	dec	r18
    151c:	e1 f7       	brne	.-8      	; 0x1516 <fnEndTestMode+0x80>
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	20 95       	com	r18
    1524:	30 95       	com	r19
    1526:	20 75       	andi	r18, 0x50	; 80
    1528:	33 27       	eor	r19, r19
    152a:	64 e0       	ldi	r22, 0x04	; 4
    152c:	35 95       	asr	r19
    152e:	27 95       	ror	r18
    1530:	6a 95       	dec	r22
    1532:	e1 f7       	brne	.-8      	; 0x152c <fnEndTestMode+0x96>
    1534:	24 2b       	or	r18, r20
    1536:	35 2b       	or	r19, r21
    1538:	3f 93       	push	r19
    153a:	2f 93       	push	r18
    153c:	1f 92       	push	r1
    153e:	9f 93       	push	r25
    1540:	86 e1       	ldi	r24, 0x16	; 22
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	9f 93       	push	r25
    1546:	8f 93       	push	r24
    1548:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    154c:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    1550:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    1554:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <transceiver_state>
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	01 c0       	rjmp	.+2      	; 0x156a <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    1568:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	08 95       	ret

00001572 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    1572:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	29 2f       	mov	r18, r25
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	26 17       	cp	r18, r22
    157c:	37 07       	cpc	r19, r23
    157e:	54 f4       	brge	.+20     	; 0x1594 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    1580:	fa 01       	movw	r30, r20
    1582:	e2 0f       	add	r30, r18
    1584:	f3 1f       	adc	r31, r19
    1586:	80 81       	ld	r24, Z
    1588:	f9 01       	movw	r30, r18
    158a:	e3 5f       	subi	r30, 0xF3	; 243
    158c:	fc 4f       	sbci	r31, 0xFC	; 252
    158e:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1590:	9f 5f       	subi	r25, 0xFF	; 255
    1592:	f1 cf       	rjmp	.-30     	; 0x1576 <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    1594:	90 32       	cpi	r25, 0x20	; 32
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <receive_i2c_event+0x2e>
    1598:	f9 01       	movw	r30, r18
    159a:	e3 5f       	subi	r30, 0xF3	; 243
    159c:	fc 4f       	sbci	r31, 0xFC	; 252
    159e:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    15a0:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    15a4:	62 30       	cpi	r22, 0x02	; 2
    15a6:	10 f4       	brcc	.+4      	; 0x15ac <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    15ac:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <i2c0Buffer>
    15b0:	e8 2f       	mov	r30, r24
    15b2:	e2 95       	swap	r30
    15b4:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    15b6:	e4 30       	cpi	r30, 0x04	; 4
    15b8:	10 f0       	brcs	.+4      	; 0x15be <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    15ba:	8e ef       	ldi	r24, 0xFE	; 254
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    15be:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    15c4:	8d ef       	ldi	r24, 0xFD	; 253
    15c6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    15ca:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    15cc:	98 e0       	ldi	r25, 0x08	; 8
    15ce:	e9 9f       	mul	r30, r25
    15d0:	f0 01       	movw	r30, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	e8 0f       	add	r30, r24
    15d6:	f1 1d       	adc	r31, r1
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	e5 5e       	subi	r30, 0xE5	; 229
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	01 90       	ld	r0, Z+
    15e2:	f0 81       	ld	r31, Z
    15e4:	e0 2d       	mov	r30, r0
    15e6:	8d e0       	ldi	r24, 0x0D	; 13
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	09 94       	ijmp

000015ec <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    15ec:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    15f0:	8d e0       	ldi	r24, 0x0D	; 13
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	0e 94 fe 12 	call	0x25fc	; 0x25fc <twi0_transmit>
    if (return_code != 0)
    15f8:	88 23       	and	r24, r24
    15fa:	29 f0       	breq	.+10     	; 0x1606 <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    15fc:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <status_byt>
    1600:	82 70       	andi	r24, 0x02	; 2
    1602:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <status_byt>
    1606:	08 95       	ret

00001608 <fnRdMgrAddrQuietly>:
}

// I2C_COMMAND_TO_READ_RPU_ADDRESS
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = rpu_address; // '1' is 0x31
    1608:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <rpu_address>
    160c:	fc 01       	movw	r30, r24
    160e:	21 83       	std	Z+1, r18	; 0x01
    1610:	08 95       	ret

00001612 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    1612:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <inBytes_to_handle+0x1>
    1616:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    161a:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    161e:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <smbus_has_numBytes_to_handle>
    1622:	08 95       	ret

00001624 <handle_smbus_receive>:
        {fnWtArduinMode, fnRdArduinMode, fnBatStartChrg, fnBatDoneChrg, fnRdBatChrgTime, fnMorningThreshold, fnEveningThreshold, fnDayNightState},
        {fnRdAdcAltI, fnRdAdcAltV, fnRdAdcPwrI, fnRdAdcPwrV, fnRdTimedAccumAltI, fnRdTimedAccumPwrI, fnAnalogRefExternAVCC, fnAnalogRefIntern1V1},
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnMorningDebounce, fnEveningDebounce, fnMillis, fnNull}
    };

    int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
    1624:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle>
    1628:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    smbus_has_numBytes_to_handle = 0; 
    162c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <smbus_has_numBytes_to_handle+0x1>
    1630:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle>
    1634:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <inBytes_to_handle>
    1638:	f0 91 4e 03 	lds	r31, 0x034E	; 0x80034e <inBytes_to_handle+0x1>
    // read_i2c_block_data has a single command byte in its data set
    // it will write i2c address, the command* byte, and then cause a repeated start
    // followed by the i2c address (again) and then reading** the data
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    163c:	21 30       	cpi	r18, 0x01	; 1
    163e:	31 05       	cpc	r19, r1
    1640:	11 f0       	breq	.+4      	; 0x1646 <handle_smbus_receive+0x22>
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	23 c0       	rjmp	.+70     	; 0x168c <handle_smbus_receive+0x68>
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    1646:	90 81       	ld	r25, Z
    1648:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    164c:	98 13       	cpse	r25, r24
    164e:	59 c0       	rjmp	.+178    	; 0x1702 <handle_smbus_receive+0xde>
    1650:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    1654:	81 11       	cpse	r24, r1
    1656:	55 c0       	rjmp	.+170    	; 0x1702 <handle_smbus_receive+0xde>
        {
            for(i = 0; i < smbusBufferLength; ++i)
    1658:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    165c:	ad e2       	ldi	r26, 0x2D	; 45
    165e:	b3 e0       	ldi	r27, 0x03	; 3
    1660:	e1 e5       	ldi	r30, 0x51	; 81
    1662:	f3 e0       	ldi	r31, 0x03	; 3
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	98 17       	cp	r25, r24
    1668:	21 f0       	breq	.+8      	; 0x1672 <handle_smbus_receive+0x4e>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
    166a:	2d 91       	ld	r18, X+
    166c:	21 93       	st	Z+, r18
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
        {
            for(i = 0; i < smbusBufferLength; ++i)
    166e:	9f 5f       	subi	r25, 0xFF	; 255
    1670:	fa cf       	rjmp	.-12     	; 0x1666 <handle_smbus_receive+0x42>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
            }
            if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    1672:	80 32       	cpi	r24, 0x20	; 32
    1674:	28 f4       	brcc	.+10     	; 0x1680 <handle_smbus_receive+0x5c>
    1676:	e8 2f       	mov	r30, r24
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	ef 5a       	subi	r30, 0xAF	; 175
    167c:	fc 4f       	sbci	r31, 0xFC	; 252
    167e:	11 82       	std	Z+1, r1	; 0x01
            smbus_oldBufferLength = smbusBufferLength;
    1680:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
            transmit_data_ready = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    168a:	08 95       	ret
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    168c:	84 2f       	mov	r24, r20
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	82 17       	cp	r24, r18
    1692:	93 07       	cpc	r25, r19
    1694:	54 f4       	brge	.+20     	; 0x16aa <handle_smbus_receive+0x86>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    1696:	df 01       	movw	r26, r30
    1698:	a8 0f       	add	r26, r24
    169a:	b9 1f       	adc	r27, r25
    169c:	5c 91       	ld	r21, X
    169e:	dc 01       	movw	r26, r24
    16a0:	a3 5d       	subi	r26, 0xD3	; 211
    16a2:	bc 4f       	sbci	r27, 0xFC	; 252
    16a4:	5c 93       	st	X, r21
            smbus_oldBufferLength = smbusBufferLength;
            transmit_data_ready = 1;
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    16a6:	4f 5f       	subi	r20, 0xFF	; 255
    16a8:	f1 cf       	rjmp	.-30     	; 0x168c <handle_smbus_receive+0x68>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    }
    if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    16aa:	40 32       	cpi	r20, 0x20	; 32
    16ac:	20 f4       	brcc	.+8      	; 0x16b6 <handle_smbus_receive+0x92>
    16ae:	fc 01       	movw	r30, r24
    16b0:	e3 5d       	subi	r30, 0xD3	; 211
    16b2:	fc 4f       	sbci	r31, 0xFC	; 252
    16b4:	11 82       	std	Z+1, r1	; 0x01
    smbusBufferLength = numBytes;
    16b6:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

    // an read_i2c_block_data has a command byte 
    if( !(smbusBufferLength > 0) ) 
    16ba:	21 11       	cpse	r18, r1
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <handle_smbus_receive+0x9e>
    {
        smbusBuffer[0] = 0xFF; // error code for small size.
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <handle_smbus_receive+0xb8>
        return; // not valid, do nothing just echo an error code.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (smbusBuffer[0] & 0xF0) >> 4;
    16c2:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <smbusBuffer>
    16c6:	e8 2f       	mov	r30, r24
    16c8:	e2 95       	swap	r30
    16ca:	ef 70       	andi	r30, 0x0F	; 15
    if(group >= GROUP) 
    16cc:	e4 30       	cpi	r30, 0x04	; 4
    16ce:	10 f0       	brcs	.+4      	; 0x16d4 <handle_smbus_receive+0xb0>
    {
        smbusBuffer[0] = 0xFE; // error code for bad group.
    16d0:	8e ef       	ldi	r24, 0xFE	; 254
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <handle_smbus_receive+0xb8>
        return; 
    }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = smbusBuffer[0] & 0x0F;
    16d4:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    16d6:	88 30       	cpi	r24, 0x08	; 8
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <handle_smbus_receive+0xbe>
    {
        smbusBuffer[0] = 0xFD; // error code for bad command.
    16da:	8d ef       	ldi	r24, 0xFD	; 253
    16dc:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <smbusBuffer>
        return; // not valid, do nothing but echo error code.
    16e0:	08 95       	ret
    }

    // Call the i2c command function and return
    (* pf[group][command])(smbusBuffer);
    16e2:	98 e0       	ldi	r25, 0x08	; 8
    16e4:	e9 9f       	mul	r30, r25
    16e6:	f0 01       	movw	r30, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	e8 0f       	add	r30, r24
    16ec:	f1 1d       	adc	r31, r1
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	e5 5a       	subi	r30, 0xA5	; 165
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
    16f6:	01 90       	ld	r0, Z+
    16f8:	f0 81       	ld	r31, Z
    16fa:	e0 2d       	mov	r30, r0
    16fc:	8d e2       	ldi	r24, 0x2D	; 45
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	09 94       	ijmp
    1702:	08 95       	ret

00001704 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    1704:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    1708:	81 e5       	ldi	r24, 0x51	; 81
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	0e 94 88 14 	call	0x2910	; 0x2910 <twi1_transmit>
    transmit_data_ready = 0;
    1710:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    1714:	08 95       	ret

00001716 <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    1716:	cf 93       	push	r28
    if (eeprom_is_ready())
    1718:	f9 99       	sbic	0x1f, 1	; 31
    171a:	24 c0       	rjmp	.+72     	; 0x1764 <save_rpu_addr_state+0x4e>
    {
        // up to first EE_RPU_IDMAX states may be used for writing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    171c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	98 0f       	add	r25, r24
    1724:	9a 30       	cpi	r25, 0x0A	; 10
    1726:	90 f4       	brcc	.+36     	; 0x174c <save_rpu_addr_state+0x36>
        { // write "RPUid\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	fc 01       	movw	r30, r24
    172c:	ed 54       	subi	r30, 0x4D	; 77
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    1732:	6c 2f       	mov	r22, r28
    1734:	87 96       	adiw	r24, 0x27	; 39
    1736:	0e 94 40 19 	call	0x3280	; 0x3280 <eeprom_write_byte>
            
            if (value == '\0') 
    173a:	c1 11       	cpse	r28, r1
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <save_rpu_addr_state+0x2c>
            {
                write_rpu_address_to_eeprom = 11;
    173e:	8b e0       	ldi	r24, 0x0B	; 11
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <save_rpu_addr_state+0x32>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    1742:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    174c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <write_rpu_address_to_eeprom>
    1750:	8b 30       	cpi	r24, 0x0B	; 11
    1752:	41 f4       	brne	.+16     	; 0x1764 <save_rpu_addr_state+0x4e>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    1754:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <rpu_address>
    1758:	82 e3       	ldi	r24, 0x32	; 50
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 40 19 	call	0x3280	; 0x3280 <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    1760:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <write_rpu_address_to_eeprom>
        }
    }
}
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	c8 e2       	ldi	r28, 0x28	; 40
    1770:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    1772:	fe 01       	movw	r30, r28
    1774:	e4 57       	subi	r30, 0x74	; 116
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    177a:	ce 01       	movw	r24, r28
    177c:	0e 94 2c 19 	call	0x3258	; 0x3258 <eeprom_read_byte>
        if (id != ee_id) 
    1780:	18 13       	cpse	r17, r24
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    1784:	11 23       	and	r17, r17
    1786:	31 f0       	breq	.+12     	; 0x1794 <check_for_eeprom_id+0x2c>
    1788:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    178a:	c2 33       	cpi	r28, 0x32	; 50
    178c:	d1 05       	cpc	r29, r1
    178e:	89 f7       	brne	.-30     	; 0x1772 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    1794:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	08 95       	ret

0000179e <adc_burst>:
// high side curr sense for pwr_i is from 0.068 ohm, the adc reads 512 with 0.735 Amp
// sampling data for an hour should give 735mAHr
// ref_extern_avcc = 5.0; accumulate_pwr_ti = 512*(100 smp per Sec) * 3600 ( Sec per Hr)
// accumulate_pwr_ti*((ref_extern_avcc)/1024.0)/(0.068*50.0)/360 is in mAHr 
void adc_burst(void)
{
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    unsigned long kRuntime= millis() - adc_started_at;
    17a2:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    if ((kRuntime) > ((unsigned long)ADC_DELAY_MILSEC))
    17a6:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <adc_started_at>
    17aa:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <adc_started_at+0x1>
    17ae:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <adc_started_at+0x2>
    17b2:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <adc_started_at+0x3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	80 1b       	sub	r24, r16
    17bc:	91 0b       	sbc	r25, r17
    17be:	a2 0b       	sbc	r26, r18
    17c0:	b3 0b       	sbc	r27, r19
    17c2:	0b 97       	sbiw	r24, 0x0b	; 11
    17c4:	a1 05       	cpc	r26, r1
    17c6:	b1 05       	cpc	r27, r1
    17c8:	08 f4       	brcc	.+2      	; 0x17cc <adc_burst+0x2e>
    17ca:	4c c0       	rjmp	.+152    	; 0x1864 <adc_burst+0xc6>
    {
        accumulate_alt_ti += analogRead(ALT_I);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    17d2:	09 2e       	mov	r0, r25
    17d4:	00 0c       	add	r0, r0
    17d6:	aa 0b       	sbc	r26, r26
    17d8:	bb 0b       	sbc	r27, r27
    17da:	40 91 71 03 	lds	r20, 0x0371	; 0x800371 <accumulate_alt_ti>
    17de:	50 91 72 03 	lds	r21, 0x0372	; 0x800372 <accumulate_alt_ti+0x1>
    17e2:	60 91 73 03 	lds	r22, 0x0373	; 0x800373 <accumulate_alt_ti+0x2>
    17e6:	70 91 74 03 	lds	r23, 0x0374	; 0x800374 <accumulate_alt_ti+0x3>
    17ea:	84 0f       	add	r24, r20
    17ec:	95 1f       	adc	r25, r21
    17ee:	a6 1f       	adc	r26, r22
    17f0:	b7 1f       	adc	r27, r23
    17f2:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <accumulate_alt_ti>
    17f6:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <accumulate_alt_ti+0x1>
    17fa:	a0 93 73 03 	sts	0x0373, r26	; 0x800373 <accumulate_alt_ti+0x2>
    17fe:	b0 93 74 03 	sts	0x0374, r27	; 0x800374 <accumulate_alt_ti+0x3>
        accumulate_pwr_ti += analogRead(PWR_I);
    1802:	86 e0       	ldi	r24, 0x06	; 6
    1804:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    1808:	09 2e       	mov	r0, r25
    180a:	00 0c       	add	r0, r0
    180c:	aa 0b       	sbc	r26, r26
    180e:	bb 0b       	sbc	r27, r27
    1810:	40 91 75 03 	lds	r20, 0x0375	; 0x800375 <accumulate_pwr_ti>
    1814:	50 91 76 03 	lds	r21, 0x0376	; 0x800376 <accumulate_pwr_ti+0x1>
    1818:	60 91 77 03 	lds	r22, 0x0377	; 0x800377 <accumulate_pwr_ti+0x2>
    181c:	70 91 78 03 	lds	r23, 0x0378	; 0x800378 <accumulate_pwr_ti+0x3>
    1820:	84 0f       	add	r24, r20
    1822:	95 1f       	adc	r25, r21
    1824:	a6 1f       	adc	r26, r22
    1826:	b7 1f       	adc	r27, r23
    1828:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <accumulate_pwr_ti>
    182c:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <accumulate_pwr_ti+0x1>
    1830:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <accumulate_pwr_ti+0x2>
    1834:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <accumulate_pwr_ti+0x3>
        enable_ADC_auto_conversion(BURST_MODE);
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <enable_ADC_auto_conversion>
        adc_started_at += ADC_DELAY_MILSEC; 
    183e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <adc_started_at>
    1842:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <adc_started_at+0x1>
    1846:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <adc_started_at+0x2>
    184a:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <adc_started_at+0x3>
    184e:	0a 96       	adiw	r24, 0x0a	; 10
    1850:	a1 1d       	adc	r26, r1
    1852:	b1 1d       	adc	r27, r1
    1854:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <adc_started_at>
    1858:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <adc_started_at+0x1>
    185c:	a0 93 7b 03 	sts	0x037B, r26	; 0x80037b <adc_started_at+0x2>
    1860:	b0 93 7c 03 	sts	0x037C, r27	; 0x80037c <adc_started_at+0x3>
    } 
}
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <IsValidValForAvccRef>:
uint8_t ref_loaded;
uint32_t ref_extern_avcc_uV;
uint32_t ref_intern_1v1_uV;

uint8_t IsValidValForAvccRef(uint32_t *value) 
{
    186a:	fc 01       	movw	r30, r24
    186c:	40 81       	ld	r20, Z
    186e:	51 81       	ldd	r21, Z+1	; 0x01
    1870:	62 81       	ldd	r22, Z+2	; 0x02
    1872:	73 81       	ldd	r23, Z+3	; 0x03
    1874:	41 52       	subi	r20, 0x21	; 33
    1876:	5a 4a       	sbci	r21, 0xAA	; 170
    1878:	64 44       	sbci	r22, 0x44	; 68
    187a:	71 09       	sbc	r23, r1
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	4f 33       	cpi	r20, 0x3F	; 63
    1880:	52 44       	sbci	r21, 0x42	; 66
    1882:	6f 40       	sbci	r22, 0x0F	; 15
    1884:	71 05       	cpc	r23, r1
    1886:	08 f0       	brcs	.+2      	; 0x188a <IsValidValForAvccRef+0x20>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    188a:	08 95       	ret

0000188c <IsValidValFor1V1Ref>:

uint8_t IsValidValFor1V1Ref(uint32_t *value) 
{
    188c:	fc 01       	movw	r30, r24
    188e:	40 81       	ld	r20, Z
    1890:	51 81       	ldd	r21, Z+1	; 0x01
    1892:	62 81       	ldd	r22, Z+2	; 0x02
    1894:	73 81       	ldd	r23, Z+3	; 0x03
    1896:	41 5a       	subi	r20, 0xA1	; 161
    1898:	5b 4b       	sbci	r21, 0xBB	; 187
    189a:	6d 40       	sbci	r22, 0x0D	; 13
    189c:	71 09       	sbc	r23, r1
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	4f 37       	cpi	r20, 0x7F	; 127
    18a2:	5a 41       	sbci	r21, 0x1A	; 26
    18a4:	66 40       	sbci	r22, 0x06	; 6
    18a6:	71 05       	cpc	r23, r1
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <IsValidValFor1V1Ref+0x20>
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    18ac:	08 95       	ret

000018ae <WriteEeReferenceId>:

uint8_t WriteEeReferenceId() 
{
    uint16_t ee_id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    18ae:	8e e1       	ldi	r24, 0x1E	; 30
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    if ( eeprom_is_ready() )
    18b6:	f9 99       	sbic	0x1f, 1	; 31
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <WriteEeReferenceId+0x20>
    {
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
    18ba:	84 34       	cpi	r24, 0x44	; 68
    18bc:	91 44       	sbci	r25, 0x41	; 65
    18be:	49 f0       	breq	.+18     	; 0x18d2 <WriteEeReferenceId+0x24>
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
    18c0:	64 e4       	ldi	r22, 0x44	; 68
    18c2:	71 e4       	ldi	r23, 0x41	; 65
    18c4:	8e e1       	ldi	r24, 0x1E	; 30
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 56 19 	call	0x32ac	; 0x32ac <eeprom_write_word>
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <WriteEeReferenceId+0x24>
        }
        return 1;
    }
    else
    {
        return 0;
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	08 95       	ret
        uint16_t value = 0x4144; // 'A' is 0x41 and 'D' is 0x44;
        if (ee_id != value)
        {
            eeprom_write_word( (uint16_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID), value);
        }
        return 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    18d4:	08 95       	ret

000018d6 <WriteEeReferenceAvcc>:

uint8_t WriteEeReferenceAvcc() 
{
    uint32_t ee_ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    18e2:	f9 99       	sbic	0x1f, 1	; 31
    18e4:	12 c0       	rjmp	.+36     	; 0x190a <WriteEeReferenceAvcc+0x34>
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
    18e6:	40 91 7e 03 	lds	r20, 0x037E	; 0x80037e <ref_extern_avcc_uV>
    18ea:	50 91 7f 03 	lds	r21, 0x037F	; 0x80037f <ref_extern_avcc_uV+0x1>
    18ee:	60 91 80 03 	lds	r22, 0x0380	; 0x800380 <ref_extern_avcc_uV+0x2>
    18f2:	70 91 81 03 	lds	r23, 0x0381	; 0x800381 <ref_extern_avcc_uV+0x3>
    18f6:	84 17       	cp	r24, r20
    18f8:	95 07       	cpc	r25, r21
    18fa:	a6 07       	cpc	r26, r22
    18fc:	b7 07       	cpc	r27, r23
    18fe:	39 f0       	breq	.+14     	; 0x190e <WriteEeReferenceAvcc+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 4e 19 	call	0x329c	; 0x329c <eeprom_write_dword>
    1908:	02 c0       	rjmp	.+4      	; 0x190e <WriteEeReferenceAvcc+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	08 95       	ret
    {
        if (ee_ref_extern_avcc_uV != ref_extern_avcc_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC), ref_extern_avcc_uV);
        }
        return 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1910:	08 95       	ret

00001912 <WriteEeReference1V1>:

uint8_t WriteEeReference1V1() 
{
    uint32_t ee_ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1)); 
    1912:	84 e2       	ldi	r24, 0x24	; 36
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    191e:	f9 99       	sbic	0x1f, 1	; 31
    1920:	12 c0       	rjmp	.+36     	; 0x1946 <WriteEeReference1V1+0x34>
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
    1922:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <ref_intern_1v1_uV>
    1926:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <ref_intern_1v1_uV+0x1>
    192a:	60 91 84 03 	lds	r22, 0x0384	; 0x800384 <ref_intern_1v1_uV+0x2>
    192e:	70 91 85 03 	lds	r23, 0x0385	; 0x800385 <ref_intern_1v1_uV+0x3>
    1932:	84 17       	cp	r24, r20
    1934:	95 07       	cpc	r25, r21
    1936:	a6 07       	cpc	r26, r22
    1938:	b7 07       	cpc	r27, r23
    193a:	39 f0       	breq	.+14     	; 0x194a <WriteEeReference1V1+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
    193c:	84 e2       	ldi	r24, 0x24	; 36
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 4e 19 	call	0x329c	; 0x329c <eeprom_write_dword>
    1944:	02 c0       	rjmp	.+4      	; 0x194a <WriteEeReference1V1+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	08 95       	ret
    {
        if (ee_ref_intern_1v1_uV != ref_intern_1v1_uV)
        {
            eeprom_write_dword( (uint32_t *)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1), ref_intern_1v1_uV);
        }
        return 1;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    194c:	08 95       	ret

0000194e <LoadAnalogRefFromEEPROM>:

uint8_t LoadAnalogRefFromEEPROM() 
{
    uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    194e:	8e e1       	ldi	r24, 0x1E	; 30
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    if (id == 0x4144) // 'A' is 0x41 and 'D' is 0x44
    1956:	84 34       	cpi	r24, 0x44	; 68
    1958:	91 44       	sbci	r25, 0x41	; 65
    195a:	e1 f4       	brne	.+56     	; 0x1994 <LoadAnalogRefFromEEPROM+0x46>
    {
        ref_extern_avcc_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_EXTERN_AVCC)); 
    195c:	80 e2       	ldi	r24, 0x20	; 32
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    1964:	60 93 7e 03 	sts	0x037E, r22	; 0x80037e <ref_extern_avcc_uV>
    1968:	70 93 7f 03 	sts	0x037F, r23	; 0x80037f <ref_extern_avcc_uV+0x1>
    196c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <ref_extern_avcc_uV+0x2>
    1970:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = eeprom_read_dword((uint32_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_REF_INTERN_1V1));
    1974:	84 e2       	ldi	r24, 0x24	; 36
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    197c:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <ref_intern_1v1_uV>
    1980:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <ref_intern_1v1_uV+0x1>
    1984:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <ref_intern_1v1_uV+0x2>
    1988:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_LOADED;
    198c:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	08 95       	ret
        return 1;
    }
    else
    {
        ref_extern_avcc_uV = 5000000UL; // set a default value
    1994:	80 e4       	ldi	r24, 0x40	; 64
    1996:	9b e4       	ldi	r25, 0x4B	; 75
    1998:	ac e4       	ldi	r26, 0x4C	; 76
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <ref_extern_avcc_uV>
    19a0:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <ref_extern_avcc_uV+0x1>
    19a4:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <ref_extern_avcc_uV+0x2>
    19a8:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <ref_extern_avcc_uV+0x3>
        ref_intern_1v1_uV = 1080000UL; // default
    19ac:	80 ec       	ldi	r24, 0xC0	; 192
    19ae:	9a e7       	ldi	r25, 0x7A	; 122
    19b0:	a0 e1       	ldi	r26, 0x10	; 16
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <ref_intern_1v1_uV>
    19b8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <ref_intern_1v1_uV+0x1>
    19bc:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <ref_intern_1v1_uV+0x2>
    19c0:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <ref_intern_1v1_uV+0x3>
        ref_loaded = REF_DEFAULT;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <ref_loaded>
        return 0;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    19cc:	08 95       	ret

000019ce <CalReferancesFromI2CtoEE>:

// save calibration referances from I2C to EEPROM (if valid)
void CalReferancesFromI2CtoEE(void)
{
    if ( IsValidValForAvccRef(&ref_extern_avcc_uV) && IsValidValFor1V1Ref(&ref_intern_1v1_uV) )
    19ce:	8e e7       	ldi	r24, 0x7E	; 126
    19d0:	93 e0       	ldi	r25, 0x03	; 3
    19d2:	0e 94 35 0c 	call	0x186a	; 0x186a <IsValidValForAvccRef>
    19d6:	88 23       	and	r24, r24
    19d8:	29 f1       	breq	.+74     	; 0x1a24 <CalReferancesFromI2CtoEE+0x56>
    19da:	82 e8       	ldi	r24, 0x82	; 130
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	0e 94 46 0c 	call	0x188c	; 0x188c <IsValidValFor1V1Ref>
    19e2:	88 23       	and	r24, r24
    19e4:	f9 f0       	breq	.+62     	; 0x1a24 <CalReferancesFromI2CtoEE+0x56>
    {
        uint16_t id = eeprom_read_word((uint16_t*)(EE_ANALOG_BASE_ADDR+EE_ANALOG_ID));
    19e6:	8e e1       	ldi	r24, 0x1E	; 30
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
        if ( (id != 0x4144) & (ref_loaded > REF_DEFAULT) ) // 'A' is 0x41 and 'D' is 0x44
    19ee:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <ref_loaded>
    19f2:	84 34       	cpi	r24, 0x44	; 68
    19f4:	91 44       	sbci	r25, 0x41	; 65
    19f6:	21 f0       	breq	.+8      	; 0x1a00 <CalReferancesFromI2CtoEE+0x32>
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	10 f0       	brcs	.+4      	; 0x1a00 <CalReferancesFromI2CtoEE+0x32>
        {
            WriteEeReferenceId();
    19fc:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <WriteEeReferenceId>
            return; // that is enough for this loop
         }
        else 
        {
            if (ref_loaded == REF_1V1_TOSAVE)
    1a00:	23 30       	cpi	r18, 0x03	; 3
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <CalReferancesFromI2CtoEE+0x44>
            {
                if (WriteEeReference1V1())
    1a04:	0e 94 89 0c 	call	0x1912	; 0x1912 <WriteEeReference1V1>
    1a08:	88 23       	and	r24, r24
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <CalReferancesFromI2CtoEE+0x44>
                {
                    ref_loaded = REF_LOADED;
    1a0c:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <ref_loaded>
                    return; // all done
    1a10:	08 95       	ret
                }
            }
            if (ref_loaded == REF_AVCC_TOSAVE)
    1a12:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <ref_loaded>
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	39 f4       	brne	.+14     	; 0x1a28 <CalReferancesFromI2CtoEE+0x5a>
            {
                if (WriteEeReferenceAvcc())
    1a1a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <WriteEeReferenceAvcc>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	f5 cf       	rjmp	.-22     	; 0x1a0c <CalReferancesFromI2CtoEE+0x3e>
    1a22:	08 95       	ret
        }       

    }
    else
    {
        LoadAnalogRefFromEEPROM(); // ignore values that are not valid
    1a24:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <LoadAnalogRefFromEEPROM>
    1a28:	08 95       	ret

00001a2a <check_if_alt_should_be_on>:


// enable_alternate_power must be set to start charging
// to do: pwm with a 2 second period, pwm ratio is from battery_high_limit at 25% to battery_low_limit at 75%
void check_if_alt_should_be_on(void)
{
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    if (enable_alternate_power)
    1a3e:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <enable_alternate_power>
    1a42:	88 23       	and	r24, r24
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <check_if_alt_should_be_on+0x1e>
    1a46:	d1 c0       	rjmp	.+418    	; 0x1bea <check_if_alt_should_be_on+0x1c0>
    {
        int battery = analogRead(PWR_V);
    1a48:	87 e0       	ldi	r24, 0x07	; 7
    1a4a:	0e 94 14 12 	call	0x2428	; 0x2428 <analogRead>
    1a4e:	7c 01       	movw	r14, r24
        if (battery >= battery_high_limit)
    1a50:	c0 91 90 03 	lds	r28, 0x0390	; 0x800390 <battery_high_limit>
    1a54:	d0 91 91 03 	lds	r29, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1a58:	8c 17       	cp	r24, r28
    1a5a:	9d 07       	cpc	r25, r29
    1a5c:	4c f0       	brlt	.+18     	; 0x1a70 <check_if_alt_should_be_on+0x46>
        {
            if (digitalRead(ALT_EN))
    1a5e:	1b 9b       	sbis	0x03, 3	; 3
    1a60:	c8 c0       	rjmp	.+400    	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1a62:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a64:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1a66:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a68:	8f bf       	out	0x3f, r24	; 63
            {
                digitalWrite(ALT_EN,LOW);
                enable_alternate_power = 0; // charge is done
    1a6a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <enable_alternate_power>
    1a6e:	c1 c0       	rjmp	.+386    	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
            }
            return; // if alt_en is not on do nothing
        }
        int pwm_range = ( (battery_high_limit - battery_low_limit)>>1 ); // half the diff between high and low limit
    1a70:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <battery_low_limit>
    1a74:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1a78:	c8 1b       	sub	r28, r24
    1a7a:	d9 0b       	sbc	r29, r25
    1a7c:	d5 95       	asr	r29
    1a7e:	c7 95       	ror	r28
        unsigned long kRuntime = millis() - alt_pwm_started_at;
    1a80:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    1a84:	00 91 88 03 	lds	r16, 0x0388	; 0x800388 <alt_pwm_started_at>
    1a88:	10 91 89 03 	lds	r17, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1a8c:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1a90:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1a94:	5b 01       	movw	r10, r22
    1a96:	6c 01       	movw	r12, r24
    1a98:	a0 1a       	sub	r10, r16
    1a9a:	b1 0a       	sbc	r11, r17
    1a9c:	c2 0a       	sbc	r12, r18
    1a9e:	d3 0a       	sbc	r13, r19
    1aa0:	96 01       	movw	r18, r12
    1aa2:	85 01       	movw	r16, r10
        if (battery < (battery_low_limit + pwm_range ) )
    1aa4:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <battery_low_limit>
    1aa8:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1aac:	8c 0f       	add	r24, r28
    1aae:	9d 1f       	adc	r25, r29
    1ab0:	e8 16       	cp	r14, r24
    1ab2:	f9 06       	cpc	r15, r25
    1ab4:	0c f0       	brlt	.+2      	; 0x1ab8 <check_if_alt_should_be_on+0x8e>
    1ab6:	5b c0       	rjmp	.+182    	; 0x1b6e <check_if_alt_should_be_on+0x144>
        { // half way between high and low limit pwm will occure at 2 sec intervals
            unsigned long offtime = ALT_PWM_PERIOD * ( (battery_high_limit - battery) / pwm_range );
            if (digitalRead(ALT_EN))
    1ab8:	1b 9b       	sbis	0x03, 3	; 3
    1aba:	39 c0       	rjmp	.+114    	; 0x1b2e <check_if_alt_should_be_on+0x104>
            {
                if ( (kRuntime + offtime) > ALT_PWM_PERIOD )
    1abc:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <battery_high_limit>
    1ac0:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1ac4:	8e 19       	sub	r24, r14
    1ac6:	9f 09       	sbc	r25, r15
    1ac8:	be 01       	movw	r22, r28
    1aca:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__divmodhi4>
    1ace:	40 ed       	ldi	r20, 0xD0	; 208
    1ad0:	57 e0       	ldi	r21, 0x07	; 7
    1ad2:	64 9f       	mul	r22, r20
    1ad4:	c0 01       	movw	r24, r0
    1ad6:	65 9f       	mul	r22, r21
    1ad8:	90 0d       	add	r25, r0
    1ada:	74 9f       	mul	r23, r20
    1adc:	90 0d       	add	r25, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	09 2e       	mov	r0, r25
    1ae2:	00 0c       	add	r0, r0
    1ae4:	aa 0b       	sbc	r26, r26
    1ae6:	bb 0b       	sbc	r27, r27
    1ae8:	8a 0d       	add	r24, r10
    1aea:	9b 1d       	adc	r25, r11
    1aec:	ac 1d       	adc	r26, r12
    1aee:	bd 1d       	adc	r27, r13
    1af0:	81 3d       	cpi	r24, 0xD1	; 209
    1af2:	97 40       	sbci	r25, 0x07	; 7
    1af4:	a1 05       	cpc	r26, r1
    1af6:	b1 05       	cpc	r27, r1
    1af8:	08 f4       	brcc	.+2      	; 0x1afc <check_if_alt_should_be_on+0xd2>
    1afa:	7b c0       	rjmp	.+246    	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1afc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1afe:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1b00:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b02:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,LOW);
                    alt_pwm_accum_charge_time += kRuntime;
    1b04:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <alt_pwm_accum_charge_time>
    1b08:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <alt_pwm_accum_charge_time+0x1>
    1b0c:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <alt_pwm_accum_charge_time+0x2>
    1b10:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    1b14:	08 0f       	add	r16, r24
    1b16:	19 1f       	adc	r17, r25
    1b18:	2a 1f       	adc	r18, r26
    1b1a:	3b 1f       	adc	r19, r27
    1b1c:	00 93 8c 03 	sts	0x038C, r16	; 0x80038c <alt_pwm_accum_charge_time>
    1b20:	10 93 8d 03 	sts	0x038D, r17	; 0x80038d <alt_pwm_accum_charge_time+0x1>
    1b24:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <alt_pwm_accum_charge_time+0x2>
    1b28:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <alt_pwm_accum_charge_time+0x3>
    1b2c:	62 c0       	rjmp	.+196    	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
                }
            }
            else 
            {
                if ( kRuntime > ALT_PWM_PERIOD )
    1b2e:	81 ed       	ldi	r24, 0xD1	; 209
    1b30:	a8 16       	cp	r10, r24
    1b32:	87 e0       	ldi	r24, 0x07	; 7
    1b34:	b8 06       	cpc	r11, r24
    1b36:	c1 04       	cpc	r12, r1
    1b38:	d1 04       	cpc	r13, r1
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <check_if_alt_should_be_on+0x114>
    1b3c:	5a c0       	rjmp	.+180    	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b3e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b40:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1b42:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b44:	8f bf       	out	0x3f, r24	; 63
                {
                    digitalWrite(ALT_EN,HIGH);
                    if (kRuntime > (ALT_PWM_PERIOD<<1) )
    1b46:	41 ea       	ldi	r20, 0xA1	; 161
    1b48:	a4 16       	cp	r10, r20
    1b4a:	4f e0       	ldi	r20, 0x0F	; 15
    1b4c:	b4 06       	cpc	r11, r20
    1b4e:	c1 04       	cpc	r12, r1
    1b50:	d1 04       	cpc	r13, r1
    1b52:	58 f5       	brcc	.+86     	; 0x1baa <check_if_alt_should_be_on+0x180>
                    {
                        alt_pwm_started_at = millis();
                    }
                    else
                    {
                        alt_pwm_started_at += ALT_PWM_PERIOD;
    1b54:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_pwm_started_at>
    1b58:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1b5c:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1b60:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1b64:	80 53       	subi	r24, 0x30	; 48
    1b66:	98 4f       	sbci	r25, 0xF8	; 248
    1b68:	af 4f       	sbci	r26, 0xFF	; 255
    1b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6c:	35 c0       	rjmp	.+106    	; 0x1bd8 <check_if_alt_should_be_on+0x1ae>
                    }
                }
            }
            return;
        }
        else if (digitalRead(ALT_EN))
    1b6e:	1b 9b       	sbis	0x03, 3	; 3
    1b70:	0a c0       	rjmp	.+20     	; 0x1b86 <check_if_alt_should_be_on+0x15c>
        { // if pwm is not occuring we still need to rest every so often to measure the battery
            if ( (kRuntime + ALT_REST) > ALT_REST_PERIOD )
    1b72:	06 50       	subi	r16, 0x06	; 6
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	2f 4f       	sbci	r18, 0xFF	; 255
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	01 31       	cpi	r16, 0x11	; 17
    1b7c:	17 42       	sbci	r17, 0x27	; 39
    1b7e:	21 05       	cpc	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	b8 f1       	brcs	.+110    	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
    1b84:	32 c0       	rjmp	.+100    	; 0x1bea <check_if_alt_should_be_on+0x1c0>
            }
            return;
        }
        else 
        {
            if ( kRuntime > ALT_REST_PERIOD)
    1b86:	41 e1       	ldi	r20, 0x11	; 17
    1b88:	a4 16       	cp	r10, r20
    1b8a:	47 e2       	ldi	r20, 0x27	; 39
    1b8c:	b4 06       	cpc	r11, r20
    1b8e:	c1 04       	cpc	r12, r1
    1b90:	d1 04       	cpc	r13, r1
    1b92:	78 f1       	brcs	.+94     	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1b94:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b96:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1b98:	2b 9a       	sbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b9a:	8f bf       	out	0x3f, r24	; 63
            { // end of resting time, start charging
                digitalWrite(ALT_EN,HIGH);
                if (kRuntime > (ALT_REST_PERIOD<<1) )
    1b9c:	81 e2       	ldi	r24, 0x21	; 33
    1b9e:	a8 16       	cp	r10, r24
    1ba0:	8e e4       	ldi	r24, 0x4E	; 78
    1ba2:	b8 06       	cpc	r11, r24
    1ba4:	c1 04       	cpc	r12, r1
    1ba6:	d1 04       	cpc	r13, r1
    1ba8:	58 f0       	brcs	.+22     	; 0x1bc0 <check_if_alt_should_be_on+0x196>
                {
                    alt_pwm_started_at = millis();
    1baa:	0e 94 8a 12 	call	0x2514	; 0x2514 <millis>
    1bae:	60 93 88 03 	sts	0x0388, r22	; 0x800388 <alt_pwm_started_at>
    1bb2:	70 93 89 03 	sts	0x0389, r23	; 0x800389 <alt_pwm_started_at+0x1>
    1bb6:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <alt_pwm_started_at+0x2>
    1bba:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <alt_pwm_started_at+0x3>
    1bbe:	19 c0       	rjmp	.+50     	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
                }
                else
                {
                    alt_pwm_started_at += ALT_REST_PERIOD;
    1bc0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <alt_pwm_started_at>
    1bc4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <alt_pwm_started_at+0x1>
    1bc8:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <alt_pwm_started_at+0x2>
    1bcc:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <alt_pwm_started_at+0x3>
    1bd0:	80 5f       	subi	r24, 0xF0	; 240
    1bd2:	98 4d       	sbci	r25, 0xD8	; 216
    1bd4:	af 4f       	sbci	r26, 0xFF	; 255
    1bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd8:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <alt_pwm_started_at>
    1bdc:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <alt_pwm_started_at+0x1>
    1be0:	a0 93 8a 03 	sts	0x038A, r26	; 0x80038a <alt_pwm_started_at+0x2>
    1be4:	b0 93 8b 03 	sts	0x038B, r27	; 0x80038b <alt_pwm_started_at+0x3>
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <check_if_alt_should_be_on+0x1c8>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1bea:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1bec:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1bee:	2b 98       	cbi	0x05, 3	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1bf0:	8f bf       	out	0x3f, r24	; 63
    }
    else 
    {
        digitalWrite(ALT_EN,LOW);
    }
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	08 95       	ret

00001c08 <IsValidBatHighLimFor12V>:
uint8_t bat_limit_loaded;
int battery_high_limit;
int battery_low_limit;

uint8_t IsValidBatHighLimFor12V(int *value) 
{
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 81       	ld	r18, Z
    1c0c:	31 81       	ldd	r19, Z+1	; 0x01
    1c0e:	2b 54       	subi	r18, 0x4B	; 75
    1c10:	31 40       	sbci	r19, 0x01	; 1
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	27 38       	cpi	r18, 0x87	; 135
    1c16:	31 05       	cpc	r19, r1
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <IsValidBatHighLimFor12V+0x14>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c1c:	08 95       	ret

00001c1e <IsValidBatLowLimFor12V>:

uint8_t IsValidBatLowLimFor12V(int *value) 
{
    1c1e:	fc 01       	movw	r30, r24
    1c20:	20 81       	ld	r18, Z
    1c22:	31 81       	ldd	r19, Z+1	; 0x01
    1c24:	2e 53       	subi	r18, 0x3E	; 62
    1c26:	31 40       	sbci	r19, 0x01	; 1
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	26 36       	cpi	r18, 0x66	; 102
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <IsValidBatLowLimFor12V+0x14>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c32:	08 95       	ret

00001c34 <IsValidBatHighLimFor24V>:

uint8_t IsValidBatHighLimFor24V(int *value) 
{
    1c34:	fc 01       	movw	r30, r24
    1c36:	20 81       	ld	r18, Z
    1c38:	31 81       	ldd	r19, Z+1	; 0x01
    1c3a:	25 59       	subi	r18, 0x95	; 149
    1c3c:	32 40       	sbci	r19, 0x02	; 2
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	2f 30       	cpi	r18, 0x0F	; 15
    1c42:	31 40       	sbci	r19, 0x01	; 1
    1c44:	08 f0       	brcs	.+2      	; 0x1c48 <IsValidBatHighLimFor24V+0x14>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c48:	08 95       	ret

00001c4a <IsValidBatLowLimFor24V>:

uint8_t IsValidBatLowLimFor24V(int *value) 
{
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 81       	ld	r18, Z
    1c4e:	31 81       	ldd	r19, Z+1	; 0x01
    1c50:	2c 57       	subi	r18, 0x7C	; 124
    1c52:	32 40       	sbci	r19, 0x02	; 2
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	2b 3c       	cpi	r18, 0xCB	; 203
    1c58:	31 05       	cpc	r19, r1
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <IsValidBatLowLimFor24V+0x14>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1c5e:	08 95       	ret

00001c60 <WriteEEBatHighLim>:

// wrtite battery high limit (when charging turns off) to EEPROM
uint8_t WriteEEBatHighLim() 
{
    uint16_t tmp_battery_high_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH)); 
    1c60:	8c e3       	ldi	r24, 0x3C	; 60
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1c68:	f9 99       	sbic	0x1f, 1	; 31
    1c6a:	0c c0       	rjmp	.+24     	; 0x1c84 <WriteEEBatHighLim+0x24>
    {
        if (tmp_battery_high_limit != battery_high_limit)
    1c6c:	60 91 90 03 	lds	r22, 0x0390	; 0x800390 <battery_high_limit>
    1c70:	70 91 91 03 	lds	r23, 0x0391	; 0x800391 <battery_high_limit+0x1>
    1c74:	86 17       	cp	r24, r22
    1c76:	97 07       	cpc	r25, r23
    1c78:	39 f0       	breq	.+14     	; 0x1c88 <WriteEEBatHighLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
    1c7a:	8c e3       	ldi	r24, 0x3C	; 60
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 56 19 	call	0x32ac	; 0x32ac <eeprom_write_word>
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <WriteEEBatHighLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	08 95       	ret
    {
        if (tmp_battery_high_limit != battery_high_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH), (uint16_t)battery_high_limit);
        }
        return 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1c8a:	08 95       	ret

00001c8c <WriteEEBatLowLim>:

// wrtite battery low limit (when charging turns on) to EEPROM
uint8_t WriteEEBatLowLim() 
{
    uint16_t tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW)); 
    1c8c:	8e e3       	ldi	r24, 0x3E	; 62
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1c94:	f9 99       	sbic	0x1f, 1	; 31
    1c96:	0c c0       	rjmp	.+24     	; 0x1cb0 <WriteEEBatLowLim+0x24>
    {
        if (tmp_battery_low_limit != battery_low_limit)
    1c98:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <battery_low_limit>
    1c9c:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <battery_low_limit+0x1>
    1ca0:	86 17       	cp	r24, r22
    1ca2:	97 07       	cpc	r25, r23
    1ca4:	39 f0       	breq	.+14     	; 0x1cb4 <WriteEEBatLowLim+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
    1ca6:	8e e3       	ldi	r24, 0x3E	; 62
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 56 19 	call	0x32ac	; 0x32ac <eeprom_write_word>
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <WriteEEBatLowLim+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	08 95       	ret
    {
        if (tmp_battery_low_limit != battery_low_limit)
        {
            eeprom_write_word( (uint16_t *)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW), (uint16_t)battery_low_limit);
        }
        return 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1cb6:	08 95       	ret

00001cb8 <LoadBatLimitsFromEEPROM>:

// load Battery Limits from EEPROM (or set defaults)
uint8_t LoadBatLimitsFromEEPROM() 
{
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <LoadBatLimitsFromEEPROM+0xe>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <LoadBatLimitsFromEEPROM+0x10>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    int tmp_battery_high_limit = eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_HIGH));
    1ccc:	8c e3       	ldi	r24, 0x3C	; 60
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    1cd4:	7c 01       	movw	r14, r24
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
    int tmp_battery_low_limit= eeprom_read_word((uint16_t*)(EE_BAT_LIMIT_ADDR+EE_BAT_LIMIT_OFFSET_LOW));
    1cda:	8e e3       	ldi	r24, 0x3E	; 62
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    1ce2:	8c 01       	movw	r16, r24
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    if ( (IsValidBatHighLimFor12V(&tmp_battery_high_limit) || IsValidBatHighLimFor24V(&tmp_battery_high_limit)) && (IsValidBatLowLimFor12V(&tmp_battery_low_limit) || IsValidBatLowLimFor24V(&tmp_battery_low_limit)) )
    1ce8:	ce 01       	movw	r24, r28
    1cea:	03 96       	adiw	r24, 0x03	; 3
    1cec:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <IsValidBatHighLimFor12V>
    1cf0:	81 11       	cpse	r24, r1
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <LoadBatLimitsFromEEPROM+0x48>
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	03 96       	adiw	r24, 0x03	; 3
    1cf8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <IsValidBatHighLimFor24V>
    1cfc:	88 23       	and	r24, r24
    1cfe:	c1 f0       	breq	.+48     	; 0x1d30 <LoadBatLimitsFromEEPROM+0x78>
    1d00:	ce 01       	movw	r24, r28
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <IsValidBatLowLimFor12V>
    1d08:	81 11       	cpse	r24, r1
    1d0a:	06 c0       	rjmp	.+12     	; 0x1d18 <LoadBatLimitsFromEEPROM+0x60>
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <IsValidBatLowLimFor24V>
    1d14:	88 23       	and	r24, r24
    1d16:	61 f0       	breq	.+24     	; 0x1d30 <LoadBatLimitsFromEEPROM+0x78>
    {
        battery_high_limit = (uint16_t)tmp_battery_high_limit; 
    1d18:	f0 92 91 03 	sts	0x0391, r15	; 0x800391 <battery_high_limit+0x1>
    1d1c:	e0 92 90 03 	sts	0x0390, r14	; 0x800390 <battery_high_limit>
        battery_low_limit = (uint16_t)tmp_battery_low_limit; 
    1d20:	10 93 94 03 	sts	0x0394, r17	; 0x800394 <battery_low_limit+0x1>
    1d24:	00 93 93 03 	sts	0x0393, r16	; 0x800393 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_LOADED;
    1d28:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bat_limit_loaded>
        return 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	10 c0       	rjmp	.+32     	; 0x1d50 <LoadBatLimitsFromEEPROM+0x98>
    }
    else
    {
        // default values are for 12V LA measured at PWR_V channel with 5V referance
        battery_high_limit = 397; // 14.2/(((5.0)/1024.0)*(115.8/15.8))
    1d30:	8d e8       	ldi	r24, 0x8D	; 141
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <battery_high_limit+0x1>
    1d38:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <battery_high_limit>
        battery_low_limit = 374; // 13.4/(((5.0)/1024.0)*(115.8/15.8))
    1d3c:	86 e7       	ldi	r24, 0x76	; 118
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <battery_low_limit+0x1>
    1d44:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <battery_low_limit>
        bat_limit_loaded = BAT_LIM_DEFAULT;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <bat_limit_loaded>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    }
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	08 95       	ret

00001d66 <BatLimitsFromI2CtoEE>:

// save Battery Limits from I2C to EEPROM (if valid)
void BatLimitsFromI2CtoEE(void)
{
    if (bat_limit_loaded == BAT_HIGH_LIM_TOSAVE)
    1d66:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	99 f4       	brne	.+38     	; 0x1d94 <BatLimitsFromI2CtoEE+0x2e>
    {
        if ( IsValidBatHighLimFor12V(&battery_high_limit) || IsValidBatHighLimFor24V(&battery_high_limit) )
    1d6e:	80 e9       	ldi	r24, 0x90	; 144
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <IsValidBatHighLimFor12V>
    1d76:	81 11       	cpse	r24, r1
    1d78:	06 c0       	rjmp	.+12     	; 0x1d86 <BatLimitsFromI2CtoEE+0x20>
    1d7a:	80 e9       	ldi	r24, 0x90	; 144
    1d7c:	93 e0       	ldi	r25, 0x03	; 3
    1d7e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <IsValidBatHighLimFor24V>
    1d82:	88 23       	and	r24, r24
    1d84:	39 f0       	breq	.+14     	; 0x1d94 <BatLimitsFromI2CtoEE+0x2e>
        {
            if (WriteEEBatHighLim())
    1d86:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <WriteEEBatHighLim>
    1d8a:	88 23       	and	r24, r24
    1d8c:	19 f0       	breq	.+6      	; 0x1d94 <BatLimitsFromI2CtoEE+0x2e>
            {
                bat_limit_loaded = BAT_LIM_LOADED;
    1d8e:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <bat_limit_loaded>
                return; // all done
    1d92:	08 95       	ret
            }
        }
    }
    if (bat_limit_loaded == BAT_LOW_LIM_TOSAVE)
    1d94:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <bat_limit_loaded>
    1d98:	83 30       	cpi	r24, 0x03	; 3
    1d9a:	81 f4       	brne	.+32     	; 0x1dbc <BatLimitsFromI2CtoEE+0x56>
    {    
        if ( IsValidBatLowLimFor12V(&battery_low_limit) || IsValidBatLowLimFor24V(&battery_low_limit) )
    1d9c:	83 e9       	ldi	r24, 0x93	; 147
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <IsValidBatLowLimFor12V>
    1da4:	81 11       	cpse	r24, r1
    1da6:	06 c0       	rjmp	.+12     	; 0x1db4 <BatLimitsFromI2CtoEE+0x4e>
    1da8:	83 e9       	ldi	r24, 0x93	; 147
    1daa:	93 e0       	ldi	r25, 0x03	; 3
    1dac:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <IsValidBatLowLimFor24V>
    1db0:	88 23       	and	r24, r24
    1db2:	21 f0       	breq	.+8      	; 0x1dbc <BatLimitsFromI2CtoEE+0x56>
        {
            if (WriteEEBatLowLim())
    1db4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <WriteEEBatLowLim>
    1db8:	81 11       	cpse	r24, r1
    1dba:	e9 cf       	rjmp	.-46     	; 0x1d8e <BatLimitsFromI2CtoEE+0x28>
                bat_limit_loaded = BAT_LIM_LOADED;
                return; // all done
            }
        }
    }
    LoadBatLimitsFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    1dbc:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <LoadBatLimitsFromEEPROM>

00001dc0 <IsValidMorningThresholdFor12V>:
int daynight_evening_threshold;
unsigned long daynight_morning_debounce;
unsigned long daynight_evening_debounce;

uint8_t IsValidMorningThresholdFor12V(int *value) 
{
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 81       	ld	r18, Z
    1dc4:	31 81       	ldd	r19, Z+1	; 0x01
    1dc6:	2c 53       	subi	r18, 0x3C	; 60
    1dc8:	31 09       	sbc	r19, r1
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	23 39       	cpi	r18, 0x93	; 147
    1dce:	31 05       	cpc	r19, r1
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <IsValidMorningThresholdFor12V+0x14>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dd4:	08 95       	ret

00001dd6 <IsValidEveningThresholdFor12V>:

uint8_t IsValidEveningThresholdFor12V(int *value) 
{
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	20 81       	ld	r18, Z
    1dda:	31 81       	ldd	r19, Z+1	; 0x01
    1ddc:	2a 51       	subi	r18, 0x1A	; 26
    1dde:	31 09       	sbc	r19, r1
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	2e 34       	cpi	r18, 0x4E	; 78
    1de4:	31 05       	cpc	r19, r1
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <IsValidEveningThresholdFor12V+0x14>
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1dea:	08 95       	ret

00001dec <IsValidMorningThresholdFor24V>:

uint8_t IsValidMorningThresholdFor24V(int *value) 
{
    1dec:	fc 01       	movw	r30, r24
    1dee:	20 81       	ld	r18, Z
    1df0:	31 81       	ldd	r19, Z+1	; 0x01
    1df2:	27 57       	subi	r18, 0x77	; 119
    1df4:	31 09       	sbc	r19, r1
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	27 32       	cpi	r18, 0x27	; 39
    1dfa:	31 40       	sbci	r19, 0x01	; 1
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <IsValidMorningThresholdFor24V+0x14>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e00:	08 95       	ret

00001e02 <IsValidEveningThresholdFor24V>:

uint8_t IsValidEveningThresholdFor24V(int *value) 
{
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 81       	ld	r18, Z
    1e06:	31 81       	ldd	r19, Z+1	; 0x01
    1e08:	23 53       	subi	r18, 0x33	; 51
    1e0a:	31 09       	sbc	r19, r1
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	2c 39       	cpi	r18, 0x9C	; 156
    1e10:	31 05       	cpc	r19, r1
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <IsValidEveningThresholdFor24V+0x14>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e16:	08 95       	ret

00001e18 <IsValidEveningDebounce>:
        return 0;
    }
}

uint8_t IsValidEveningDebounce(unsigned long *value) 
{
    1e18:	fc 01       	movw	r30, r24
    1e1a:	40 81       	ld	r20, Z
    1e1c:	51 81       	ldd	r21, Z+1	; 0x01
    1e1e:	62 81       	ldd	r22, Z+2	; 0x02
    1e20:	73 81       	ldd	r23, Z+3	; 0x03
    1e22:	41 54       	subi	r20, 0x41	; 65
    1e24:	5f 41       	sbci	r21, 0x1F	; 31
    1e26:	61 09       	sbc	r22, r1
    1e28:	71 09       	sbc	r23, r1
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	4f 33       	cpi	r20, 0x3F	; 63
    1e2e:	5f 4c       	sbci	r21, 0xCF	; 207
    1e30:	66 43       	sbci	r22, 0x36	; 54
    1e32:	71 05       	cpc	r23, r1
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <IsValidEveningDebounce+0x20>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    1e38:	08 95       	ret

00001e3a <WriteEEMorningThreshold>:

// wrtite daynight_morning_threshold (when morning debounce starts) to EEPROM
uint8_t WriteEEMorningThreshold() 
{
    uint16_t tmp_daynight_morning_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)); 
    1e3a:	86 e4       	ldi	r24, 0x46	; 70
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e42:	f9 99       	sbic	0x1f, 1	; 31
    1e44:	0c c0       	rjmp	.+24     	; 0x1e5e <WriteEEMorningThreshold+0x24>
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
    1e46:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <daynight_morning_threshold>
    1e4a:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <daynight_morning_threshold+0x1>
    1e4e:	86 17       	cp	r24, r22
    1e50:	97 07       	cpc	r25, r23
    1e52:	39 f0       	breq	.+14     	; 0x1e62 <WriteEEMorningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
    1e54:	86 e4       	ldi	r24, 0x46	; 70
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 56 19 	call	0x32ac	; 0x32ac <eeprom_write_word>
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <WriteEEMorningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	08 95       	ret
    {
        if (tmp_daynight_morning_threshold != ((uint16_t)daynight_morning_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET), (uint16_t)daynight_morning_threshold);
        }
        return 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e64:	08 95       	ret

00001e66 <WriteEEEveningThreshold>:

// wrtite daynight_evening_threshold (when evening debounce starts) to EEPROM
uint8_t WriteEEEveningThreshold() 
{
    uint16_t tmp_daynight_evening_threshold= eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)); 
    1e66:	88 e4       	ldi	r24, 0x48	; 72
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    if ( eeprom_is_ready() )
    1e6e:	f9 99       	sbic	0x1f, 1	; 31
    1e70:	0c c0       	rjmp	.+24     	; 0x1e8a <WriteEEEveningThreshold+0x24>
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
    1e72:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <daynight_evening_threshold>
    1e76:	70 91 9d 03 	lds	r23, 0x039D	; 0x80039d <daynight_evening_threshold+0x1>
    1e7a:	86 17       	cp	r24, r22
    1e7c:	97 07       	cpc	r25, r23
    1e7e:	39 f0       	breq	.+14     	; 0x1e8e <WriteEEEveningThreshold+0x28>
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
    1e80:	88 e4       	ldi	r24, 0x48	; 72
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 56 19 	call	0x32ac	; 0x32ac <eeprom_write_word>
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <WriteEEEveningThreshold+0x28>
        }
        return 1;
    }
    else
    {
        return 0;
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret
    {
        if (tmp_daynight_evening_threshold != ((uint16_t)daynight_evening_threshold) )
        {
            eeprom_write_word( (uint16_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET), (uint16_t)daynight_evening_threshold);
        }
        return 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1e90:	08 95       	ret

00001e92 <WriteEEMorningDebounce>:

// wrtite daynight_morning_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEMorningDebounce() 
{
    uint32_t tmp_daynight_morning_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)); 
    1e92:	8a e4       	ldi	r24, 0x4A	; 74
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1e9e:	f9 99       	sbic	0x1f, 1	; 31
    1ea0:	12 c0       	rjmp	.+36     	; 0x1ec6 <WriteEEMorningDebounce+0x34>
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
    1ea2:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <daynight_morning_debounce>
    1ea6:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <daynight_morning_debounce+0x1>
    1eaa:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <daynight_morning_debounce+0x2>
    1eae:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <daynight_morning_debounce+0x3>
    1eb2:	84 17       	cp	r24, r20
    1eb4:	95 07       	cpc	r25, r21
    1eb6:	a6 07       	cpc	r26, r22
    1eb8:	b7 07       	cpc	r27, r23
    1eba:	39 f0       	breq	.+14     	; 0x1eca <WriteEEMorningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
    1ebc:	8a e4       	ldi	r24, 0x4A	; 74
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 4e 19 	call	0x329c	; 0x329c <eeprom_write_dword>
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <WriteEEMorningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	08 95       	ret
    {
        if (tmp_daynight_morning_debounce != ((uint32_t)daynight_morning_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET), (uint32_t)daynight_morning_debounce);
        }
        return 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1ecc:	08 95       	ret

00001ece <WriteEEEveningDebounce>:

// wrtite daynight_evening_debounce (debounce time in millis) to EEPROM
uint8_t WriteEEEveningDebounce() 
{
    uint32_t tmp_daynight_evening_debounce= eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)); 
    1ece:	8e e4       	ldi	r24, 0x4E	; 78
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    if ( eeprom_is_ready() )
    1eda:	f9 99       	sbic	0x1f, 1	; 31
    1edc:	12 c0       	rjmp	.+36     	; 0x1f02 <WriteEEEveningDebounce+0x34>
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
    1ede:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <daynight_evening_debounce>
    1ee2:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <daynight_evening_debounce+0x1>
    1ee6:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <daynight_evening_debounce+0x2>
    1eea:	70 91 98 03 	lds	r23, 0x0398	; 0x800398 <daynight_evening_debounce+0x3>
    1eee:	84 17       	cp	r24, r20
    1ef0:	95 07       	cpc	r25, r21
    1ef2:	a6 07       	cpc	r26, r22
    1ef4:	b7 07       	cpc	r27, r23
    1ef6:	39 f0       	breq	.+14     	; 0x1f06 <WriteEEEveningDebounce+0x38>
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
    1ef8:	8e e4       	ldi	r24, 0x4E	; 78
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 4e 19 	call	0x329c	; 0x329c <eeprom_write_dword>
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <WriteEEEveningDebounce+0x38>
        }
        return 1;
    }
    else
    {
        return 0;
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	08 95       	ret
    {
        if (tmp_daynight_evening_debounce != ((uint32_t)daynight_evening_debounce) )
        {
            eeprom_write_dword( (uint32_t *)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET), (uint32_t)daynight_evening_debounce);
        }
        return 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return 0;
    }
}
    1f08:	08 95       	ret

00001f0a <LoadDayNightValuesFromEEPROM>:

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    1f0a:	cf 92       	push	r12
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    uint8_t use_defaults = 0;
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    1f28:	86 e4       	ldi	r24, 0x46	; 70
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    1f30:	7c 01       	movw	r14, r24
    1f32:	9c 87       	std	Y+12, r25	; 0x0c
    1f34:	8b 87       	std	Y+11, r24	; 0x0b
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    1f36:	ce 01       	movw	r24, r28
    1f38:	0b 96       	adiw	r24, 0x0b	; 11
    1f3a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <IsValidMorningThresholdFor12V>
    1f3e:	81 11       	cpse	r24, r1
    1f40:	06 c0       	rjmp	.+12     	; 0x1f4e <LoadDayNightValuesFromEEPROM+0x44>
    1f42:	ce 01       	movw	r24, r28
    1f44:	0b 96       	adiw	r24, 0x0b	; 11
    1f46:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <IsValidMorningThresholdFor24V>
    1f4a:	88 23       	and	r24, r24
    1f4c:	31 f0       	breq	.+12     	; 0x1f5a <LoadDayNightValuesFromEEPROM+0x50>
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    1f4e:	f0 92 9a 03 	sts	0x039A, r15	; 0x80039a <daynight_morning_threshold+0x1>
    1f52:	e0 92 99 03 	sts	0x0399, r14	; 0x800399 <daynight_morning_threshold>
}

// load day-night state machine values from EEPROM (or set defaults)
uint8_t LoadDayNightValuesFromEEPROM() 
{
    uint8_t use_defaults = 0;
    1f56:	10 e0       	ldi	r17, 0x00	; 0
    int tmp_daynight_morning_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_THRESHOLD_OFFSET)));
    if ( IsValidMorningThresholdFor12V(&tmp_daynight_morning_threshold) || IsValidMorningThresholdFor24V(&tmp_daynight_morning_threshold) )
    {
        daynight_morning_threshold = tmp_daynight_morning_threshold; 
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <LoadDayNightValuesFromEEPROM+0x52>
    }
    else
    {
        use_defaults = 1;
    1f5a:	11 e0       	ldi	r17, 0x01	; 1
    }
    int tmp_daynight_evening_threshold = (int)(eeprom_read_word((uint16_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_THRESHOLD_OFFSET)));
    1f5c:	88 e4       	ldi	r24, 0x48	; 72
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 3a 19 	call	0x3274	; 0x3274 <eeprom_read_word>
    1f64:	7c 01       	movw	r14, r24
    1f66:	9a 87       	std	Y+10, r25	; 0x0a
    1f68:	89 87       	std	Y+9, r24	; 0x09
    if ( (IsValidEveningThresholdFor12V(&tmp_daynight_evening_threshold) || IsValidEveningThresholdFor24V(&tmp_daynight_evening_threshold)) )
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	09 96       	adiw	r24, 0x09	; 9
    1f6e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <IsValidEveningThresholdFor12V>
    1f72:	81 11       	cpse	r24, r1
    1f74:	06 c0       	rjmp	.+12     	; 0x1f82 <LoadDayNightValuesFromEEPROM+0x78>
    1f76:	ce 01       	movw	r24, r28
    1f78:	09 96       	adiw	r24, 0x09	; 9
    1f7a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <IsValidEveningThresholdFor24V>
    1f7e:	88 23       	and	r24, r24
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <LoadDayNightValuesFromEEPROM+0x82>
    {
        daynight_evening_threshold = tmp_daynight_evening_threshold;
    1f82:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <daynight_evening_threshold+0x1>
    1f86:	e0 92 9c 03 	sts	0x039C, r14	; 0x80039c <daynight_evening_threshold>
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <LoadDayNightValuesFromEEPROM+0x84>
    }
    else
    {
        use_defaults = 1;
    1f8c:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_morning_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_MORNING_DEBOUNCE_OFFSET)));
    1f8e:	8a e4       	ldi	r24, 0x4A	; 74
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
    1f9a:	6d 83       	std	Y+5, r22	; 0x05
    1f9c:	7e 83       	std	Y+6, r23	; 0x06
    1f9e:	8f 83       	std	Y+7, r24	; 0x07
    1fa0:	98 87       	std	Y+8, r25	; 0x08
    if ( IsValidMorningDebounce(&tmp_daynight_morning_debounce) )
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	05 96       	adiw	r24, 0x05	; 5
    1fa6:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <IsValidEveningDebounce>
    1faa:	88 23       	and	r24, r24
    1fac:	49 f0       	breq	.+18     	; 0x1fc0 <LoadDayNightValuesFromEEPROM+0xb6>
    {
        daynight_morning_debounce = tmp_daynight_morning_debounce;
    1fae:	c0 92 9e 03 	sts	0x039E, r12	; 0x80039e <daynight_morning_debounce>
    1fb2:	d0 92 9f 03 	sts	0x039F, r13	; 0x80039f <daynight_morning_debounce+0x1>
    1fb6:	e0 92 a0 03 	sts	0x03A0, r14	; 0x8003a0 <daynight_morning_debounce+0x2>
    1fba:	f0 92 a1 03 	sts	0x03A1, r15	; 0x8003a1 <daynight_morning_debounce+0x3>
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <LoadDayNightValuesFromEEPROM+0xb8>
    }
    else
    {
        use_defaults = 1;
    1fc0:	11 e0       	ldi	r17, 0x01	; 1
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    1fc2:	8e e4       	ldi	r24, 0x4E	; 78
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0e 94 34 19 	call	0x3268	; 0x3268 <eeprom_read_dword>
    1fca:	6b 01       	movw	r12, r22
    1fcc:	7c 01       	movw	r14, r24
    1fce:	69 83       	std	Y+1, r22	; 0x01
    1fd0:	7a 83       	std	Y+2, r23	; 0x02
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <IsValidEveningDebounce>
    1fde:	81 11       	cpse	r24, r1
    1fe0:	25 c0       	rjmp	.+74     	; 0x202c <LoadDayNightValuesFromEEPROM+0x122>
        use_defaults = 1;
    }
    if (use_defaults)
    {
        // default values are for 12V PV measured with ALT_V channel with 5V referance
        daynight_morning_threshold = 80; // 4.3/(((5.0)/1024.0)*(110.0/10.0))
    1fe2:	80 e5       	ldi	r24, 0x50	; 80
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <daynight_morning_threshold+0x1>
    1fea:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <daynight_morning_threshold>
        daynight_evening_threshold = 40; // 2.15/(((5.0)/1024.0)*(110.0/10.0))
    1fee:	88 e2       	ldi	r24, 0x28	; 40
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <daynight_evening_threshold+0x1>
    1ff6:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <daynight_evening_threshold>
        daynight_morning_debounce = 1200000UL; // 20 min
    1ffa:	80 e8       	ldi	r24, 0x80	; 128
    1ffc:	9f e4       	ldi	r25, 0x4F	; 79
    1ffe:	a2 e1       	ldi	r26, 0x12	; 18
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <daynight_morning_debounce>
    2006:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <daynight_morning_debounce+0x1>
    200a:	a0 93 a0 03 	sts	0x03A0, r26	; 0x8003a0 <daynight_morning_debounce+0x2>
    200e:	b0 93 a1 03 	sts	0x03A1, r27	; 0x8003a1 <daynight_morning_debounce+0x3>
        daynight_evening_debounce = 1200000UL; // 20 min
    2012:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <daynight_evening_debounce>
    2016:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <daynight_evening_debounce+0x1>
    201a:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <daynight_evening_debounce+0x2>
    201e:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <daynight_evening_debounce+0x3>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <daynight_values_loaded>
        return 0;
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <LoadDayNightValuesFromEEPROM+0x13c>
        use_defaults = 1;
    }
    unsigned long tmp_daynight_evening_debounce = (unsigned long)(eeprom_read_dword((uint32_t*)(EE_DAYNIGHT_ADDR+EE_DAYNIGHT_EVENING_DEBOUNCE_OFFSET)));
    if ( IsValidEveningDebounce(&tmp_daynight_evening_debounce) )
    {
        daynight_evening_debounce = tmp_daynight_evening_debounce;
    202c:	c0 92 95 03 	sts	0x0395, r12	; 0x800395 <daynight_evening_debounce>
    2030:	d0 92 96 03 	sts	0x0396, r13	; 0x800396 <daynight_evening_debounce+0x1>
    2034:	e0 92 97 03 	sts	0x0397, r14	; 0x800397 <daynight_evening_debounce+0x2>
    2038:	f0 92 98 03 	sts	0x0398, r15	; 0x800398 <daynight_evening_debounce+0x3>
    }
    else
    {
        use_defaults = 1;
    }
    if (use_defaults)
    203c:	11 11       	cpse	r17, r1
    203e:	d1 cf       	rjmp	.-94     	; 0x1fe2 <LoadDayNightValuesFromEEPROM+0xd8>
        daynight_values_loaded = DAYNIGHT_VALUES_DEFAULT;
        return 0;
    }
    else
    {
        daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    2040:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <daynight_values_loaded>
        return 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    2046:	2c 96       	adiw	r28, 0x0c	; 12
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	08 95       	ret

00002062 <DayNightValuesFromI2CtoEE>:

// Save day-night state machine values from I2C to EEPROM (if valid), one will change per loop, and I2C will take several loop cycles to get another.
void DayNightValuesFromI2CtoEE(void)
{
    if (daynight_values_loaded == DAYNIGHT_MORNING_THRESHOLD_TOSAVE)
    2062:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    2066:	82 30       	cpi	r24, 0x02	; 2
    2068:	99 f4       	brne	.+38     	; 0x2090 <DayNightValuesFromI2CtoEE+0x2e>
    {
        if ( IsValidMorningThresholdFor12V(&daynight_morning_threshold) || IsValidMorningThresholdFor24V(&daynight_morning_threshold) )
    206a:	89 e9       	ldi	r24, 0x99	; 153
    206c:	93 e0       	ldi	r25, 0x03	; 3
    206e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <IsValidMorningThresholdFor12V>
    2072:	81 11       	cpse	r24, r1
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <DayNightValuesFromI2CtoEE+0x20>
    2076:	89 e9       	ldi	r24, 0x99	; 153
    2078:	93 e0       	ldi	r25, 0x03	; 3
    207a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <IsValidMorningThresholdFor24V>
    207e:	88 23       	and	r24, r24
    2080:	39 f0       	breq	.+14     	; 0x2090 <DayNightValuesFromI2CtoEE+0x2e>
        {
            if (WriteEEMorningThreshold())
    2082:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <WriteEEMorningThreshold>
    2086:	88 23       	and	r24, r24
    2088:	19 f0       	breq	.+6      	; 0x2090 <DayNightValuesFromI2CtoEE+0x2e>
            {
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
    208a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <daynight_values_loaded>
                return; // all done
    208e:	08 95       	ret
            }
        }
    }
    if (daynight_values_loaded == DAYNIGHT_EVENING_THRESHOLD_TOSAVE)
    2090:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	81 f4       	brne	.+32     	; 0x20b8 <DayNightValuesFromI2CtoEE+0x56>
    {    
        if ( IsValidEveningThresholdFor12V(&daynight_evening_threshold) || IsValidEveningThresholdFor24V(&daynight_evening_threshold) )
    2098:	8c e9       	ldi	r24, 0x9C	; 156
    209a:	93 e0       	ldi	r25, 0x03	; 3
    209c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <IsValidEveningThresholdFor12V>
    20a0:	81 11       	cpse	r24, r1
    20a2:	06 c0       	rjmp	.+12     	; 0x20b0 <DayNightValuesFromI2CtoEE+0x4e>
    20a4:	8c e9       	ldi	r24, 0x9C	; 156
    20a6:	93 e0       	ldi	r25, 0x03	; 3
    20a8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <IsValidEveningThresholdFor24V>
    20ac:	88 23       	and	r24, r24
    20ae:	21 f0       	breq	.+8      	; 0x20b8 <DayNightValuesFromI2CtoEE+0x56>
        {
            if (WriteEEEveningThreshold())
    20b0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <WriteEEEveningThreshold>
    20b4:	81 11       	cpse	r24, r1
    20b6:	e9 cf       	rjmp	.-46     	; 0x208a <DayNightValuesFromI2CtoEE+0x28>
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                return; // all done
            }
        }
    }
    if (daynight_values_loaded == DAYNIGHT_MORNING_DEBOUNCE_TOSAVE)
    20b8:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	51 f4       	brne	.+20     	; 0x20d4 <DayNightValuesFromI2CtoEE+0x72>
    {
        if ( IsValidMorningDebounce(&daynight_morning_debounce) )
    20c0:	8e e9       	ldi	r24, 0x9E	; 158
    20c2:	93 e0       	ldi	r25, 0x03	; 3
    20c4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <IsValidEveningDebounce>
    20c8:	88 23       	and	r24, r24
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <DayNightValuesFromI2CtoEE+0x72>
        {
            if (WriteEEMorningDebounce())
    20cc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <WriteEEMorningDebounce>
    20d0:	81 11       	cpse	r24, r1
    20d2:	db cf       	rjmp	.-74     	; 0x208a <DayNightValuesFromI2CtoEE+0x28>
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                return; // all done
            }
        }
    }
    if (daynight_values_loaded == DAYNIGHT_EVENING_DEBOUNCE_TOSAVE)
    20d4:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <daynight_values_loaded>
    20d8:	85 30       	cpi	r24, 0x05	; 5
    20da:	51 f4       	brne	.+20     	; 0x20f0 <DayNightValuesFromI2CtoEE+0x8e>
    {
        if ( IsValidEveningDebounce(&daynight_evening_debounce) )
    20dc:	85 e9       	ldi	r24, 0x95	; 149
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <IsValidEveningDebounce>
    20e4:	88 23       	and	r24, r24
    20e6:	21 f0       	breq	.+8      	; 0x20f0 <DayNightValuesFromI2CtoEE+0x8e>
        {
            if (WriteEEEveningDebounce())
    20e8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <WriteEEEveningDebounce>
    20ec:	81 11       	cpse	r24, r1
    20ee:	cd cf       	rjmp	.-102    	; 0x208a <DayNightValuesFromI2CtoEE+0x28>
                daynight_values_loaded = DAYNIGHT_VALUES_LOADED;
                return; // all done
            }
        }
    }
    LoadDayNightValuesFromEEPROM(); // I guess the values are not valid so reload from EEPROM
    20f0:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <LoadDayNightValuesFromEEPROM>

000020f4 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    20f4:	1f 92       	push	r1
    20f6:	0f 92       	push	r0
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	0f 92       	push	r0
    20fc:	11 24       	eor	r1, r1
    20fe:	2f 93       	push	r18
    2100:	3f 93       	push	r19
    2102:	4f 93       	push	r20
    2104:	5f 93       	push	r21
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	ef 93       	push	r30
    210c:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    210e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    2112:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    2116:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    2118:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	8f 71       	andi	r24, 0x1F	; 31
    2122:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    2124:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	84 17       	cp	r24, r20
    212c:	95 07       	cpc	r25, r21
    212e:	39 f0       	breq	.+14     	; 0x213e <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    2130:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2134:	fc 01       	movw	r30, r24
    2136:	eb 55       	subi	r30, 0x5B	; 91
    2138:	fe 4f       	sbci	r31, 0xFE	; 254
    213a:	30 83       	st	Z, r19
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    213e:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    2140:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    2144:	ff 91       	pop	r31
    2146:	ef 91       	pop	r30
    2148:	9f 91       	pop	r25
    214a:	8f 91       	pop	r24
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	0f 92       	push	r0
    2166:	11 24       	eor	r1, r1
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    2170:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    2174:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2178:	98 17       	cp	r25, r24
    217a:	79 f0       	breq	.+30     	; 0x219a <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    217c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	8f 71       	andi	r24, 0x1F	; 31
    2186:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    2188:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    218c:	fc 01       	movw	r30, r24
    218e:	eb 53       	subi	r30, 0x3B	; 59
    2190:	fe 4f       	sbci	r31, 0xFE	; 254
    2192:	80 81       	ld	r24, Z
    2194:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    219a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    219e:	8f 7d       	andi	r24, 0xDF	; 223
    21a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    21a4:	ff 91       	pop	r31
    21a6:	ef 91       	pop	r30
    21a8:	9f 91       	pop	r25
    21aa:	8f 91       	pop	r24
    21ac:	0f 90       	pop	r0
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	0f 90       	pop	r0
    21b2:	1f 90       	pop	r1
    21b4:	18 95       	reti

000021b6 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    21b6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    21ba:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    21be:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    21c2:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    21c6:	97 ff       	sbrs	r25, 7
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    21ca:	22 e0       	ldi	r18, 0x02	; 2
    21cc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    21d0:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    21d2:	28 e9       	ldi	r18, 0x98	; 152
    21d4:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    21d8:	26 e0       	ldi	r18, 0x06	; 6
    21da:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    21de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    21e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    21e6:	08 95       	ret

000021e8 <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    21e8:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    21ec:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    21f0:	98 17       	cp	r25, r24
    21f2:	a1 f0       	breq	.+40     	; 0x221c <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    21f4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	8f 71       	andi	r24, 0x1F	; 31
    21fe:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    2200:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    2204:	fc 01       	movw	r30, r24
    2206:	eb 55       	subi	r30, 0x5B	; 91
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    220c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	98 2f       	mov	r25, r24
    2214:	88 27       	eor	r24, r24
    2216:	82 0f       	add	r24, r18
    2218:	91 1d       	adc	r25, r1
    221a:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    2220:	08 95       	ret

00002222 <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    2222:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	2f 5f       	subi	r18, 0xFF	; 255
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	2f 71       	andi	r18, 0x1F	; 31
    222e:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    2230:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	24 17       	cp	r18, r20
    2238:	35 07       	cpc	r19, r21
    223a:	d1 f3       	breq	.-12     	; 0x2230 <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    223c:	f9 01       	movw	r30, r18
    223e:	eb 53       	subi	r30, 0x3B	; 59
    2240:	fe 4f       	sbci	r31, 0xFE	; 254
    2242:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    2244:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    2248:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    224c:	80 62       	ori	r24, 0x20	; 32
    224e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2252:	08 95       	ret

00002254 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    2254:	0e 94 11 11 	call	0x2222	; 0x2222 <uart0_putc>
	return 0;
}
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	08 95       	ret

0000225e <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    225e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    2262:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	80 96       	adiw	r24, 0x20	; 32
    226a:	82 1b       	sub	r24, r18
    226c:	91 09       	sbc	r25, r1
} /* uart0_available */
    226e:	8f 71       	andi	r24, 0x1F	; 31
    2270:	99 27       	eor	r25, r25
    2272:	08 95       	ret

00002274 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    2274:	0e 94 2f 11 	call	0x225e	; 0x225e <uart0_available>
    2278:	89 2b       	or	r24, r25
    227a:	e1 f3       	breq	.-8      	; 0x2274 <uartstream0_getchar>
    res = uart0_getc();
    227c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <uart0_getc>
    if(res == '\r') res = '\n';
    2280:	8d 30       	cpi	r24, 0x0D	; 13
    2282:	91 05       	cpc	r25, r1
    2284:	11 f4       	brne	.+4      	; 0x228a <uartstream0_getchar+0x16>
    2286:	8a e0       	ldi	r24, 0x0A	; 10
    2288:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    228a:	99 27       	eor	r25, r25
    228c:	08 95       	ret

0000228e <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	8b 01       	movw	r16, r22
    2294:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	80 5a       	subi	r24, 0xA0	; 160
    229c:	9c 41       	sbci	r25, 0x1C	; 28
    229e:	a9 4e       	sbci	r26, 0xE9	; 233
    22a0:	bf 4f       	sbci	r27, 0xFF	; 255
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	43 e0       	ldi	r20, 0x03	; 3
    22a8:	66 0f       	add	r22, r22
    22aa:	77 1f       	adc	r23, r23
    22ac:	88 1f       	adc	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	4a 95       	dec	r20
    22b2:	d1 f7       	brne	.-12     	; 0x22a8 <uartstream0_init+0x1a>
    22b4:	a9 01       	movw	r20, r18
    22b6:	98 01       	movw	r18, r16
    22b8:	e4 e0       	ldi	r30, 0x04	; 4
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	44 1f       	adc	r20, r20
    22c0:	55 1f       	adc	r21, r21
    22c2:	ea 95       	dec	r30
    22c4:	d1 f7       	brne	.-12     	; 0x22ba <uartstream0_init+0x2c>
    22c6:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__udivmodsi4>
    22ca:	c9 01       	movw	r24, r18
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	0e 94 db 10 	call	0x21b6	; 0x21b6 <uart0_init>
	return &uartstream0_f;
}	
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <__vector_21>:
volatile uint8_t analog_reference;

static uint8_t free_running;

// Interrupt service routine for enable_ADC_auto_conversion
ISR(ADC_vect){
    22dc:	1f 92       	push	r1
    22de:	0f 92       	push	r0
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	0f 92       	push	r0
    22e4:	11 24       	eor	r1, r1
    22e6:	2f 93       	push	r18
    22e8:	8f 93       	push	r24
    22ea:	9f 93       	push	r25
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
    // ADCL contain lower 8 bits, ADCH upper (two bits)
    // Must read ADCL first (news ADC is now defined for this)
    adc[adc_channel] = ADC;
    22f0:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <adc_channel>
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    22fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	ec 55       	subi	r30, 0x5C	; 92
    2304:	fc 4f       	sbci	r31, 0xFC	; 252
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    //adc[adc_channel] = ADCL | (ADCH << 8);
    
    ++adc_channel;
    230a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <adc_channel>
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <adc_channel>
    
    // ch 0 is ALT_I, always read
    // ch 1 is ALT_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 1) && digitalRead(ALT_EN) )
    2314:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <adc_channel>
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	29 f4       	brne	.+10     	; 0x2326 <__vector_21+0x4a>
    231c:	1b 9b       	sbis	0x03, 3	; 3
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <__vector_21+0x4a>
    {
        adc_channel = 6; // skip channel 1
    2320:	86 e0       	ldi	r24, 0x06	; 6
    2322:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <adc_channel>
    }
    // skip channels 3..5
    if (adc_channel == 2)
    2326:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <adc_channel>
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	19 f4       	brne	.+6      	; 0x2334 <__vector_21+0x58>
    {
        adc_channel = 6;
    232e:	86 e0       	ldi	r24, 0x06	; 6
    2330:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <adc_channel>
    }
    // ch 6 is PWR_I, always read
    // ch 7 is PWR_V, only read when ALT_EN is low (e.g., at rest/not charging)
    if ( (adc_channel == 7) && digitalRead(ALT_EN) )
    2334:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <adc_channel>
    2338:	87 30       	cpi	r24, 0x07	; 7
    233a:	29 f4       	brne	.+10     	; 0x2346 <__vector_21+0x6a>
    233c:	1b 9b       	sbis	0x03, 3	; 3
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <__vector_21+0x6a>
    {
        adc_channel = 8; // skip channel 7
    2340:	88 e0       	ldi	r24, 0x08	; 8
    2342:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <adc_channel>
    }

    if (adc_channel >= ADC_CHANNELS) 
    2346:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <adc_channel>
    234a:	88 30       	cpi	r24, 0x08	; 8
    234c:	b0 f4       	brcc	.+44     	; 0x237a <__vector_21+0x9e>

    }

#if defined(ADMUX)
    // clear the mux to select the next channel to do conversion without changing the reference
    ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    234e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2352:	80 7f       	andi	r24, 0xF0	; 240
    2354:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        
    // use a stack register to reset the referance, most likly it is not changed and fliping the hardware bit would mess up the reading.
    ADMUX = ( (ADMUX & ~(ADREFSMASK) & ~(1<<ADLAR) ) | analog_reference ) + adc_channel;
    2358:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    235c:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <analog_reference>
    2360:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <adc_channel>
    2364:	8f 71       	andi	r24, 0x1F	; 31
    2366:	82 2b       	or	r24, r18
    2368:	89 0f       	add	r24, r25
    236a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#else
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
    236e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2372:	80 64       	ori	r24, 0x40	; 64
    2374:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2378:	0c c0       	rjmp	.+24     	; 0x2392 <__vector_21+0xb6>
        adc_channel = 8; // skip channel 7
    }

    if (adc_channel >= ADC_CHANNELS) 
    {
        adc_channel = 0;
    237a:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <adc_channel>
        adc[ADC_CHANNELS] = 0x7FFF; // mark to notify that ADC burst is done
    237e:	8f ef       	ldi	r24, 0xFF	; 255
    2380:	9f e7       	ldi	r25, 0x7F	; 127
    2382:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <adc+0x11>
    2386:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <adc+0x10>
        if (!free_running)
    238a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <free_running>
    238e:	81 11       	cpse	r24, r1
    2390:	de cf       	rjmp	.-68     	; 0x234e <__vector_21+0x72>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

    // set ADSC in ADCSRA, ADC Start Conversion
    ADCSRA |= (1<<ADSC);
}
    2392:	ff 91       	pop	r31
    2394:	ef 91       	pop	r30
    2396:	9f 91       	pop	r25
    2398:	8f 91       	pop	r24
    239a:	2f 91       	pop	r18
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	0f 90       	pop	r0
    23a2:	1f 90       	pop	r1
    23a4:	18 95       	reti

000023a6 <init_ADC_single_conversion>:
void init_ADC_single_conversion(uint8_t reference)
{
    // The user must select the reference they want to initialization the ADC with, 
    // it should not be automagic. Smoke will get let out if AREF is connected to
    // another source while AVCC is selected. AREF should not be run to a pin.
    analog_reference = reference;
    23a6:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <analog_reference>
    free_running = 0;
    23aa:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <free_running>

#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    23ae:	ec e7       	ldi	r30, 0x7C	; 124
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	90 81       	ld	r25, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | reference ;
    23b4:	90 73       	andi	r25, 0x30	; 48
    23b6:	89 2b       	or	r24, r25
    23b8:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    23ba:	ea e7       	ldi	r30, 0x7A	; 122
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	84 60       	ori	r24, 0x04	; 4
    23c2:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    23c4:	80 81       	ld	r24, Z
    23c6:	82 60       	ori	r24, 0x02	; 2
    23c8:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    23ca:	80 81       	ld	r24, Z
    23cc:	8e 7f       	andi	r24, 0xFE	; 254
    23ce:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS2);
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
	// enable a2d conversions
	ADCSRA |= (1<<ADEN);
    23d0:	80 81       	ld	r24, Z
    23d2:	80 68       	ori	r24, 0x80	; 128
    23d4:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which is used to set the prescaler range
#endif
    ADC_auto_conversion = 0;
    23d6:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <ADC_auto_conversion>
    23da:	08 95       	ret

000023dc <enable_ADC_auto_conversion>:

/* This changes the ADC to Auto Trigger mode. It will take readings on each 
    channel and hold them in an array. The array value is accessed by reading from adc[]  */
void enable_ADC_auto_conversion(uint8_t free_run)
{
    adc_channel = 0;
    23dc:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <adc_channel>
    adc[ADC_CHANNELS] = 0x00;
    23e0:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <adc+0x11>
    23e4:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <adc+0x10>
    free_running = free_run;
    23e8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <free_running>
    //      EXTERNAL_AREF 0
    //      EXTERNAL_AVCC (1<<REFS0)
    //      INTERNAL_1V1 (1<<REFS1) | (1<<REFS0)
#if defined(ADMUX)
    // clear the channel select MUX
    uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    23ec:	ec e7       	ldi	r30, 0x7C	; 124
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z

    // clear the reference bits REFS0, REFS1[,REFS2]
    local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    
    // select the reference so it has time to stabalize.
    ADMUX = local_ADMUX | analog_reference ;
    23f2:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <analog_reference>
    23f6:	80 73       	andi	r24, 0x30	; 48
    23f8:	89 2b       	or	r24, r25
    23fa:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		ADCSRA |= (1<<ADPS2);
		ADCSRA |= (1<<ADPS1);
		ADCSRA |= (1<<ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		ADCSRA |= (1<<ADPS2);
    23fc:	ea e7       	ldi	r30, 0x7A	; 122
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	84 60       	ori	r24, 0x04	; 4
    2404:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADPS1);
    2406:	80 81       	ld	r24, Z
    2408:	82 60       	ori	r24, 0x02	; 2
    240a:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS0);
    240c:	80 81       	ld	r24, Z
    240e:	8e 7f       	andi	r24, 0xFE	; 254
    2410:	80 83       	st	Z, r24
		ADCSRA &= ~(1<<ADPS1);
        ADCSRA |= (1<<ADPS0);
	#endif
    
	// Power up the ADC and set it for a single conversion with interrupts enabled
    ADCSRA = ( (ADCSRA | (1<<ADEN) ) & ~(1<<ADATE) ) | (1 << ADIE);
    2412:	80 81       	ld	r24, Z
    2414:	87 75       	andi	r24, 0x57	; 87
    2416:	88 68       	ori	r24, 0x88	; 136
    2418:	80 83       	st	Z, r24

    // Start an ADC Conversion 
    ADCSRA |= (1<<ADSC);
    241a:	80 81       	ld	r24, Z
    241c:	80 64       	ori	r24, 0x40	; 64
    241e:	80 83       	st	Z, r24
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif
    ADC_auto_conversion =1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <ADC_auto_conversion>
    2426:	08 95       	ret

00002428 <analogRead>:


// Use the ADC channel number only (not the pin number)
int analogRead(uint8_t channel)
{
    if (ADC_auto_conversion)
    2428:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <ADC_auto_conversion>
    242c:	99 23       	and	r25, r25
    242e:	61 f0       	breq	.+24     	; 0x2448 <analogRead+0x20>
    {
        ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    2430:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2432:	f8 94       	cli
        {
            // this moves two byes one at a time, so the ISR could change it durring the move
            return adc[channel];
    2434:	e8 2f       	mov	r30, r24
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ee 0f       	add	r30, r30
    243a:	ff 1f       	adc	r31, r31
    243c:	ec 55       	subi	r30, 0x5C	; 92
    243e:	fc 4f       	sbci	r31, 0xFC	; 252
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2444:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2446:	08 95       	ret
        ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((channel >> 3) & 0x01) << MUX5);
#endif
      
#if defined(ADMUX)
        // clear the channel select MUX, ADLAR is not changed (0 is the default).
        uint8_t local_ADMUX = ADMUX & ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
    2448:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

        // clear the reference bits REFS0, REFS1[,REFS2]
        local_ADMUX = (local_ADMUX & ~(ADREFSMASK));
    244c:	20 73       	andi	r18, 0x30	; 48
        
        // select the reference
        local_ADMUX = local_ADMUX | analog_reference ;
    244e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <analog_reference>
    
        // select the channel (note MUX4 has some things for advanced users).
        ADMUX = local_ADMUX | (channel & 0x07) ;
    2452:	e8 2f       	mov	r30, r24
    2454:	e7 70       	andi	r30, 0x07	; 7
    2456:	82 2f       	mov	r24, r18
    2458:	89 2b       	or	r24, r25
    245a:	e8 2b       	or	r30, r24
    245c:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#   error missing ADMUX register which is used to sellect the reference and channel
#endif

#if defined(ADCSRA) && defined(ADCL)
        // start the conversion
        ADCSRA |= (1 <<ADSC);
    2460:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2464:	80 64       	ori	r24, 0x40	; 64
    2466:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

        // ADSC is cleared when the conversion finishes
        while (ADCSRA & (1 <<ADSC));    
    246a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    246e:	86 fd       	sbrc	r24, 6
    2470:	fc cf       	rjmp	.-8      	; 0x246a <analogRead+0x42>

        // we have to read ADCL first; doing so locks both ADCL
        // and ADCH until ADCH is read. 
        low  = ADCL;
    2472:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
        high = ADCH;
    2476:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#else
#   error missing ADCSRA register which has ADSC bit that is used to start a conversion
#endif

        // combine the two bytes
        return (high << 8) | low;
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	92 2b       	or	r25, r18
    }
    // this should never run.
    return -1;
}
    247e:	08 95       	ret

00002480 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	0f 92       	push	r0
    2488:	11 24       	eor	r1, r1
    248a:	2f 93       	push	r18
    248c:	3f 93       	push	r19
    248e:	8f 93       	push	r24
    2490:	9f 93       	push	r25
    2492:	af 93       	push	r26
    2494:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2496:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <timer0_millis>
    249a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    249e:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    24a2:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    24a6:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    24aa:	2d e2       	ldi	r18, 0x2D	; 45
    24ac:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    24ae:	2d 37       	cpi	r18, 0x7D	; 125
    24b0:	20 f4       	brcc	.+8      	; 0x24ba <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	a1 1d       	adc	r26, r1
    24b6:	b1 1d       	adc	r27, r1
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    24ba:	20 eb       	ldi	r18, 0xB0	; 176
    24bc:	23 0f       	add	r18, r19
		m += 1;
    24be:	02 96       	adiw	r24, 0x02	; 2
    24c0:	a1 1d       	adc	r26, r1
    24c2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    24c4:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <timer0_fract>
	timer0_millis = m;
    24c8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <timer0_millis>
    24cc:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <timer0_millis+0x1>
    24d0:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <timer0_millis+0x2>
    24d4:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <timer0_millis+0x3>
	timer0_overflow_count++;
    24d8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <timer0_overflow_count>
    24dc:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <timer0_overflow_count+0x1>
    24e0:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <timer0_overflow_count+0x2>
    24e4:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <timer0_overflow_count+0x3>
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	a1 1d       	adc	r26, r1
    24ec:	b1 1d       	adc	r27, r1
    24ee:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer0_overflow_count>
    24f2:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer0_overflow_count+0x1>
    24f6:	a0 93 ed 01 	sts	0x01ED, r26	; 0x8001ed <timer0_overflow_count+0x2>
    24fa:	b0 93 ee 01 	sts	0x01EE, r27	; 0x8001ee <timer0_overflow_count+0x3>
}
    24fe:	bf 91       	pop	r27
    2500:	af 91       	pop	r26
    2502:	9f 91       	pop	r25
    2504:	8f 91       	pop	r24
    2506:	3f 91       	pop	r19
    2508:	2f 91       	pop	r18
    250a:	0f 90       	pop	r0
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	0f 90       	pop	r0
    2510:	1f 90       	pop	r1
    2512:	18 95       	reti

00002514 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2514:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2516:	f8 94       	cli
	m = timer0_millis;
    2518:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <timer0_millis>
    251c:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <timer0_millis+0x1>
    2520:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis+0x2>
    2524:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x3>
	SREG = oldSREG;
    2528:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    252a:	08 95       	ret

0000252c <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    252c:	84 b5       	in	r24, 0x24	; 36
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    2532:	84 b5       	in	r24, 0x24	; 36
    2534:	81 60       	ori	r24, 0x01	; 1
    2536:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    2538:	85 b5       	in	r24, 0x25	; 37
    253a:	82 60       	ori	r24, 0x02	; 2
    253c:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    253e:	85 b5       	in	r24, 0x25	; 37
    2540:	81 60       	ori	r24, 0x01	; 1
    2542:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    2544:	ee e6       	ldi	r30, 0x6E	; 110
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	81 60       	ori	r24, 0x01	; 1
    254c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    254e:	e1 e8       	ldi	r30, 0x81	; 129
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    2554:	80 81       	ld	r24, Z
    2556:	82 60       	ori	r24, 0x02	; 2
    2558:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    255a:	80 81       	ld	r24, Z
    255c:	81 60       	ori	r24, 0x01	; 1
    255e:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    2560:	e0 e8       	ldi	r30, 0x80	; 128
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	81 60       	ori	r24, 0x01	; 1
    2568:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    256a:	e1 eb       	ldi	r30, 0xB1	; 177
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	84 60       	ori	r24, 0x04	; 4
    2572:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    2574:	e0 eb       	ldi	r30, 0xB0	; 176
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	81 60       	ori	r24, 0x01	; 1
    257c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    257e:	e1 e9       	ldi	r30, 0x91	; 145
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	82 60       	ori	r24, 0x02	; 2
    2586:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    2588:	80 81       	ld	r24, Z
    258a:	81 60       	ori	r24, 0x01	; 1
    258c:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    258e:	e0 e9       	ldi	r30, 0x90	; 144
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	81 60       	ori	r24, 0x01	; 1
    2596:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    2598:	e1 ea       	ldi	r30, 0xA1	; 161
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	82 60       	ori	r24, 0x02	; 2
    25a0:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    25a2:	80 81       	ld	r24, Z
    25a4:	81 60       	ori	r24, 0x01	; 1
    25a6:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    25a8:	e0 ea       	ldi	r30, 0xA0	; 160
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	81 60       	ori	r24, 0x01	; 1
    25b0:	80 83       	st	Z, r24
    25b2:	08 95       	ret

000025b4 <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    25b4:	08 95       	ret

000025b6 <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    25b6:	08 95       	ret

000025b8 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    25b8:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    twi0_sendStop = 1;		// default value
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi0_sendStop>
    twi0_inRepStart = 0;
    25c2:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    25c6:	88 23       	and	r24, r24
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    25ca:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    25cc:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    25ce:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    25d0:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    25d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    25d6:	8e 7f       	andi	r24, 0xFE	; 254
    25d8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    25dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    25e0:	8d 7f       	andi	r24, 0xFD	; 253
    25e2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    25e6:	84 e3       	ldi	r24, 0x34	; 52
    25e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    25ec:	85 e4       	ldi	r24, 0x45	; 69
    25ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    25f2:	08 95       	ret

000025f4 <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    25f4:	88 0f       	add	r24, r24
    25f6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    25fa:	08 95       	ret

000025fc <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    25fc:	61 32       	cpi	r22, 0x21	; 33
    25fe:	98 f4       	brcc	.+38     	; 0x2626 <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    2600:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <twi0_state>
    2604:	24 30       	cpi	r18, 0x04	; 4
    2606:	89 f4       	brne	.+34     	; 0x262a <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    2608:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi0_txBufferLength>
    260c:	28 2f       	mov	r18, r24
    260e:	a3 e1       	ldi	r26, 0x13	; 19
    2610:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2612:	fc 01       	movw	r30, r24
    2614:	8e 2f       	mov	r24, r30
    2616:	82 1b       	sub	r24, r18
    2618:	86 17       	cp	r24, r22
    261a:	18 f4       	brcc	.+6      	; 0x2622 <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    261c:	81 91       	ld	r24, Z+
    261e:	8d 93       	st	X+, r24
    2620:	f9 cf       	rjmp	.-14     	; 0x2614 <twi0_transmit+0x18>
    }
  
    return 0;
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    262a:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    262c:	08 95       	ret

0000262e <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    262e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    2632:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    2636:	08 95       	ret

00002638 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    2638:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    263c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    2640:	08 95       	ret

00002642 <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2642:	85 ed       	ldi	r24, 0xD5	; 213
    2644:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    2648:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    264c:	84 fd       	sbrc	r24, 4
    264e:	fc cf       	rjmp	.-8      	; 0x2648 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    2650:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    2654:	08 95       	ret

00002656 <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    2656:	85 ec       	ldi	r24, 0xC5	; 197
    2658:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    265c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
    2660:	08 95       	ret

00002662 <__vector_24>:
}

ISR(TWI0_vect)
{
    2662:	1f 92       	push	r1
    2664:	0f 92       	push	r0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	0f 92       	push	r0
    266a:	11 24       	eor	r1, r1
    266c:	2f 93       	push	r18
    266e:	3f 93       	push	r19
    2670:	4f 93       	push	r20
    2672:	5f 93       	push	r21
    2674:	6f 93       	push	r22
    2676:	7f 93       	push	r23
    2678:	8f 93       	push	r24
    267a:	9f 93       	push	r25
    267c:	af 93       	push	r26
    267e:	bf 93       	push	r27
    2680:	ef 93       	push	r30
    2682:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    2684:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2688:	88 7f       	andi	r24, 0xF8	; 248
    268a:	80 36       	cpi	r24, 0x60	; 96
    268c:	09 f4       	brne	.+2      	; 0x2690 <__vector_24+0x2e>
    268e:	9e c0       	rjmp	.+316    	; 0x27cc <__vector_24+0x16a>
    2690:	78 f5       	brcc	.+94     	; 0x26f0 <__vector_24+0x8e>
    2692:	88 32       	cpi	r24, 0x28	; 40
    2694:	09 f4       	brne	.+2      	; 0x2698 <__vector_24+0x36>
    2696:	5d c0       	rjmp	.+186    	; 0x2752 <__vector_24+0xf0>
    2698:	90 f4       	brcc	.+36     	; 0x26be <__vector_24+0x5c>
    269a:	80 31       	cpi	r24, 0x10	; 16
    269c:	09 f4       	brne	.+2      	; 0x26a0 <__vector_24+0x3e>
    269e:	56 c0       	rjmp	.+172    	; 0x274c <__vector_24+0xea>
    26a0:	38 f4       	brcc	.+14     	; 0x26b0 <__vector_24+0x4e>
    26a2:	88 23       	and	r24, r24
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <__vector_24+0x46>
    26a6:	f5 c0       	rjmp	.+490    	; 0x2892 <__vector_24+0x230>
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	09 f4       	brne	.+2      	; 0x26ae <__vector_24+0x4c>
    26ac:	4f c0       	rjmp	.+158    	; 0x274c <__vector_24+0xea>
    26ae:	f5 c0       	rjmp	.+490    	; 0x289a <__vector_24+0x238>
    26b0:	88 31       	cpi	r24, 0x18	; 24
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <__vector_24+0x54>
    26b4:	4e c0       	rjmp	.+156    	; 0x2752 <__vector_24+0xf0>
    26b6:	80 32       	cpi	r24, 0x20	; 32
    26b8:	09 f4       	brne	.+2      	; 0x26bc <__vector_24+0x5a>
    26ba:	5f c0       	rjmp	.+190    	; 0x277a <__vector_24+0x118>
    26bc:	ee c0       	rjmp	.+476    	; 0x289a <__vector_24+0x238>
    26be:	80 34       	cpi	r24, 0x40	; 64
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <__vector_24+0x62>
    26c2:	6a c0       	rjmp	.+212    	; 0x2798 <__vector_24+0x136>
    26c4:	58 f4       	brcc	.+22     	; 0x26dc <__vector_24+0x7a>
    26c6:	80 33       	cpi	r24, 0x30	; 48
    26c8:	09 f4       	brne	.+2      	; 0x26cc <__vector_24+0x6a>
    26ca:	57 c0       	rjmp	.+174    	; 0x277a <__vector_24+0x118>
    26cc:	88 33       	cpi	r24, 0x38	; 56
    26ce:	09 f0       	breq	.+2      	; 0x26d2 <__vector_24+0x70>
    26d0:	e4 c0       	rjmp	.+456    	; 0x289a <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    26d2:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
            twi0_releaseBus();
    26d6:	0e 94 2b 13 	call	0x2656	; 0x2656 <twi0_releaseBus>
            break;
    26da:	df c0       	rjmp	.+446    	; 0x289a <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    26dc:	80 35       	cpi	r24, 0x50	; 80
    26de:	09 f4       	brne	.+2      	; 0x26e2 <__vector_24+0x80>
    26e0:	4f c0       	rjmp	.+158    	; 0x2780 <__vector_24+0x11e>
    26e2:	88 35       	cpi	r24, 0x58	; 88
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <__vector_24+0x86>
    26e6:	5d c0       	rjmp	.+186    	; 0x27a2 <__vector_24+0x140>
    26e8:	88 34       	cpi	r24, 0x48	; 72
    26ea:	09 f0       	breq	.+2      	; 0x26ee <__vector_24+0x8c>
    26ec:	d6 c0       	rjmp	.+428    	; 0x289a <__vector_24+0x238>
    26ee:	d3 c0       	rjmp	.+422    	; 0x2896 <__vector_24+0x234>
    26f0:	88 39       	cpi	r24, 0x98	; 152
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__vector_24+0x94>
    26f4:	c4 c0       	rjmp	.+392    	; 0x287e <__vector_24+0x21c>
    26f6:	a8 f4       	brcc	.+42     	; 0x2722 <__vector_24+0xc0>
    26f8:	88 37       	cpi	r24, 0x78	; 120
    26fa:	09 f4       	brne	.+2      	; 0x26fe <__vector_24+0x9c>
    26fc:	67 c0       	rjmp	.+206    	; 0x27cc <__vector_24+0x16a>
    26fe:	38 f4       	brcc	.+14     	; 0x270e <__vector_24+0xac>
    2700:	88 36       	cpi	r24, 0x68	; 104
    2702:	09 f4       	brne	.+2      	; 0x2706 <__vector_24+0xa4>
    2704:	63 c0       	rjmp	.+198    	; 0x27cc <__vector_24+0x16a>
    2706:	80 37       	cpi	r24, 0x70	; 112
    2708:	09 f4       	brne	.+2      	; 0x270c <__vector_24+0xaa>
    270a:	60 c0       	rjmp	.+192    	; 0x27cc <__vector_24+0x16a>
    270c:	c6 c0       	rjmp	.+396    	; 0x289a <__vector_24+0x238>
    270e:	88 38       	cpi	r24, 0x88	; 136
    2710:	09 f4       	brne	.+2      	; 0x2714 <__vector_24+0xb2>
    2712:	b5 c0       	rjmp	.+362    	; 0x287e <__vector_24+0x21c>
    2714:	80 39       	cpi	r24, 0x90	; 144
    2716:	09 f4       	brne	.+2      	; 0x271a <__vector_24+0xb8>
    2718:	5f c0       	rjmp	.+190    	; 0x27d8 <__vector_24+0x176>
    271a:	80 38       	cpi	r24, 0x80	; 128
    271c:	09 f0       	breq	.+2      	; 0x2720 <__vector_24+0xbe>
    271e:	bd c0       	rjmp	.+378    	; 0x289a <__vector_24+0x238>
    2720:	5b c0       	rjmp	.+182    	; 0x27d8 <__vector_24+0x176>
    2722:	80 3b       	cpi	r24, 0xB0	; 176
    2724:	09 f4       	brne	.+2      	; 0x2728 <__vector_24+0xc6>
    2726:	83 c0       	rjmp	.+262    	; 0x282e <__vector_24+0x1cc>
    2728:	38 f4       	brcc	.+14     	; 0x2738 <__vector_24+0xd6>
    272a:	80 3a       	cpi	r24, 0xA0	; 160
    272c:	09 f4       	brne	.+2      	; 0x2730 <__vector_24+0xce>
    272e:	66 c0       	rjmp	.+204    	; 0x27fc <__vector_24+0x19a>
    2730:	88 3a       	cpi	r24, 0xA8	; 168
    2732:	09 f4       	brne	.+2      	; 0x2736 <__vector_24+0xd4>
    2734:	7c c0       	rjmp	.+248    	; 0x282e <__vector_24+0x1cc>
    2736:	b1 c0       	rjmp	.+354    	; 0x289a <__vector_24+0x238>
    2738:	80 3c       	cpi	r24, 0xC0	; 192
    273a:	09 f4       	brne	.+2      	; 0x273e <__vector_24+0xdc>
    273c:	a4 c0       	rjmp	.+328    	; 0x2886 <__vector_24+0x224>
    273e:	88 3c       	cpi	r24, 0xC8	; 200
    2740:	09 f4       	brne	.+2      	; 0x2744 <__vector_24+0xe2>
    2742:	a1 c0       	rjmp	.+322    	; 0x2886 <__vector_24+0x224>
    2744:	88 3b       	cpi	r24, 0xB8	; 184
    2746:	09 f4       	brne	.+2      	; 0x274a <__vector_24+0xe8>
    2748:	87 c0       	rjmp	.+270    	; 0x2858 <__vector_24+0x1f6>
    274a:	a7 c0       	rjmp	.+334    	; 0x289a <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    274c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi0_slarw>
    2750:	10 c0       	rjmp	.+32     	; 0x2772 <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2752:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2756:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    275a:	98 17       	cp	r25, r24
    275c:	70 f5       	brcc	.+92     	; 0x27ba <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    275e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	8e 0f       	add	r24, r30
    2766:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	eb 5c       	subi	r30, 0xCB	; 203
    276e:	fd 4f       	sbci	r31, 0xFD	; 253
    2770:	80 81       	ld	r24, Z
    2772:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2776:	85 ec       	ldi	r24, 0xC5	; 197
    2778:	83 c0       	rjmp	.+262    	; 0x2880 <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    277a:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_error>
    277e:	8b c0       	rjmp	.+278    	; 0x2896 <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    2780:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	8e 0f       	add	r24, r30
    2788:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    278c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	eb 5c       	subi	r30, 0xCB	; 203
    2794:	fd 4f       	sbci	r31, 0xFD	; 253
    2796:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    2798:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    279c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi0_masterBufferLength>
    27a0:	6b c0       	rjmp	.+214    	; 0x2878 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    27a2:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi0_masterBufferIndex>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	8e 0f       	add	r24, r30
    27aa:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi0_masterBufferIndex>
    27ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	eb 5c       	subi	r30, 0xCB	; 203
    27b6:	fd 4f       	sbci	r31, 0xFD	; 253
    27b8:	80 83       	st	Z, r24
            if (twi0_sendStop)
    27ba:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_sendStop>
    27be:	81 11       	cpse	r24, r1
    27c0:	6a c0       	rjmp	.+212    	; 0x2896 <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    27c8:	84 ea       	ldi	r24, 0xA4	; 164
    27ca:	5e c0       	rjmp	.+188    	; 0x2888 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    27cc:	83 e0       	ldi	r24, 0x03	; 3
    27ce:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    27d2:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
    27d6:	cf cf       	rjmp	.-98     	; 0x2776 <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    27d8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    27dc:	80 32       	cpi	r24, 0x20	; 32
    27de:	08 f0       	brcs	.+2      	; 0x27e2 <__vector_24+0x180>
    27e0:	4e c0       	rjmp	.+156    	; 0x287e <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    27e2:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	8e 0f       	add	r24, r30
    27ea:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi0_rxBufferIndex>
    27ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	ef 50       	subi	r30, 0x0F	; 15
    27f6:	fe 4f       	sbci	r31, 0xFE	; 254
    27f8:	80 83       	st	Z, r24
    27fa:	bd cf       	rjmp	.-134    	; 0x2776 <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    27fc:	0e 94 2b 13 	call	0x2656	; 0x2656 <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    2800:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2804:	80 32       	cpi	r24, 0x20	; 32
    2806:	30 f4       	brcc	.+12     	; 0x2814 <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    2808:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	ef 50       	subi	r30, 0x0F	; 15
    2810:	fe 4f       	sbci	r31, 0xFE	; 254
    2812:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    2814:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <twi0_rxBufferIndex>
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    281e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    2822:	81 ef       	ldi	r24, 0xF1	; 241
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    2828:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi0_rxBufferIndex>
            break;
    282c:	36 c0       	rjmp	.+108    	; 0x289a <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    282e:	84 e0       	ldi	r24, 0x04	; 4
    2830:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    2834:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    2838:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    283c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    2840:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    2844:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    2846:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    284a:	81 11       	cpse	r24, r1
    284c:	05 c0       	rjmp	.+10     	; 0x2858 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    2854:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    2858:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi0_txBufferIndex>
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	8e 0f       	add	r24, r30
    2860:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi0_txBufferIndex>
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	ed 5e       	subi	r30, 0xED	; 237
    2868:	fd 4f       	sbci	r31, 0xFD	; 253
    286a:	80 81       	ld	r24, Z
    286c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    2870:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <twi0_txBufferIndex>
    2874:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi0_txBufferLength>
    2878:	98 17       	cp	r25, r24
    287a:	08 f4       	brcc	.+2      	; 0x287e <__vector_24+0x21c>
    287c:	7c cf       	rjmp	.-264    	; 0x2776 <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    287e:	85 e8       	ldi	r24, 0x85	; 133
    2880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2884:	0a c0       	rjmp	.+20     	; 0x289a <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2886:	85 ec       	ldi	r24, 0xC5	; 197
    2888:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    288c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi0_state>
            break;
    2890:	04 c0       	rjmp	.+8      	; 0x289a <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    2892:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_error>
            twi0_stop();
    2896:	0e 94 21 13 	call	0x2642	; 0x2642 <twi0_stop>
            break;
    }
}
    289a:	ff 91       	pop	r31
    289c:	ef 91       	pop	r30
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	0f 90       	pop	r0
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	0f 90       	pop	r0
    28b8:	1f 90       	pop	r1
    28ba:	18 95       	reti

000028bc <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    28bc:	08 95       	ret

000028be <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    28be:	08 95       	ret

000028c0 <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    28c0:	2d e7       	ldi	r18, 0x7D	; 125
    28c2:	32 e0       	ldi	r19, 0x02	; 2
    28c4:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <twi1_rxBuffer+0x1>
    28c8:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    28cc:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    twi1_sendStop = 1;		// default value
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <twi1_sendStop>
    twi1_inRepStart = 0;
    28d6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    28da:	88 23       	and	r24, r24
    28dc:	21 f0       	breq	.+8      	; 0x28e6 <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    28de:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    28e0:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    28e2:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    28e4:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    28e6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    28ea:	8e 7f       	andi	r24, 0xFE	; 254
    28ec:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    28f0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    28f4:	8d 7f       	andi	r24, 0xFD	; 253
    28f6:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    28fa:	84 e3       	ldi	r24, 0x34	; 52
    28fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    2900:	85 e4       	ldi	r24, 0x45	; 69
    2902:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2906:	08 95       	ret

00002908 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    2908:	88 0f       	add	r24, r24
    290a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    290e:	08 95       	ret

00002910 <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    2910:	61 32       	cpi	r22, 0x21	; 33
    2912:	98 f4       	brcc	.+38     	; 0x293a <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    2914:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <twi1_state>
    2918:	24 30       	cpi	r18, 0x04	; 4
    291a:	89 f4       	brne	.+34     	; 0x293e <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    291c:	60 93 9d 02 	sts	0x029D, r22	; 0x80029d <twi1_txBufferLength>
    2920:	28 2f       	mov	r18, r24
    2922:	af e9       	ldi	r26, 0x9F	; 159
    2924:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    2926:	fc 01       	movw	r30, r24
    2928:	8e 2f       	mov	r24, r30
    292a:	82 1b       	sub	r24, r18
    292c:	86 17       	cp	r24, r22
    292e:	18 f4       	brcc	.+6      	; 0x2936 <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    2930:	81 91       	ld	r24, Z+
    2932:	8d 93       	st	X+, r24
    2934:	f9 cf       	rjmp	.-14     	; 0x2928 <twi1_transmit+0x18>
    }
  
    return 0;
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    293e:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    2940:	08 95       	ret

00002942 <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    2942:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    2946:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    294a:	08 95       	ret

0000294c <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    294c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2950:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    2954:	08 95       	ret

00002956 <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    2956:	85 ed       	ldi	r24, 0xD5	; 213
    2958:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    295c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2960:	84 fd       	sbrc	r24, 4
    2962:	fc cf       	rjmp	.-8      	; 0x295c <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    2964:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2968:	08 95       	ret

0000296a <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    296a:	85 ec       	ldi	r24, 0xC5	; 197
    296c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    2970:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
    2974:	08 95       	ret

00002976 <__vector_40>:
}

ISR(TWI1_vect)
{
    2976:	1f 92       	push	r1
    2978:	0f 92       	push	r0
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	0f 92       	push	r0
    297e:	11 24       	eor	r1, r1
    2980:	2f 93       	push	r18
    2982:	3f 93       	push	r19
    2984:	4f 93       	push	r20
    2986:	5f 93       	push	r21
    2988:	6f 93       	push	r22
    298a:	7f 93       	push	r23
    298c:	8f 93       	push	r24
    298e:	9f 93       	push	r25
    2990:	af 93       	push	r26
    2992:	bf 93       	push	r27
    2994:	ef 93       	push	r30
    2996:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    2998:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    299c:	88 7f       	andi	r24, 0xF8	; 248
    299e:	80 36       	cpi	r24, 0x60	; 96
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <__vector_40+0x2e>
    29a2:	9e c0       	rjmp	.+316    	; 0x2ae0 <__vector_40+0x16a>
    29a4:	78 f5       	brcc	.+94     	; 0x2a04 <__vector_40+0x8e>
    29a6:	88 32       	cpi	r24, 0x28	; 40
    29a8:	09 f4       	brne	.+2      	; 0x29ac <__vector_40+0x36>
    29aa:	5d c0       	rjmp	.+186    	; 0x2a66 <__vector_40+0xf0>
    29ac:	90 f4       	brcc	.+36     	; 0x29d2 <__vector_40+0x5c>
    29ae:	80 31       	cpi	r24, 0x10	; 16
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <__vector_40+0x3e>
    29b2:	56 c0       	rjmp	.+172    	; 0x2a60 <__vector_40+0xea>
    29b4:	38 f4       	brcc	.+14     	; 0x29c4 <__vector_40+0x4e>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f4       	brne	.+2      	; 0x29bc <__vector_40+0x46>
    29ba:	0a c1       	rjmp	.+532    	; 0x2bd0 <__vector_40+0x25a>
    29bc:	88 30       	cpi	r24, 0x08	; 8
    29be:	09 f4       	brne	.+2      	; 0x29c2 <__vector_40+0x4c>
    29c0:	4f c0       	rjmp	.+158    	; 0x2a60 <__vector_40+0xea>
    29c2:	0a c1       	rjmp	.+532    	; 0x2bd8 <__vector_40+0x262>
    29c4:	88 31       	cpi	r24, 0x18	; 24
    29c6:	09 f4       	brne	.+2      	; 0x29ca <__vector_40+0x54>
    29c8:	4e c0       	rjmp	.+156    	; 0x2a66 <__vector_40+0xf0>
    29ca:	80 32       	cpi	r24, 0x20	; 32
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <__vector_40+0x5a>
    29ce:	5f c0       	rjmp	.+190    	; 0x2a8e <__vector_40+0x118>
    29d0:	03 c1       	rjmp	.+518    	; 0x2bd8 <__vector_40+0x262>
    29d2:	80 34       	cpi	r24, 0x40	; 64
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <__vector_40+0x62>
    29d6:	6a c0       	rjmp	.+212    	; 0x2aac <__vector_40+0x136>
    29d8:	58 f4       	brcc	.+22     	; 0x29f0 <__vector_40+0x7a>
    29da:	80 33       	cpi	r24, 0x30	; 48
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <__vector_40+0x6a>
    29de:	57 c0       	rjmp	.+174    	; 0x2a8e <__vector_40+0x118>
    29e0:	88 33       	cpi	r24, 0x38	; 56
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <__vector_40+0x70>
    29e4:	f9 c0       	rjmp	.+498    	; 0x2bd8 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    29e6:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
            twi1_releaseBus();
    29ea:	0e 94 b5 14 	call	0x296a	; 0x296a <twi1_releaseBus>
            break;
    29ee:	f4 c0       	rjmp	.+488    	; 0x2bd8 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    29f0:	80 35       	cpi	r24, 0x50	; 80
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <__vector_40+0x80>
    29f4:	4f c0       	rjmp	.+158    	; 0x2a94 <__vector_40+0x11e>
    29f6:	88 35       	cpi	r24, 0x58	; 88
    29f8:	09 f4       	brne	.+2      	; 0x29fc <__vector_40+0x86>
    29fa:	5d c0       	rjmp	.+186    	; 0x2ab6 <__vector_40+0x140>
    29fc:	88 34       	cpi	r24, 0x48	; 72
    29fe:	09 f0       	breq	.+2      	; 0x2a02 <__vector_40+0x8c>
    2a00:	eb c0       	rjmp	.+470    	; 0x2bd8 <__vector_40+0x262>
    2a02:	e8 c0       	rjmp	.+464    	; 0x2bd4 <__vector_40+0x25e>
    2a04:	88 39       	cpi	r24, 0x98	; 152
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <__vector_40+0x94>
    2a08:	d9 c0       	rjmp	.+434    	; 0x2bbc <__vector_40+0x246>
    2a0a:	a8 f4       	brcc	.+42     	; 0x2a36 <__vector_40+0xc0>
    2a0c:	88 37       	cpi	r24, 0x78	; 120
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <__vector_40+0x9c>
    2a10:	67 c0       	rjmp	.+206    	; 0x2ae0 <__vector_40+0x16a>
    2a12:	38 f4       	brcc	.+14     	; 0x2a22 <__vector_40+0xac>
    2a14:	88 36       	cpi	r24, 0x68	; 104
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <__vector_40+0xa4>
    2a18:	63 c0       	rjmp	.+198    	; 0x2ae0 <__vector_40+0x16a>
    2a1a:	80 37       	cpi	r24, 0x70	; 112
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <__vector_40+0xaa>
    2a1e:	60 c0       	rjmp	.+192    	; 0x2ae0 <__vector_40+0x16a>
    2a20:	db c0       	rjmp	.+438    	; 0x2bd8 <__vector_40+0x262>
    2a22:	88 38       	cpi	r24, 0x88	; 136
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <__vector_40+0xb2>
    2a26:	ca c0       	rjmp	.+404    	; 0x2bbc <__vector_40+0x246>
    2a28:	80 39       	cpi	r24, 0x90	; 144
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <__vector_40+0xb8>
    2a2c:	5f c0       	rjmp	.+190    	; 0x2aec <__vector_40+0x176>
    2a2e:	80 38       	cpi	r24, 0x80	; 128
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <__vector_40+0xbe>
    2a32:	d2 c0       	rjmp	.+420    	; 0x2bd8 <__vector_40+0x262>
    2a34:	5b c0       	rjmp	.+182    	; 0x2aec <__vector_40+0x176>
    2a36:	80 3b       	cpi	r24, 0xB0	; 176
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <__vector_40+0xc6>
    2a3a:	98 c0       	rjmp	.+304    	; 0x2b6c <__vector_40+0x1f6>
    2a3c:	38 f4       	brcc	.+14     	; 0x2a4c <__vector_40+0xd6>
    2a3e:	80 3a       	cpi	r24, 0xA0	; 160
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <__vector_40+0xce>
    2a42:	69 c0       	rjmp	.+210    	; 0x2b16 <__vector_40+0x1a0>
    2a44:	88 3a       	cpi	r24, 0xA8	; 168
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <__vector_40+0xd4>
    2a48:	91 c0       	rjmp	.+290    	; 0x2b6c <__vector_40+0x1f6>
    2a4a:	c6 c0       	rjmp	.+396    	; 0x2bd8 <__vector_40+0x262>
    2a4c:	80 3c       	cpi	r24, 0xC0	; 192
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <__vector_40+0xdc>
    2a50:	b9 c0       	rjmp	.+370    	; 0x2bc4 <__vector_40+0x24e>
    2a52:	88 3c       	cpi	r24, 0xC8	; 200
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <__vector_40+0xe2>
    2a56:	b6 c0       	rjmp	.+364    	; 0x2bc4 <__vector_40+0x24e>
    2a58:	88 3b       	cpi	r24, 0xB8	; 184
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <__vector_40+0xe8>
    2a5c:	9c c0       	rjmp	.+312    	; 0x2b96 <__vector_40+0x220>
    2a5e:	bc c0       	rjmp	.+376    	; 0x2bd8 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    2a60:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi1_slarw>
    2a64:	10 c0       	rjmp	.+32     	; 0x2a86 <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2a66:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2a6a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2a6e:	98 17       	cp	r25, r24
    2a70:	70 f5       	brcc	.+92     	; 0x2ace <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    2a72:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	8e 0f       	add	r24, r30
    2a7a:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	ef 53       	subi	r30, 0x3F	; 63
    2a82:	fd 4f       	sbci	r31, 0xFD	; 253
    2a84:	80 81       	ld	r24, Z
    2a86:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2a8a:	85 ec       	ldi	r24, 0xC5	; 197
    2a8c:	98 c0       	rjmp	.+304    	; 0x2bbe <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    2a8e:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi1_error>
    2a92:	a0 c0       	rjmp	.+320    	; 0x2bd4 <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2a94:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	8e 0f       	add	r24, r30
    2a9c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2aa0:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ef 53       	subi	r30, 0x3F	; 63
    2aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aaa:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    2aac:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2ab0:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <twi1_masterBufferLength>
    2ab4:	80 c0       	rjmp	.+256    	; 0x2bb6 <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    2ab6:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <twi1_masterBufferIndex>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	8e 0f       	add	r24, r30
    2abe:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi1_masterBufferIndex>
    2ac2:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	ef 53       	subi	r30, 0x3F	; 63
    2aca:	fd 4f       	sbci	r31, 0xFD	; 253
    2acc:	80 83       	st	Z, r24
            if (twi1_sendStop)
    2ace:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_sendStop>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	7f c0       	rjmp	.+254    	; 0x2bd4 <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    2adc:	84 ea       	ldi	r24, 0xA4	; 164
    2ade:	73 c0       	rjmp	.+230    	; 0x2bc6 <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    2ae0:	83 e0       	ldi	r24, 0x03	; 3
    2ae2:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    2ae6:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
    2aea:	cf cf       	rjmp	.-98     	; 0x2a8a <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2aec:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2af0:	80 32       	cpi	r24, 0x20	; 32
    2af2:	08 f0       	brcs	.+2      	; 0x2af6 <__vector_40+0x180>
    2af4:	63 c0       	rjmp	.+198    	; 0x2bbc <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    2af6:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <twi1_rxBuffer>
    2afa:	f0 91 5c 02 	lds	r31, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2afe:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2b02:	91 e0       	ldi	r25, 0x01	; 1
    2b04:	98 0f       	add	r25, r24
    2b06:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi1_rxBufferIndex>
    2b0a:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    2b0e:	e8 0f       	add	r30, r24
    2b10:	f1 1d       	adc	r31, r1
    2b12:	90 83       	st	Z, r25
    2b14:	ba cf       	rjmp	.-140    	; 0x2a8a <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    2b16:	0e 94 b5 14 	call	0x296a	; 0x296a <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    2b1a:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2b1e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2b22:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2b26:	20 32       	cpi	r18, 0x20	; 32
    2b28:	30 f4       	brcc	.+12     	; 0x2b36 <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    2b2a:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2b2e:	fc 01       	movw	r30, r24
    2b30:	e2 0f       	add	r30, r18
    2b32:	f1 1d       	adc	r31, r1
    2b34:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    2b36:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <twi1_rxBufferIndex>
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    2b40:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    2b44:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    2b46:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi1_rxBuffer>
    2b4a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi1_rxBuffer+0x1>
    2b4e:	8d 57       	subi	r24, 0x7D	; 125
    2b50:	92 40       	sbci	r25, 0x02	; 2
    2b52:	19 f4       	brne	.+6      	; 0x2b5a <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    2b54:	8d e5       	ldi	r24, 0x5D	; 93
    2b56:	92 e0       	ldi	r25, 0x02	; 2
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    2b5a:	8d e7       	ldi	r24, 0x7D	; 125
    2b5c:	92 e0       	ldi	r25, 0x02	; 2
    2b5e:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <twi1_rxBuffer+0x1>
    2b62:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    2b66:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <twi1_rxBufferIndex>
            break;
    2b6a:	36 c0       	rjmp	.+108    	; 0x2bd8 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    2b72:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    2b76:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    2b7a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    2b7e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    2b82:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    2b84:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2b88:	81 11       	cpse	r24, r1
    2b8a:	05 c0       	rjmp	.+10     	; 0x2b96 <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    2b92:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    2b96:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	8e 0f       	add	r24, r30
    2b9e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi1_txBufferIndex>
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	e1 56       	subi	r30, 0x61	; 97
    2ba6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    2bae:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <twi1_txBufferIndex>
    2bb2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <twi1_txBufferLength>
    2bb6:	98 17       	cp	r25, r24
    2bb8:	08 f4       	brcc	.+2      	; 0x2bbc <__vector_40+0x246>
    2bba:	67 cf       	rjmp	.-306    	; 0x2a8a <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    2bbc:	85 e8       	ldi	r24, 0x85	; 133
    2bbe:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    2bc2:	0a c0       	rjmp	.+20     	; 0x2bd8 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    2bc4:	85 ec       	ldi	r24, 0xC5	; 197
    2bc6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    2bca:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi1_state>
            break;
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    2bd0:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_error>
            twi1_stop();
    2bd4:	0e 94 ab 14 	call	0x2956	; 0x2956 <twi1_stop>
            break;
    }
}
    2bd8:	ff 91       	pop	r31
    2bda:	ef 91       	pop	r30
    2bdc:	bf 91       	pop	r27
    2bde:	af 91       	pop	r26
    2be0:	9f 91       	pop	r25
    2be2:	8f 91       	pop	r24
    2be4:	7f 91       	pop	r23
    2be6:	6f 91       	pop	r22
    2be8:	5f 91       	pop	r21
    2bea:	4f 91       	pop	r20
    2bec:	3f 91       	pop	r19
    2bee:	2f 91       	pop	r18
    2bf0:	0f 90       	pop	r0
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	0f 90       	pop	r0
    2bf6:	1f 90       	pop	r1
    2bf8:	18 95       	reti

00002bfa <__divmodhi4>:
    2bfa:	97 fb       	bst	r25, 7
    2bfc:	07 2e       	mov	r0, r23
    2bfe:	16 f4       	brtc	.+4      	; 0x2c04 <__divmodhi4+0xa>
    2c00:	00 94       	com	r0
    2c02:	07 d0       	rcall	.+14     	; 0x2c12 <__divmodhi4_neg1>
    2c04:	77 fd       	sbrc	r23, 7
    2c06:	09 d0       	rcall	.+18     	; 0x2c1a <__divmodhi4_neg2>
    2c08:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__udivmodhi4>
    2c0c:	07 fc       	sbrc	r0, 7
    2c0e:	05 d0       	rcall	.+10     	; 0x2c1a <__divmodhi4_neg2>
    2c10:	3e f4       	brtc	.+14     	; 0x2c20 <__divmodhi4_exit>

00002c12 <__divmodhi4_neg1>:
    2c12:	90 95       	com	r25
    2c14:	81 95       	neg	r24
    2c16:	9f 4f       	sbci	r25, 0xFF	; 255
    2c18:	08 95       	ret

00002c1a <__divmodhi4_neg2>:
    2c1a:	70 95       	com	r23
    2c1c:	61 95       	neg	r22
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255

00002c20 <__divmodhi4_exit>:
    2c20:	08 95       	ret

00002c22 <__udivmodsi4>:
    2c22:	a1 e2       	ldi	r26, 0x21	; 33
    2c24:	1a 2e       	mov	r1, r26
    2c26:	aa 1b       	sub	r26, r26
    2c28:	bb 1b       	sub	r27, r27
    2c2a:	fd 01       	movw	r30, r26
    2c2c:	0d c0       	rjmp	.+26     	; 0x2c48 <__udivmodsi4_ep>

00002c2e <__udivmodsi4_loop>:
    2c2e:	aa 1f       	adc	r26, r26
    2c30:	bb 1f       	adc	r27, r27
    2c32:	ee 1f       	adc	r30, r30
    2c34:	ff 1f       	adc	r31, r31
    2c36:	a2 17       	cp	r26, r18
    2c38:	b3 07       	cpc	r27, r19
    2c3a:	e4 07       	cpc	r30, r20
    2c3c:	f5 07       	cpc	r31, r21
    2c3e:	20 f0       	brcs	.+8      	; 0x2c48 <__udivmodsi4_ep>
    2c40:	a2 1b       	sub	r26, r18
    2c42:	b3 0b       	sbc	r27, r19
    2c44:	e4 0b       	sbc	r30, r20
    2c46:	f5 0b       	sbc	r31, r21

00002c48 <__udivmodsi4_ep>:
    2c48:	66 1f       	adc	r22, r22
    2c4a:	77 1f       	adc	r23, r23
    2c4c:	88 1f       	adc	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	1a 94       	dec	r1
    2c52:	69 f7       	brne	.-38     	; 0x2c2e <__udivmodsi4_loop>
    2c54:	60 95       	com	r22
    2c56:	70 95       	com	r23
    2c58:	80 95       	com	r24
    2c5a:	90 95       	com	r25
    2c5c:	9b 01       	movw	r18, r22
    2c5e:	ac 01       	movw	r20, r24
    2c60:	bd 01       	movw	r22, r26
    2c62:	cf 01       	movw	r24, r30
    2c64:	08 95       	ret

00002c66 <__udivmodhi4>:
    2c66:	aa 1b       	sub	r26, r26
    2c68:	bb 1b       	sub	r27, r27
    2c6a:	51 e1       	ldi	r21, 0x11	; 17
    2c6c:	07 c0       	rjmp	.+14     	; 0x2c7c <__udivmodhi4_ep>

00002c6e <__udivmodhi4_loop>:
    2c6e:	aa 1f       	adc	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	a6 17       	cp	r26, r22
    2c74:	b7 07       	cpc	r27, r23
    2c76:	10 f0       	brcs	.+4      	; 0x2c7c <__udivmodhi4_ep>
    2c78:	a6 1b       	sub	r26, r22
    2c7a:	b7 0b       	sbc	r27, r23

00002c7c <__udivmodhi4_ep>:
    2c7c:	88 1f       	adc	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	5a 95       	dec	r21
    2c82:	a9 f7       	brne	.-22     	; 0x2c6e <__udivmodhi4_loop>
    2c84:	80 95       	com	r24
    2c86:	90 95       	com	r25
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	08 95       	ret

00002c8e <fgetc>:
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	ec 01       	movw	r28, r24
    2c94:	2b 81       	ldd	r18, Y+3	; 0x03
    2c96:	20 ff       	sbrs	r18, 0
    2c98:	33 c0       	rjmp	.+102    	; 0x2d00 <fgetc+0x72>
    2c9a:	26 ff       	sbrs	r18, 6
    2c9c:	0a c0       	rjmp	.+20     	; 0x2cb2 <fgetc+0x24>
    2c9e:	2f 7b       	andi	r18, 0xBF	; 191
    2ca0:	2b 83       	std	Y+3, r18	; 0x03
    2ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	9f 83       	std	Y+7, r25	; 0x07
    2caa:	8e 83       	std	Y+6, r24	; 0x06
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	29 c0       	rjmp	.+82     	; 0x2d04 <fgetc+0x76>
    2cb2:	22 ff       	sbrs	r18, 2
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <fgetc+0x46>
    2cb6:	e8 81       	ld	r30, Y
    2cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    2cba:	80 81       	ld	r24, Z
    2cbc:	08 2e       	mov	r0, r24
    2cbe:	00 0c       	add	r0, r0
    2cc0:	99 0b       	sbc	r25, r25
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	19 f4       	brne	.+6      	; 0x2ccc <fgetc+0x3e>
    2cc6:	20 62       	ori	r18, 0x20	; 32
    2cc8:	2b 83       	std	Y+3, r18	; 0x03
    2cca:	1a c0       	rjmp	.+52     	; 0x2d00 <fgetc+0x72>
    2ccc:	31 96       	adiw	r30, 0x01	; 1
    2cce:	f9 83       	std	Y+1, r31	; 0x01
    2cd0:	e8 83       	st	Y, r30
    2cd2:	0e c0       	rjmp	.+28     	; 0x2cf0 <fgetc+0x62>
    2cd4:	ea 85       	ldd	r30, Y+10	; 0x0a
    2cd6:	fb 85       	ldd	r31, Y+11	; 0x0b
    2cd8:	09 95       	icall
    2cda:	97 ff       	sbrs	r25, 7
    2cdc:	09 c0       	rjmp	.+18     	; 0x2cf0 <fgetc+0x62>
    2cde:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce0:	01 96       	adiw	r24, 0x01	; 1
    2ce2:	11 f0       	breq	.+4      	; 0x2ce8 <fgetc+0x5a>
    2ce4:	80 e2       	ldi	r24, 0x20	; 32
    2ce6:	01 c0       	rjmp	.+2      	; 0x2cea <fgetc+0x5c>
    2ce8:	80 e1       	ldi	r24, 0x10	; 16
    2cea:	82 2b       	or	r24, r18
    2cec:	8b 83       	std	Y+3, r24	; 0x03
    2cee:	08 c0       	rjmp	.+16     	; 0x2d00 <fgetc+0x72>
    2cf0:	2e 81       	ldd	r18, Y+6	; 0x06
    2cf2:	3f 81       	ldd	r19, Y+7	; 0x07
    2cf4:	2f 5f       	subi	r18, 0xFF	; 255
    2cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf8:	3f 83       	std	Y+7, r19	; 0x07
    2cfa:	2e 83       	std	Y+6, r18	; 0x06
    2cfc:	99 27       	eor	r25, r25
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <fgetc+0x76>
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	9f ef       	ldi	r25, 0xFF	; 255
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <printf>:
    2d0a:	a0 e0       	ldi	r26, 0x00	; 0
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	eb e8       	ldi	r30, 0x8B	; 139
    2d10:	f6 e1       	ldi	r31, 0x16	; 22
    2d12:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x20>
    2d16:	ae 01       	movw	r20, r28
    2d18:	4b 5f       	subi	r20, 0xFB	; 251
    2d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1c:	fa 01       	movw	r30, r20
    2d1e:	61 91       	ld	r22, Z+
    2d20:	71 91       	ld	r23, Z+
    2d22:	af 01       	movw	r20, r30
    2d24:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <__iob+0x2>
    2d28:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <__iob+0x3>
    2d2c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <vfprintf>
    2d30:	e2 e0       	ldi	r30, 0x02	; 2
    2d32:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x20>

00002d36 <vfprintf>:
    2d36:	ab e0       	ldi	r26, 0x0B	; 11
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e1 ea       	ldi	r30, 0xA1	; 161
    2d3c:	f6 e1       	ldi	r31, 0x16	; 22
    2d3e:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__>
    2d42:	6c 01       	movw	r12, r24
    2d44:	7b 01       	movw	r14, r22
    2d46:	8a 01       	movw	r16, r20
    2d48:	fc 01       	movw	r30, r24
    2d4a:	17 82       	std	Z+7, r1	; 0x07
    2d4c:	16 82       	std	Z+6, r1	; 0x06
    2d4e:	83 81       	ldd	r24, Z+3	; 0x03
    2d50:	81 ff       	sbrs	r24, 1
    2d52:	cc c1       	rjmp	.+920    	; 0x30ec <vfprintf+0x3b6>
    2d54:	ce 01       	movw	r24, r28
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	3c 01       	movw	r6, r24
    2d5a:	f6 01       	movw	r30, r12
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	f7 01       	movw	r30, r14
    2d60:	93 fd       	sbrc	r25, 3
    2d62:	85 91       	lpm	r24, Z+
    2d64:	93 ff       	sbrs	r25, 3
    2d66:	81 91       	ld	r24, Z+
    2d68:	7f 01       	movw	r14, r30
    2d6a:	88 23       	and	r24, r24
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <vfprintf+0x3a>
    2d6e:	ba c1       	rjmp	.+884    	; 0x30e4 <vfprintf+0x3ae>
    2d70:	85 32       	cpi	r24, 0x25	; 37
    2d72:	39 f4       	brne	.+14     	; 0x2d82 <vfprintf+0x4c>
    2d74:	93 fd       	sbrc	r25, 3
    2d76:	85 91       	lpm	r24, Z+
    2d78:	93 ff       	sbrs	r25, 3
    2d7a:	81 91       	ld	r24, Z+
    2d7c:	7f 01       	movw	r14, r30
    2d7e:	85 32       	cpi	r24, 0x25	; 37
    2d80:	29 f4       	brne	.+10     	; 0x2d8c <vfprintf+0x56>
    2d82:	b6 01       	movw	r22, r12
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    2d8a:	e7 cf       	rjmp	.-50     	; 0x2d5a <vfprintf+0x24>
    2d8c:	91 2c       	mov	r9, r1
    2d8e:	21 2c       	mov	r2, r1
    2d90:	31 2c       	mov	r3, r1
    2d92:	ff e1       	ldi	r31, 0x1F	; 31
    2d94:	f3 15       	cp	r31, r3
    2d96:	d8 f0       	brcs	.+54     	; 0x2dce <vfprintf+0x98>
    2d98:	8b 32       	cpi	r24, 0x2B	; 43
    2d9a:	79 f0       	breq	.+30     	; 0x2dba <vfprintf+0x84>
    2d9c:	38 f4       	brcc	.+14     	; 0x2dac <vfprintf+0x76>
    2d9e:	80 32       	cpi	r24, 0x20	; 32
    2da0:	79 f0       	breq	.+30     	; 0x2dc0 <vfprintf+0x8a>
    2da2:	83 32       	cpi	r24, 0x23	; 35
    2da4:	a1 f4       	brne	.+40     	; 0x2dce <vfprintf+0x98>
    2da6:	23 2d       	mov	r18, r3
    2da8:	20 61       	ori	r18, 0x10	; 16
    2daa:	1d c0       	rjmp	.+58     	; 0x2de6 <vfprintf+0xb0>
    2dac:	8d 32       	cpi	r24, 0x2D	; 45
    2dae:	61 f0       	breq	.+24     	; 0x2dc8 <vfprintf+0x92>
    2db0:	80 33       	cpi	r24, 0x30	; 48
    2db2:	69 f4       	brne	.+26     	; 0x2dce <vfprintf+0x98>
    2db4:	23 2d       	mov	r18, r3
    2db6:	21 60       	ori	r18, 0x01	; 1
    2db8:	16 c0       	rjmp	.+44     	; 0x2de6 <vfprintf+0xb0>
    2dba:	83 2d       	mov	r24, r3
    2dbc:	82 60       	ori	r24, 0x02	; 2
    2dbe:	38 2e       	mov	r3, r24
    2dc0:	e3 2d       	mov	r30, r3
    2dc2:	e4 60       	ori	r30, 0x04	; 4
    2dc4:	3e 2e       	mov	r3, r30
    2dc6:	2a c0       	rjmp	.+84     	; 0x2e1c <vfprintf+0xe6>
    2dc8:	f3 2d       	mov	r31, r3
    2dca:	f8 60       	ori	r31, 0x08	; 8
    2dcc:	1d c0       	rjmp	.+58     	; 0x2e08 <vfprintf+0xd2>
    2dce:	37 fc       	sbrc	r3, 7
    2dd0:	2d c0       	rjmp	.+90     	; 0x2e2c <vfprintf+0xf6>
    2dd2:	20 ed       	ldi	r18, 0xD0	; 208
    2dd4:	28 0f       	add	r18, r24
    2dd6:	2a 30       	cpi	r18, 0x0A	; 10
    2dd8:	40 f0       	brcs	.+16     	; 0x2dea <vfprintf+0xb4>
    2dda:	8e 32       	cpi	r24, 0x2E	; 46
    2ddc:	b9 f4       	brne	.+46     	; 0x2e0c <vfprintf+0xd6>
    2dde:	36 fc       	sbrc	r3, 6
    2de0:	81 c1       	rjmp	.+770    	; 0x30e4 <vfprintf+0x3ae>
    2de2:	23 2d       	mov	r18, r3
    2de4:	20 64       	ori	r18, 0x40	; 64
    2de6:	32 2e       	mov	r3, r18
    2de8:	19 c0       	rjmp	.+50     	; 0x2e1c <vfprintf+0xe6>
    2dea:	36 fe       	sbrs	r3, 6
    2dec:	06 c0       	rjmp	.+12     	; 0x2dfa <vfprintf+0xc4>
    2dee:	8a e0       	ldi	r24, 0x0A	; 10
    2df0:	98 9e       	mul	r9, r24
    2df2:	20 0d       	add	r18, r0
    2df4:	11 24       	eor	r1, r1
    2df6:	92 2e       	mov	r9, r18
    2df8:	11 c0       	rjmp	.+34     	; 0x2e1c <vfprintf+0xe6>
    2dfa:	ea e0       	ldi	r30, 0x0A	; 10
    2dfc:	2e 9e       	mul	r2, r30
    2dfe:	20 0d       	add	r18, r0
    2e00:	11 24       	eor	r1, r1
    2e02:	22 2e       	mov	r2, r18
    2e04:	f3 2d       	mov	r31, r3
    2e06:	f0 62       	ori	r31, 0x20	; 32
    2e08:	3f 2e       	mov	r3, r31
    2e0a:	08 c0       	rjmp	.+16     	; 0x2e1c <vfprintf+0xe6>
    2e0c:	8c 36       	cpi	r24, 0x6C	; 108
    2e0e:	21 f4       	brne	.+8      	; 0x2e18 <vfprintf+0xe2>
    2e10:	83 2d       	mov	r24, r3
    2e12:	80 68       	ori	r24, 0x80	; 128
    2e14:	38 2e       	mov	r3, r24
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <vfprintf+0xe6>
    2e18:	88 36       	cpi	r24, 0x68	; 104
    2e1a:	41 f4       	brne	.+16     	; 0x2e2c <vfprintf+0xf6>
    2e1c:	f7 01       	movw	r30, r14
    2e1e:	93 fd       	sbrc	r25, 3
    2e20:	85 91       	lpm	r24, Z+
    2e22:	93 ff       	sbrs	r25, 3
    2e24:	81 91       	ld	r24, Z+
    2e26:	7f 01       	movw	r14, r30
    2e28:	81 11       	cpse	r24, r1
    2e2a:	b3 cf       	rjmp	.-154    	; 0x2d92 <vfprintf+0x5c>
    2e2c:	98 2f       	mov	r25, r24
    2e2e:	9f 7d       	andi	r25, 0xDF	; 223
    2e30:	95 54       	subi	r25, 0x45	; 69
    2e32:	93 30       	cpi	r25, 0x03	; 3
    2e34:	28 f4       	brcc	.+10     	; 0x2e40 <vfprintf+0x10a>
    2e36:	0c 5f       	subi	r16, 0xFC	; 252
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	9f e3       	ldi	r25, 0x3F	; 63
    2e3c:	99 83       	std	Y+1, r25	; 0x01
    2e3e:	0d c0       	rjmp	.+26     	; 0x2e5a <vfprintf+0x124>
    2e40:	83 36       	cpi	r24, 0x63	; 99
    2e42:	31 f0       	breq	.+12     	; 0x2e50 <vfprintf+0x11a>
    2e44:	83 37       	cpi	r24, 0x73	; 115
    2e46:	71 f0       	breq	.+28     	; 0x2e64 <vfprintf+0x12e>
    2e48:	83 35       	cpi	r24, 0x53	; 83
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <vfprintf+0x118>
    2e4c:	59 c0       	rjmp	.+178    	; 0x2f00 <vfprintf+0x1ca>
    2e4e:	21 c0       	rjmp	.+66     	; 0x2e92 <vfprintf+0x15c>
    2e50:	f8 01       	movw	r30, r16
    2e52:	80 81       	ld	r24, Z
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	0e 5f       	subi	r16, 0xFE	; 254
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	88 24       	eor	r8, r8
    2e5c:	83 94       	inc	r8
    2e5e:	91 2c       	mov	r9, r1
    2e60:	53 01       	movw	r10, r6
    2e62:	13 c0       	rjmp	.+38     	; 0x2e8a <vfprintf+0x154>
    2e64:	28 01       	movw	r4, r16
    2e66:	f2 e0       	ldi	r31, 0x02	; 2
    2e68:	4f 0e       	add	r4, r31
    2e6a:	51 1c       	adc	r5, r1
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	a0 80       	ld	r10, Z
    2e70:	b1 80       	ldd	r11, Z+1	; 0x01
    2e72:	36 fe       	sbrs	r3, 6
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <vfprintf+0x146>
    2e76:	69 2d       	mov	r22, r9
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <vfprintf+0x14a>
    2e7c:	6f ef       	ldi	r22, 0xFF	; 255
    2e7e:	7f ef       	ldi	r23, 0xFF	; 255
    2e80:	c5 01       	movw	r24, r10
    2e82:	0e 94 87 18 	call	0x310e	; 0x310e <strnlen>
    2e86:	4c 01       	movw	r8, r24
    2e88:	82 01       	movw	r16, r4
    2e8a:	f3 2d       	mov	r31, r3
    2e8c:	ff 77       	andi	r31, 0x7F	; 127
    2e8e:	3f 2e       	mov	r3, r31
    2e90:	16 c0       	rjmp	.+44     	; 0x2ebe <vfprintf+0x188>
    2e92:	28 01       	movw	r4, r16
    2e94:	22 e0       	ldi	r18, 0x02	; 2
    2e96:	42 0e       	add	r4, r18
    2e98:	51 1c       	adc	r5, r1
    2e9a:	f8 01       	movw	r30, r16
    2e9c:	a0 80       	ld	r10, Z
    2e9e:	b1 80       	ldd	r11, Z+1	; 0x01
    2ea0:	36 fe       	sbrs	r3, 6
    2ea2:	03 c0       	rjmp	.+6      	; 0x2eaa <vfprintf+0x174>
    2ea4:	69 2d       	mov	r22, r9
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <vfprintf+0x178>
    2eaa:	6f ef       	ldi	r22, 0xFF	; 255
    2eac:	7f ef       	ldi	r23, 0xFF	; 255
    2eae:	c5 01       	movw	r24, r10
    2eb0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <strnlen_P>
    2eb4:	4c 01       	movw	r8, r24
    2eb6:	f3 2d       	mov	r31, r3
    2eb8:	f0 68       	ori	r31, 0x80	; 128
    2eba:	3f 2e       	mov	r3, r31
    2ebc:	82 01       	movw	r16, r4
    2ebe:	33 fc       	sbrc	r3, 3
    2ec0:	1b c0       	rjmp	.+54     	; 0x2ef8 <vfprintf+0x1c2>
    2ec2:	82 2d       	mov	r24, r2
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	88 16       	cp	r8, r24
    2ec8:	99 06       	cpc	r9, r25
    2eca:	b0 f4       	brcc	.+44     	; 0x2ef8 <vfprintf+0x1c2>
    2ecc:	b6 01       	movw	r22, r12
    2ece:	80 e2       	ldi	r24, 0x20	; 32
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    2ed6:	2a 94       	dec	r2
    2ed8:	f4 cf       	rjmp	.-24     	; 0x2ec2 <vfprintf+0x18c>
    2eda:	f5 01       	movw	r30, r10
    2edc:	37 fc       	sbrc	r3, 7
    2ede:	85 91       	lpm	r24, Z+
    2ee0:	37 fe       	sbrs	r3, 7
    2ee2:	81 91       	ld	r24, Z+
    2ee4:	5f 01       	movw	r10, r30
    2ee6:	b6 01       	movw	r22, r12
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    2eee:	21 10       	cpse	r2, r1
    2ef0:	2a 94       	dec	r2
    2ef2:	21 e0       	ldi	r18, 0x01	; 1
    2ef4:	82 1a       	sub	r8, r18
    2ef6:	91 08       	sbc	r9, r1
    2ef8:	81 14       	cp	r8, r1
    2efa:	91 04       	cpc	r9, r1
    2efc:	71 f7       	brne	.-36     	; 0x2eda <vfprintf+0x1a4>
    2efe:	e8 c0       	rjmp	.+464    	; 0x30d0 <vfprintf+0x39a>
    2f00:	84 36       	cpi	r24, 0x64	; 100
    2f02:	11 f0       	breq	.+4      	; 0x2f08 <vfprintf+0x1d2>
    2f04:	89 36       	cpi	r24, 0x69	; 105
    2f06:	41 f5       	brne	.+80     	; 0x2f58 <vfprintf+0x222>
    2f08:	f8 01       	movw	r30, r16
    2f0a:	37 fe       	sbrs	r3, 7
    2f0c:	07 c0       	rjmp	.+14     	; 0x2f1c <vfprintf+0x1e6>
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	0c 5f       	subi	r16, 0xFC	; 252
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	08 c0       	rjmp	.+16     	; 0x2f2c <vfprintf+0x1f6>
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	07 2e       	mov	r0, r23
    2f22:	00 0c       	add	r0, r0
    2f24:	88 0b       	sbc	r24, r24
    2f26:	99 0b       	sbc	r25, r25
    2f28:	0e 5f       	subi	r16, 0xFE	; 254
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	f3 2d       	mov	r31, r3
    2f2e:	ff 76       	andi	r31, 0x6F	; 111
    2f30:	3f 2e       	mov	r3, r31
    2f32:	97 ff       	sbrs	r25, 7
    2f34:	09 c0       	rjmp	.+18     	; 0x2f48 <vfprintf+0x212>
    2f36:	90 95       	com	r25
    2f38:	80 95       	com	r24
    2f3a:	70 95       	com	r23
    2f3c:	61 95       	neg	r22
    2f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f40:	8f 4f       	sbci	r24, 0xFF	; 255
    2f42:	9f 4f       	sbci	r25, 0xFF	; 255
    2f44:	f0 68       	ori	r31, 0x80	; 128
    2f46:	3f 2e       	mov	r3, r31
    2f48:	2a e0       	ldi	r18, 0x0A	; 10
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	a3 01       	movw	r20, r6
    2f4e:	0e 94 ce 18 	call	0x319c	; 0x319c <__ultoa_invert>
    2f52:	88 2e       	mov	r8, r24
    2f54:	86 18       	sub	r8, r6
    2f56:	45 c0       	rjmp	.+138    	; 0x2fe2 <vfprintf+0x2ac>
    2f58:	85 37       	cpi	r24, 0x75	; 117
    2f5a:	31 f4       	brne	.+12     	; 0x2f68 <vfprintf+0x232>
    2f5c:	23 2d       	mov	r18, r3
    2f5e:	2f 7e       	andi	r18, 0xEF	; 239
    2f60:	b2 2e       	mov	r11, r18
    2f62:	2a e0       	ldi	r18, 0x0A	; 10
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	25 c0       	rjmp	.+74     	; 0x2fb2 <vfprintf+0x27c>
    2f68:	93 2d       	mov	r25, r3
    2f6a:	99 7f       	andi	r25, 0xF9	; 249
    2f6c:	b9 2e       	mov	r11, r25
    2f6e:	8f 36       	cpi	r24, 0x6F	; 111
    2f70:	c1 f0       	breq	.+48     	; 0x2fa2 <vfprintf+0x26c>
    2f72:	18 f4       	brcc	.+6      	; 0x2f7a <vfprintf+0x244>
    2f74:	88 35       	cpi	r24, 0x58	; 88
    2f76:	79 f0       	breq	.+30     	; 0x2f96 <vfprintf+0x260>
    2f78:	b5 c0       	rjmp	.+362    	; 0x30e4 <vfprintf+0x3ae>
    2f7a:	80 37       	cpi	r24, 0x70	; 112
    2f7c:	19 f0       	breq	.+6      	; 0x2f84 <vfprintf+0x24e>
    2f7e:	88 37       	cpi	r24, 0x78	; 120
    2f80:	21 f0       	breq	.+8      	; 0x2f8a <vfprintf+0x254>
    2f82:	b0 c0       	rjmp	.+352    	; 0x30e4 <vfprintf+0x3ae>
    2f84:	e9 2f       	mov	r30, r25
    2f86:	e0 61       	ori	r30, 0x10	; 16
    2f88:	be 2e       	mov	r11, r30
    2f8a:	b4 fe       	sbrs	r11, 4
    2f8c:	0d c0       	rjmp	.+26     	; 0x2fa8 <vfprintf+0x272>
    2f8e:	fb 2d       	mov	r31, r11
    2f90:	f4 60       	ori	r31, 0x04	; 4
    2f92:	bf 2e       	mov	r11, r31
    2f94:	09 c0       	rjmp	.+18     	; 0x2fa8 <vfprintf+0x272>
    2f96:	34 fe       	sbrs	r3, 4
    2f98:	0a c0       	rjmp	.+20     	; 0x2fae <vfprintf+0x278>
    2f9a:	29 2f       	mov	r18, r25
    2f9c:	26 60       	ori	r18, 0x06	; 6
    2f9e:	b2 2e       	mov	r11, r18
    2fa0:	06 c0       	rjmp	.+12     	; 0x2fae <vfprintf+0x278>
    2fa2:	28 e0       	ldi	r18, 0x08	; 8
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	05 c0       	rjmp	.+10     	; 0x2fb2 <vfprintf+0x27c>
    2fa8:	20 e1       	ldi	r18, 0x10	; 16
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <vfprintf+0x27c>
    2fae:	20 e1       	ldi	r18, 0x10	; 16
    2fb0:	32 e0       	ldi	r19, 0x02	; 2
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	b7 fe       	sbrs	r11, 7
    2fb6:	07 c0       	rjmp	.+14     	; 0x2fc6 <vfprintf+0x290>
    2fb8:	60 81       	ld	r22, Z
    2fba:	71 81       	ldd	r23, Z+1	; 0x01
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	0c 5f       	subi	r16, 0xFC	; 252
    2fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc4:	06 c0       	rjmp	.+12     	; 0x2fd2 <vfprintf+0x29c>
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 5f       	subi	r16, 0xFE	; 254
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	a3 01       	movw	r20, r6
    2fd4:	0e 94 ce 18 	call	0x319c	; 0x319c <__ultoa_invert>
    2fd8:	88 2e       	mov	r8, r24
    2fda:	86 18       	sub	r8, r6
    2fdc:	fb 2d       	mov	r31, r11
    2fde:	ff 77       	andi	r31, 0x7F	; 127
    2fe0:	3f 2e       	mov	r3, r31
    2fe2:	36 fe       	sbrs	r3, 6
    2fe4:	0d c0       	rjmp	.+26     	; 0x3000 <vfprintf+0x2ca>
    2fe6:	23 2d       	mov	r18, r3
    2fe8:	2e 7f       	andi	r18, 0xFE	; 254
    2fea:	a2 2e       	mov	r10, r18
    2fec:	89 14       	cp	r8, r9
    2fee:	58 f4       	brcc	.+22     	; 0x3006 <vfprintf+0x2d0>
    2ff0:	34 fe       	sbrs	r3, 4
    2ff2:	0b c0       	rjmp	.+22     	; 0x300a <vfprintf+0x2d4>
    2ff4:	32 fc       	sbrc	r3, 2
    2ff6:	09 c0       	rjmp	.+18     	; 0x300a <vfprintf+0x2d4>
    2ff8:	83 2d       	mov	r24, r3
    2ffa:	8e 7e       	andi	r24, 0xEE	; 238
    2ffc:	a8 2e       	mov	r10, r24
    2ffe:	05 c0       	rjmp	.+10     	; 0x300a <vfprintf+0x2d4>
    3000:	b8 2c       	mov	r11, r8
    3002:	a3 2c       	mov	r10, r3
    3004:	03 c0       	rjmp	.+6      	; 0x300c <vfprintf+0x2d6>
    3006:	b8 2c       	mov	r11, r8
    3008:	01 c0       	rjmp	.+2      	; 0x300c <vfprintf+0x2d6>
    300a:	b9 2c       	mov	r11, r9
    300c:	a4 fe       	sbrs	r10, 4
    300e:	0f c0       	rjmp	.+30     	; 0x302e <vfprintf+0x2f8>
    3010:	fe 01       	movw	r30, r28
    3012:	e8 0d       	add	r30, r8
    3014:	f1 1d       	adc	r31, r1
    3016:	80 81       	ld	r24, Z
    3018:	80 33       	cpi	r24, 0x30	; 48
    301a:	21 f4       	brne	.+8      	; 0x3024 <vfprintf+0x2ee>
    301c:	9a 2d       	mov	r25, r10
    301e:	99 7e       	andi	r25, 0xE9	; 233
    3020:	a9 2e       	mov	r10, r25
    3022:	09 c0       	rjmp	.+18     	; 0x3036 <vfprintf+0x300>
    3024:	a2 fe       	sbrs	r10, 2
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <vfprintf+0x2fe>
    3028:	b3 94       	inc	r11
    302a:	b3 94       	inc	r11
    302c:	04 c0       	rjmp	.+8      	; 0x3036 <vfprintf+0x300>
    302e:	8a 2d       	mov	r24, r10
    3030:	86 78       	andi	r24, 0x86	; 134
    3032:	09 f0       	breq	.+2      	; 0x3036 <vfprintf+0x300>
    3034:	b3 94       	inc	r11
    3036:	a3 fc       	sbrc	r10, 3
    3038:	11 c0       	rjmp	.+34     	; 0x305c <vfprintf+0x326>
    303a:	a0 fe       	sbrs	r10, 0
    303c:	06 c0       	rjmp	.+12     	; 0x304a <vfprintf+0x314>
    303e:	b2 14       	cp	r11, r2
    3040:	88 f4       	brcc	.+34     	; 0x3064 <vfprintf+0x32e>
    3042:	28 0c       	add	r2, r8
    3044:	92 2c       	mov	r9, r2
    3046:	9b 18       	sub	r9, r11
    3048:	0e c0       	rjmp	.+28     	; 0x3066 <vfprintf+0x330>
    304a:	b2 14       	cp	r11, r2
    304c:	60 f4       	brcc	.+24     	; 0x3066 <vfprintf+0x330>
    304e:	b6 01       	movw	r22, r12
    3050:	80 e2       	ldi	r24, 0x20	; 32
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    3058:	b3 94       	inc	r11
    305a:	f7 cf       	rjmp	.-18     	; 0x304a <vfprintf+0x314>
    305c:	b2 14       	cp	r11, r2
    305e:	18 f4       	brcc	.+6      	; 0x3066 <vfprintf+0x330>
    3060:	2b 18       	sub	r2, r11
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <vfprintf+0x332>
    3064:	98 2c       	mov	r9, r8
    3066:	21 2c       	mov	r2, r1
    3068:	a4 fe       	sbrs	r10, 4
    306a:	10 c0       	rjmp	.+32     	; 0x308c <vfprintf+0x356>
    306c:	b6 01       	movw	r22, r12
    306e:	80 e3       	ldi	r24, 0x30	; 48
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    3076:	a2 fe       	sbrs	r10, 2
    3078:	17 c0       	rjmp	.+46     	; 0x30a8 <vfprintf+0x372>
    307a:	a1 fc       	sbrc	r10, 1
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <vfprintf+0x34e>
    307e:	88 e7       	ldi	r24, 0x78	; 120
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <vfprintf+0x352>
    3084:	88 e5       	ldi	r24, 0x58	; 88
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	b6 01       	movw	r22, r12
    308a:	0c c0       	rjmp	.+24     	; 0x30a4 <vfprintf+0x36e>
    308c:	8a 2d       	mov	r24, r10
    308e:	86 78       	andi	r24, 0x86	; 134
    3090:	59 f0       	breq	.+22     	; 0x30a8 <vfprintf+0x372>
    3092:	a1 fe       	sbrs	r10, 1
    3094:	02 c0       	rjmp	.+4      	; 0x309a <vfprintf+0x364>
    3096:	8b e2       	ldi	r24, 0x2B	; 43
    3098:	01 c0       	rjmp	.+2      	; 0x309c <vfprintf+0x366>
    309a:	80 e2       	ldi	r24, 0x20	; 32
    309c:	a7 fc       	sbrc	r10, 7
    309e:	8d e2       	ldi	r24, 0x2D	; 45
    30a0:	b6 01       	movw	r22, r12
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    30a8:	89 14       	cp	r8, r9
    30aa:	38 f4       	brcc	.+14     	; 0x30ba <vfprintf+0x384>
    30ac:	b6 01       	movw	r22, r12
    30ae:	80 e3       	ldi	r24, 0x30	; 48
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    30b6:	9a 94       	dec	r9
    30b8:	f7 cf       	rjmp	.-18     	; 0x30a8 <vfprintf+0x372>
    30ba:	8a 94       	dec	r8
    30bc:	f3 01       	movw	r30, r6
    30be:	e8 0d       	add	r30, r8
    30c0:	f1 1d       	adc	r31, r1
    30c2:	80 81       	ld	r24, Z
    30c4:	b6 01       	movw	r22, r12
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    30cc:	81 10       	cpse	r8, r1
    30ce:	f5 cf       	rjmp	.-22     	; 0x30ba <vfprintf+0x384>
    30d0:	22 20       	and	r2, r2
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <vfprintf+0x3a0>
    30d4:	42 ce       	rjmp	.-892    	; 0x2d5a <vfprintf+0x24>
    30d6:	b6 01       	movw	r22, r12
    30d8:	80 e2       	ldi	r24, 0x20	; 32
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 92 18 	call	0x3124	; 0x3124 <fputc>
    30e0:	2a 94       	dec	r2
    30e2:	f6 cf       	rjmp	.-20     	; 0x30d0 <vfprintf+0x39a>
    30e4:	f6 01       	movw	r30, r12
    30e6:	86 81       	ldd	r24, Z+6	; 0x06
    30e8:	97 81       	ldd	r25, Z+7	; 0x07
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <vfprintf+0x3ba>
    30ec:	8f ef       	ldi	r24, 0xFF	; 255
    30ee:	9f ef       	ldi	r25, 0xFF	; 255
    30f0:	2b 96       	adiw	r28, 0x0b	; 11
    30f2:	e2 e1       	ldi	r30, 0x12	; 18
    30f4:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__>

000030f8 <strnlen_P>:
    30f8:	fc 01       	movw	r30, r24
    30fa:	05 90       	lpm	r0, Z+
    30fc:	61 50       	subi	r22, 0x01	; 1
    30fe:	70 40       	sbci	r23, 0x00	; 0
    3100:	01 10       	cpse	r0, r1
    3102:	d8 f7       	brcc	.-10     	; 0x30fa <strnlen_P+0x2>
    3104:	80 95       	com	r24
    3106:	90 95       	com	r25
    3108:	8e 0f       	add	r24, r30
    310a:	9f 1f       	adc	r25, r31
    310c:	08 95       	ret

0000310e <strnlen>:
    310e:	fc 01       	movw	r30, r24
    3110:	61 50       	subi	r22, 0x01	; 1
    3112:	70 40       	sbci	r23, 0x00	; 0
    3114:	01 90       	ld	r0, Z+
    3116:	01 10       	cpse	r0, r1
    3118:	d8 f7       	brcc	.-10     	; 0x3110 <strnlen+0x2>
    311a:	80 95       	com	r24
    311c:	90 95       	com	r25
    311e:	8e 0f       	add	r24, r30
    3120:	9f 1f       	adc	r25, r31
    3122:	08 95       	ret

00003124 <fputc>:
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	fb 01       	movw	r30, r22
    312e:	23 81       	ldd	r18, Z+3	; 0x03
    3130:	21 fd       	sbrc	r18, 1
    3132:	03 c0       	rjmp	.+6      	; 0x313a <fputc+0x16>
    3134:	8f ef       	ldi	r24, 0xFF	; 255
    3136:	9f ef       	ldi	r25, 0xFF	; 255
    3138:	2c c0       	rjmp	.+88     	; 0x3192 <fputc+0x6e>
    313a:	22 ff       	sbrs	r18, 2
    313c:	16 c0       	rjmp	.+44     	; 0x316a <fputc+0x46>
    313e:	46 81       	ldd	r20, Z+6	; 0x06
    3140:	57 81       	ldd	r21, Z+7	; 0x07
    3142:	24 81       	ldd	r18, Z+4	; 0x04
    3144:	35 81       	ldd	r19, Z+5	; 0x05
    3146:	42 17       	cp	r20, r18
    3148:	53 07       	cpc	r21, r19
    314a:	44 f4       	brge	.+16     	; 0x315c <fputc+0x38>
    314c:	a0 81       	ld	r26, Z
    314e:	b1 81       	ldd	r27, Z+1	; 0x01
    3150:	9d 01       	movw	r18, r26
    3152:	2f 5f       	subi	r18, 0xFF	; 255
    3154:	3f 4f       	sbci	r19, 0xFF	; 255
    3156:	31 83       	std	Z+1, r19	; 0x01
    3158:	20 83       	st	Z, r18
    315a:	8c 93       	st	X, r24
    315c:	26 81       	ldd	r18, Z+6	; 0x06
    315e:	37 81       	ldd	r19, Z+7	; 0x07
    3160:	2f 5f       	subi	r18, 0xFF	; 255
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	37 83       	std	Z+7, r19	; 0x07
    3166:	26 83       	std	Z+6, r18	; 0x06
    3168:	14 c0       	rjmp	.+40     	; 0x3192 <fputc+0x6e>
    316a:	8b 01       	movw	r16, r22
    316c:	ec 01       	movw	r28, r24
    316e:	fb 01       	movw	r30, r22
    3170:	00 84       	ldd	r0, Z+8	; 0x08
    3172:	f1 85       	ldd	r31, Z+9	; 0x09
    3174:	e0 2d       	mov	r30, r0
    3176:	09 95       	icall
    3178:	89 2b       	or	r24, r25
    317a:	e1 f6       	brne	.-72     	; 0x3134 <fputc+0x10>
    317c:	d8 01       	movw	r26, r16
    317e:	16 96       	adiw	r26, 0x06	; 6
    3180:	8d 91       	ld	r24, X+
    3182:	9c 91       	ld	r25, X
    3184:	17 97       	sbiw	r26, 0x07	; 7
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	17 96       	adiw	r26, 0x07	; 7
    318a:	9c 93       	st	X, r25
    318c:	8e 93       	st	-X, r24
    318e:	16 97       	sbiw	r26, 0x06	; 6
    3190:	ce 01       	movw	r24, r28
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	08 95       	ret

0000319c <__ultoa_invert>:
    319c:	fa 01       	movw	r30, r20
    319e:	aa 27       	eor	r26, r26
    31a0:	28 30       	cpi	r18, 0x08	; 8
    31a2:	51 f1       	breq	.+84     	; 0x31f8 <__ultoa_invert+0x5c>
    31a4:	20 31       	cpi	r18, 0x10	; 16
    31a6:	81 f1       	breq	.+96     	; 0x3208 <__ultoa_invert+0x6c>
    31a8:	e8 94       	clt
    31aa:	6f 93       	push	r22
    31ac:	6e 7f       	andi	r22, 0xFE	; 254
    31ae:	6e 5f       	subi	r22, 0xFE	; 254
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	8f 4f       	sbci	r24, 0xFF	; 255
    31b4:	9f 4f       	sbci	r25, 0xFF	; 255
    31b6:	af 4f       	sbci	r26, 0xFF	; 255
    31b8:	b1 e0       	ldi	r27, 0x01	; 1
    31ba:	3e d0       	rcall	.+124    	; 0x3238 <__ultoa_invert+0x9c>
    31bc:	b4 e0       	ldi	r27, 0x04	; 4
    31be:	3c d0       	rcall	.+120    	; 0x3238 <__ultoa_invert+0x9c>
    31c0:	67 0f       	add	r22, r23
    31c2:	78 1f       	adc	r23, r24
    31c4:	89 1f       	adc	r24, r25
    31c6:	9a 1f       	adc	r25, r26
    31c8:	a1 1d       	adc	r26, r1
    31ca:	68 0f       	add	r22, r24
    31cc:	79 1f       	adc	r23, r25
    31ce:	8a 1f       	adc	r24, r26
    31d0:	91 1d       	adc	r25, r1
    31d2:	a1 1d       	adc	r26, r1
    31d4:	6a 0f       	add	r22, r26
    31d6:	71 1d       	adc	r23, r1
    31d8:	81 1d       	adc	r24, r1
    31da:	91 1d       	adc	r25, r1
    31dc:	a1 1d       	adc	r26, r1
    31de:	20 d0       	rcall	.+64     	; 0x3220 <__ultoa_invert+0x84>
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <__ultoa_invert+0x48>
    31e2:	68 94       	set
    31e4:	3f 91       	pop	r19
    31e6:	2a e0       	ldi	r18, 0x0A	; 10
    31e8:	26 9f       	mul	r18, r22
    31ea:	11 24       	eor	r1, r1
    31ec:	30 19       	sub	r19, r0
    31ee:	30 5d       	subi	r19, 0xD0	; 208
    31f0:	31 93       	st	Z+, r19
    31f2:	de f6       	brtc	.-74     	; 0x31aa <__ultoa_invert+0xe>
    31f4:	cf 01       	movw	r24, r30
    31f6:	08 95       	ret
    31f8:	46 2f       	mov	r20, r22
    31fa:	47 70       	andi	r20, 0x07	; 7
    31fc:	40 5d       	subi	r20, 0xD0	; 208
    31fe:	41 93       	st	Z+, r20
    3200:	b3 e0       	ldi	r27, 0x03	; 3
    3202:	0f d0       	rcall	.+30     	; 0x3222 <__ultoa_invert+0x86>
    3204:	c9 f7       	brne	.-14     	; 0x31f8 <__ultoa_invert+0x5c>
    3206:	f6 cf       	rjmp	.-20     	; 0x31f4 <__ultoa_invert+0x58>
    3208:	46 2f       	mov	r20, r22
    320a:	4f 70       	andi	r20, 0x0F	; 15
    320c:	40 5d       	subi	r20, 0xD0	; 208
    320e:	4a 33       	cpi	r20, 0x3A	; 58
    3210:	18 f0       	brcs	.+6      	; 0x3218 <__ultoa_invert+0x7c>
    3212:	49 5d       	subi	r20, 0xD9	; 217
    3214:	31 fd       	sbrc	r19, 1
    3216:	40 52       	subi	r20, 0x20	; 32
    3218:	41 93       	st	Z+, r20
    321a:	02 d0       	rcall	.+4      	; 0x3220 <__ultoa_invert+0x84>
    321c:	a9 f7       	brne	.-22     	; 0x3208 <__ultoa_invert+0x6c>
    321e:	ea cf       	rjmp	.-44     	; 0x31f4 <__ultoa_invert+0x58>
    3220:	b4 e0       	ldi	r27, 0x04	; 4
    3222:	a6 95       	lsr	r26
    3224:	97 95       	ror	r25
    3226:	87 95       	ror	r24
    3228:	77 95       	ror	r23
    322a:	67 95       	ror	r22
    322c:	ba 95       	dec	r27
    322e:	c9 f7       	brne	.-14     	; 0x3222 <__ultoa_invert+0x86>
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	61 05       	cpc	r22, r1
    3234:	71 05       	cpc	r23, r1
    3236:	08 95       	ret
    3238:	9b 01       	movw	r18, r22
    323a:	ac 01       	movw	r20, r24
    323c:	0a 2e       	mov	r0, r26
    323e:	06 94       	lsr	r0
    3240:	57 95       	ror	r21
    3242:	47 95       	ror	r20
    3244:	37 95       	ror	r19
    3246:	27 95       	ror	r18
    3248:	ba 95       	dec	r27
    324a:	c9 f7       	brne	.-14     	; 0x323e <__ultoa_invert+0xa2>
    324c:	62 0f       	add	r22, r18
    324e:	73 1f       	adc	r23, r19
    3250:	84 1f       	adc	r24, r20
    3252:	95 1f       	adc	r25, r21
    3254:	a0 1d       	adc	r26, r0
    3256:	08 95       	ret

00003258 <eeprom_read_byte>:
    3258:	f9 99       	sbic	0x1f, 1	; 31
    325a:	fe cf       	rjmp	.-4      	; 0x3258 <eeprom_read_byte>
    325c:	92 bd       	out	0x22, r25	; 34
    325e:	81 bd       	out	0x21, r24	; 33
    3260:	f8 9a       	sbi	0x1f, 0	; 31
    3262:	99 27       	eor	r25, r25
    3264:	80 b5       	in	r24, 0x20	; 32
    3266:	08 95       	ret

00003268 <eeprom_read_dword>:
    3268:	a6 e1       	ldi	r26, 0x16	; 22
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	44 e0       	ldi	r20, 0x04	; 4
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <eeprom_read_blraw>

00003274 <eeprom_read_word>:
    3274:	a8 e1       	ldi	r26, 0x18	; 24
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	42 e0       	ldi	r20, 0x02	; 2
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <eeprom_read_blraw>

00003280 <eeprom_write_byte>:
    3280:	26 2f       	mov	r18, r22

00003282 <eeprom_write_r18>:
    3282:	f9 99       	sbic	0x1f, 1	; 31
    3284:	fe cf       	rjmp	.-4      	; 0x3282 <eeprom_write_r18>
    3286:	1f ba       	out	0x1f, r1	; 31
    3288:	92 bd       	out	0x22, r25	; 34
    328a:	81 bd       	out	0x21, r24	; 33
    328c:	20 bd       	out	0x20, r18	; 32
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	fa 9a       	sbi	0x1f, 2	; 31
    3294:	f9 9a       	sbi	0x1f, 1	; 31
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	08 95       	ret

0000329c <eeprom_write_dword>:
    329c:	24 2f       	mov	r18, r20
    329e:	0e 94 41 19 	call	0x3282	; 0x3282 <eeprom_write_r18>
    32a2:	25 2f       	mov	r18, r21
    32a4:	0e 94 41 19 	call	0x3282	; 0x3282 <eeprom_write_r18>
    32a8:	0c 94 56 19 	jmp	0x32ac	; 0x32ac <eeprom_write_word>

000032ac <eeprom_write_word>:
    32ac:	0e 94 40 19 	call	0x3280	; 0x3280 <eeprom_write_byte>
    32b0:	27 2f       	mov	r18, r23
    32b2:	0c 94 41 19 	jmp	0x3282	; 0x3282 <eeprom_write_r18>

000032b6 <eeprom_read_block>:
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22

000032ba <eeprom_read_blraw>:
    32ba:	fc 01       	movw	r30, r24
    32bc:	f9 99       	sbic	0x1f, 1	; 31
    32be:	fe cf       	rjmp	.-4      	; 0x32bc <eeprom_read_blraw+0x2>
    32c0:	06 c0       	rjmp	.+12     	; 0x32ce <eeprom_read_blraw+0x14>
    32c2:	f2 bd       	out	0x22, r31	; 34
    32c4:	e1 bd       	out	0x21, r30	; 33
    32c6:	f8 9a       	sbi	0x1f, 0	; 31
    32c8:	31 96       	adiw	r30, 0x01	; 1
    32ca:	00 b4       	in	r0, 0x20	; 32
    32cc:	0d 92       	st	X+, r0
    32ce:	41 50       	subi	r20, 0x01	; 1
    32d0:	50 40       	sbci	r21, 0x00	; 0
    32d2:	b8 f7       	brcc	.-18     	; 0x32c2 <eeprom_read_blraw+0x8>
    32d4:	08 95       	ret

000032d6 <__prologue_saves__>:
    32d6:	2f 92       	push	r2
    32d8:	3f 92       	push	r3
    32da:	4f 92       	push	r4
    32dc:	5f 92       	push	r5
    32de:	6f 92       	push	r6
    32e0:	7f 92       	push	r7
    32e2:	8f 92       	push	r8
    32e4:	9f 92       	push	r9
    32e6:	af 92       	push	r10
    32e8:	bf 92       	push	r11
    32ea:	cf 92       	push	r12
    32ec:	df 92       	push	r13
    32ee:	ef 92       	push	r14
    32f0:	ff 92       	push	r15
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	ca 1b       	sub	r28, r26
    3300:	db 0b       	sbc	r29, r27
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	09 94       	ijmp

0000330e <__epilogue_restores__>:
    330e:	2a 88       	ldd	r2, Y+18	; 0x12
    3310:	39 88       	ldd	r3, Y+17	; 0x11
    3312:	48 88       	ldd	r4, Y+16	; 0x10
    3314:	5f 84       	ldd	r5, Y+15	; 0x0f
    3316:	6e 84       	ldd	r6, Y+14	; 0x0e
    3318:	7d 84       	ldd	r7, Y+13	; 0x0d
    331a:	8c 84       	ldd	r8, Y+12	; 0x0c
    331c:	9b 84       	ldd	r9, Y+11	; 0x0b
    331e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3320:	b9 84       	ldd	r11, Y+9	; 0x09
    3322:	c8 84       	ldd	r12, Y+8	; 0x08
    3324:	df 80       	ldd	r13, Y+7	; 0x07
    3326:	ee 80       	ldd	r14, Y+6	; 0x06
    3328:	fd 80       	ldd	r15, Y+5	; 0x05
    332a:	0c 81       	ldd	r16, Y+4	; 0x04
    332c:	1b 81       	ldd	r17, Y+3	; 0x03
    332e:	aa 81       	ldd	r26, Y+2	; 0x02
    3330:	b9 81       	ldd	r27, Y+1	; 0x01
    3332:	ce 0f       	add	r28, r30
    3334:	d1 1d       	adc	r29, r1
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	ed 01       	movw	r28, r26
    3342:	08 95       	ret

00003344 <_exit>:
    3344:	f8 94       	cli

00003346 <__stop_program>:
    3346:	ff cf       	rjmp	.-2      	; 0x3346 <__stop_program>
