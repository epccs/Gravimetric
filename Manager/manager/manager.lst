
manager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000244e  000024e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000244e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001da  0080019c  0080019c  0000257e  2**0
                  ALLOC
  3 .stab         00008304  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022a2  00000000  00000000  0000a884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000cb26  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000cb38  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000040  00000000  00000000  0000cb78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000a20  00000000  00000000  0000cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000896  00000000  00000000  0000d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000002bd  00000000  00000000  0000de6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000318  00000000  00000000  0000e12b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_16>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_18>
      4c:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_24>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      6c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      70:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      7c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      80:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      84:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      8c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      90:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      94:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      98:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      9c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a0:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_40>
      a4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      a8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      ac:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      b0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

000000b4 <EE_IdTable>:
      b4:	52 50 55 69 64 00                                   RPUid.

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ee e4       	ldi	r30, 0x4E	; 78
      ce:	f4 e2       	ldi	r31, 0x24	; 36
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ac 39       	cpi	r26, 0x9C	; 156
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	ac e9       	ldi	r26, 0x9C	; 156
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a6 37       	cpi	r26, 0x76	; 118
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
      f0:	0c 94 25 12 	jmp	0x244a	; 0x244a <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <setup>:
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
      f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      fa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
      fc:	21 9a       	sbi	0x04, 1	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
      fe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     100:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     102:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     104:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     106:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     108:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     10a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     10c:	53 98       	cbi	0x0a, 3	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     10e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     110:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     112:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     114:	5b 9a       	sbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     116:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     118:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     11a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     11c:	38 9a       	sbi	0x07, 0	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     11e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     120:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     122:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     124:	40 9a       	sbi	0x08, 0	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     126:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     128:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     12a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     12c:	52 98       	cbi	0x0a, 2	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     12e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     130:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     132:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     134:	5a 9a       	sbi	0x0b, 2	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     136:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     138:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     13a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     13c:	39 9a       	sbi	0x07, 1	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     13e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     140:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     142:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     144:	41 9a       	sbi	0x08, 1	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     146:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     148:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     14a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     14c:	3b 9a       	sbi	0x07, 3	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     14e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     150:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     152:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     154:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     156:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     158:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     15a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     15c:	54 9a       	sbi	0x0a, 4	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     15e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     160:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     162:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     164:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     166:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     168:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     16a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     16c:	55 9a       	sbi	0x0a, 5	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     16e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     170:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     172:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     174:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     176:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     178:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     17c:	3a 9a       	sbi	0x07, 2	; 7
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     17e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     180:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     182:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     184:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     186:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     18c:	57 9a       	sbi	0x0a, 7	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     18e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     190:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     192:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     194:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     196:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     198:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     19a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     19c:	56 9a       	sbi	0x0a, 6	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     19e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1a2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1a4:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1a6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1aa:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1ac:	22 9a       	sbi	0x04, 2	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1ae:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1b0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1b2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1b4:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1b6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1ba:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     1bc:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1be:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     1c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1c2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     1c4:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1c6:	8f bf       	out	0x3f, r24	; 63
    digitalWrite(nSS, HIGH); 
    pinMode(SHUTDOWN, INPUT);
    digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 

    // from rpubus_manager_state.h
    bootloader_address = RPU_HOST_CONNECT; 
     1c8:	80 e3       	ldi	r24, 0x30	; 48
     1ca:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <bootloader_address>
    host_active = 0;
     1ce:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <host_active>
    lockout_active = 0;
     1d2:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <lockout_active>
    status_byt = 0;
     1d6:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <status_byt>
    write_rpu_address_to_eeprom = 0;
     1da:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <write_rpu_address_to_eeprom>
    shutdown_detected = 0;
     1de:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
    shutdown_started = 0;
     1e2:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <shutdown_started>
    arduino_mode_started =0;
     1e6:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <arduino_mode_started>
    arduino_mode = 0;
     1ea:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <arduino_mode>
    test_mode_started = 0;
     1ee:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <test_mode_started>
    test_mode = 0;
     1f2:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <test_mode>
    transceiver_state = 0;
     1f6:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <transceiver_state>
    
    // from smbus_cmds.h
    smbus_has_numBytes_to_handle = 0;
     1fa:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
     1fe:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <smbus_has_numBytes_to_handle>
    
    // from dtr_transmition.h
    uart_previous_byte = 0;
     202:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_previous_byte>
    uart_output = 0;
     206:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <uart_output>

    //Timer0 Fast PWM mode, Timer1 & Timer2 Phase Correct PWM mode.
    initTimers();
     20a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <initTimers>

    /* Initialize UART, it returns a pointer to FILE so redirect of stdin and stdout works*/
    stdout = stdin = uartstream0_init(BAUD);
     20e:	60 e9       	ldi	r22, 0x90	; 144
     210:	70 ed       	ldi	r23, 0xD0	; 208
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 ed 0a 	call	0x15da	; 0x15da <uartstream0_init>
     21a:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <__iob+0x1>
     21e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <__iob>
     222:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <__iob+0x3>
     226:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__iob+0x2>

    // can use with a true I2C bus master that does clock stretching and repeated starts 
    twi0_setAddress(I2C0_ADDRESS);
     22a:	89 e2       	ldi	r24, 0x29	; 41
     22c:	0e 94 ce 0b 	call	0x179c	; 0x179c <twi0_setAddress>
    twi0_attachSlaveTxEvent(transmit_i2c_event); // called when I2C slave has been requested to send data
     230:	87 e4       	ldi	r24, 0x47	; 71
     232:	99 e0       	ldi	r25, 0x09	; 9
     234:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <twi0_attachSlaveTxEvent>
    twi0_attachSlaveRxEvent(receive_i2c_event); // called when I2C slave has received data
     238:	8a e0       	ldi	r24, 0x0A	; 10
     23a:	99 e0       	ldi	r25, 0x09	; 9
     23c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <twi0_attachSlaveRxEvent>
    twi0_init(false); // do not use internal pull-up
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 b0 0b 	call	0x1760	; 0x1760 <twi0_init>

    // with interleaved buffer for use with SMbus bus master that does not like clock-stretching (e.g., R-Pi Zero) 
    twi1_setAddress(I2C1_ADDRESS);
     246:	8a e2       	ldi	r24, 0x2A	; 42
     248:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <twi1_setAddress>
    twi1_attachSlaveTxEvent(transmit_smbus_event); // called when SMBus slave has been requested to send data
     24c:	83 ed       	ldi	r24, 0xD3	; 211
     24e:	99 e0       	ldi	r25, 0x09	; 9
     250:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <twi1_attachSlaveTxEvent>
    twi1_attachSlaveRxEvent(receive_smbus_event); // called when SMBus slave has received data
     254:	8a e5       	ldi	r24, 0x5A	; 90
     256:	99 e0       	ldi	r25, 0x09	; 9
     258:	0e 94 75 0d 	call	0x1aea	; 0x1aea <twi1_attachSlaveRxEvent>
    twi1_init(false); // do not use internal pull-up a Raspberry Pi has them on board
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <twi1_init>

    sei(); // Enable global interrupts to start TIMER0 and UART
     262:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	2f eb       	ldi	r18, 0xBF	; 191
     266:	84 ed       	ldi	r24, 0xD4	; 212
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	80 40       	sbci	r24, 0x00	; 0
     26e:	90 40       	sbci	r25, 0x00	; 0
     270:	e1 f7       	brne	.-8      	; 0x26a <setup+0x172>
     272:	00 c0       	rjmp	.+0      	; 0x274 <setup+0x17c>
     274:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     276:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     278:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     27a:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     27c:	8f bf       	out	0x3f, r24	; 63

    _delay_ms(50); // wait for UART glitch to clear
    digitalWrite(DTR_DE, HIGH);  // then allow DTR pair driver to enable

    // Use eeprom value for rpu_address if ID was valid    
    if (check_for_eeprom_id() )
     27e:	0e 94 05 0a 	call	0x140a	; 0x140a <check_for_eeprom_id>
     282:	88 23       	and	r24, r24
     284:	29 f0       	breq	.+10     	; 0x290 <setup+0x198>
    {
        rpu_address = eeprom_read_byte((uint8_t*)(EE_RPU_ADDRESS));
     286:	82 e3       	ldi	r24, 0x32	; 50
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <eeprom_read_byte>
     28e:	01 c0       	rjmp	.+2      	; 0x292 <setup+0x19a>
    }
    else
    {
        rpu_address = RPU_ADDRESS;
     290:	81 e3       	ldi	r24, 0x31	; 49
     292:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <rpu_address>
    }

    // is foreign host in control? (ask over the DTR pair)
    uart_has_TTL = 0;
     296:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
    printf("%c", uart_output); 
#endif
#if defined(HOST_LOCKOUT)
// this will keep the host off the bus until the HOST_LOCKOUT_STATUS bit in status_byt is clear 
// status_byt is zero at this point, but this shows how to set the bit without changing other bits
    status_byt |= (1<<HOST_LOCKOUT_STATUS);
     29a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     29e:	88 60       	ori	r24, 0x08	; 8
     2a0:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
     2a4:	08 95       	ret

000002a6 <main>:
#endif
}

int main(void)
{
    setup();
     2a6:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>

    blink_started_at = millis();
     2aa:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     2ae:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <blink_started_at>
     2b2:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <blink_started_at+0x1>
     2b6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <blink_started_at+0x2>
     2ba:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <blink_started_at+0x3>

    while (1) 
    {
        if (!test_mode) 
     2be:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
     2c2:	81 11       	cpse	r24, r1
     2c4:	0a c0       	rjmp	.+20     	; 0x2da <main+0x34>
        {
            blink_on_activate();
     2c6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <blink_on_activate>
            check_Bootload_Time();
     2ca:	0e 94 ab 02 	call	0x556	; 0x556 <check_Bootload_Time>
            check_DTR();
     2ce:	0e 94 4e 03 	call	0x69c	; 0x69c <check_DTR>
            check_lockout();
     2d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <check_lockout>
            check_shutdown();
     2d6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <check_shutdown>
        }
        if(write_rpu_address_to_eeprom) save_rpu_addr_state();
     2da:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
     2de:	81 11       	cpse	r24, r1
     2e0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <save_rpu_addr_state>
        check_uart();
     2e4:	0e 94 12 04 	call	0x824	; 0x824 <check_uart>
        if (smbus_has_numBytes_to_handle) handle_smbus_receive();
     2e8:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <smbus_has_numBytes_to_handle>
     2ec:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
     2f0:	89 2b       	or	r24, r25
     2f2:	29 f3       	breq	.-54     	; 0x2be <main+0x18>
     2f4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <handle_smbus_receive>
     2f8:	e2 cf       	rjmp	.-60     	; 0x2be <main+0x18>

000002fa <connect_normal_mode>:
volatile uint8_t status_byt;

void connect_normal_mode(void)
{
    // connect the local mcu if it has talked to the rpu manager (e.g. got an address)
    if(host_is_foreign)
     2fa:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     2fe:	88 23       	and	r24, r24
     300:	c1 f0       	breq	.+48     	; 0x332 <connect_normal_mode+0x38>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     302:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     304:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     306:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     308:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     30a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     30e:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     310:	8f bf       	out	0x3f, r24	; 63
    {
        digitalWrite(RX_DE, LOW); // disallow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     312:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <local_mcu_is_rpu_aware>
     316:	88 23       	and	r24, r24
     318:	21 f0       	breq	.+8      	; 0x322 <connect_normal_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     31a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     31c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     31e:	5d 9a       	sbi	0x0b, 5	; 11
     320:	03 c0       	rjmp	.+6      	; 0x328 <connect_normal_mode+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     322:	8f b7       	in	r24, 0x3f	; 63
     324:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     326:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     328:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     32a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     32c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     32e:	42 9a       	sbi	0x08, 2	; 8
     330:	17 c0       	rjmp	.+46     	; 0x360 <connect_normal_mode+0x66>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     332:	8f b7       	in	r24, 0x3f	; 63
     334:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     336:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     338:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     33a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     33e:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     340:	8f bf       	out	0x3f, r24	; 63
     // connect both the local mcu and host/ftdi uart if mcu is rpu aware, otherwise block MCU from using the TX pair
    else
    {
        digitalWrite(RX_DE, HIGH); // allow RX pair driver to enable if FTDI_TX is low
        digitalWrite(RX_nRE, LOW);  // enable RX pair recevior to output to local MCU's RX input
        if(local_mcu_is_rpu_aware)
     342:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <local_mcu_is_rpu_aware>
     346:	88 23       	and	r24, r24
     348:	21 f0       	breq	.+8      	; 0x352 <connect_normal_mode+0x58>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     34a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     34c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     34e:	5d 9a       	sbi	0x0b, 5	; 11
     350:	03 c0       	rjmp	.+6      	; 0x358 <connect_normal_mode+0x5e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     352:	8f b7       	in	r24, 0x3f	; 63
     354:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     356:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     358:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     35a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     35c:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     35e:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     360:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     362:	08 95       	ret

00000364 <connect_bootload_mode>:
}

void connect_bootload_mode(void)
{
    // connect the remote host and local mcu
    if (host_is_foreign)
     364:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     368:	88 23       	and	r24, r24
     36a:	81 f0       	breq	.+32     	; 0x38c <connect_bootload_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     36c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     36e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     370:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     372:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     374:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     376:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     378:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     37a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     37c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     37e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     380:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     382:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     384:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     386:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     388:	42 9a       	sbi	0x08, 2	; 8
     38a:	0f c0       	rjmp	.+30     	; 0x3aa <connect_bootload_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     38c:	8f b7       	in	r24, 0x3f	; 63
     38e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     390:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     392:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     394:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     396:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     398:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     39a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     39c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     39e:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3a0:	5d 9a       	sbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a2:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3a4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a6:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3a8:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3aa:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3ac:	08 95       	ret

000003ae <connect_lockout_mode>:
}

void connect_lockout_mode(void)
{
    // lockout everything
    if (host_is_foreign)
     3ae:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     3b2:	88 23       	and	r24, r24
     3b4:	81 f0       	breq	.+32     	; 0x3d6 <connect_lockout_mode+0x28>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3b6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ba:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3bc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3be:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3c2:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3c4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3c6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ca:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3cc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ce:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3d0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3d2:	42 9a       	sbi	0x08, 2	; 8
     3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <connect_lockout_mode+0x46>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3d6:	8f b7       	in	r24, 0x3f	; 63
     3d8:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3da:	43 9a       	sbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3dc:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e0:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     3e2:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3e4:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3e6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e8:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3ea:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ec:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     3ee:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f0:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     3f2:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f4:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3f6:	08 95       	ret

000003f8 <blink_on_activate>:
    }
}

// blink if the host is active, fast blink if status_byt, slow blink in lockout
void blink_on_activate(void)
{
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
    if (shutdown_detected) // do not blink,  power usage needs to be very stable to tell if the host has haulted. 
     3fc:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_detected>
     400:	81 11       	cpse	r24, r1
     402:	a6 c0       	rjmp	.+332    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
    {
        return;
    }
    
    unsigned long kRuntime = millis() - blink_started_at;
     404:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     408:	00 91 f7 02 	lds	r16, 0x02F7	; 0x8002f7 <blink_started_at>
     40c:	10 91 f8 02 	lds	r17, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     410:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     414:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     418:	dc 01       	movw	r26, r24
     41a:	cb 01       	movw	r24, r22
     41c:	80 1b       	sub	r24, r16
     41e:	91 0b       	sbc	r25, r17
     420:	a2 0b       	sbc	r26, r18
     422:	b3 0b       	sbc	r27, r19
    
    // Remote will start with the lockout bit set so don't blink for that
    if (!(status_byt & ~(1<<HOST_LOCKOUT_STATUS) )) 
     424:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <status_byt>
     428:	27 7f       	andi	r18, 0xF7	; 247
     42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	6d c0       	rjmp	.+218    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
    {
        // blink half as fast when host is foreign
        if (host_is_foreign)
     42e:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <host_is_foreign>
     432:	22 23       	and	r18, r18
     434:	21 f0       	breq	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
        {
            kRuntime = kRuntime >> 1;
     436:	b6 95       	lsr	r27
     438:	a7 95       	ror	r26
     43a:	97 95       	ror	r25
     43c:	87 95       	ror	r24
        }
        
        if ( bootloader_started  && (kRuntime > BLINK_BOOTLD_DELAY) )
     43e:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <bootloader_started>
     442:	22 23       	and	r18, r18
     444:	e9 f0       	breq	.+58     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     446:	8c 34       	cpi	r24, 0x4C	; 76
     448:	91 05       	cpc	r25, r1
     44a:	a1 05       	cpc	r26, r1
     44c:	b1 05       	cpc	r27, r1
     44e:	c0 f0       	brcs	.+48     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     450:	21 9b       	sbis	0x04, 1	; 4
     452:	09 c0       	rjmp	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     454:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     456:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     458:	f8 94       	cli
    {
        if (value_for_bit) 
     45a:	91 fd       	sbrc	r25, 1
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
        {
            *register_addr |= 1 << bit_offset;
     45e:	29 9a       	sbi	0x05, 1	; 5
     460:	01 c0       	rjmp	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     462:	29 98       	cbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     464:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_BOOTLD_DELAY; 
     466:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     46a:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     46e:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     472:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     476:	85 5b       	subi	r24, 0xB5	; 181
     478:	9f 4f       	sbci	r25, 0xFF	; 255
     47a:	af 4f       	sbci	r26, 0xFF	; 255
     47c:	bf 4f       	sbci	r27, 0xFF	; 255
     47e:	60 c0       	rjmp	.+192    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
        }
        else if ( lockout_active  && (kRuntime > BLINK_LOCKOUT_DELAY) )
     480:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <lockout_active>
     484:	22 23       	and	r18, r18
     486:	f1 f0       	breq	.+60     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     488:	81 3d       	cpi	r24, 0xD1	; 209
     48a:	27 e0       	ldi	r18, 0x07	; 7
     48c:	92 07       	cpc	r25, r18
     48e:	a1 05       	cpc	r26, r1
     490:	b1 05       	cpc	r27, r1
     492:	c0 f0       	brcs	.+48     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     494:	21 9b       	sbis	0x04, 1	; 4
     496:	09 c0       	rjmp	.+18     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     498:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     49a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     49c:	f8 94       	cli
    {
        if (value_for_bit) 
     49e:	91 fd       	sbrc	r25, 1
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
        {
            *register_addr |= 1 << bit_offset;
     4a2:	29 9a       	sbi	0x05, 1	; 5
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4a6:	29 98       	cbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4a8:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_LOCKOUT_DELAY; 
     4aa:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     4ae:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     4b2:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     4b6:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     4ba:	80 53       	subi	r24, 0x30	; 48
     4bc:	98 4f       	sbci	r25, 0xF8	; 248
     4be:	af 4f       	sbci	r26, 0xFF	; 255
     4c0:	bf 4f       	sbci	r27, 0xFF	; 255
     4c2:	3e c0       	rjmp	.+124    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
        }
        else if ( host_active  && (kRuntime > BLINK_ACTIVE_DELAY) )
     4c4:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <host_active>
     4c8:	22 23       	and	r18, r18
     4ca:	09 f4       	brne	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	41 c0       	rjmp	.+130    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     4ce:	85 3f       	cpi	r24, 0xF5	; 245
     4d0:	91 40       	sbci	r25, 0x01	; 1
     4d2:	a1 05       	cpc	r26, r1
     4d4:	b1 05       	cpc	r27, r1
     4d6:	e0 f1       	brcs	.+120    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     4d8:	21 9b       	sbis	0x04, 1	; 4
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     4dc:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     4de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4e0:	f8 94       	cli
    {
        if (value_for_bit) 
     4e2:	91 fd       	sbrc	r25, 1
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
        {
            *register_addr |= 1 << bit_offset;
     4e6:	29 9a       	sbi	0x05, 1	; 5
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     4ea:	29 98       	cbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4ec:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_ACTIVE_DELAY; 
     4ee:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     4f2:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     4f6:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     4fa:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     4fe:	8c 50       	subi	r24, 0x0C	; 12
     500:	9e 4f       	sbci	r25, 0xFE	; 254
     502:	af 4f       	sbci	r26, 0xFF	; 255
     504:	bf 4f       	sbci	r27, 0xFF	; 255
     506:	1c c0       	rjmp	.+56     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
        }
        // else spin the loop
    }
    else
    {
        if ( (kRuntime > BLINK_STATUS_DELAY))
     508:	89 3c       	cpi	r24, 0xC9	; 201
     50a:	91 05       	cpc	r25, r1
     50c:	a1 05       	cpc	r26, r1
     50e:	b1 05       	cpc	r27, r1
     510:	f8 f0       	brcs	.+62     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
static inline __attribute__((always_inline))
void digitalToggle(uint8_t pin_num) {
    if (!badPin(pin_num)) 
    {
        // Ckeck if pin is in OUTPUT mode befor changing it
        if( ( ( (*pinMap[pin_num].ddr) >> pinMap[pin_num].bit ) & 1) == OUTPUT )  
     512:	21 9b       	sbis	0x04, 1	; 4
     514:	09 c0       	rjmp	.+18     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     516:	93 b1       	in	r25, 0x03	; 3
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     518:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     51a:	f8 94       	cli
    {
        if (value_for_bit) 
     51c:	91 fd       	sbrc	r25, 1
     51e:	02 c0       	rjmp	.+4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
        {
            *register_addr |= 1 << bit_offset;
     520:	29 9a       	sbi	0x05, 1	; 5
     522:	01 c0       	rjmp	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     524:	29 98       	cbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     526:	8f bf       	out	0x3f, r24	; 63
        {
            digitalToggle(LED_BUILTIN);
            
            // next toggle 
            blink_started_at += BLINK_STATUS_DELAY; 
     528:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <blink_started_at>
     52c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <blink_started_at+0x1>
     530:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <blink_started_at+0x2>
     534:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <blink_started_at+0x3>
     538:	88 53       	subi	r24, 0x38	; 56
     53a:	9f 4f       	sbci	r25, 0xFF	; 255
     53c:	af 4f       	sbci	r26, 0xFF	; 255
     53e:	bf 4f       	sbci	r27, 0xFF	; 255
     540:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <blink_started_at>
     544:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <blink_started_at+0x1>
     548:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <blink_started_at+0x2>
     54c:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <blink_started_at+0x3>
        }
    }
}
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <check_Bootload_Time>:

void check_Bootload_Time(void)
{
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
    if (bootloader_started)
     55a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     55e:	88 23       	and	r24, r24
     560:	01 f1       	breq	.+64     	; 0x5a2 <check_Bootload_Time+0x4c>
    {
        unsigned long kRuntime = millis() - bootloader_started_at;
     562:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
        
        if (!arduino_mode && (kRuntime > BOOTLOADER_ACTIVE))
     566:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <arduino_mode>
     56a:	21 11       	cpse	r18, r1
     56c:	1a c0       	rjmp	.+52     	; 0x5a2 <check_Bootload_Time+0x4c>
     56e:	00 91 e4 02 	lds	r16, 0x02E4	; 0x8002e4 <bootloader_started_at>
     572:	10 91 e5 02 	lds	r17, 0x02E5	; 0x8002e5 <bootloader_started_at+0x1>
     576:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <bootloader_started_at+0x2>
     57a:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <bootloader_started_at+0x3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	80 1b       	sub	r24, r16
     584:	91 0b       	sbc	r25, r17
     586:	a2 0b       	sbc	r26, r18
     588:	b3 0b       	sbc	r27, r19
     58a:	89 33       	cpi	r24, 0x39	; 57
     58c:	91 4c       	sbci	r25, 0xC1	; 193
     58e:	a1 40       	sbci	r26, 0x01	; 1
     590:	b1 05       	cpc	r27, r1
     592:	38 f0       	brcs	.+14     	; 0x5a2 <check_Bootload_Time+0x4c>
        {
            connect_normal_mode();
     594:	0e 94 7d 01 	call	0x2fa	; 0x2fa <connect_normal_mode>
            host_active =1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <host_active>
            bootloader_started = 0;
     59e:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <bootloader_started>
        }
    }
}
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <check_lockout>:


// lockout needs to happoen for a long enough time to insure bootloading is finished,
void check_lockout(void)
{
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
    unsigned long kRuntime = millis() - lockout_started_at;
     5ac:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
    
    if (!arduino_mode && ( lockout_active && (kRuntime > LOCKOUT_DELAY) ))
     5b0:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <arduino_mode>
     5b4:	21 11       	cpse	r18, r1
     5b6:	1e c0       	rjmp	.+60     	; 0x5f4 <check_lockout+0x4c>
     5b8:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <lockout_active>
     5bc:	22 23       	and	r18, r18
     5be:	d1 f0       	breq	.+52     	; 0x5f4 <check_lockout+0x4c>
     5c0:	00 91 e8 02 	lds	r16, 0x02E8	; 0x8002e8 <lockout_started_at>
     5c4:	10 91 e9 02 	lds	r17, 0x02E9	; 0x8002e9 <lockout_started_at+0x1>
     5c8:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <lockout_started_at+0x2>
     5cc:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <lockout_started_at+0x3>
     5d0:	dc 01       	movw	r26, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	80 1b       	sub	r24, r16
     5d6:	91 0b       	sbc	r25, r17
     5d8:	a2 0b       	sbc	r26, r18
     5da:	b3 0b       	sbc	r27, r19
     5dc:	81 3c       	cpi	r24, 0xC1	; 193
     5de:	94 4d       	sbci	r25, 0xD4	; 212
     5e0:	a1 40       	sbci	r26, 0x01	; 1
     5e2:	b1 05       	cpc	r27, r1
     5e4:	38 f0       	brcs	.+14     	; 0x5f4 <check_lockout+0x4c>
    {
        connect_normal_mode();
     5e6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <connect_normal_mode>

        host_active = 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <host_active>
        lockout_active =0;
     5f0:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <lockout_active>
    }
}
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <check_shutdown>:


void check_shutdown(void)
{
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
    if (shutdown_started)
     5fe:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <shutdown_started>
     602:	88 23       	and	r24, r24
     604:	19 f1       	breq	.+70     	; 0x64c <check_shutdown+0x52>
    {
        unsigned long kRuntime = millis() - shutdown_started_at;
     606:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
        
        if ( kRuntime > SHUTDOWN_TIME)
     60a:	00 91 fc 02 	lds	r16, 0x02FC	; 0x8002fc <shutdown_started_at>
     60e:	10 91 fd 02 	lds	r17, 0x02FD	; 0x8002fd <shutdown_started_at+0x1>
     612:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <shutdown_started_at+0x2>
     616:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <shutdown_started_at+0x3>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	80 1b       	sub	r24, r16
     620:	91 0b       	sbc	r25, r17
     622:	a2 0b       	sbc	r26, r18
     624:	b3 0b       	sbc	r27, r19
     626:	89 3e       	cpi	r24, 0xE9	; 233
     628:	93 40       	sbci	r25, 0x03	; 3
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	98 f1       	brcs	.+102    	; 0x696 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     630:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     632:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     634:	20 98       	cbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     636:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     638:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     63a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     63c:	28 9a       	sbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     63e:	8f bf       	out	0x3f, r24	; 63
        {
            pinMode(SHUTDOWN, INPUT);
            digitalWrite(SHUTDOWN, HIGH); // trun on a weak pullup 
            shutdown_started = 0; // set with I2C command 5
     640:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <shutdown_started>
            shutdown_detected = 1; // clear when reading with I2C command 4
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <shutdown_detected>
     64a:	25 c0       	rjmp	.+74     	; 0x696 <check_shutdown+0x9c>
        }
    }
    else
        if (!shutdown_detected) 
     64c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <shutdown_detected>
     650:	81 11       	cpse	r24, r1
     652:	21 c0       	rjmp	.+66     	; 0x696 <check_shutdown+0x9c>
        { 
            // I2C cmd set shutdown_started =1 and set shutdown_detected = 0
            // but if it is a manual event it can have a debounce time
            if( !digitalRead(SHUTDOWN) ) 
     654:	18 99       	sbic	0x03, 0	; 3
     656:	1f c0       	rjmp	.+62     	; 0x696 <check_shutdown+0x9c>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     658:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     65a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     65c:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     65e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     660:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     662:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     664:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     666:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     668:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     66c:	21 9a       	sbi	0x04, 1	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     66e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     670:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     672:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     674:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     676:	8f bf       	out	0x3f, r24	; 63
            {
                pinMode(SHUTDOWN, OUTPUT);
                digitalWrite(SHUTDOWN, LOW);
                pinMode(LED_BUILTIN, OUTPUT);
                digitalWrite(LED_BUILTIN, HIGH);
                shutdown_detected = 0; // set after SHUTDOWN_TIME timer runs
     678:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
                shutdown_started = 1; // it is cleared after SHUTDOWN_TIME timer runs
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <shutdown_started>
                shutdown_started_at = millis();
     682:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     686:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <shutdown_started_at>
     68a:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <shutdown_started_at+0x1>
     68e:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <shutdown_started_at+0x2>
     692:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <shutdown_started_at+0x3>
            }
        }
}
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <check_DTR>:

uint8_t uart_previous_byte;

void check_DTR(void)
{
    if (!host_is_foreign) 
     69c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <host_is_foreign>
     6a0:	81 11       	cpse	r24, r1
     6a2:	bf c0       	rjmp	.+382    	; 0x822 <check_DTR+0x186>
    {
        if ( !digitalRead(HOST_nDTR) || !digitalRead(HOST_nRTS) )  // if HOST_nDTR or HOST_nRTS are set (active low) then assume avrdude wants to use the bootloader
     6a4:	4a 9b       	sbis	0x09, 2	; 9
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <check_DTR+0x10>
     6a8:	4b 99       	sbic	0x09, 3	; 9
     6aa:	5a c0       	rjmp	.+180    	; 0x760 <check_DTR+0xc4>
        {
            if ( !(status_byt & (1<<HOST_LOCKOUT_STATUS)) )
     6ac:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     6b0:	83 fd       	sbrc	r24, 3
     6b2:	b7 c0       	rjmp	.+366    	; 0x822 <check_DTR+0x186>
            {
                if (digitalRead(HOST_nCTS))
     6b4:	30 9b       	sbis	0x06, 0	; 6
     6b6:	09 c0       	rjmp	.+18     	; 0x6ca <check_DTR+0x2e>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6ba:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6bc:	40 98       	cbi	0x08, 0	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6be:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     6c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6c2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     6c4:	41 98       	cbi	0x08, 1	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6c6:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     6c8:	08 95       	ret
                    digitalWrite(HOST_nCTS, LOW);
                    digitalWrite(HOST_nDSR, LOW);
                }
                else
                {
                    if ( !(bootloader_started  || lockout_active || host_active || uart_has_TTL) )
     6ca:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     6ce:	81 11       	cpse	r24, r1
     6d0:	a8 c0       	rjmp	.+336    	; 0x822 <check_DTR+0x186>
     6d2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <lockout_active>
     6d6:	81 11       	cpse	r24, r1
     6d8:	a4 c0       	rjmp	.+328    	; 0x822 <check_DTR+0x186>
     6da:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <host_active>
     6de:	81 11       	cpse	r24, r1
     6e0:	a0 c0       	rjmp	.+320    	; 0x822 <check_DTR+0x186>
     6e2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <uart_has_TTL>
     6e6:	81 11       	cpse	r24, r1
     6e8:	9c c0       	rjmp	.+312    	; 0x822 <check_DTR+0x186>
                    {
                        // send the bootload_addres on the DTR pair when nDTR/nRTS becomes active
                        uart_started_at = millis();
     6ea:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     6ee:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     6f2:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     6f6:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     6fa:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
                        uart_output= bootloader_address; // set by I2C, default is RPU_HOST_CONNECT
     6fe:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <bootloader_address>
     702:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
                        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 )  ); 
     706:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     70a:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     70e:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	20 95       	com	r18
     716:	30 95       	com	r19
     718:	2a 70       	andi	r18, 0x0A	; 10
     71a:	33 27       	eor	r19, r19
     71c:	64 e0       	ldi	r22, 0x04	; 4
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	6a 95       	dec	r22
     724:	e1 f7       	brne	.-8      	; 0x71e <check_DTR+0x82>
     726:	89 2f       	mov	r24, r25
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	80 95       	com	r24
     72c:	90 95       	com	r25
     72e:	80 75       	andi	r24, 0x50	; 80
     730:	99 27       	eor	r25, r25
     732:	74 e0       	ldi	r23, 0x04	; 4
     734:	95 95       	asr	r25
     736:	87 95       	ror	r24
     738:	7a 95       	dec	r23
     73a:	e1 f7       	brne	.-8      	; 0x734 <check_DTR+0x98>
     73c:	82 2b       	or	r24, r18
     73e:	93 2b       	or	r25, r19
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	1f 92       	push	r1
     746:	4f 93       	push	r20
     748:	86 e1       	ldi	r24, 0x16	; 22
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	9f 93       	push	r25
     74e:	8f 93       	push	r24
     750:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
                        uart_has_TTL = 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <uart_has_TTL>
                        localhost_active = 1;
     75a:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <localhost_active>
     75e:	5b c0       	rjmp	.+182    	; 0x816 <check_DTR+0x17a>
                }
            }
        }
        else
        {
            if ( host_active && localhost_active && (!uart_has_TTL) && (!bootloader_started) && (!lockout_active) )
     760:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <host_active>
     764:	88 23       	and	r24, r24
     766:	09 f4       	brne	.+2      	; 0x76a <check_DTR+0xce>
     768:	5c c0       	rjmp	.+184    	; 0x822 <check_DTR+0x186>
     76a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <localhost_active>
     76e:	88 23       	and	r24, r24
     770:	09 f4       	brne	.+2      	; 0x774 <check_DTR+0xd8>
     772:	57 c0       	rjmp	.+174    	; 0x822 <check_DTR+0x186>
     774:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <uart_has_TTL>
     778:	81 11       	cpse	r24, r1
     77a:	53 c0       	rjmp	.+166    	; 0x822 <check_DTR+0x186>
     77c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     780:	81 11       	cpse	r24, r1
     782:	4f c0       	rjmp	.+158    	; 0x822 <check_DTR+0x186>
     784:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <lockout_active>
     788:	81 11       	cpse	r24, r1
     78a:	4b c0       	rjmp	.+150    	; 0x822 <check_DTR+0x186>
            {
                // send a byte on the DTR pair when FTDI_nDTR is first non-active
                uart_started_at = millis();
     78c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     790:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     794:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     798:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     79c:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
                uart_output= RPU_HOST_DISCONNECT;
     7a0:	8f ec       	ldi	r24, 0xCF	; 207
     7a2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
                printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     7a6:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     7aa:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     7ae:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	20 95       	com	r18
     7b6:	30 95       	com	r19
     7b8:	2a 70       	andi	r18, 0x0A	; 10
     7ba:	33 27       	eor	r19, r19
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	8a 95       	dec	r24
     7c4:	e1 f7       	brne	.-8      	; 0x7be <check_DTR+0x122>
     7c6:	89 2f       	mov	r24, r25
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	80 95       	com	r24
     7cc:	90 95       	com	r25
     7ce:	80 75       	andi	r24, 0x50	; 80
     7d0:	99 27       	eor	r25, r25
     7d2:	54 e0       	ldi	r21, 0x04	; 4
     7d4:	95 95       	asr	r25
     7d6:	87 95       	ror	r24
     7d8:	5a 95       	dec	r21
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <check_DTR+0x138>
     7dc:	82 2b       	or	r24, r18
     7de:	93 2b       	or	r25, r19
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	1f 92       	push	r1
     7e6:	4f 93       	push	r20
     7e8:	86 e1       	ldi	r24, 0x16	; 22
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
                uart_has_TTL = 1;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <uart_has_TTL>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     7fa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7fc:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     7fe:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     800:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, HIGH);
                localhost_active = 0;
     802:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <localhost_active>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     806:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     808:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     80a:	40 9a       	sbi	0x08, 0	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     80c:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     80e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     810:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     812:	41 9a       	sbi	0x08, 1	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     814:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	08 95       	ret

00000824 <check_uart>:

     Both I2C events and nRTS events (e.g., check_DTR) place state changes on 
     the DTR pair. This function drives those state changes.
*/
void check_uart(void)
{
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
    unsigned long kRuntime = millis() - uart_started_at;
     844:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
 
    if ( uart_has_TTL && (kRuntime > UART_TTL) )
     848:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <uart_has_TTL>
     84c:	22 23       	and	r18, r18
     84e:	d9 f0       	breq	.+54     	; 0x886 <check_uart+0x62>
     850:	40 90 08 03 	lds	r4, 0x0308	; 0x800308 <uart_started_at>
     854:	50 90 09 03 	lds	r5, 0x0309	; 0x800309 <uart_started_at+0x1>
     858:	60 90 0a 03 	lds	r6, 0x030A	; 0x80030a <uart_started_at+0x2>
     85c:	70 90 0b 03 	lds	r7, 0x030B	; 0x80030b <uart_started_at+0x3>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	84 19       	sub	r24, r4
     866:	95 09       	sbc	r25, r5
     868:	a6 09       	sbc	r26, r6
     86a:	b7 09       	sbc	r27, r7
     86c:	85 3f       	cpi	r24, 0xF5	; 245
     86e:	91 40       	sbci	r25, 0x01	; 1
     870:	a1 05       	cpc	r26, r1
     872:	b1 05       	cpc	r27, r1
     874:	40 f0       	brcs	.+16     	; 0x886 <check_uart+0x62>
    { // perhaps the DTR line is stuck (e.g. pulled low) so may need to time out
        status_byt &= (1<<DTR_READBACK_TIMEOUT);
     876:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     87a:	81 70       	andi	r24, 0x01	; 1
     87c:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
        uart_has_TTL = 0;
     880:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
     884:	c9 c1       	rjmp	.+914    	; 0xc18 <__stack+0x319>
    }
    else
    {
        if ( uart0_available() )
     886:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <uart0_available>
     88a:	89 2b       	or	r24, r25
     88c:	09 f4       	brne	.+2      	; 0x890 <check_uart+0x6c>
     88e:	c4 c1       	rjmp	.+904    	; 0xc18 <__stack+0x319>
        {
            uint8_t input;
            input = (uint8_t)(getchar());
     890:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <__iob>
     894:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <__iob+0x1>
     898:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <fgetc>
            
            // The test interface can glitch the DTR pair, so a check byte is used to make 
            // sure the data is real and not caused by testing.
            // how the check byte was made:   ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) 
            // do that to the previous input to see if this input is a valid check.
            if (  (input ==  ( (~uart_previous_byte & 0x0A) << 4 | (~uart_previous_byte & 0x50) >> 4 ) )  )
     89c:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <uart_previous_byte>
     8a0:	26 2f       	mov	r18, r22
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	20 95       	com	r18
     8a6:	30 95       	com	r19
     8a8:	a9 01       	movw	r20, r18
     8aa:	4a 70       	andi	r20, 0x0A	; 10
     8ac:	55 27       	eor	r21, r21
     8ae:	74 e0       	ldi	r23, 0x04	; 4
     8b0:	44 0f       	add	r20, r20
     8b2:	55 1f       	adc	r21, r21
     8b4:	7a 95       	dec	r23
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <check_uart+0x8c>
     8b8:	20 75       	andi	r18, 0x50	; 80
     8ba:	33 27       	eor	r19, r19
     8bc:	e4 e0       	ldi	r30, 0x04	; 4
     8be:	35 95       	asr	r19
     8c0:	27 95       	ror	r18
     8c2:	ea 95       	dec	r30
     8c4:	e1 f7       	brne	.-8      	; 0x8be <check_uart+0x9a>
     8c6:	24 2b       	or	r18, r20
     8c8:	35 2b       	or	r19, r21
     8ca:	ac 01       	movw	r20, r24
     8cc:	55 27       	eor	r21, r21
     8ce:	24 17       	cp	r18, r20
     8d0:	35 07       	cpc	r19, r21
     8d2:	39 f4       	brne	.+14     	; 0x8e2 <check_uart+0xbe>
            {
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
     8d4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <uart_previous_byte>
            

            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
     8d8:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <uart_has_TTL>
     8dc:	81 11       	cpse	r24, r1
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <check_uart+0xc4>
     8e0:	0f c0       	rjmp	.+30     	; 0x900 <__stack+0x1>
                input = uart_previous_byte; // replace input with the valid byte. 
                uart_previous_byte = 0; 
            }
            else
            {
                uart_previous_byte = input; // this byte may be a state change or a glitch
     8e2:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <uart_previous_byte>
                return;
     8e6:	98 c1       	rjmp	.+816    	; 0xc18 <__stack+0x319>
            // was this byte sent with the local DTR pair driver, if so the status_byt may need update
            // and the lockout from a local host needs to be treated differently
            // need to ignore the local host's nRTS if getting control from a remote host
            if ( uart_has_TTL )
            {
                if(input != uart_output) 
     8e8:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <uart_output>
     8ec:	68 17       	cp	r22, r24
     8ee:	29 f0       	breq	.+10     	; 0x8fa <check_uart+0xd6>
                { // sent byte did not match.
                    status_byt &= (1<<DTR_READBACK_NOT_MATCH);
     8f0:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
     8f4:	84 70       	andi	r24, 0x04	; 4
     8f6:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
                }
                uart_has_TTL = 0;
     8fa:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
                host_is_foreign = 0;
            }
            else
            {
                if (localhost_active)
     900:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <localhost_active>
     904:	88 23       	and	r24, r24
     906:	19 f0       	breq	.+6      	; 0x90e <__stack+0xf>
                {
                    host_is_foreign = 0; // used to connect the host
     908:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <host_is_foreign>
     90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
                }
                else
                {
                    host_is_foreign = 1; // used to lockout the host
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <host_is_foreign>
                }
            }

            if (input == RPU_NORMAL_MODE) // end the lockout or bootloader if it was set.
     914:	61 11       	cpse	r22, r1
     916:	27 c0       	rjmp	.+78     	; 0x966 <__stack+0x67>
            { 
                lockout_started_at = millis() - LOCKOUT_DELAY;
     918:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	80 5c       	subi	r24, 0xC0	; 192
     922:	94 4d       	sbci	r25, 0xD4	; 212
     924:	a1 40       	sbci	r26, 0x01	; 1
     926:	b1 09       	sbc	r27, r1
     928:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <lockout_started_at>
     92c:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <lockout_started_at+0x1>
     930:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <lockout_started_at+0x2>
     934:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <lockout_started_at+0x3>
                bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     938:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	88 53       	subi	r24, 0x38	; 56
     942:	91 4c       	sbci	r25, 0xC1	; 193
     944:	a1 40       	sbci	r26, 0x01	; 1
     946:	b1 09       	sbc	r27, r1
     948:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <bootloader_started_at>
     94c:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <bootloader_started_at+0x1>
     950:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <bootloader_started_at+0x2>
     954:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <bootloader_started_at+0x3>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     958:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     95a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     95c:	29 98       	cbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     95e:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(LED_BUILTIN, LOW);
                arduino_mode = 0;
     960:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <arduino_mode>
     964:	32 c1       	rjmp	.+612    	; 0xbca <__stack+0x2cb>
                blink_started_at = millis();
                return;
            }
            if (input == RPU_ARDUINO_MODE) 
     966:	6f 3f       	cpi	r22, 0xFF	; 255
     968:	31 f4       	brne	.+12     	; 0x976 <__stack+0x77>
            {
                arduino_mode_started = 0;
     96a:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <arduino_mode_started>
                arduino_mode = 1;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <arduino_mode>
                return;
     974:	51 c1       	rjmp	.+674    	; 0xc18 <__stack+0x319>
            }
            if (input == RPU_START_TEST_MODE) 
     976:	61 30       	cpi	r22, 0x01	; 1
     978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x7d>
     97a:	6b c0       	rjmp	.+214    	; 0xa52 <__stack+0x153>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     97c:	e9 b1       	in	r30, 0x09	; 9
     97e:	f6 b1       	in	r31, 0x06	; 6
     980:	56 b1       	in	r21, 0x06	; 6
     982:	49 b1       	in	r20, 0x09	; 9
     984:	39 b1       	in	r19, 0x09	; 9
     986:	89 b1       	in	r24, 0x09	; 9
     988:	29 b1       	in	r18, 0x09	; 9
     98a:	76 b1       	in	r23, 0x06	; 6
            {
                // fill transceiver_state with HOST_nRTS:HOST_nCTS:TX_nRE:TX_DE:DTR_nRE:DTR_DE:RX_nRE:RX_DE
                transceiver_state = (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) |  (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE));
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	88 0f       	add	r24, r24
     990:	89 2f       	mov	r24, r25
     992:	88 1f       	adc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	f0 fb       	bst	r31, 0
     9a0:	aa 24       	eor	r10, r10
     9a2:	a0 f8       	bld	r10, 0
     9a4:	b1 2c       	mov	r11, r1
     9a6:	c6 e0       	ldi	r28, 0x06	; 6
     9a8:	aa 0c       	add	r10, r10
     9aa:	bb 1c       	adc	r11, r11
     9ac:	ca 95       	dec	r28
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <__stack+0xa9>
     9b0:	8a 29       	or	r24, r10
     9b2:	73 fb       	bst	r23, 3
     9b4:	99 27       	eor	r25, r25
     9b6:	90 f9       	bld	r25, 0
     9b8:	89 2b       	or	r24, r25
     9ba:	e3 fb       	bst	r30, 3
     9bc:	cc 24       	eor	r12, r12
     9be:	c0 f8       	bld	r12, 0
     9c0:	d1 2c       	mov	r13, r1
     9c2:	d6 94       	lsr	r13
     9c4:	dc 2c       	mov	r13, r12
     9c6:	cc 24       	eor	r12, r12
     9c8:	d7 94       	ror	r13
     9ca:	c7 94       	ror	r12
     9cc:	c8 2a       	or	r12, r24
     9ce:	52 fb       	bst	r21, 2
     9d0:	ee 24       	eor	r14, r14
     9d2:	e0 f8       	bld	r14, 0
     9d4:	f1 2c       	mov	r15, r1
     9d6:	15 e0       	ldi	r17, 0x05	; 5
     9d8:	ee 0c       	add	r14, r14
     9da:	ff 1c       	adc	r15, r15
     9dc:	1a 95       	dec	r17
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0xd9>
     9e0:	ec 28       	or	r14, r12
     9e2:	45 fb       	bst	r20, 5
     9e4:	00 27       	eor	r16, r16
     9e6:	00 f9       	bld	r16, 0
     9e8:	10 e0       	ldi	r17, 0x00	; 0
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	00 0f       	add	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	8a 95       	dec	r24
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0xed>
     9f4:	0e 29       	or	r16, r14
     9f6:	36 fb       	bst	r19, 6
     9f8:	33 27       	eor	r19, r19
     9fa:	30 f9       	bld	r19, 0
     9fc:	c3 2f       	mov	r28, r19
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	d8 2f       	mov	r29, r24
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	cc 0f       	add	r28, r28
     a06:	dd 1f       	adc	r29, r29
     a08:	9a 95       	dec	r25
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <__stack+0x105>
     a0c:	c0 2b       	or	r28, r16
     a0e:	24 fb       	bst	r18, 4
     a10:	88 24       	eor	r8, r8
     a12:	80 f8       	bld	r8, 0
     a14:	91 2c       	mov	r9, r1
     a16:	88 0c       	add	r8, r8
     a18:	99 1c       	adc	r9, r9
     a1a:	8c 2a       	or	r8, r28
     a1c:	80 92 f3 02 	sts	0x02F3, r8	; 0x8002f3 <transceiver_state>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a20:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a22:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a24:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a26:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a2a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a2c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a2e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a30:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a32:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a34:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a36:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a38:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3a:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     a3c:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a42:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a44:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a46:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE active would block uart from seeing RPU_END_TEST_MODE
                digitalWrite(DTR_DE, LOW); 
                digitalWrite(RX_nRE, HIGH);
                digitalWrite(RX_DE, LOW);

                test_mode_started = 0;
     a48:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <test_mode_started>
                test_mode = 1;
     a4c:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <test_mode>
                return;
     a50:	e3 c0       	rjmp	.+454    	; 0xc18 <__stack+0x319>
            }
            if (input == RPU_END_TEST_MODE) 
     a52:	6e 3f       	cpi	r22, 0xFE	; 254
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x159>
     a56:	76 c0       	rjmp	.+236    	; 0xb44 <__stack+0x245>
            {
                // recover transceiver controls
                digitalWrite(HOST_nRTS, ( (transceiver_state>>7) & 0x01) );
     a58:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a5c:	88 1f       	adc	r24, r24
     a5e:	88 27       	eor	r24, r24
     a60:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a62:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a64:	f8 94       	cli
    {
        if (value_for_bit) 
     a66:	88 23       	and	r24, r24
     a68:	11 f0       	breq	.+4      	; 0xa6e <__stack+0x16f>
        {
            *register_addr |= 1 << bit_offset;
     a6a:	5b 9a       	sbi	0x0b, 3	; 11
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <__stack+0x171>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a6e:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a70:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a72:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a76:	86 fb       	bst	r24, 6
     a78:	88 27       	eor	r24, r24
     a7a:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a7c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a7e:	f8 94       	cli
    {
        if (value_for_bit) 
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <__stack+0x189>
        {
            *register_addr |= 1 << bit_offset;
     a84:	40 9a       	sbi	0x08, 0	; 8
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <__stack+0x18b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     a88:	40 98       	cbi	0x08, 0	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a8a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a8c:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     a90:	85 fb       	bst	r24, 5
     a92:	88 27       	eor	r24, r24
     a94:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     a96:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a98:	f8 94       	cli
    {
        if (value_for_bit) 
     a9a:	88 23       	and	r24, r24
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <__stack+0x1a3>
        {
            *register_addr |= 1 << bit_offset;
     a9e:	42 9a       	sbi	0x08, 2	; 8
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <__stack+0x1a5>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aa2:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aa6:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     aaa:	82 95       	swap	r24
     aac:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     aae:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ab0:	f8 94       	cli
    {
        if (value_for_bit) 
     ab2:	88 23       	and	r24, r24
     ab4:	11 f0       	breq	.+4      	; 0xaba <__stack+0x1bb>
        {
            *register_addr |= 1 << bit_offset;
     ab6:	5d 9a       	sbi	0x0b, 5	; 11
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <__stack+0x1bd>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     aba:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     abc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     abe:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     ac2:	83 fb       	bst	r24, 3
     ac4:	88 27       	eor	r24, r24
     ac6:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ac8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aca:	f8 94       	cli
    {
        if (value_for_bit) 
     acc:	88 23       	and	r24, r24
     ace:	11 f0       	breq	.+4      	; 0xad4 <__stack+0x1d5>
        {
            *register_addr |= 1 << bit_offset;
     ad0:	5e 9a       	sbi	0x0b, 6	; 11
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <__stack+0x1d7>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ad4:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ad6:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ad8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ada:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     adc:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ade:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ae0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ae4:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ae6:	8f bf       	out	0x3f, r24	; 63
                // DTR_nRE is always active... but
                digitalWrite(DTR_nRE, ( (transceiver_state>>3) & 0x01) );
                // the I2C command fnEndTestMode() sets the DTR_TXD pin and turns on the UART... but
                digitalWrite(DTR_TXD,HIGH); // strong pullup
                pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
                UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
     ae8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     aec:	88 61       	ori	r24, 0x18	; 24
     aee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     af2:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     af6:	82 fb       	bst	r24, 2
     af8:	88 27       	eor	r24, r24
     afa:	80 f9       	bld	r24, 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     afc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     afe:	f8 94       	cli
    {
        if (value_for_bit) 
     b00:	88 23       	and	r24, r24
     b02:	11 f0       	breq	.+4      	; 0xb08 <__stack+0x209>
        {
            *register_addr |= 1 << bit_offset;
     b04:	5f 9a       	sbi	0x0b, 7	; 11
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <__stack+0x20b>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b08:	5f 98       	cbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b0a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b0c:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     b10:	86 95       	lsr	r24
     b12:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b14:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b16:	f8 94       	cli
    {
        if (value_for_bit) 
     b18:	88 23       	and	r24, r24
     b1a:	11 f0       	breq	.+4      	; 0xb20 <__stack+0x221>
        {
            *register_addr |= 1 << bit_offset;
     b1c:	5c 9a       	sbi	0x0b, 4	; 11
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <__stack+0x223>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b20:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b22:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b24:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
     b28:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b2a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b2c:	f8 94       	cli
    {
        if (value_for_bit) 
     b2e:	88 23       	and	r24, r24
     b30:	11 f0       	breq	.+4      	; 0xb36 <__stack+0x237>
        {
            *register_addr |= 1 << bit_offset;
     b32:	43 9a       	sbi	0x08, 3	; 8
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <__stack+0x239>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b36:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b38:	9f bf       	out	0x3f, r25	; 63
                digitalWrite(DTR_DE, ( (transceiver_state>>2) & 0x01) );
                digitalWrite(RX_nRE, ( (transceiver_state>>1) & 0x01) );
                digitalWrite(RX_DE, ( (transceiver_state) & 0x01) );

                test_mode_started = 0;
     b3a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <test_mode_started>
                test_mode = 0;
     b3e:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <test_mode>
                return;
     b42:	6a c0       	rjmp	.+212    	; 0xc18 <__stack+0x319>
            }
            if (input == rpu_address) // that is my local address
     b44:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <rpu_address>
     b48:	68 13       	cpse	r22, r24
     b4a:	2a c0       	rjmp	.+84     	; 0xba0 <__stack+0x2a1>
            {
                connect_bootload_mode();
     b4c:	0e 94 b2 01 	call	0x364	; 0x364 <connect_bootload_mode>

                // start the bootloader
                bootloader_started = 1;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b56:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b58:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     b5a:	2a 98       	cbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b5c:	8f bf       	out	0x3f, r24	; 63
     b5e:	8f e5       	ldi	r24, 0x5F	; 95
     b60:	9a ee       	ldi	r25, 0xEA	; 234
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <__stack+0x263>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <__stack+0x269>
     b68:	00 00       	nop
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     b6a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b6c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     b6e:	2a 9a       	sbi	0x05, 2	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b70:	8f bf       	out	0x3f, r24	; 63
                digitalWrite(nSS, LOW);   // nSS goes through a open collector buffer to nRESET
                _delay_ms(20);  // hold reset low for a short time 
                digitalWrite(nSS, HIGH); // this will release the buffer with open colllector on MCU nRESET.
                local_mcu_is_rpu_aware = 0; // after a reset it may be loaded with new software
     b72:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <local_mcu_is_rpu_aware>
                blink_started_at = millis();
     b76:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     b7a:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <blink_started_at>
     b7e:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <blink_started_at+0x1>
     b82:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <blink_started_at+0x2>
     b86:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <blink_started_at+0x3>
                bootloader_started_at = millis();
     b8a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     b8e:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <bootloader_started_at>
     b92:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <bootloader_started_at+0x1>
     b96:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <bootloader_started_at+0x2>
     b9a:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <bootloader_started_at+0x3>
                return;
     b9e:	3c c0       	rjmp	.+120    	; 0xc18 <__stack+0x319>
            }
            if (input <= 0x7F) // values > 0x80 are for a host disconnect e.g. the bitwise negation of an RPU_ADDRESS
     ba0:	67 fd       	sbrc	r22, 7
     ba2:	1e c0       	rjmp	.+60     	; 0xbe0 <__stack+0x2e1>
            {  
                lockout_active =1;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <lockout_active>
                bootloader_started = 0;
     baa:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <bootloader_started>
                host_active =0;
     bae:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <host_active>

                connect_lockout_mode();
     bb2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <connect_lockout_mode>

                lockout_started_at = millis();
     bb6:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     bba:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <lockout_started_at>
     bbe:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <lockout_started_at+0x1>
     bc2:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <lockout_started_at+0x2>
     bc6:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <lockout_started_at+0x3>
                blink_started_at = millis();
     bca:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     bce:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <blink_started_at>
     bd2:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <blink_started_at+0x1>
     bd6:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <blink_started_at+0x2>
     bda:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <blink_started_at+0x3>
                return;
     bde:	1c c0       	rjmp	.+56     	; 0xc18 <__stack+0x319>
            }
            if (input > 0x7F) // RPU_HOST_DISCONNECT is the bitwise negation of an RPU_ADDRESS it will be > 0x80 (seen as a uint8_t)
            { 
                host_is_foreign = 0;
     be0:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <host_is_foreign>
                lockout_active =0;
     be4:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <lockout_active>
                host_active =0;
     be8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <host_active>
                bootloader_started = 0;
     bec:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <bootloader_started>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bf0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bf2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     bf4:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bf6:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     bf8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bfa:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     bfc:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bfe:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c00:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c02:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c04:	5c 9a       	sbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c06:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c08:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c0a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     c0c:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c0e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     c10:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c12:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     c14:	42 9a       	sbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c16:	8f bf       	out	0x3f, r24	; 63
            }
            // nothing can get past this point.
            return;
        }
    }
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	08 95       	ret

00000c3a <fnWtMgrAddr>:
}

// I2C_COMMAND_TO_SET_RPU_ADDRESS
void fnWtMgrAddr(uint8_t* i2cBuffer)
{
    rpu_address = i2cBuffer[1];
     c3a:	fc 01       	movw	r30, r24
     c3c:	81 81       	ldd	r24, Z+1	; 0x01
     c3e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <rpu_address>
    write_rpu_address_to_eeprom = 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <write_rpu_address_to_eeprom>
     c48:	08 95       	ret

00000c4a <fnRdBootldAddr>:

// I2C_COMMAND_TO_READ_ADDRESS_SENT_ON_ACTIVE_DTR
void fnRdBootldAddr(uint8_t* i2cBuffer)
{
    // replace data[1] with address sent when HOST_nRTS toggles
    i2cBuffer[1] = bootloader_address;
     c4a:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <bootloader_address>
     c4e:	fc 01       	movw	r30, r24
     c50:	21 83       	std	Z+1, r18	; 0x01
     c52:	08 95       	ret

00000c54 <fnWtBootldAddr>:

// I2C_COMMAND_TO_SET_ADDRESS_SENT_ON_ACTIVE_DTR
void fnWtBootldAddr(uint8_t* i2cBuffer)
{
    // set the byte that is sent when HOST_nRTS toggles
    bootloader_address = i2cBuffer[1];
     c54:	fc 01       	movw	r30, r24
     c56:	81 81       	ldd	r24, Z+1	; 0x01
     c58:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <bootloader_address>
     c5c:	08 95       	ret

00000c5e <fnRdShtdnDtct>:

// I2C_COMMAND_TO_READ_SW_SHUTDOWN_DETECTED
void fnRdShtdnDtct(uint8_t* i2cBuffer)
{
    // when ICP1 pin is pulled  down the host (e.g. R-Pi Zero) should be set up to hault
    i2cBuffer[1] = shutdown_detected;
     c5e:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <shutdown_detected>
     c62:	fc 01       	movw	r30, r24
     c64:	21 83       	std	Z+1, r18	; 0x01
    // reading clears this flag that was set in check_shutdown() but it is up to the I2C master to do somthing about it.
    shutdown_detected = 0;
     c66:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
     c6a:	08 95       	ret

00000c6c <fnRdStatus>:
}

// I2C_COMMAND_TO_READ_STATUS
void fnRdStatus(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = status_byt;
     c6c:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <status_byt>
     c70:	fc 01       	movw	r30, r24
     c72:	21 83       	std	Z+1, r18	; 0x01
     c74:	08 95       	ret

00000c76 <fnWtStatus>:
}

// I2C_COMMAND_TO_SET_STATUS
void fnWtStatus(uint8_t* i2cBuffer)
{
    status_byt = i2cBuffer[1];
     c76:	fc 01       	movw	r30, r24
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
     c7e:	08 95       	ret

00000c80 <fnRdArduinMode>:
}

// I2C command to read arduino_mode
void fnRdArduinMode(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = arduino_mode;
     c80:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <arduino_mode>
     c84:	fc 01       	movw	r30, r24
     c86:	21 83       	std	Z+1, r18	; 0x01
     c88:	08 95       	ret

00000c8a <fnNull>:
    }
}

/* Dummy function */
void fnNull(uint8_t* i2cBuffer)
{
     c8a:	08 95       	ret

00000c8c <fnRdMgrAddr>:
  *    the manager broadcast the bootload address when the host serial is active (e.g., nRTS) 
  *    all managers lockout serial except the address to bootload and the host */

// I2C_COMMAND_TO_READ_RPU_ADDRESS and set RPU_NORMAL_MODE
void fnRdMgrAddr(uint8_t* i2cBuffer)
{
     c8c:	cf 93       	push	r28
    i2cBuffer[1] = rpu_address; // '1' is 0x31
     c8e:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <rpu_address>
     c92:	fc 01       	movw	r30, r24
     c94:	21 83       	std	Z+1, r18	; 0x01
    local_mcu_is_rpu_aware =1; 
     c96:	c1 e0       	ldi	r28, 0x01	; 1
     c98:	c0 93 f5 02 	sts	0x02F5, r28	; 0x8002f5 <local_mcu_is_rpu_aware>
    
    // end the local mcu lockout. 
    if (localhost_active) 
     c9c:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <localhost_active>
     ca0:	88 23       	and	r24, r24
     ca2:	b1 f1       	breq	.+108    	; 0xd10 <fnRdMgrAddr+0x84>
    {
        // If the local host is active then broadcast on DTR pair
        uart_started_at = millis();
     ca4:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     ca8:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     cac:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     cb0:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     cb4:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
        uart_output = RPU_NORMAL_MODE;
     cb8:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <uart_output>
        printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     cbc:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     cc0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     cc4:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	20 95       	com	r18
     ccc:	30 95       	com	r19
     cce:	2a 70       	andi	r18, 0x0A	; 10
     cd0:	33 27       	eor	r19, r19
     cd2:	64 e0       	ldi	r22, 0x04	; 4
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	6a 95       	dec	r22
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <fnRdMgrAddr+0x48>
     cdc:	89 2f       	mov	r24, r25
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	80 95       	com	r24
     ce2:	90 95       	com	r25
     ce4:	80 75       	andi	r24, 0x50	; 80
     ce6:	99 27       	eor	r25, r25
     ce8:	74 e0       	ldi	r23, 0x04	; 4
     cea:	95 95       	asr	r25
     cec:	87 95       	ror	r24
     cee:	7a 95       	dec	r23
     cf0:	e1 f7       	brne	.-8      	; 0xcea <fnRdMgrAddr+0x5e>
     cf2:	82 2b       	or	r24, r18
     cf4:	93 2b       	or	r25, r19
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	1f 92       	push	r1
     cfc:	4f 93       	push	r20
     cfe:	86 e1       	ldi	r24, 0x16	; 22
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
        uart_has_TTL = 1; // causes host_is_foreign to be false
     d0a:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <uart_has_TTL>
     d0e:	39 c0       	rjmp	.+114    	; 0xd82 <fnRdMgrAddr+0xf6>
    }
    else 
        if (bootloader_started)
     d10:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <bootloader_started>
     d14:	88 23       	and	r24, r24
     d16:	e1 f1       	breq	.+120    	; 0xd90 <fnRdMgrAddr+0x104>
        {
            // If the bootloader_started has not timed out yet broadcast on DTR pair
            uart_started_at = millis();
     d18:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     d1c:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
     d20:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
     d24:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
     d28:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_NORMAL_MODE;
     d2c:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
     d30:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
     d34:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
     d38:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	20 95       	com	r18
     d40:	30 95       	com	r19
     d42:	2a 70       	andi	r18, 0x0A	; 10
     d44:	33 27       	eor	r19, r19
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	8a 95       	dec	r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <fnRdMgrAddr+0xbc>
     d50:	89 2f       	mov	r24, r25
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	80 95       	com	r24
     d56:	90 95       	com	r25
     d58:	80 75       	andi	r24, 0x50	; 80
     d5a:	99 27       	eor	r25, r25
     d5c:	54 e0       	ldi	r21, 0x04	; 4
     d5e:	95 95       	asr	r25
     d60:	87 95       	ror	r24
     d62:	5a 95       	dec	r21
     d64:	e1 f7       	brne	.-8      	; 0xd5e <fnRdMgrAddr+0xd2>
     d66:	82 2b       	or	r24, r18
     d68:	93 2b       	or	r25, r19
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	1f 92       	push	r1
     d70:	4f 93       	push	r20
     d72:	86 e1       	ldi	r24, 0x16	; 22
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	9f 93       	push	r25
     d78:	8f 93       	push	r24
     d7a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
            uart_has_TTL = 0; // causes host_is_foreign to be true, so local DTR/RTS is not accepted
     d7e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <uart_has_TTL>
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	20 c0       	rjmp	.+64     	; 0xdd0 <fnRdMgrAddr+0x144>
        } 
        else
        {
            lockout_started_at = millis() - LOCKOUT_DELAY;
     d90:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	80 5c       	subi	r24, 0xC0	; 192
     d9a:	94 4d       	sbci	r25, 0xD4	; 212
     d9c:	a1 40       	sbci	r26, 0x01	; 1
     d9e:	b1 09       	sbc	r27, r1
     da0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <lockout_started_at>
     da4:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <lockout_started_at+0x1>
     da8:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <lockout_started_at+0x2>
     dac:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <lockout_started_at+0x3>
            bootloader_started_at = millis() - BOOTLOADER_ACTIVE;
     db0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	88 53       	subi	r24, 0x38	; 56
     dba:	91 4c       	sbci	r25, 0xC1	; 193
     dbc:	a1 40       	sbci	r26, 0x01	; 1
     dbe:	b1 09       	sbc	r27, r1
     dc0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <bootloader_started_at>
     dc4:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <bootloader_started_at+0x1>
     dc8:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <bootloader_started_at+0x2>
     dcc:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <bootloader_started_at+0x3>
        }
}
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <fnRdXcvrCntlInTestMode>:
    }
}

// I2C command to read transceiver control bits
void fnRdXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     dd4:	8f 92       	push	r8
     dd6:	9f 92       	push	r9
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
    if (test_mode)
     dec:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <test_mode>
     df0:	ee 23       	and	r30, r30
     df2:	09 f4       	brne	.+2      	; 0xdf6 <fnRdXcvrCntlInTestMode+0x22>
     df4:	54 c0       	rjmp	.+168    	; 0xe9e <fnRdXcvrCntlInTestMode+0xca>
static inline __attribute__((always_inline))
bool digitalRead(uint8_t pin_num) 
{
    if (!badPin(pin_num)) 
    {
        return (*pinMap[pin_num].pin >> pinMap[pin_num].bit) & 1;
     df6:	89 b0       	in	r8, 0x09	; 9
     df8:	a6 b1       	in	r26, 0x06	; 6
     dfa:	f6 b1       	in	r31, 0x06	; 6
     dfc:	99 b0       	in	r9, 0x09	; 9
     dfe:	a9 b0       	in	r10, 0x09	; 9
     e00:	c9 b1       	in	r28, 0x09	; 9
     e02:	b9 b0       	in	r11, 0x09	; 9
     e04:	b6 b1       	in	r27, 0x06	; 6
    {
        i2cBuffer[1] = ( (digitalRead(HOST_nRTS)<<7) | (digitalRead(HOST_nCTS)<<6) | (digitalRead(TX_nRE)<<5) | (digitalRead(TX_DE)<<4) | (digitalRead(DTR_nRE)<<3) | (digitalRead(DTR_DE)<<2) | (digitalRead(RX_nRE)<<1) | (digitalRead(RX_DE)) ); 
     e06:	d0 e0       	ldi	r29, 0x00	; 0
     e08:	cc 0f       	add	r28, r28
     e0a:	cd 2f       	mov	r28, r29
     e0c:	cc 1f       	adc	r28, r28
     e0e:	dd 0b       	sbc	r29, r29
     e10:	cc 0f       	add	r28, r28
     e12:	dd 1f       	adc	r29, r29
     e14:	cc 0f       	add	r28, r28
     e16:	dd 1f       	adc	r29, r29
     e18:	6a 2f       	mov	r22, r26
     e1a:	61 70       	andi	r22, 0x01	; 1
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	46 e0       	ldi	r20, 0x06	; 6
     e20:	66 0f       	add	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	4a 95       	dec	r20
     e26:	e1 f7       	brne	.-8      	; 0xe20 <fnRdXcvrCntlInTestMode+0x4c>
     e28:	6c 2b       	or	r22, r28
     e2a:	b3 fb       	bst	r27, 3
     e2c:	77 27       	eor	r23, r23
     e2e:	70 f9       	bld	r23, 0
     e30:	e6 2f       	mov	r30, r22
     e32:	e7 2b       	or	r30, r23
     e34:	83 fa       	bst	r8, 3
     e36:	cc 24       	eor	r12, r12
     e38:	c0 f8       	bld	r12, 0
     e3a:	d1 2c       	mov	r13, r1
     e3c:	d6 01       	movw	r26, r12
     e3e:	b6 95       	lsr	r27
     e40:	ba 2f       	mov	r27, r26
     e42:	aa 27       	eor	r26, r26
     e44:	b7 95       	ror	r27
     e46:	a7 95       	ror	r26
     e48:	ae 2b       	or	r26, r30
     e4a:	f2 fb       	bst	r31, 2
     e4c:	ee 24       	eor	r14, r14
     e4e:	e0 f8       	bld	r14, 0
     e50:	f1 2c       	mov	r15, r1
     e52:	f7 01       	movw	r30, r14
     e54:	65 e0       	ldi	r22, 0x05	; 5
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	6a 95       	dec	r22
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <fnRdXcvrCntlInTestMode+0x82>
     e5e:	ea 2b       	or	r30, r26
     e60:	95 fa       	bst	r9, 5
     e62:	00 27       	eor	r16, r16
     e64:	00 f9       	bld	r16, 0
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	b8 01       	movw	r22, r16
     e6a:	f4 e0       	ldi	r31, 0x04	; 4
     e6c:	66 0f       	add	r22, r22
     e6e:	77 1f       	adc	r23, r23
     e70:	fa 95       	dec	r31
     e72:	e1 f7       	brne	.-8      	; 0xe6c <fnRdXcvrCntlInTestMode+0x98>
     e74:	6e 2b       	or	r22, r30
     e76:	a6 fa       	bst	r10, 6
     e78:	44 27       	eor	r20, r20
     e7a:	40 f9       	bld	r20, 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	a3 e0       	ldi	r26, 0x03	; 3
     e80:	44 0f       	add	r20, r20
     e82:	55 1f       	adc	r21, r21
     e84:	aa 95       	dec	r26
     e86:	e1 f7       	brne	.-8      	; 0xe80 <fnRdXcvrCntlInTestMode+0xac>
     e88:	46 2b       	or	r20, r22
     e8a:	b4 fa       	bst	r11, 4
     e8c:	22 27       	eor	r18, r18
     e8e:	20 f9       	bld	r18, 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	22 0f       	add	r18, r18
     e94:	33 1f       	adc	r19, r19
     e96:	24 2b       	or	r18, r20
     e98:	fc 01       	movw	r30, r24
     e9a:	21 83       	std	Z+1, r18	; 0x01
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <fnRdXcvrCntlInTestMode+0xce>
    }
    else 
    {
        i2cBuffer[1] = 0; 
     e9e:	fc 01       	movw	r30, r24
     ea0:	11 82       	std	Z+1, r1	; 0x01
    }
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	08 95       	ret

00000ebc <fnWtXcvrCntlInTestMode>:

// I2C command to write transceiver control bits
void fnWtXcvrCntlInTestMode(uint8_t* i2cBuffer)
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	fc 01       	movw	r30, r24
    if (test_mode)
     ec2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
     ec6:	88 23       	and	r24, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <fnWtXcvrCntlInTestMode+0x10>
     eca:	6e c0       	rjmp	.+220    	; 0xfa8 <fnWtXcvrCntlInTestMode+0xec>
    {
        // mask the needed bit and shift it to position zero so digitalWrite can move it to where it needs to go.
        digitalWrite(HOST_nRTS, ( (i2cBuffer[1] & (1<<7))>>7 ) );
     ecc:	81 81       	ldd	r24, Z+1	; 0x01
     ece:	88 1f       	adc	r24, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	88 1f       	adc	r24, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ed4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ed6:	f8 94       	cli
    {
        if (value_for_bit) 
     ed8:	88 23       	and	r24, r24
     eda:	11 f0       	breq	.+4      	; 0xee0 <fnWtXcvrCntlInTestMode+0x24>
        {
            *register_addr |= 1 << bit_offset;
     edc:	5b 9a       	sbi	0x0b, 3	; 11
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <fnWtXcvrCntlInTestMode+0x26>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     ee0:	5b 98       	cbi	0x0b, 3	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ee2:	9f bf       	out	0x3f, r25	; 63
        digitalWrite(HOST_nCTS, ( (i2cBuffer[1] & (1<<6))>>6 ) );
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	86 fb       	bst	r24, 6
     ee8:	88 27       	eor	r24, r24
     eea:	80 f9       	bld	r24, 0
     eec:	c8 2f       	mov	r28, r24
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	d8 2f       	mov	r29, r24
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     ef2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ef4:	f8 94       	cli
    {
        if (value_for_bit) 
     ef6:	cd 2b       	or	r28, r29
     ef8:	11 f0       	breq	.+4      	; 0xefe <fnWtXcvrCntlInTestMode+0x42>
        {
            *register_addr |= 1 << bit_offset;
     efa:	40 9a       	sbi	0x08, 0	; 8
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <fnWtXcvrCntlInTestMode+0x44>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     efe:	40 98       	cbi	0x08, 0	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f00:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_nRE, ( (i2cBuffer[1] & (1<<5))>>5 ) );
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	85 fb       	bst	r24, 5
     f06:	aa 27       	eor	r26, r26
     f08:	a0 f9       	bld	r26, 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f0c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f0e:	f8 94       	cli
    {
        if (value_for_bit) 
     f10:	ab 2b       	or	r26, r27
     f12:	11 f0       	breq	.+4      	; 0xf18 <fnWtXcvrCntlInTestMode+0x5c>
        {
            *register_addr |= 1 << bit_offset;
     f14:	42 9a       	sbi	0x08, 2	; 8
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <fnWtXcvrCntlInTestMode+0x5e>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f18:	42 98       	cbi	0x08, 2	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f1a:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(TX_DE, ( (i2cBuffer[1] & (1<<4))>>4 ) );
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	84 fb       	bst	r24, 4
     f20:	66 27       	eor	r22, r22
     f22:	60 f9       	bld	r22, 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f26:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f28:	f8 94       	cli
    {
        if (value_for_bit) 
     f2a:	67 2b       	or	r22, r23
     f2c:	11 f0       	breq	.+4      	; 0xf32 <fnWtXcvrCntlInTestMode+0x76>
        {
            *register_addr |= 1 << bit_offset;
     f2e:	5d 9a       	sbi	0x0b, 5	; 11
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <fnWtXcvrCntlInTestMode+0x78>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f32:	5d 98       	cbi	0x0b, 5	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f34:	8f bf       	out	0x3f, r24	; 63
        digitalWrite(DTR_nRE, ( (i2cBuffer[1] & (1<<3))>>3 ) ); // setting this will blind others state change but I need it for testing
     f36:	81 81       	ldd	r24, Z+1	; 0x01
     f38:	83 fb       	bst	r24, 3
     f3a:	44 27       	eor	r20, r20
     f3c:	40 f9       	bld	r20, 0
     f3e:	50 e0       	ldi	r21, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f40:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f42:	f8 94       	cli
    {
        if (value_for_bit) 
     f44:	45 2b       	or	r20, r21
     f46:	11 f0       	breq	.+4      	; 0xf4c <fnWtXcvrCntlInTestMode+0x90>
        {
            *register_addr |= 1 << bit_offset;
     f48:	5e 9a       	sbi	0x0b, 6	; 11
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <fnWtXcvrCntlInTestMode+0x92>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f4c:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f4e:	8f bf       	out	0x3f, r24	; 63
        if ( (i2cBuffer[1] & (1<<2))>>2 ) // enabling the dtr driver in testmode needs to cause a transcever load on the dtr pair
     f50:	81 81       	ldd	r24, Z+1	; 0x01
     f52:	82 ff       	sbrs	r24, 2
     f54:	11 c0       	rjmp	.+34     	; 0xf78 <fnWtXcvrCntlInTestMode+0xbc>
        {
            UCSR0B &= ~( (1<<RXEN0)|(1<<TXEN0) ); // turn off UART 
     f56:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f5a:	87 7e       	andi	r24, 0xE7	; 231
     f5c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f60:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f62:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     f64:	51 9a       	sbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f66:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f68:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f6a:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f6c:	59 98       	cbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f6e:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f70:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f72:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     f74:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f76:	8f bf       	out	0x3f, r24	; 63
            pinMode(DTR_TXD,OUTPUT);
            digitalWrite(DTR_TXD,LOW); // the DTR pair will be driven and load the transceiver 
            digitalWrite(DTR_DE,  1); 
        }
        digitalWrite(RX_nRE, ( (i2cBuffer[1] & (1<<1))>>1 ) );
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	81 fb       	bst	r24, 1
     f7c:	22 27       	eor	r18, r18
     f7e:	20 f9       	bld	r18, 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f82:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f84:	f8 94       	cli
    {
        if (value_for_bit) 
     f86:	23 2b       	or	r18, r19
     f88:	11 f0       	breq	.+4      	; 0xf8e <fnWtXcvrCntlInTestMode+0xd2>
        {
            *register_addr |= 1 << bit_offset;
     f8a:	5c 9a       	sbi	0x0b, 4	; 11
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <fnWtXcvrCntlInTestMode+0xd4>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     f8e:	5c 98       	cbi	0x0b, 4	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f90:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	81 70       	andi	r24, 0x01	; 1
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     f96:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f98:	f8 94       	cli
    {
        if (value_for_bit) 
     f9a:	88 23       	and	r24, r24
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <fnWtXcvrCntlInTestMode+0xe6>
        {
            *register_addr |= 1 << bit_offset;
     f9e:	43 9a       	sbi	0x08, 3	; 8
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <fnWtXcvrCntlInTestMode+0xe8>
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     fa2:	43 98       	cbi	0x08, 3	; 8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <fnWtXcvrCntlInTestMode+0xee>
        digitalWrite(RX_DE,  (i2cBuffer[1] & 1) );
    }
    else 
    {
        i2cBuffer[1] = 0; 
     fa8:	11 82       	std	Z+1, r1	; 0x01
    }
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <fnWtShtdnDtct>:

// I2C_COMMAND_TO_SET_SW_FOR_SHUTDOWN
void fnWtShtdnDtct(uint8_t* i2cBuffer)
{
    // pull ICP1 pin low to hault the host (e.g. Pi Zero on RPUpi)
    if (i2cBuffer[1] == 1)
     fb0:	fc 01       	movw	r30, r24
     fb2:	81 81       	ldd	r24, Z+1	; 0x01
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	f1 f4       	brne	.+60     	; 0xff4 <fnWtShtdnDtct+0x44>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     fb8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fba:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     fbc:	20 9a       	sbi	0x04, 0	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fbe:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     fc0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc2:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
     fc4:	28 98       	cbi	0x05, 0	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fc6:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     fc8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fca:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     fcc:	21 9a       	sbi	0x04, 1	; 4
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fce:	9f bf       	out	0x3f, r25	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
     fd0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fd2:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
     fd4:	29 9a       	sbi	0x05, 1	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fd6:	9f bf       	out	0x3f, r25	; 63
    {
        pinMode(SHUTDOWN, OUTPUT);
        digitalWrite(SHUTDOWN, LOW);
        pinMode(LED_BUILTIN, OUTPUT);
        digitalWrite(LED_BUILTIN, HIGH);
        shutdown_started = 1; // it is cleared in check_shutdown()
     fd8:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <shutdown_started>
        shutdown_detected = 0; // it is set in check_shutdown()
     fdc:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <shutdown_detected>
        shutdown_started_at = millis();
     fe0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
     fe4:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <shutdown_started_at>
     fe8:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <shutdown_started_at+0x1>
     fec:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <shutdown_started_at+0x2>
     ff0:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <shutdown_started_at+0x3>
     ff4:	08 95       	ret

00000ff6 <fnWtArduinMode>:
/********* PIONT TO POINT MODE ***********
  *    arduino_mode LOCKOUT_DELAY and BOOTLOADER_ACTIVE last forever when the host RTS toggles   */

// I2C command to set arduino_mode
void fnWtArduinMode(uint8_t* i2cBuffer)
{
     ff6:	cf 93       	push	r28
    if (i2cBuffer[1] == 1)
     ff8:	fc 01       	movw	r30, r24
     ffa:	c1 81       	ldd	r28, Z+1	; 0x01
     ffc:	c1 30       	cpi	r28, 0x01	; 1
     ffe:	09 f0       	breq	.+2      	; 0x1002 <fnWtArduinMode+0xc>
    1000:	45 c0       	rjmp	.+138    	; 0x108c <fnWtArduinMode+0x96>
    {
        if (!arduino_mode_started)
    1002:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <arduino_mode_started>
    1006:	21 11       	cpse	r18, r1
    1008:	41 c0       	rjmp	.+130    	; 0x108c <fnWtArduinMode+0x96>
        {
            uart_started_at = millis();
    100a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
    100e:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
    1012:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
    1016:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
    101a:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_ARDUINO_MODE;
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    1024:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
    1028:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
    102c:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	20 95       	com	r18
    1034:	30 95       	com	r19
    1036:	2a 70       	andi	r18, 0x0A	; 10
    1038:	33 27       	eor	r19, r19
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	8a 95       	dec	r24
    1042:	e1 f7       	brne	.-8      	; 0x103c <fnWtArduinMode+0x46>
    1044:	89 2f       	mov	r24, r25
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	80 95       	com	r24
    104a:	90 95       	com	r25
    104c:	80 75       	andi	r24, 0x50	; 80
    104e:	99 27       	eor	r25, r25
    1050:	54 e0       	ldi	r21, 0x04	; 4
    1052:	95 95       	asr	r25
    1054:	87 95       	ror	r24
    1056:	5a 95       	dec	r21
    1058:	e1 f7       	brne	.-8      	; 0x1052 <fnWtArduinMode+0x5c>
    105a:	82 2b       	or	r24, r18
    105c:	93 2b       	or	r25, r19
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	1f 92       	push	r1
    1064:	4f 93       	push	r20
    1066:	86 e1       	ldi	r24, 0x16	; 22
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1072:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <uart_has_TTL>
            arduino_mode_started = 1; // it is cleared by check_uart where arduino_mode is set
    1076:	c0 93 03 03 	sts	0x0303, r28	; 0x800303 <arduino_mode_started>
            arduino_mode = 0; // system wide state is set by check_uart when RPU_ARDUINO_MODE seen
    107a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <arduino_mode>
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <fnWtArduinMode+0x9a>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    108c:	fc 01       	movw	r30, r24
    108e:	11 82       	std	Z+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <fnStartTestMode>:
/********* TEST MODE ***********
  *    trancever control for testing      */

// I2C command to start test_mode
void fnStartTestMode(uint8_t* i2cBuffer)
{
    1094:	cf 93       	push	r28
    1096:	fc 01       	movw	r30, r24
    if (i2cBuffer[1] == 1)
    1098:	c1 81       	ldd	r28, Z+1	; 0x01
    109a:	c1 30       	cpi	r28, 0x01	; 1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <fnStartTestMode+0xc>
    109e:	48 c0       	rjmp	.+144    	; 0x1130 <fnStartTestMode+0x9c>
    {
        if (!test_mode_started && !test_mode)
    10a0:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <test_mode_started>
    10a4:	81 11       	cpse	r24, r1
    10a6:	42 c0       	rjmp	.+132    	; 0x112c <fnStartTestMode+0x98>
    10a8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
    10ac:	81 11       	cpse	r24, r1
    10ae:	3e c0       	rjmp	.+124    	; 0x112c <fnStartTestMode+0x98>
        {
            uart_started_at = millis();
    10b0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
    10b4:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
    10b8:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
    10bc:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
    10c0:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_START_TEST_MODE;
    10c4:	c0 93 06 03 	sts	0x0306, r28	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    10c8:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
    10cc:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
    10d0:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <uart_output>
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	20 95       	com	r18
    10d8:	30 95       	com	r19
    10da:	2a 70       	andi	r18, 0x0A	; 10
    10dc:	33 27       	eor	r19, r19
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	8a 95       	dec	r24
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <fnStartTestMode+0x4c>
    10e8:	89 2f       	mov	r24, r25
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	80 95       	com	r24
    10ee:	90 95       	com	r25
    10f0:	80 75       	andi	r24, 0x50	; 80
    10f2:	99 27       	eor	r25, r25
    10f4:	54 e0       	ldi	r21, 0x04	; 4
    10f6:	95 95       	asr	r25
    10f8:	87 95       	ror	r24
    10fa:	5a 95       	dec	r21
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <fnStartTestMode+0x62>
    10fe:	82 2b       	or	r24, r18
    1100:	93 2b       	or	r25, r19
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	1f 92       	push	r1
    1108:	4f 93       	push	r20
    110a:	86 e1       	ldi	r24, 0x16	; 22
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	9f 93       	push	r25
    1110:	8f 93       	push	r24
    1112:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    1116:	c0 93 04 03 	sts	0x0304, r28	; 0x800304 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is set
    111a:	c0 93 ec 02 	sts	0x02EC, r28	; 0x8002ec <test_mode_started>
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <fnStartTestMode+0xa0>
        } 
        else
        {
            i2cBuffer[1] = 2; // repeated commands are ignored until check_uart is done
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <fnStartTestMode+0x9e>
        }
    }
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 3; // ignore everything but the command
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	81 83       	std	Z+1, r24	; 0x01
    }
}
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <fnEndTestMode>:

// I2C command to end test_mode
void fnEndTestMode(uint8_t* i2cBuffer)
{
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    if (i2cBuffer[1] == 1)
    1140:	19 81       	ldd	r17, Y+1	; 0x01
    1142:	11 30       	cpi	r17, 0x01	; 1
    1144:	09 f0       	breq	.+2      	; 0x1148 <fnEndTestMode+0x10>
    1146:	61 c0       	rjmp	.+194    	; 0x120a <fnEndTestMode+0xd2>
    {
        if (!test_mode_started && test_mode)
    1148:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <test_mode_started>
    114c:	81 11       	cpse	r24, r1
    114e:	5d c0       	rjmp	.+186    	; 0x120a <fnEndTestMode+0xd2>
    1150:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <test_mode>
    1154:	88 23       	and	r24, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <fnEndTestMode+0x22>
    1158:	58 c0       	rjmp	.+176    	; 0x120a <fnEndTestMode+0xd2>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    115a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    115c:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    115e:	59 9a       	sbi	0x0b, 1	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1160:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1162:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1164:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1166:	51 98       	cbi	0x0a, 1	; 10
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1168:	8f bf       	out	0x3f, r24	; 63
        {
            digitalWrite(DTR_TXD,HIGH); // strong pullup
            pinMode(DTR_TXD,INPUT); // the DTR pair driver will see a weak pullup when UART starts
            UCSR0B |= (1<<RXEN0)|(1<<TXEN0); // turn on UART
    116a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    116e:	88 61       	ori	r24, 0x18	; 24
    1170:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    1174:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1176:	f8 94       	cli
    {
        if (value_for_bit) 
        {
            *register_addr |= 1 << bit_offset;
    1178:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    117a:	8f bf       	out	0x3f, r24	; 63
static inline __attribute__((always_inline))
void bitWrite(volatile uint8_t* register_addr, uint8_t bit_offset, bool value_for_bit) 
{
    // Although I/O Registers 0x20 and 0x5F, e.g. PORTn and DDRn should not need 
    // atomic change control it does not harm.
    ATOMIC_BLOCK ( ATOMIC_RESTORESTATE )
    117c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    117e:	f8 94       	cli
        {
            *register_addr |= 1 << bit_offset;
        } 
        else 
        {
            *register_addr &= ~(1 << bit_offset);
    1180:	5e 98       	cbi	0x0b, 6	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1182:	8f bf       	out	0x3f, r24	; 63
            digitalWrite(DTR_DE, HIGH); //DTR transceiver may have been turned off during the test
            digitalWrite(DTR_nRE, LOW); 
            uart_started_at = millis();
    1184:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <millis>
    1188:	60 93 08 03 	sts	0x0308, r22	; 0x800308 <uart_started_at>
    118c:	70 93 09 03 	sts	0x0309, r23	; 0x800309 <uart_started_at+0x1>
    1190:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uart_started_at+0x2>
    1194:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <uart_started_at+0x3>
            uart_output = RPU_END_TEST_MODE;
    1198:	8e ef       	ldi	r24, 0xFE	; 254
    119a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <uart_output>
            printf("%c%c", uart_output, ( (~uart_output & 0x0A) << 4 | (~uart_output & 0x50) >> 4 ) ); 
    119e:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <uart_output>
    11a2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <uart_output>
    11a6:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <uart_output>
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	20 95       	com	r18
    11ae:	30 95       	com	r19
    11b0:	2a 70       	andi	r18, 0x0A	; 10
    11b2:	33 27       	eor	r19, r19
    11b4:	a9 01       	movw	r20, r18
    11b6:	24 e0       	ldi	r18, 0x04	; 4
    11b8:	44 0f       	add	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	2a 95       	dec	r18
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <fnEndTestMode+0x80>
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	20 95       	com	r18
    11c6:	30 95       	com	r19
    11c8:	20 75       	andi	r18, 0x50	; 80
    11ca:	33 27       	eor	r19, r19
    11cc:	64 e0       	ldi	r22, 0x04	; 4
    11ce:	35 95       	asr	r19
    11d0:	27 95       	ror	r18
    11d2:	6a 95       	dec	r22
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <fnEndTestMode+0x96>
    11d6:	24 2b       	or	r18, r20
    11d8:	35 2b       	or	r19, r21
    11da:	3f 93       	push	r19
    11dc:	2f 93       	push	r18
    11de:	1f 92       	push	r1
    11e0:	9f 93       	push	r25
    11e2:	86 e1       	ldi	r24, 0x16	; 22
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	9f 93       	push	r25
    11e8:	8f 93       	push	r24
    11ea:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <printf>
            uart_has_TTL = 1; // causes host_is_foreign to be false
    11ee:	10 93 04 03 	sts	0x0304, r17	; 0x800304 <uart_has_TTL>
            test_mode_started = 1; // it is cleared by check_uart where test_mode is also cleared
    11f2:	10 93 ec 02 	sts	0x02EC, r17	; 0x8002ec <test_mode_started>
            i2cBuffer[1] = transceiver_state; // replace the data byte with the transceiver_state.
    11f6:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <transceiver_state>
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <fnEndTestMode+0xd4>
        } 
        else
        {
            i2cBuffer[1] = 0; // repeated commands are ignored until check_uart is done
    120a:	19 82       	std	Y+1, r1	; 0x01
    else 
    {
        // read the local address to send a byte on DTR for RPU_NORMAL_MODE
        i2cBuffer[1] = 0; // ignore everything but the command
    }
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	08 95       	ret

00001214 <receive_i2c_event>:
uint8_t i2c0Buffer[I2C_BUFFER_LENGTH];
uint8_t i2c0BufferLength = 0;

// called when I2C data is received. 
void receive_i2c_event(uint8_t* inBytes, int numBytes) 
{
    1214:	ac 01       	movw	r20, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	29 2f       	mov	r18, r25
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	26 17       	cp	r18, r22
    121e:	37 07       	cpc	r19, r23
    1220:	54 f4       	brge	.+20     	; 0x1236 <receive_i2c_event+0x22>
    {
        i2c0Buffer[i] = inBytes[i];    
    1222:	fa 01       	movw	r30, r20
    1224:	e2 0f       	add	r30, r18
    1226:	f3 1f       	adc	r31, r19
    1228:	80 81       	ld	r24, Z
    122a:	f9 01       	movw	r30, r18
    122c:	e4 5f       	subi	r30, 0xF4	; 244
    122e:	fc 4f       	sbci	r31, 0xFC	; 252
    1230:	80 83       	st	Z, r24
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    // i2c will echo's back what was sent (plus modifications) with transmit event
    uint8_t i;
    for(i = 0; i < numBytes; ++i)
    1232:	9f 5f       	subi	r25, 0xFF	; 255
    1234:	f1 cf       	rjmp	.-30     	; 0x1218 <receive_i2c_event+0x4>
    {
        i2c0Buffer[i] = inBytes[i];    
    }
    if(i < I2C_BUFFER_LENGTH) i2c0Buffer[i+1] = 0; // room for null
    1236:	90 32       	cpi	r25, 0x20	; 32
    1238:	20 f4       	brcc	.+8      	; 0x1242 <receive_i2c_event+0x2e>
    123a:	f9 01       	movw	r30, r18
    123c:	e4 5f       	subi	r30, 0xF4	; 244
    123e:	fc 4f       	sbci	r31, 0xFC	; 252
    1240:	11 82       	std	Z+1, r1	; 0x01
    i2c0BufferLength = numBytes;
    1242:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <__data_end>

    // my i2c commands size themselfs with data, so at least two bytes (e.g., cmd + one_data_byte)
    if(i2c0BufferLength <= 1) 
    1246:	62 30       	cpi	r22, 0x02	; 2
    1248:	10 f4       	brcc	.+4      	; 0x124e <receive_i2c_event+0x3a>
    {
        i2c0Buffer[0] = 0xFF; // error code for small size.
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <receive_i2c_event+0x54>
        return; // not valid, do nothing just echo.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (i2c0Buffer[0] & 0xF0) >> 4;
    124e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <i2c0Buffer>
    1252:	e8 2f       	mov	r30, r24
    1254:	e2 95       	swap	r30
    1256:	ef 70       	andi	r30, 0x0F	; 15
     if(group >= GROUP) 
    1258:	e4 30       	cpi	r30, 0x04	; 4
    125a:	10 f0       	brcs	.+4      	; 0x1260 <receive_i2c_event+0x4c>
     {
         i2c0Buffer[0] = 0xFE; // error code for bad group.
    125c:	8e ef       	ldi	r24, 0xFE	; 254
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <receive_i2c_event+0x54>
        return; 
     }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = i2c0Buffer[0] & 0x0F;
    1260:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    1262:	88 30       	cpi	r24, 0x08	; 8
    1264:	20 f0       	brcs	.+8      	; 0x126e <receive_i2c_event+0x5a>
    {
        i2c0Buffer[0] = 0xFD; // error code for bad command.
    1266:	8d ef       	ldi	r24, 0xFD	; 253
    1268:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <i2c0Buffer>
        return; // not valid, do nothing but echo error code.
    126c:	08 95       	ret
    }

    /* Call the command function and return */
    (* pf[group][command])(i2c0Buffer);
    126e:	98 e0       	ldi	r25, 0x08	; 8
    1270:	e9 9f       	mul	r30, r25
    1272:	f0 01       	movw	r30, r0
    1274:	11 24       	eor	r1, r1
    1276:	e8 0f       	add	r30, r24
    1278:	f1 1d       	adc	r31, r1
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	e5 5e       	subi	r30, 0xE5	; 229
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	01 90       	ld	r0, Z+
    1284:	f0 81       	ld	r31, Z
    1286:	e0 2d       	mov	r30, r0
    1288:	8c e0       	ldi	r24, 0x0C	; 12
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	09 94       	ijmp

0000128e <transmit_i2c_event>:
}

void transmit_i2c_event(void) 
{
    // respond with an echo of the last message sent
    uint8_t return_code = twi0_transmit(i2c0Buffer, i2c0BufferLength);
    128e:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <__data_end>
    1292:	8c e0       	ldi	r24, 0x0C	; 12
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <twi0_transmit>
    if (return_code != 0)
    129a:	88 23       	and	r24, r24
    129c:	29 f0       	breq	.+10     	; 0x12a8 <transmit_i2c_event+0x1a>
        status_byt &= (1<<DTR_I2C_TRANSMIT_FAIL);
    129e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <status_byt>
    12a2:	82 70       	andi	r24, 0x02	; 2
    12a4:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <status_byt>
    12a8:	08 95       	ret

000012aa <fnRdMgrAddrQuietly>:
}

// I2C_COMMAND_TO_READ_RPU_ADDRESS
void fnRdMgrAddrQuietly(uint8_t* i2cBuffer)
{
    i2cBuffer[1] = rpu_address; // '1' is 0x31
    12aa:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <rpu_address>
    12ae:	fc 01       	movw	r30, r24
    12b0:	21 83       	std	Z+1, r18	; 0x01
    12b2:	08 95       	ret

000012b4 <receive_smbus_event>:
// called when SMBus slave has received data
// minimize clock streatching for R-Pi. 
// use smbus_has_numBytes_to_handle as smbus flag to run handle routine outside ISR
void receive_smbus_event(uint8_t* inBytes, int numBytes)
{
    inBytes_to_handle = inBytes;
    12b4:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <inBytes_to_handle+0x1>
    12b8:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <inBytes_to_handle>
    smbus_has_numBytes_to_handle = numBytes;
    12bc:	70 93 4f 03 	sts	0x034F, r23	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
    12c0:	60 93 4e 03 	sts	0x034E, r22	; 0x80034e <smbus_has_numBytes_to_handle>
    12c4:	08 95       	ret

000012c6 <handle_smbus_receive>:
        {fnWtArduinMode, fnRdArduinMode, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull},
        {fnNull, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull, fnNull},
        {fnStartTestMode, fnEndTestMode, fnRdXcvrCntlInTestMode, fnWtXcvrCntlInTestMode, fnNull, fnNull, fnNull, fnNull}
    };

    int numBytes = smbus_has_numBytes_to_handle; // place value on stack so it will go away when done.
    12c6:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <smbus_has_numBytes_to_handle>
    12ca:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
    smbus_has_numBytes_to_handle = 0; 
    12ce:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <smbus_has_numBytes_to_handle+0x1>
    12d2:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <smbus_has_numBytes_to_handle>
    12d6:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <inBytes_to_handle>
    12da:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <inBytes_to_handle+0x1>
    // read_i2c_block_data has a single command byte in its data set
    // it will write i2c address, the command* byte, and then cause a repeated start
    // followed by the i2c address (again) and then reading** the data
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    12de:	21 30       	cpi	r18, 0x01	; 1
    12e0:	31 05       	cpc	r19, r1
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <handle_smbus_receive+0x22>
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	23 c0       	rjmp	.+70     	; 0x132e <handle_smbus_receive+0x68>
    // * clock stretching occures during the receive (so handle was done to move this code outside the ISR)
    // ** and the transmit events
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
    12e8:	90 81       	ld	r25, Z
    12ea:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <smbusBuffer>
    12ee:	98 13       	cpse	r25, r24
    12f0:	59 c0       	rjmp	.+178    	; 0x13a4 <handle_smbus_receive+0xde>
    12f2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <transmit_data_ready>
    12f6:	81 11       	cpse	r24, r1
    12f8:	55 c0       	rjmp	.+170    	; 0x13a4 <handle_smbus_receive+0xde>
        {
            for(i = 0; i < smbusBufferLength; ++i)
    12fa:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <smbusBufferLength>
    12fe:	ac e2       	ldi	r26, 0x2C	; 44
    1300:	b3 e0       	ldi	r27, 0x03	; 3
    1302:	e0 e5       	ldi	r30, 0x50	; 80
    1304:	f3 e0       	ldi	r31, 0x03	; 3
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	98 17       	cp	r25, r24
    130a:	21 f0       	breq	.+8      	; 0x1314 <handle_smbus_receive+0x4e>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
    130c:	2d 91       	ld	r18, X+
    130e:	21 93       	st	Z+, r18
    if( (numBytes == 1)  )
    {
        // transmit event is set up to work from an old buffer, the data it needs is in the current buffer. 
        if ( (inBytes_to_handle[0] == smbusBuffer[0]) && (!transmit_data_ready) )
        {
            for(i = 0; i < smbusBufferLength; ++i)
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	fa cf       	rjmp	.-12     	; 0x1308 <handle_smbus_receive+0x42>
            {
                smbus_oldBuffer[i] = smbusBuffer[i];
            }
            if(i < SMBUS_BUFFER_LENGTH) smbus_oldBuffer[i+1] = 0; // room for null
    1314:	80 32       	cpi	r24, 0x20	; 32
    1316:	28 f4       	brcc	.+10     	; 0x1322 <handle_smbus_receive+0x5c>
    1318:	e8 2f       	mov	r30, r24
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	e0 5b       	subi	r30, 0xB0	; 176
    131e:	fc 4f       	sbci	r31, 0xFC	; 252
    1320:	11 82       	std	Z+1, r1	; 0x01
            smbus_oldBufferLength = smbusBufferLength;
    1322:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <smbus_oldBufferLength>
            transmit_data_ready = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <transmit_data_ready>
    132c:	08 95       	ret
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    132e:	84 2f       	mov	r24, r20
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	82 17       	cp	r24, r18
    1334:	93 07       	cpc	r25, r19
    1336:	54 f4       	brge	.+20     	; 0x134c <handle_smbus_receive+0x86>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    1338:	df 01       	movw	r26, r30
    133a:	a8 0f       	add	r26, r24
    133c:	b9 1f       	adc	r27, r25
    133e:	5c 91       	ld	r21, X
    1340:	dc 01       	movw	r26, r24
    1342:	a4 5d       	subi	r26, 0xD4	; 212
    1344:	bc 4f       	sbci	r27, 0xFC	; 252
    1346:	5c 93       	st	X, r21
            smbus_oldBufferLength = smbusBufferLength;
            transmit_data_ready = 1;
        }
        return; // done. Even if command does not match.
    }
    for(i = 0; i < numBytes; ++i)
    1348:	4f 5f       	subi	r20, 0xFF	; 255
    134a:	f1 cf       	rjmp	.-30     	; 0x132e <handle_smbus_receive+0x68>
    {
        smbusBuffer[i] = inBytes_to_handle[i];    
    }
    if(i < SMBUS_BUFFER_LENGTH) smbusBuffer[i+1] = 0; // room for null
    134c:	40 32       	cpi	r20, 0x20	; 32
    134e:	20 f4       	brcc	.+8      	; 0x1358 <handle_smbus_receive+0x92>
    1350:	fc 01       	movw	r30, r24
    1352:	e4 5d       	subi	r30, 0xD4	; 212
    1354:	fc 4f       	sbci	r31, 0xFC	; 252
    1356:	11 82       	std	Z+1, r1	; 0x01
    smbusBufferLength = numBytes;
    1358:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <smbusBufferLength>

    // an read_i2c_block_data has a command byte 
    if( !(smbusBufferLength > 0) ) 
    135c:	21 11       	cpse	r18, r1
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <handle_smbus_receive+0x9e>
    {
        smbusBuffer[0] = 0xFF; // error code for small size.
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	0d c0       	rjmp	.+26     	; 0x137e <handle_smbus_receive+0xb8>
        return; // not valid, do nothing just echo an error code.
    }

    // mask the group bits (4..7) so they are alone then roll those bits to the left so they can be used as an index.
    uint8_t group;
    group = (smbusBuffer[0] & 0xF0) >> 4;
    1364:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <smbusBuffer>
    1368:	e8 2f       	mov	r30, r24
    136a:	e2 95       	swap	r30
    136c:	ef 70       	andi	r30, 0x0F	; 15
    if(group >= GROUP) 
    136e:	e4 30       	cpi	r30, 0x04	; 4
    1370:	10 f0       	brcs	.+4      	; 0x1376 <handle_smbus_receive+0xb0>
    {
        smbusBuffer[0] = 0xFE; // error code for bad group.
    1372:	8e ef       	ldi	r24, 0xFE	; 254
    1374:	04 c0       	rjmp	.+8      	; 0x137e <handle_smbus_receive+0xb8>
        return; 
    }

    // mask the command bits (0..3) so they can be used as an index.
    uint8_t command;
    command = smbusBuffer[0] & 0x0F;
    1376:	8f 70       	andi	r24, 0x0F	; 15
    if(command >= MGR_CMDS) 
    1378:	88 30       	cpi	r24, 0x08	; 8
    137a:	20 f0       	brcs	.+8      	; 0x1384 <handle_smbus_receive+0xbe>
    {
        smbusBuffer[0] = 0xFD; // error code for bad command.
    137c:	8d ef       	ldi	r24, 0xFD	; 253
    137e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <smbusBuffer>
        return; // not valid, do nothing but echo error code.
    1382:	08 95       	ret
    }

    // Call the i2c command function and return
    (* pf[group][command])(smbusBuffer);
    1384:	98 e0       	ldi	r25, 0x08	; 8
    1386:	e9 9f       	mul	r30, r25
    1388:	f0 01       	movw	r30, r0
    138a:	11 24       	eor	r1, r1
    138c:	e8 0f       	add	r30, r24
    138e:	f1 1d       	adc	r31, r1
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	e5 5a       	subi	r30, 0xA5	; 165
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	01 90       	ld	r0, Z+
    139a:	f0 81       	ld	r31, Z
    139c:	e0 2d       	mov	r30, r0
    139e:	8c e2       	ldi	r24, 0x2C	; 44
    13a0:	93 e0       	ldi	r25, 0x03	; 3
    13a2:	09 94       	ijmp
    13a4:	08 95       	ret

000013a6 <transmit_smbus_event>:

// called when SMBus slave has been requested to send data
void transmit_smbus_event(void) 
{
    // For SMBus echo the old data from the previous I2C receive event
    twi1_transmit(smbus_oldBuffer, smbus_oldBufferLength);
    13a6:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <smbus_oldBufferLength>
    13aa:	80 e5       	ldi	r24, 0x50	; 80
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <twi1_transmit>
    transmit_data_ready = 0;
    13b2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <transmit_data_ready>
    13b6:	08 95       	ret

000013b8 <save_rpu_addr_state>:
    'd',
    '\0' // null term
};

void save_rpu_addr_state(void)
{
    13b8:	cf 93       	push	r28
    if (eeprom_is_ready())
    13ba:	f9 99       	sbic	0x1f, 1	; 31
    13bc:	24 c0       	rjmp	.+72     	; 0x1406 <save_rpu_addr_state+0x4e>
    {
        // up to first EE_RPU_IDMAX states may be used for writhing an ID to the EEPROM
        if ( (write_rpu_address_to_eeprom >= 1) && (write_rpu_address_to_eeprom <= EE_RPU_IDMAX) )
    13be:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
    13c2:	9f ef       	ldi	r25, 0xFF	; 255
    13c4:	98 0f       	add	r25, r24
    13c6:	9a 30       	cpi	r25, 0x0A	; 10
    13c8:	90 f4       	brcc	.+36     	; 0x13ee <save_rpu_addr_state+0x36>
        { // write "RPUadpt\0" at address EE_RPU_ID
            uint8_t value = pgm_read_byte(&EE_IdTable[write_rpu_address_to_eeprom-1]);
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	fc 01       	movw	r30, r24
    13ce:	ed 54       	subi	r30, 0x4D	; 77
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	c4 91       	lpm	r28, Z
            eeprom_write_byte( (uint8_t *)((write_rpu_address_to_eeprom-1)+EE_RPU_ID), value);
    13d4:	6c 2f       	mov	r22, r28
    13d6:	87 96       	adiw	r24, 0x27	; 39
    13d8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <eeprom_write_byte>
            
            if (value == '\0') 
    13dc:	c1 11       	cpse	r28, r1
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <save_rpu_addr_state+0x2c>
            {
                write_rpu_address_to_eeprom = 11;
    13e0:	8b e0       	ldi	r24, 0x0B	; 11
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <save_rpu_addr_state+0x32>
            }
            else
            {
                write_rpu_address_to_eeprom += 1;
    13e4:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <write_rpu_address_to_eeprom>
            }
        }
        
        if ( (write_rpu_address_to_eeprom == 11) )
    13ee:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <write_rpu_address_to_eeprom>
    13f2:	8b 30       	cpi	r24, 0x0B	; 11
    13f4:	41 f4       	brne	.+16     	; 0x1406 <save_rpu_addr_state+0x4e>
        { // write the rpu address to eeprom address EE_RPU_ADDRESS 
            uint8_t value = rpu_address;
            eeprom_write_byte( (uint8_t *)(EE_RPU_ADDRESS), value);
    13f6:	60 91 01 03 	lds	r22, 0x0301	; 0x800301 <rpu_address>
    13fa:	82 e3       	ldi	r24, 0x32	; 50
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <eeprom_write_byte>
            write_rpu_address_to_eeprom = 0;
    1402:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <write_rpu_address_to_eeprom>
        }
    }
}
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <check_for_eeprom_id>:

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	c8 e2       	ldi	r28, 0x28	; 40
    1412:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
    1414:	fe 01       	movw	r30, r28
    1416:	e4 57       	subi	r30, 0x74	; 116
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	14 91       	lpm	r17, Z
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
    141c:	ce 01       	movw	r24, r28
    141e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <eeprom_read_byte>
        if (id != ee_id) 
    1422:	18 13       	cpse	r17, r24
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <check_for_eeprom_id+0x28>
        {
            EE_id_valid = 0;
            break;
        }
        
        if (id == '\0') 
    1426:	11 23       	and	r17, r17
    1428:	31 f0       	breq	.+12     	; 0x1436 <check_for_eeprom_id+0x2c>
    142a:	21 96       	adiw	r28, 0x01	; 1

// check if eeprom ID is valid
uint8_t check_for_eeprom_id(void)
{
    uint8_t EE_id_valid = 0;
    for(uint8_t i = 0; i <EE_RPU_IDMAX; i++)
    142c:	c2 33       	cpi	r28, 0x32	; 50
    142e:	d1 05       	cpc	r29, r1
    1430:	89 f7       	brne	.-30     	; 0x1414 <check_for_eeprom_id+0xa>
    {
        uint8_t id = pgm_read_byte(&EE_IdTable[i]);
        uint8_t ee_id = eeprom_read_byte((uint8_t*)(i+EE_RPU_ID)); 
        if (id != ee_id) 
        {
            EE_id_valid = 0;
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <check_for_eeprom_id+0x2e>
            break;
        }
        
        if (id == '\0') 
        {
            EE_id_valid = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
            break;
        }
    }
    return EE_id_valid;
}
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	08 95       	ret

00001440 <__vector_18>:
}

#if defined(AT90_UART) || defined(ATMEGA_USART) || defined(ATMEGA_USART0) 

ISR(UART0_RECEIVE_INTERRUPT)
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	ef 93       	push	r30
    1458:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    145a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
    145e:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & ((1<<FE0)|(1<<DOR0)) );
    1462:	28 71       	andi	r18, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & ((1<<FE)|(1<<DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    1464:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	8f 71       	andi	r24, 0x1F	; 31
    146e:	99 27       	eor	r25, r25
    
    if ( tmphead == UART0_RxTail ) {
    1470:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	84 17       	cp	r24, r20
    1478:	95 07       	cpc	r25, r21
    147a:	39 f0       	breq	.+14     	; 0x148a <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART0_RxHead = tmphead;
    147c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <UART0_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1480:	fc 01       	movw	r30, r24
    1482:	eb 55       	subi	r30, 0x5B	; 91
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	30 83       	st	Z, r19
    1488:	01 c0       	rjmp	.+2      	; 0x148c <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART0_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART0_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    148a:	22 e0       	ldi	r18, 0x02	; 2
        /* store new index */
        UART0_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART0_LastRxError = lastRxError;   
    148c:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <UART0_LastRxError>
}
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_19>:


ISR(UART0_TRANSMIT_INTERRUPT)
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	ef 93       	push	r30
    14ba:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART0_TxHead != UART0_TxTail) {
    14bc:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART0_TxHead>
    14c0:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    14c4:	98 17       	cp	r25, r24
    14c6:	79 f0       	breq	.+30     	; 0x14e6 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART0_TxTail + 1) & UART_TX0_BUFFER_MASK;
    14c8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <UART0_TxTail>
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	8f 71       	andi	r24, 0x1F	; 31
    14d2:	99 27       	eor	r25, r25
        UART0_TxTail = tmptail;
    14d4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART0_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    14d8:	fc 01       	movw	r30, r24
    14da:	eb 53       	subi	r30, 0x3B	; 59
    14dc:	fe 4f       	sbci	r31, 0xFE	; 254
    14de:	80 81       	ld	r24, Z
    14e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~(1<<UART0_UDRIE);
    14e6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
    14f0:	ff 91       	pop	r31
    14f2:	ef 91       	pop	r30
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <uart0_init>:
          UART0_CONTROL = _BV(RXEN0) | _BV(TXEN0); // enable TX and RX glitch free
          UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // control frame format
          UBRR0L = (uint8_t)( (F_CPU + BAUD * 4L) / (BAUD * 8L) - 1 );
    */
    
    UART0_TxHead = 0;
    1502:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART0_TxHead>
    UART0_TxTail = 0;
    1506:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART0_TxTail>
    UART0_RxHead = 0;
    150a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART0_RxHead>
    UART0_RxTail = 0;
    150e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <UART0_RxTail>
    if ( baudrate & 0x8000 ) {
        UART0_STATUS = (1<<U2X);  //Enable 2x speed
        baudrate &= ~0x8000;
    }
#elif defined ( ATMEGA_USART0 )
    if ( baudrate & 0x8000 ) {
    1512:	97 ff       	sbrs	r25, 7
    1514:	04 c0       	rjmp	.+8      	; 0x151e <uart0_init+0x1c>
        UART0_STATUS = (1<<U2X0);  //Enable 2x speed
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        baudrate &= ~0x8000;
    151c:	9f 77       	andi	r25, 0x7F	; 127
    UBRRH = (uint8_t)(baudrate>>8);
    UBRRL = (uint8_t) baudrate;

#elif defined ( ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    151e:	28 e9       	ldi	r18, 0x98	; 152
    1520:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
#else
    UCSR0C = (3<<UCSZ00);
    1524:	26 e0       	ldi	r18, 0x06	; 6
    1526:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif /* defined( ATMEGA_USART0 ) */

    /* Set ATMEGA_USART0 baud rate */
    UBRR0H = (uint8_t)(baudrate>>8);
    152a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (uint8_t) baudrate;
    152e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1532:	08 95       	ret

00001534 <uart0_getc>:
uint16_t uart0_getc(void)
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
    1534:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART0_RxHead>
    1538:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    153c:	98 17       	cp	r25, r24
    153e:	a1 f0       	breq	.+40     	; 0x1568 <uart0_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }

    /* calculate /store buffer index */
    tmptail = (UART0_RxTail + 1) & UART_RX0_BUFFER_MASK;
    1540:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <UART0_RxTail>
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	8f 71       	andi	r24, 0x1F	; 31
    154a:	99 27       	eor	r25, r25
    UART0_RxTail = tmptail;
    154c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART0_RxTail>

    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1550:	fc 01       	movw	r30, r24
    1552:	eb 55       	subi	r30, 0x5B	; 91
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	20 81       	ld	r18, Z

    return (UART0_LastRxError << 8) + data;
    1558:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <UART0_LastRxError>
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	98 2f       	mov	r25, r24
    1560:	88 27       	eor	r24, r24
    1562:	82 0f       	add	r24, r18
    1564:	91 1d       	adc	r25, r1
    1566:	08 95       	ret
{
    uint16_t tmptail;
    uint8_t data;

    if ( UART0_RxHead == UART0_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];

    return (UART0_LastRxError << 8) + data;

} /* uart0_getc */
    156c:	08 95       	ret

0000156e <uart0_putc>:

void uart0_putc(uint8_t data)
{
    uint16_t tmphead;

    tmphead  = (UART0_TxHead + 1) & UART_TX0_BUFFER_MASK;
    156e:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <UART0_TxHead>
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	2f 71       	andi	r18, 0x1F	; 31
    157a:	33 27       	eor	r19, r19

    while ( tmphead == UART0_TxTail ) {
    157c:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <UART0_TxTail>
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	24 17       	cp	r18, r20
    1584:	35 07       	cpc	r19, r21
    1586:	d1 f3       	breq	.-12     	; 0x157c <uart0_putc+0xe>
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    1588:	f9 01       	movw	r30, r18
    158a:	eb 53       	subi	r30, 0x3B	; 59
    158c:	fe 4f       	sbci	r31, 0xFE	; 254
    158e:	80 83       	st	Z, r24
    UART0_TxHead = tmphead;
    1590:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <UART0_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= (1<<UART0_UDRIE);
    1594:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1598:	80 62       	ori	r24, 0x20	; 32
    159a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    159e:	08 95       	ret

000015a0 <uartstream0_putchar>:
	return &uartstream0_f;
}	

static int uartstream0_putchar(char c, FILE *stream)
{
	uart0_putc((uint8_t) c);
    15a0:	0e 94 b7 0a 	call	0x156e	; 0x156e <uart0_putc>
	return 0;
}
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	08 95       	ret

000015aa <uart0_available>:
} /* uart0_flush */

/* number of bytes available in the receive buffer */
uint16_t uart0_available(void)
{
    return (UART_RX0_BUFFER_SIZE + UART0_RxHead - UART0_RxTail) & UART_RX0_BUFFER_MASK;
    15aa:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <UART0_RxHead>
    15ae:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <UART0_RxTail>
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	80 96       	adiw	r24, 0x20	; 32
    15b6:	82 1b       	sub	r24, r18
    15b8:	91 09       	sbc	r25, r1
} /* uart0_available */
    15ba:	8f 71       	andi	r24, 0x1F	; 31
    15bc:	99 27       	eor	r25, r25
    15be:	08 95       	ret

000015c0 <uartstream0_getchar>:
}

static int uartstream0_getchar(FILE *stream)
{
	uint16_t res;
	while( !(uart0_available()) );  // wait for input
    15c0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <uart0_available>
    15c4:	89 2b       	or	r24, r25
    15c6:	e1 f3       	breq	.-8      	; 0x15c0 <uartstream0_getchar>
    res = uart0_getc();
    15c8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <uart0_getc>
    if(res == '\r') res = '\n';
    15cc:	8d 30       	cpi	r24, 0x0D	; 13
    15ce:	91 05       	cpc	r25, r1
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <uartstream0_getchar+0x16>
    15d2:	8a e0       	ldi	r24, 0x0A	; 10
    15d4:	90 e0       	ldi	r25, 0x00	; 0
	return (int) (res & 0xFF);
}
    15d6:	99 27       	eor	r25, r25
    15d8:	08 95       	ret

000015da <uartstream0_init>:
// Stream declaration for stdio
static FILE uartstream0_f = FDEV_SETUP_STREAM(uartstream0_putchar, uartstream0_getchar, _FDEV_SETUP_RW);

/* Initialize the file handle, return the file handle  */
FILE *uartstream0_init(uint32_t baudrate)
{
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	8b 01       	movw	r16, r22
    15e0:	9c 01       	movw	r18, r24
	uart0_init(UART_BAUD_SELECT(baudrate, F_CPU));
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	80 5a       	subi	r24, 0xA0	; 160
    15e8:	9c 41       	sbci	r25, 0x1C	; 28
    15ea:	a9 4e       	sbci	r26, 0xE9	; 233
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	43 e0       	ldi	r20, 0x03	; 3
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	4a 95       	dec	r20
    15fe:	d1 f7       	brne	.-12     	; 0x15f4 <uartstream0_init+0x1a>
    1600:	a9 01       	movw	r20, r18
    1602:	98 01       	movw	r18, r16
    1604:	e4 e0       	ldi	r30, 0x04	; 4
    1606:	22 0f       	add	r18, r18
    1608:	33 1f       	adc	r19, r19
    160a:	44 1f       	adc	r20, r20
    160c:	55 1f       	adc	r21, r21
    160e:	ea 95       	dec	r30
    1610:	d1 f7       	brne	.-12     	; 0x1606 <uartstream0_init+0x2c>
    1612:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__udivmodsi4>
    1616:	c9 01       	movw	r24, r18
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	0e 94 81 0a 	call	0x1502	; 0x1502 <uart0_init>
	return &uartstream0_f;
}	
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

00001628 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    163e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timer0_millis>
    1642:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <timer0_millis+0x1>
    1646:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <timer0_millis+0x2>
    164a:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    164e:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1652:	2d e2       	ldi	r18, 0x2D	; 45
    1654:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1656:	2d 37       	cpi	r18, 0x7D	; 125
    1658:	20 f4       	brcc	.+8      	; 0x1662 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	a1 1d       	adc	r26, r1
    165e:	b1 1d       	adc	r27, r1
    1660:	05 c0       	rjmp	.+10     	; 0x166c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1662:	20 eb       	ldi	r18, 0xB0	; 176
    1664:	23 0f       	add	r18, r19
		m += 1;
    1666:	02 96       	adiw	r24, 0x02	; 2
    1668:	a1 1d       	adc	r26, r1
    166a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    166c:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <timer0_fract>
	timer0_millis = m;
    1670:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <timer0_millis>
    1674:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <timer0_millis+0x1>
    1678:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <timer0_millis+0x2>
    167c:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <timer0_millis+0x3>
	timer0_overflow_count++;
    1680:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer0_overflow_count>
    1684:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer0_overflow_count+0x1>
    1688:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <timer0_overflow_count+0x2>
    168c:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <timer0_overflow_count+0x3>
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	a1 1d       	adc	r26, r1
    1694:	b1 1d       	adc	r27, r1
    1696:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <timer0_overflow_count>
    169a:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <timer0_overflow_count+0x1>
    169e:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <timer0_overflow_count+0x2>
    16a2:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <timer0_overflow_count+0x3>
}
    16a6:	bf 91       	pop	r27
    16a8:	af 91       	pop	r26
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    16bc:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    16be:	f8 94       	cli
	m = timer0_millis;
    16c0:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <timer0_millis>
    16c4:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <timer0_millis+0x1>
    16c8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <timer0_millis+0x2>
    16cc:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <timer0_millis+0x3>
	SREG = oldSREG;
    16d0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    16d2:	08 95       	ret

000016d4 <initTimers>:
{
	// on the ATmega168, timer 0 is also set for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	TCCR0A |= (1<<WGM01);
    16d4:	84 b5       	in	r24, 0x24	; 36
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
    16da:	84 b5       	in	r24, 0x24	; 36
    16dc:	81 60       	ori	r24, 0x01	; 1
    16de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	TCCR0 |= (1<<CS01);
	TCCR0 |= (1<<CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	TCCR0B |= (1<<CS01);
    16e0:	85 b5       	in	r24, 0x25	; 37
    16e2:	82 60       	ori	r24, 0x02	; 2
    16e4:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
    16e6:	85 b5       	in	r24, 0x25	; 37
    16e8:	81 60       	ori	r24, 0x01	; 1
    16ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	TIMSK |= (1<<TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	TIMSK0 |= (1<<TOIE0);
    16ec:	ee e6       	ldi	r30, 0x6E	; 110
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	81 60       	ori	r24, 0x01	; 1
    16f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16f6:	e1 e8       	ldi	r30, 0x81	; 129
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	TCCR1B |= (1<<CS11);
    16fc:	80 81       	ld	r24, Z
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	TCCR1B |= (1<<CS10);
    1702:	80 81       	ld	r24, Z
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	80 83       	st	Z, r24
	TCCR1 |= (1<<CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	TCCR1A |= (1<<WGM10);
    1708:	e0 e8       	ldi	r30, 0x80	; 128
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	81 60       	ori	r24, 0x01	; 1
    1710:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	TCCR2 |= (1<<CS22);
#elif defined(TCCR2B) && defined(CS22)
	TCCR2B |= (1<<CS22);
    1712:	e1 eb       	ldi	r30, 0xB1	; 177
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	84 60       	ori	r24, 0x04	; 4
    171a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	TCCR2 |= (1<<WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	TCCR2A |= (1<<WGM20);
    171c:	e0 eb       	ldi	r30, 0xB0	; 176
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	81 60       	ori	r24, 0x01	; 1
    1724:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	TCCR3B |= (1<<CS31);		// set timer 3 prescale factor to 64
    1726:	e1 e9       	ldi	r30, 0x91	; 145
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	82 60       	ori	r24, 0x02	; 2
    172e:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);
    1730:	80 81       	ld	r24, Z
    1732:	81 60       	ori	r24, 0x01	; 1
    1734:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1736:	e0 e9       	ldi	r30, 0x90	; 144
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	81 60       	ori	r24, 0x01	; 1
    173e:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	TCCR4A |= (1<<PWM4A);		// enable PWM mode for comparator OCR4A
	TCCR4C |= (1<<PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	TCCR4B |= (1<<CS41);		// set timer 4 prescale factor to 64
    1740:	e1 ea       	ldi	r30, 0xA1	; 161
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
    174a:	80 81       	ld	r24, Z
    174c:	81 60       	ori	r24, 0x01	; 1
    174e:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1750:	e0 ea       	ldi	r30, 0xA0	; 160
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	80 83       	st	Z, r24
    175a:	08 95       	ret

0000175c <transmit0_default>:
static volatile uint8_t twi0_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi0_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit0_default(void)
{
    175c:	08 95       	ret

0000175e <receive0_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive0_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    175e:	08 95       	ret

00001760 <twi0_init>:

/* init twi pins and set bitrate */
void twi0_init(uint8_t pull_up)
{
    // initialize state
    twi0_state = TWI0_READY;
    1760:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
    twi0_sendStop = 1;		// default value
    1764:	91 e0       	ldi	r25, 0x01	; 1
    1766:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <twi0_sendStop>
    twi0_inRepStart = 0;
    176a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <twi0_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    176e:	88 23       	and	r24, r24
    1770:	21 f0       	breq	.+8      	; 0x177a <twi0_init+0x1a>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRC &= ~(1 << DDC4);  // clear the ddr bit to set as an input
    1772:	3c 98       	cbi	0x07, 4	; 7
        PORTC |= (1 << PORTC4);  // write a one to the port bit to enable the pull-up
    1774:	44 9a       	sbi	0x08, 4	; 8
        DDRC &= ~(1 << DDC5);
    1776:	3d 98       	cbi	0x07, 5	; 7
        PORTC |= (1 << PORTC5); 
    1778:	45 9a       	sbi	0x08, 5	; 8
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR0 &= ~((1<<TWPS0));
    177a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    177e:	8e 7f       	andi	r24, 0xFE	; 254
    1780:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWSR0 &= ~((1<<TWPS1));
    1784:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1788:	8d 7f       	andi	r24, 0xFD	; 253
    178a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR0 = ((F_CPU / TWI0_FREQ) - 16) / 2;
    178e:	84 e3       	ldi	r24, 0x34	; 52
    1790:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR0))
    note: TWBR0 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    1794:	85 e4       	ldi	r24, 0x45	; 69
    1796:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    179a:	08 95       	ret

0000179c <twi0_setAddress>:

/* init slave address and enable interrupt */
void twi0_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR0 = address << 1;
    179c:	88 0f       	add	r24, r24
    179e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    17a2:	08 95       	ret

000017a4 <twi0_transmit>:
uint8_t twi0_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    17a4:	61 32       	cpi	r22, 0x21	; 33
    17a6:	98 f4       	brcc	.+38     	; 0x17ce <twi0_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    17a8:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <twi0_state>
    17ac:	24 30       	cpi	r18, 0x04	; 4
    17ae:	89 f4       	brne	.+34     	; 0x17d2 <twi0_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi0_txBufferLength = length;
    17b0:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <twi0_txBufferLength>
    17b4:	28 2f       	mov	r18, r24
    17b6:	a2 e1       	ldi	r26, 0x12	; 18
    17b8:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    17ba:	fc 01       	movw	r30, r24
    17bc:	8e 2f       	mov	r24, r30
    17be:	82 1b       	sub	r24, r18
    17c0:	86 17       	cp	r24, r22
    17c2:	18 f4       	brcc	.+6      	; 0x17ca <twi0_transmit+0x26>
    {
        twi0_txBuffer[i] = data[i];
    17c4:	81 91       	ld	r24, Z+
    17c6:	8d 93       	st	X+, r24
    17c8:	f9 cf       	rjmp	.-14     	; 0x17bc <twi0_transmit+0x18>
    }
  
    return 0;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI0_BUFFER_LENGTH < length)
    {
        return 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI0_STX != twi0_state)
    {
        return 2;
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi0_txBuffer[i] = data[i];
    }
  
    return 0;
}
    17d4:	08 95       	ret

000017d6 <twi0_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi0_onSlaveReceive = function;
    17d6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <twi0_onSlaveReceive+0x1>
    17da:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <twi0_onSlaveReceive>
    17de:	08 95       	ret

000017e0 <twi0_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi0_attachSlaveTxEvent( void (*function)(void) )
{
    twi0_onSlaveTransmit = function;
    17e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <twi0_onSlaveTransmit+0x1>
    17e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi0_onSlaveTransmit>
    17e8:	08 95       	ret

000017ea <twi0_stop>:

/* relinquishe bus master status */
void twi0_stop(void)
{
    // send stop condition
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    17ea:	85 ed       	ldi	r24, 0xD5	; 213
    17ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR0 & (1<<TWSTO))
    17f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17f4:	84 fd       	sbrc	r24, 4
    17f6:	fc cf       	rjmp	.-8      	; 0x17f0 <twi0_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi0_state = TWI0_READY;
    17f8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
    17fc:	08 95       	ret

000017fe <twi0_releaseBus>:

/* release bus */
void twi0_releaseBus(void)
{
    // release bus
    TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    17fe:	85 ec       	ldi	r24, 0xC5	; 197
    1800:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // update twi state
    twi0_state = TWI0_READY;
    1804:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
    1808:	08 95       	ret

0000180a <__vector_24>:
}

ISR(TWI0_vect)
{
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    182c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1830:	88 7f       	andi	r24, 0xF8	; 248
    1832:	80 36       	cpi	r24, 0x60	; 96
    1834:	09 f4       	brne	.+2      	; 0x1838 <__vector_24+0x2e>
    1836:	9e c0       	rjmp	.+316    	; 0x1974 <__vector_24+0x16a>
    1838:	78 f5       	brcc	.+94     	; 0x1898 <__vector_24+0x8e>
    183a:	88 32       	cpi	r24, 0x28	; 40
    183c:	09 f4       	brne	.+2      	; 0x1840 <__vector_24+0x36>
    183e:	5d c0       	rjmp	.+186    	; 0x18fa <__vector_24+0xf0>
    1840:	90 f4       	brcc	.+36     	; 0x1866 <__vector_24+0x5c>
    1842:	80 31       	cpi	r24, 0x10	; 16
    1844:	09 f4       	brne	.+2      	; 0x1848 <__vector_24+0x3e>
    1846:	56 c0       	rjmp	.+172    	; 0x18f4 <__vector_24+0xea>
    1848:	38 f4       	brcc	.+14     	; 0x1858 <__vector_24+0x4e>
    184a:	88 23       	and	r24, r24
    184c:	09 f4       	brne	.+2      	; 0x1850 <__vector_24+0x46>
    184e:	f5 c0       	rjmp	.+490    	; 0x1a3a <__vector_24+0x230>
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	09 f4       	brne	.+2      	; 0x1856 <__vector_24+0x4c>
    1854:	4f c0       	rjmp	.+158    	; 0x18f4 <__vector_24+0xea>
    1856:	f5 c0       	rjmp	.+490    	; 0x1a42 <__vector_24+0x238>
    1858:	88 31       	cpi	r24, 0x18	; 24
    185a:	09 f4       	brne	.+2      	; 0x185e <__vector_24+0x54>
    185c:	4e c0       	rjmp	.+156    	; 0x18fa <__vector_24+0xf0>
    185e:	80 32       	cpi	r24, 0x20	; 32
    1860:	09 f4       	brne	.+2      	; 0x1864 <__vector_24+0x5a>
    1862:	5f c0       	rjmp	.+190    	; 0x1922 <__vector_24+0x118>
    1864:	ee c0       	rjmp	.+476    	; 0x1a42 <__vector_24+0x238>
    1866:	80 34       	cpi	r24, 0x40	; 64
    1868:	09 f4       	brne	.+2      	; 0x186c <__vector_24+0x62>
    186a:	6a c0       	rjmp	.+212    	; 0x1940 <__vector_24+0x136>
    186c:	58 f4       	brcc	.+22     	; 0x1884 <__vector_24+0x7a>
    186e:	80 33       	cpi	r24, 0x30	; 48
    1870:	09 f4       	brne	.+2      	; 0x1874 <__vector_24+0x6a>
    1872:	57 c0       	rjmp	.+174    	; 0x1922 <__vector_24+0x118>
    1874:	88 33       	cpi	r24, 0x38	; 56
    1876:	09 f0       	breq	.+2      	; 0x187a <__vector_24+0x70>
    1878:	e4 c0       	rjmp	.+456    	; 0x1a42 <__vector_24+0x238>
            twi0_error = TW_MT_DATA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi0_error = TW_MT_ARB_LOST;
    187a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <twi0_error>
            twi0_releaseBus();
    187e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <twi0_releaseBus>
            break;
    1882:	df c0       	rjmp	.+446    	; 0x1a42 <__vector_24+0x238>
}

ISR(TWI0_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR0 & TW_STATUS_MASK)
    1884:	80 35       	cpi	r24, 0x50	; 80
    1886:	09 f4       	brne	.+2      	; 0x188a <__vector_24+0x80>
    1888:	4f c0       	rjmp	.+158    	; 0x1928 <__vector_24+0x11e>
    188a:	88 35       	cpi	r24, 0x58	; 88
    188c:	09 f4       	brne	.+2      	; 0x1890 <__vector_24+0x86>
    188e:	5d c0       	rjmp	.+186    	; 0x194a <__vector_24+0x140>
    1890:	88 34       	cpi	r24, 0x48	; 72
    1892:	09 f0       	breq	.+2      	; 0x1896 <__vector_24+0x8c>
    1894:	d6 c0       	rjmp	.+428    	; 0x1a42 <__vector_24+0x238>
    1896:	d3 c0       	rjmp	.+422    	; 0x1a3e <__vector_24+0x234>
    1898:	88 39       	cpi	r24, 0x98	; 152
    189a:	09 f4       	brne	.+2      	; 0x189e <__vector_24+0x94>
    189c:	c4 c0       	rjmp	.+392    	; 0x1a26 <__vector_24+0x21c>
    189e:	a8 f4       	brcc	.+42     	; 0x18ca <__vector_24+0xc0>
    18a0:	88 37       	cpi	r24, 0x78	; 120
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <__vector_24+0x9c>
    18a4:	67 c0       	rjmp	.+206    	; 0x1974 <__vector_24+0x16a>
    18a6:	38 f4       	brcc	.+14     	; 0x18b6 <__vector_24+0xac>
    18a8:	88 36       	cpi	r24, 0x68	; 104
    18aa:	09 f4       	brne	.+2      	; 0x18ae <__vector_24+0xa4>
    18ac:	63 c0       	rjmp	.+198    	; 0x1974 <__vector_24+0x16a>
    18ae:	80 37       	cpi	r24, 0x70	; 112
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <__vector_24+0xaa>
    18b2:	60 c0       	rjmp	.+192    	; 0x1974 <__vector_24+0x16a>
    18b4:	c6 c0       	rjmp	.+396    	; 0x1a42 <__vector_24+0x238>
    18b6:	88 38       	cpi	r24, 0x88	; 136
    18b8:	09 f4       	brne	.+2      	; 0x18bc <__vector_24+0xb2>
    18ba:	b5 c0       	rjmp	.+362    	; 0x1a26 <__vector_24+0x21c>
    18bc:	80 39       	cpi	r24, 0x90	; 144
    18be:	09 f4       	brne	.+2      	; 0x18c2 <__vector_24+0xb8>
    18c0:	5f c0       	rjmp	.+190    	; 0x1980 <__vector_24+0x176>
    18c2:	80 38       	cpi	r24, 0x80	; 128
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <__vector_24+0xbe>
    18c6:	bd c0       	rjmp	.+378    	; 0x1a42 <__vector_24+0x238>
    18c8:	5b c0       	rjmp	.+182    	; 0x1980 <__vector_24+0x176>
    18ca:	80 3b       	cpi	r24, 0xB0	; 176
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <__vector_24+0xc6>
    18ce:	83 c0       	rjmp	.+262    	; 0x19d6 <__vector_24+0x1cc>
    18d0:	38 f4       	brcc	.+14     	; 0x18e0 <__vector_24+0xd6>
    18d2:	80 3a       	cpi	r24, 0xA0	; 160
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <__vector_24+0xce>
    18d6:	66 c0       	rjmp	.+204    	; 0x19a4 <__vector_24+0x19a>
    18d8:	88 3a       	cpi	r24, 0xA8	; 168
    18da:	09 f4       	brne	.+2      	; 0x18de <__vector_24+0xd4>
    18dc:	7c c0       	rjmp	.+248    	; 0x19d6 <__vector_24+0x1cc>
    18de:	b1 c0       	rjmp	.+354    	; 0x1a42 <__vector_24+0x238>
    18e0:	80 3c       	cpi	r24, 0xC0	; 192
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <__vector_24+0xdc>
    18e4:	a4 c0       	rjmp	.+328    	; 0x1a2e <__vector_24+0x224>
    18e6:	88 3c       	cpi	r24, 0xC8	; 200
    18e8:	09 f4       	brne	.+2      	; 0x18ec <__vector_24+0xe2>
    18ea:	a1 c0       	rjmp	.+322    	; 0x1a2e <__vector_24+0x224>
    18ec:	88 3b       	cpi	r24, 0xB8	; 184
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <__vector_24+0xe8>
    18f0:	87 c0       	rjmp	.+270    	; 0x1a00 <__vector_24+0x1f6>
    18f2:	a7 c0       	rjmp	.+334    	; 0x1a42 <__vector_24+0x238>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR0 = twi0_slarw;
    18f4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi0_slarw>
    18f8:	10 c0       	rjmp	.+32     	; 0x191a <__vector_24+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    18fa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    18fe:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <twi0_masterBufferLength>
    1902:	98 17       	cp	r25, r24
    1904:	70 f5       	brcc	.+92     	; 0x1962 <__vector_24+0x158>
            {
                // copy data to output register and ack
                TWDR0 = twi0_masterBuffer[twi0_masterBufferIndex++];
    1906:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	8e 0f       	add	r24, r30
    190e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi0_masterBufferIndex>
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	ec 5c       	subi	r30, 0xCC	; 204
    1916:	fd 4f       	sbci	r31, 0xFD	; 253
    1918:	80 81       	ld	r24, Z
    191a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    191e:	85 ec       	ldi	r24, 0xC5	; 197
    1920:	83 c0       	rjmp	.+262    	; 0x1a28 <__vector_24+0x21e>
            twi0_error = TW_MT_SLA_NACK;
            twi0_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi0_error = TW_MT_DATA_NACK;
    1922:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <twi0_error>
    1926:	8b c0       	rjmp	.+278    	; 0x1a3e <__vector_24+0x234>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    1928:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	8e 0f       	add	r24, r30
    1930:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi0_masterBufferIndex>
    1934:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ec 5c       	subi	r30, 0xCC	; 204
    193c:	fd 4f       	sbci	r31, 0xFD	; 253
    193e:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi0_masterBufferIndex < twi0_masterBufferLength)
    1940:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    1944:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <twi0_masterBufferLength>
    1948:	6b c0       	rjmp	.+214    	; 0x1a20 <__vector_24+0x216>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi0_masterBuffer[twi0_masterBufferIndex++] = TWDR0;
    194a:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <twi0_masterBufferIndex>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	8e 0f       	add	r24, r30
    1952:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi0_masterBufferIndex>
    1956:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	ec 5c       	subi	r30, 0xCC	; 204
    195e:	fd 4f       	sbci	r31, 0xFD	; 253
    1960:	80 83       	st	Z, r24
            if (twi0_sendStop)
    1962:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi0_sendStop>
    1966:	81 11       	cpse	r24, r1
    1968:	6a c0       	rjmp	.+212    	; 0x1a3e <__vector_24+0x234>
                twi0_stop();
            else 
            {
                twi0_inRepStart = true;	// we're gonna send the START
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <twi0_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR0 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    1970:	84 ea       	ldi	r24, 0xA4	; 164
    1972:	5e c0       	rjmp	.+188    	; 0x1a30 <__vector_24+0x226>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi0_state = TWI0_SRX;
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <twi0_state>
            // indicate that rx buffer can be overwritten and ack
            twi0_rxBufferIndex = 0;
    197a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_rxBufferIndex>
    197e:	cf cf       	rjmp	.-98     	; 0x191e <__vector_24+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    1980:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    1984:	80 32       	cpi	r24, 0x20	; 32
    1986:	08 f0       	brcs	.+2      	; 0x198a <__vector_24+0x180>
    1988:	4e c0       	rjmp	.+156    	; 0x1a26 <__vector_24+0x21c>
            {
                // put byte in buffer and ack
                twi0_rxBuffer[twi0_rxBufferIndex++] = TWDR0;
    198a:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	8e 0f       	add	r24, r30
    1992:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <twi0_rxBufferIndex>
    1996:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	e0 51       	subi	r30, 0x10	; 16
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	80 83       	st	Z, r24
    19a2:	bd cf       	rjmp	.-134    	; 0x191e <__vector_24+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi0_releaseBus();
    19a4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <twi0_releaseBus>
            // put a null char after data if there's room
            if(twi0_rxBufferIndex < TWI0_BUFFER_LENGTH)
    19a8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    19ac:	80 32       	cpi	r24, 0x20	; 32
    19ae:	30 f4       	brcc	.+12     	; 0x19bc <__vector_24+0x1b2>
            {
                twi0_rxBuffer[twi0_rxBufferIndex] = '\0';
    19b0:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	e0 51       	subi	r30, 0x10	; 16
    19b8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ba:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi0_onSlaveReceive(twi0_rxBuffer, twi0_rxBufferIndex);
    19bc:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <twi0_rxBufferIndex>
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <twi0_onSlaveReceive>
    19c6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <twi0_onSlaveReceive+0x1>
    19ca:	80 ef       	ldi	r24, 0xF0	; 240
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	09 95       	icall
            // since we submit rx buffer to "wire" library, we can reset it
            twi0_rxBufferIndex = 0;
    19d0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <twi0_rxBufferIndex>
            break;
    19d4:	36 c0       	rjmp	.+108    	; 0x1a42 <__vector_24+0x238>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi0_state = TWI0_STX;
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <twi0_state>
            // ready the tx buffer index for iteration
            twi0_txBufferIndex = 0;
    19dc:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi0_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi0_txBufferLength = 0;
    19e0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <twi0_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi0_transmit(bytes, length) to do this
            twi0_onSlaveTransmit();
    19e4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi0_onSlaveTransmit>
    19e8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <twi0_onSlaveTransmit+0x1>
    19ec:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi0_txBufferLength)
    19ee:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <twi0_txBufferLength>
    19f2:	81 11       	cpse	r24, r1
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <__vector_24+0x1f6>
            {
                twi0_txBufferLength = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <twi0_txBufferLength>
                twi0_txBuffer[0] = 0x00;
    19fc:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi0_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR0 = twi0_txBuffer[twi0_txBufferIndex++];
    1a00:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <twi0_txBufferIndex>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8e 0f       	add	r24, r30
    1a08:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi0_txBufferIndex>
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	ee 5e       	subi	r30, 0xEE	; 238
    1a10:	fd 4f       	sbci	r31, 0xFD	; 253
    1a12:	80 81       	ld	r24, Z
    1a14:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
            // if there is more to send, ack, otherwise nack
            if(twi0_txBufferIndex < twi0_txBufferLength)
    1a18:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <twi0_txBufferIndex>
    1a1c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <twi0_txBufferLength>
    1a20:	98 17       	cp	r25, r24
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <__vector_24+0x21c>
    1a24:	7c cf       	rjmp	.-264    	; 0x191e <__vector_24+0x114>
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    1a26:	85 e8       	ldi	r24, 0x85	; 133
    1a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a2c:	0a c0       	rjmp	.+20     	; 0x1a42 <__vector_24+0x238>
void twi0_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR0 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1a2e:	85 ec       	ldi	r24, 0xC5	; 197
    1a30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi0_reply(1);
            // leave slave receiver state
            twi0_state = TWI0_READY;
    1a34:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi0_state>
            break;
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__vector_24+0x238>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi0_error = TW_BUS_ERROR;
    1a3a:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <twi0_error>
            twi0_stop();
    1a3e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <twi0_stop>
            break;
    }
}
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <transmit1_default>:
static volatile uint8_t twi1_sendStop;			// should the transaction end with a stop
static volatile uint8_t twi1_inRepStart;			// in the middle of a repeated start

// used to initalize the Transmit functions in case they are not used.
void transmit1_default(void)
{
    1a64:	08 95       	ret

00001a66 <receive1_default>:

typedef void (*PointerToTransmit)(void);

// used to initalize the Receive functions in case they are not used.
void receive1_default(uint8_t *rxBuffer, int rxBufferIndex)
{
    1a66:	08 95       	ret

00001a68 <twi1_init>:

/* init twi pins and set bitrate */
void twi1_init(uint8_t pull_up)
{
    // use buffer A to start
    twi1_rxBuffer = twi1_rxBufferA;
    1a68:	2c e7       	ldi	r18, 0x7C	; 124
    1a6a:	32 e0       	ldi	r19, 0x02	; 2
    1a6c:	30 93 5b 02 	sts	0x025B, r19	; 0x80025b <twi1_rxBuffer+0x1>
    1a70:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <twi1_rxBuffer>
    
    // initialize state
    twi1_state = TWI1_READY;
    1a74:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
    twi1_sendStop = 1;		// default value
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <twi1_sendStop>
    twi1_inRepStart = 0;
    1a7e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <twi1_inRepStart>

    // Do not use pull-up for twi pins if the MCU is running at a higher voltage.
    // e.g. if MCU has 5V and others have 3.3V do not use the pull-up. 
    if (pull_up) 
    1a82:	88 23       	and	r24, r24
    1a84:	21 f0       	breq	.+8      	; 0x1a8e <twi1_init+0x26>
    {
#if defined(__AVR_ATmega328PB__) 
        DDRE &= ~(1 << DDE0);  // clear the ddr bit to set as an input
    1a86:	68 98       	cbi	0x0d, 0	; 13
        PORTE |= (1 << PORTE0);  // write a one to the port bit to enable the pull-up
    1a88:	70 9a       	sbi	0x0e, 0	; 14
        DDRE &= ~(1 << DDE1);
    1a8a:	69 98       	cbi	0x0d, 1	; 13
        PORTE |= (1 << PORTE1); 
    1a8c:	71 9a       	sbi	0x0e, 1	; 14
#error "no I2C definition for MCU available"
#endif
    }

    // initialize twi prescaler and bit rate
    TWSR1 &= ~((1<<TWPS0));
    1a8e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1a92:	8e 7f       	andi	r24, 0xFE	; 254
    1a94:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWSR1 &= ~((1<<TWPS1));
    1a98:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1a9c:	8d 7f       	andi	r24, 0xFD	; 253
    1a9e:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    TWBR1 = ((F_CPU / TWI1_FREQ) - 16) / 2;
    1aa2:	84 e3       	ldi	r24, 0x34	; 52
    1aa4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
    note: TWBR1 should be 10 or higher for master mode
    It is 72 for a 16mhz Wiring board with 100kHz TWI */

    // enable twi module, acks, and twi interrupt
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA);
    1aa8:	85 e4       	ldi	r24, 0x45	; 69
    1aaa:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    1aae:	08 95       	ret

00001ab0 <twi1_setAddress>:

/* init slave address and enable interrupt */
void twi1_setAddress(uint8_t address)
{
    // set twi slave address (skip over TWGCE bit)
    TWAR1 = address << 1;
    1ab0:	88 0f       	add	r24, r24
    1ab2:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1ab6:	08 95       	ret

00001ab8 <twi1_transmit>:
uint8_t twi1_transmit(const uint8_t* data, uint8_t length)
{
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    1ab8:	61 32       	cpi	r22, 0x21	; 33
    1aba:	98 f4       	brcc	.+38     	; 0x1ae2 <twi1_transmit+0x2a>
    {
        return 1;
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    1abc:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <twi1_state>
    1ac0:	24 30       	cpi	r18, 0x04	; 4
    1ac2:	89 f4       	brne	.+34     	; 0x1ae6 <twi1_transmit+0x2e>
    {
        return 2;
    }
  
    // set length and copy data into tx buffer
    twi1_txBufferLength = length;
    1ac4:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <twi1_txBufferLength>
    1ac8:	28 2f       	mov	r18, r24
    1aca:	ae e9       	ldi	r26, 0x9E	; 158
    1acc:	b2 e0       	ldi	r27, 0x02	; 2
    for(i = 0; i < length; ++i)
    1ace:	fc 01       	movw	r30, r24
    1ad0:	8e 2f       	mov	r24, r30
    1ad2:	82 1b       	sub	r24, r18
    1ad4:	86 17       	cp	r24, r22
    1ad6:	18 f4       	brcc	.+6      	; 0x1ade <twi1_transmit+0x26>
    {
        twi1_txBuffer[i] = data[i];
    1ad8:	81 91       	ld	r24, Z+
    1ada:	8d 93       	st	X+, r24
    1adc:	f9 cf       	rjmp	.-14     	; 0x1ad0 <twi1_transmit+0x18>
    }
  
    return 0;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret
    uint8_t i;

    // ensure data will fit into buffer
    if(TWI1_BUFFER_LENGTH < length)
    {
        return 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	08 95       	ret
    }
  
    // ensure we are currently a slave transmitter
    if(TWI1_STX != twi1_state)
    {
        return 2;
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    {
        twi1_txBuffer[i] = data[i];
    }
  
    return 0;
}
    1ae8:	08 95       	ret

00001aea <twi1_attachSlaveRxEvent>:
/* set function called durring a slave read operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    twi1_onSlaveReceive = function;
    1aea:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <twi1_onSlaveReceive+0x1>
    1aee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <twi1_onSlaveReceive>
    1af2:	08 95       	ret

00001af4 <twi1_attachSlaveTxEvent>:
/* sets function called before a slave write operation
 * Input    function: callback function to use
 */
void twi1_attachSlaveTxEvent( void (*function)(void) )
{
    twi1_onSlaveTransmit = function;
    1af4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <twi1_onSlaveTransmit+0x1>
    1af8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <twi1_onSlaveTransmit>
    1afc:	08 95       	ret

00001afe <twi1_stop>:

/* relinquishe bus master status */
void twi1_stop(void)
{
    // send stop condition
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1afe:	85 ed       	ldi	r24, 0xD5	; 213
    1b00:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // wait for stop condition to be exectued on bus
    // TWINT is not set after a stop condition!
    while(TWCR1 & (1<<TWSTO))
    1b04:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    1b08:	84 fd       	sbrc	r24, 4
    1b0a:	fc cf       	rjmp	.-8      	; 0x1b04 <twi1_stop+0x6>
    {
        continue;
    }

    // update twi state
    twi1_state = TWI1_READY;
    1b0c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
    1b10:	08 95       	ret

00001b12 <twi1_releaseBus>:

/* release bus */
void twi1_releaseBus(void)
{
    // release bus
    TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT);
    1b12:	85 ec       	ldi	r24, 0xC5	; 197
    1b14:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

    // update twi state
    twi1_state = TWI1_READY;
    1b18:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
    1b1c:	08 95       	ret

00001b1e <__vector_40>:
}

ISR(TWI1_vect)
{
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	2f 93       	push	r18
    1b2a:	3f 93       	push	r19
    1b2c:	4f 93       	push	r20
    1b2e:	5f 93       	push	r21
    1b30:	6f 93       	push	r22
    1b32:	7f 93       	push	r23
    1b34:	8f 93       	push	r24
    1b36:	9f 93       	push	r25
    1b38:	af 93       	push	r26
    1b3a:	bf 93       	push	r27
    1b3c:	ef 93       	push	r30
    1b3e:	ff 93       	push	r31
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    1b40:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1b44:	88 7f       	andi	r24, 0xF8	; 248
    1b46:	80 36       	cpi	r24, 0x60	; 96
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <__vector_40+0x2e>
    1b4a:	9e c0       	rjmp	.+316    	; 0x1c88 <__vector_40+0x16a>
    1b4c:	78 f5       	brcc	.+94     	; 0x1bac <__vector_40+0x8e>
    1b4e:	88 32       	cpi	r24, 0x28	; 40
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <__vector_40+0x36>
    1b52:	5d c0       	rjmp	.+186    	; 0x1c0e <__vector_40+0xf0>
    1b54:	90 f4       	brcc	.+36     	; 0x1b7a <__vector_40+0x5c>
    1b56:	80 31       	cpi	r24, 0x10	; 16
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <__vector_40+0x3e>
    1b5a:	56 c0       	rjmp	.+172    	; 0x1c08 <__vector_40+0xea>
    1b5c:	38 f4       	brcc	.+14     	; 0x1b6c <__vector_40+0x4e>
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <__vector_40+0x46>
    1b62:	0a c1       	rjmp	.+532    	; 0x1d78 <__vector_40+0x25a>
    1b64:	88 30       	cpi	r24, 0x08	; 8
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <__vector_40+0x4c>
    1b68:	4f c0       	rjmp	.+158    	; 0x1c08 <__vector_40+0xea>
    1b6a:	0a c1       	rjmp	.+532    	; 0x1d80 <__vector_40+0x262>
    1b6c:	88 31       	cpi	r24, 0x18	; 24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__vector_40+0x54>
    1b70:	4e c0       	rjmp	.+156    	; 0x1c0e <__vector_40+0xf0>
    1b72:	80 32       	cpi	r24, 0x20	; 32
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <__vector_40+0x5a>
    1b76:	5f c0       	rjmp	.+190    	; 0x1c36 <__vector_40+0x118>
    1b78:	03 c1       	rjmp	.+518    	; 0x1d80 <__vector_40+0x262>
    1b7a:	80 34       	cpi	r24, 0x40	; 64
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__vector_40+0x62>
    1b7e:	6a c0       	rjmp	.+212    	; 0x1c54 <__vector_40+0x136>
    1b80:	58 f4       	brcc	.+22     	; 0x1b98 <__vector_40+0x7a>
    1b82:	80 33       	cpi	r24, 0x30	; 48
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <__vector_40+0x6a>
    1b86:	57 c0       	rjmp	.+174    	; 0x1c36 <__vector_40+0x118>
    1b88:	88 33       	cpi	r24, 0x38	; 56
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <__vector_40+0x70>
    1b8c:	f9 c0       	rjmp	.+498    	; 0x1d80 <__vector_40+0x262>
            twi1_error = TW_MT_DATA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_ARB_LOST: // lost bus arbitration
            twi1_error = TW_MT_ARB_LOST;
    1b8e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi1_error>
            twi1_releaseBus();
    1b92:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <twi1_releaseBus>
            break;
    1b96:	f4 c0       	rjmp	.+488    	; 0x1d80 <__vector_40+0x262>
}

ISR(TWI1_vect)
{
    // #define TW_STATUS   (TWSR & TW_STATUS_MASK)
    switch(TWSR1 & TW_STATUS_MASK) //
    1b98:	80 35       	cpi	r24, 0x50	; 80
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <__vector_40+0x80>
    1b9c:	4f c0       	rjmp	.+158    	; 0x1c3c <__vector_40+0x11e>
    1b9e:	88 35       	cpi	r24, 0x58	; 88
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <__vector_40+0x86>
    1ba2:	5d c0       	rjmp	.+186    	; 0x1c5e <__vector_40+0x140>
    1ba4:	88 34       	cpi	r24, 0x48	; 72
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <__vector_40+0x8c>
    1ba8:	eb c0       	rjmp	.+470    	; 0x1d80 <__vector_40+0x262>
    1baa:	e8 c0       	rjmp	.+464    	; 0x1d7c <__vector_40+0x25e>
    1bac:	88 39       	cpi	r24, 0x98	; 152
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <__vector_40+0x94>
    1bb0:	d9 c0       	rjmp	.+434    	; 0x1d64 <__vector_40+0x246>
    1bb2:	a8 f4       	brcc	.+42     	; 0x1bde <__vector_40+0xc0>
    1bb4:	88 37       	cpi	r24, 0x78	; 120
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <__vector_40+0x9c>
    1bb8:	67 c0       	rjmp	.+206    	; 0x1c88 <__vector_40+0x16a>
    1bba:	38 f4       	brcc	.+14     	; 0x1bca <__vector_40+0xac>
    1bbc:	88 36       	cpi	r24, 0x68	; 104
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <__vector_40+0xa4>
    1bc0:	63 c0       	rjmp	.+198    	; 0x1c88 <__vector_40+0x16a>
    1bc2:	80 37       	cpi	r24, 0x70	; 112
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <__vector_40+0xaa>
    1bc6:	60 c0       	rjmp	.+192    	; 0x1c88 <__vector_40+0x16a>
    1bc8:	db c0       	rjmp	.+438    	; 0x1d80 <__vector_40+0x262>
    1bca:	88 38       	cpi	r24, 0x88	; 136
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <__vector_40+0xb2>
    1bce:	ca c0       	rjmp	.+404    	; 0x1d64 <__vector_40+0x246>
    1bd0:	80 39       	cpi	r24, 0x90	; 144
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <__vector_40+0xb8>
    1bd4:	5f c0       	rjmp	.+190    	; 0x1c94 <__vector_40+0x176>
    1bd6:	80 38       	cpi	r24, 0x80	; 128
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <__vector_40+0xbe>
    1bda:	d2 c0       	rjmp	.+420    	; 0x1d80 <__vector_40+0x262>
    1bdc:	5b c0       	rjmp	.+182    	; 0x1c94 <__vector_40+0x176>
    1bde:	80 3b       	cpi	r24, 0xB0	; 176
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <__vector_40+0xc6>
    1be2:	98 c0       	rjmp	.+304    	; 0x1d14 <__vector_40+0x1f6>
    1be4:	38 f4       	brcc	.+14     	; 0x1bf4 <__vector_40+0xd6>
    1be6:	80 3a       	cpi	r24, 0xA0	; 160
    1be8:	09 f4       	brne	.+2      	; 0x1bec <__vector_40+0xce>
    1bea:	69 c0       	rjmp	.+210    	; 0x1cbe <__vector_40+0x1a0>
    1bec:	88 3a       	cpi	r24, 0xA8	; 168
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <__vector_40+0xd4>
    1bf0:	91 c0       	rjmp	.+290    	; 0x1d14 <__vector_40+0x1f6>
    1bf2:	c6 c0       	rjmp	.+396    	; 0x1d80 <__vector_40+0x262>
    1bf4:	80 3c       	cpi	r24, 0xC0	; 192
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <__vector_40+0xdc>
    1bf8:	b9 c0       	rjmp	.+370    	; 0x1d6c <__vector_40+0x24e>
    1bfa:	88 3c       	cpi	r24, 0xC8	; 200
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <__vector_40+0xe2>
    1bfe:	b6 c0       	rjmp	.+364    	; 0x1d6c <__vector_40+0x24e>
    1c00:	88 3b       	cpi	r24, 0xB8	; 184
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <__vector_40+0xe8>
    1c04:	9c c0       	rjmp	.+312    	; 0x1d3e <__vector_40+0x220>
    1c06:	bc c0       	rjmp	.+376    	; 0x1d80 <__vector_40+0x262>
    {
        // All Master
        case TW_START:     // sent start condition
        case TW_REP_START: // sent repeated start condition
            // copy device address and r/w bit to output register and ack
            TWDR1 = twi1_slarw;
    1c08:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi1_slarw>
    1c0c:	10 c0       	rjmp	.+32     	; 0x1c2e <__vector_40+0x110>

        // Master Transmitter
        case TW_MT_SLA_ACK:  // slave receiver acked address
        case TW_MT_DATA_ACK: // slave receiver acked data
            // if there is data to send, send it, otherwise stop 
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    1c0e:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c12:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi1_masterBufferLength>
    1c16:	98 17       	cp	r25, r24
    1c18:	70 f5       	brcc	.+92     	; 0x1c76 <__vector_40+0x158>
            {
                // copy data to output register and ack
                TWDR1 = twi1_masterBuffer[twi1_masterBufferIndex++];
    1c1a:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	8e 0f       	add	r24, r30
    1c22:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi1_masterBufferIndex>
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	e0 54       	subi	r30, 0x40	; 64
    1c2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1c32:	85 ec       	ldi	r24, 0xC5	; 197
    1c34:	98 c0       	rjmp	.+304    	; 0x1d66 <__vector_40+0x248>
            twi1_error = TW_MT_SLA_NACK;
            twi1_stop();
            break;
        
        case TW_MT_DATA_NACK: // data sent, nack received
            twi1_error = TW_MT_DATA_NACK;
    1c36:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <twi1_error>
    1c3a:	a0 c0       	rjmp	.+320    	; 0x1d7c <__vector_40+0x25e>
            break;

        // Master Receiver
        case TW_MR_DATA_ACK: // data received, ack sent
            // put byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    1c3c:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	8e 0f       	add	r24, r30
    1c44:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi1_masterBufferIndex>
    1c48:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	e0 54       	subi	r30, 0x40	; 64
    1c50:	fd 4f       	sbci	r31, 0xFD	; 253
    1c52:	80 83       	st	Z, r24
        case TW_MR_SLA_ACK:  // address sent, ack received
            // ack if more bytes are expected, otherwise nack
            if(twi1_masterBufferIndex < twi1_masterBufferLength)
    1c54:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c58:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi1_masterBufferLength>
    1c5c:	80 c0       	rjmp	.+256    	; 0x1d5e <__vector_40+0x240>
            }
            break;
            
        case TW_MR_DATA_NACK: // data received, nack sent
            // put final byte into buffer
            twi1_masterBuffer[twi1_masterBufferIndex++] = TWDR1;
    1c5e:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <twi1_masterBufferIndex>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	8e 0f       	add	r24, r30
    1c66:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <twi1_masterBufferIndex>
    1c6a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	e0 54       	subi	r30, 0x40	; 64
    1c72:	fd 4f       	sbci	r31, 0xFD	; 253
    1c74:	80 83       	st	Z, r24
            if (twi1_sendStop)
    1c76:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <twi1_sendStop>
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	7f c0       	rjmp	.+254    	; 0x1d7c <__vector_40+0x25e>
                twi1_stop();
            else 
            {
                twi1_inRepStart = true;	// we're gonna send the START
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi1_inRepStart>
                // don't enable the interrupt. We'll generate the start, but we 
                // avoid handling the interrupt until we're in the next transaction,
                // at the point where we would normally issue the start.
                TWCR1 = (1<<TWINT) | (1<<TWSTA)| (1<<TWEN) ;
    1c84:	84 ea       	ldi	r24, 0xA4	; 164
    1c86:	73 c0       	rjmp	.+230    	; 0x1d6e <__vector_40+0x250>
        case TW_SR_SLA_ACK:   // addressed, returned ack
        case TW_SR_GCALL_ACK: // addressed generally, returned ack
        case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
        case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
            // enter slave receiver mode
            twi1_state = TWI1_SRX;
    1c88:	83 e0       	ldi	r24, 0x03	; 3
    1c8a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi1_state>
            // indicate that rx buffer can be overwritten and ack
            twi1_rxBufferIndex = 0;
    1c8e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_rxBufferIndex>
    1c92:	cf cf       	rjmp	.-98     	; 0x1c32 <__vector_40+0x114>
            break;
        
        case TW_SR_DATA_ACK:       // data received, returned ack
        case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
            // if there is still room in the rx buffer
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    1c94:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1c98:	80 32       	cpi	r24, 0x20	; 32
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <__vector_40+0x180>
    1c9c:	63 c0       	rjmp	.+198    	; 0x1d64 <__vector_40+0x246>
            {
                // put byte in buffer and ack
                twi1_rxBuffer[twi1_rxBufferIndex++] = TWDR1;
    1c9e:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <twi1_rxBuffer>
    1ca2:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <twi1_rxBuffer+0x1>
    1ca6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	98 0f       	add	r25, r24
    1cae:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <twi1_rxBufferIndex>
    1cb2:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
    1cb6:	e8 0f       	add	r30, r24
    1cb8:	f1 1d       	adc	r31, r1
    1cba:	90 83       	st	Z, r25
    1cbc:	ba cf       	rjmp	.-140    	; 0x1c32 <__vector_40+0x114>
            }
            break;

        case TW_SR_STOP: // stop or repeated start condition received
            // ack future responses and leave slave receiver state
            twi1_releaseBus();
    1cbe:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <twi1_releaseBus>
            // put a null char after data if there's room
            if(twi1_rxBufferIndex < TWI1_BUFFER_LENGTH)
    1cc2:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1cc6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBuffer>
    1cca:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <twi1_rxBuffer+0x1>
    1cce:	20 32       	cpi	r18, 0x20	; 32
    1cd0:	30 f4       	brcc	.+12     	; 0x1cde <__vector_40+0x1c0>
            {
                twi1_rxBuffer[twi1_rxBufferIndex] = '\0';
    1cd2:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e2 0f       	add	r30, r18
    1cda:	f1 1d       	adc	r31, r1
    1cdc:	10 82       	st	Z, r1
            }
            // callback to user defined callback
            twi1_onSlaveReceive(twi1_rxBuffer, twi1_rxBufferIndex);
    1cde:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <twi1_rxBufferIndex>
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <twi1_onSlaveReceive>
    1ce8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <twi1_onSlaveReceive+0x1>
    1cec:	09 95       	icall
            // assume user has the rx buffer so we can swap to the other twi1_rxBuffer and reset the index
            if (twi1_rxBuffer == twi1_rxBufferA) 
    1cee:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi1_rxBuffer>
    1cf2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <twi1_rxBuffer+0x1>
    1cf6:	8c 57       	subi	r24, 0x7C	; 124
    1cf8:	92 40       	sbci	r25, 0x02	; 2
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <__vector_40+0x1e4>
            {
                twi1_rxBuffer = twi1_rxBufferB;
    1cfc:	8c e5       	ldi	r24, 0x5C	; 92
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <__vector_40+0x1e8>
            }
            else
            {
                twi1_rxBuffer = twi1_rxBufferA;
    1d02:	8c e7       	ldi	r24, 0x7C	; 124
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <twi1_rxBuffer+0x1>
    1d0a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <twi1_rxBuffer>
            }
            twi1_rxBufferIndex = 0;
    1d0e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi1_rxBufferIndex>
            break;
    1d12:	36 c0       	rjmp	.+108    	; 0x1d80 <__vector_40+0x262>
        
        // Slave Transmitter
        case TW_ST_SLA_ACK:          // addressed, returned ack
        case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
            // enter slave transmitter mode
            twi1_state = TWI1_STX;
    1d14:	84 e0       	ldi	r24, 0x04	; 4
    1d16:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi1_state>
            // ready the tx buffer index for iteration
            twi1_txBufferIndex = 0;
    1d1a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <twi1_txBufferIndex>
            // set tx buffer length to be zero, to verify if user changes it
            twi1_txBufferLength = 0;
    1d1e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <twi1_txBufferLength>
            // request for txBuffer to be filled and length to be set
            // note: user must call twi1_transmit(bytes, length) to do this
            twi1_onSlaveTransmit();
    1d22:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <twi1_onSlaveTransmit>
    1d26:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <twi1_onSlaveTransmit+0x1>
    1d2a:	09 95       	icall
            // if they didn't change buffer & length, initialize it
            if(0 == twi1_txBufferLength)
    1d2c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi1_txBufferLength>
    1d30:	81 11       	cpse	r24, r1
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <__vector_40+0x220>
            {
                twi1_txBufferLength = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <twi1_txBufferLength>
                twi1_txBuffer[0] = 0x00;
    1d3a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi1_txBuffer>
            }
            // transmit first byte from buffer, fall
        case TW_ST_DATA_ACK: // byte sent, ack returned
            // copy data to output register
            TWDR1 = twi1_txBuffer[twi1_txBufferIndex++];
    1d3e:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <twi1_txBufferIndex>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	8e 0f       	add	r24, r30
    1d46:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <twi1_txBufferIndex>
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	e2 56       	subi	r30, 0x62	; 98
    1d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d50:	80 81       	ld	r24, Z
    1d52:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
            // if there is more to send, ack, otherwise nack
            if(twi1_txBufferIndex < twi1_txBufferLength)
    1d56:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <twi1_txBufferIndex>
    1d5a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <twi1_txBufferLength>
    1d5e:	98 17       	cp	r25, r24
    1d60:	08 f4       	brcc	.+2      	; 0x1d64 <__vector_40+0x246>
    1d62:	67 cf       	rjmp	.-306    	; 0x1c32 <__vector_40+0x114>
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    }
    else
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT);
    1d64:	85 e8       	ldi	r24, 0x85	; 133
    1d66:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
    1d6a:	0a c0       	rjmp	.+20     	; 0x1d80 <__vector_40+0x262>
void twi1_reply(uint8_t ack)
{
    // transmit master read ready signal, with or without ack
    if(ack)
    {
        TWCR1 = (1<<TWEN) | (1<<TWIE) | (1<<TWINT) | (1<<TWEA);
    1d6c:	85 ec       	ldi	r24, 0xC5	; 197
    1d6e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
        case TW_ST_DATA_NACK: // received nack, we are done 
        case TW_ST_LAST_DATA: // received ack, but we are done already!
            // ack future responses
            twi1_reply(1);
            // leave slave receiver state
            twi1_state = TWI1_READY;
    1d72:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi1_state>
            break;
    1d76:	04 c0       	rjmp	.+8      	; 0x1d80 <__vector_40+0x262>
        // All
        case TW_NO_INFO:   // no state information
            break;
        
        case TW_BUS_ERROR: // bus error, illegal stop/start
            twi1_error = TW_BUS_ERROR;
    1d78:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <twi1_error>
            twi1_stop();
    1d7c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <twi1_stop>
            break;
    }
}
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0
    1d9e:	1f 90       	pop	r1
    1da0:	18 95       	reti

00001da2 <__udivmodsi4>:
    1da2:	a1 e2       	ldi	r26, 0x21	; 33
    1da4:	1a 2e       	mov	r1, r26
    1da6:	aa 1b       	sub	r26, r26
    1da8:	bb 1b       	sub	r27, r27
    1daa:	fd 01       	movw	r30, r26
    1dac:	0d c0       	rjmp	.+26     	; 0x1dc8 <__udivmodsi4_ep>

00001dae <__udivmodsi4_loop>:
    1dae:	aa 1f       	adc	r26, r26
    1db0:	bb 1f       	adc	r27, r27
    1db2:	ee 1f       	adc	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	a2 17       	cp	r26, r18
    1db8:	b3 07       	cpc	r27, r19
    1dba:	e4 07       	cpc	r30, r20
    1dbc:	f5 07       	cpc	r31, r21
    1dbe:	20 f0       	brcs	.+8      	; 0x1dc8 <__udivmodsi4_ep>
    1dc0:	a2 1b       	sub	r26, r18
    1dc2:	b3 0b       	sbc	r27, r19
    1dc4:	e4 0b       	sbc	r30, r20
    1dc6:	f5 0b       	sbc	r31, r21

00001dc8 <__udivmodsi4_ep>:
    1dc8:	66 1f       	adc	r22, r22
    1dca:	77 1f       	adc	r23, r23
    1dcc:	88 1f       	adc	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	1a 94       	dec	r1
    1dd2:	69 f7       	brne	.-38     	; 0x1dae <__udivmodsi4_loop>
    1dd4:	60 95       	com	r22
    1dd6:	70 95       	com	r23
    1dd8:	80 95       	com	r24
    1dda:	90 95       	com	r25
    1ddc:	9b 01       	movw	r18, r22
    1dde:	ac 01       	movw	r20, r24
    1de0:	bd 01       	movw	r22, r26
    1de2:	cf 01       	movw	r24, r30
    1de4:	08 95       	ret

00001de6 <fgetc>:
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	ec 01       	movw	r28, r24
    1dec:	2b 81       	ldd	r18, Y+3	; 0x03
    1dee:	20 ff       	sbrs	r18, 0
    1df0:	33 c0       	rjmp	.+102    	; 0x1e58 <fgetc+0x72>
    1df2:	26 ff       	sbrs	r18, 6
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <fgetc+0x24>
    1df6:	2f 7b       	andi	r18, 0xBF	; 191
    1df8:	2b 83       	std	Y+3, r18	; 0x03
    1dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	9f 83       	std	Y+7, r25	; 0x07
    1e02:	8e 83       	std	Y+6, r24	; 0x06
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	29 c0       	rjmp	.+82     	; 0x1e5c <fgetc+0x76>
    1e0a:	22 ff       	sbrs	r18, 2
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <fgetc+0x46>
    1e0e:	e8 81       	ld	r30, Y
    1e10:	f9 81       	ldd	r31, Y+1	; 0x01
    1e12:	80 81       	ld	r24, Z
    1e14:	08 2e       	mov	r0, r24
    1e16:	00 0c       	add	r0, r0
    1e18:	99 0b       	sbc	r25, r25
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <fgetc+0x3e>
    1e1e:	20 62       	ori	r18, 0x20	; 32
    1e20:	2b 83       	std	Y+3, r18	; 0x03
    1e22:	1a c0       	rjmp	.+52     	; 0x1e58 <fgetc+0x72>
    1e24:	31 96       	adiw	r30, 0x01	; 1
    1e26:	f9 83       	std	Y+1, r31	; 0x01
    1e28:	e8 83       	st	Y, r30
    1e2a:	0e c0       	rjmp	.+28     	; 0x1e48 <fgetc+0x62>
    1e2c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e2e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e30:	09 95       	icall
    1e32:	97 ff       	sbrs	r25, 7
    1e34:	09 c0       	rjmp	.+18     	; 0x1e48 <fgetc+0x62>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	11 f0       	breq	.+4      	; 0x1e40 <fgetc+0x5a>
    1e3c:	80 e2       	ldi	r24, 0x20	; 32
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <fgetc+0x5c>
    1e40:	80 e1       	ldi	r24, 0x10	; 16
    1e42:	82 2b       	or	r24, r18
    1e44:	8b 83       	std	Y+3, r24	; 0x03
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <fgetc+0x72>
    1e48:	2e 81       	ldd	r18, Y+6	; 0x06
    1e4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	3f 83       	std	Y+7, r19	; 0x07
    1e52:	2e 83       	std	Y+6, r18	; 0x06
    1e54:	99 27       	eor	r25, r25
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <fgetc+0x76>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <printf>:
    1e62:	a0 e0       	ldi	r26, 0x00	; 0
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e7 e3       	ldi	r30, 0x37	; 55
    1e68:	ff e0       	ldi	r31, 0x0F	; 15
    1e6a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x20>
    1e6e:	ae 01       	movw	r20, r28
    1e70:	4b 5f       	subi	r20, 0xFB	; 251
    1e72:	5f 4f       	sbci	r21, 0xFF	; 255
    1e74:	fa 01       	movw	r30, r20
    1e76:	61 91       	ld	r22, Z+
    1e78:	71 91       	ld	r23, Z+
    1e7a:	af 01       	movw	r20, r30
    1e7c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__iob+0x2>
    1e80:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <__iob+0x3>
    1e84:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <vfprintf>
    1e88:	e2 e0       	ldi	r30, 0x02	; 2
    1e8a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x20>

00001e8e <vfprintf>:
    1e8e:	ab e0       	ldi	r26, 0x0B	; 11
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	ed e4       	ldi	r30, 0x4D	; 77
    1e94:	ff e0       	ldi	r31, 0x0F	; 15
    1e96:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__>
    1e9a:	6c 01       	movw	r12, r24
    1e9c:	7b 01       	movw	r14, r22
    1e9e:	8a 01       	movw	r16, r20
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	17 82       	std	Z+7, r1	; 0x07
    1ea4:	16 82       	std	Z+6, r1	; 0x06
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	81 ff       	sbrs	r24, 1
    1eaa:	cc c1       	rjmp	.+920    	; 0x2244 <vfprintf+0x3b6>
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	3c 01       	movw	r6, r24
    1eb2:	f6 01       	movw	r30, r12
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	93 fd       	sbrc	r25, 3
    1eba:	85 91       	lpm	r24, Z+
    1ebc:	93 ff       	sbrs	r25, 3
    1ebe:	81 91       	ld	r24, Z+
    1ec0:	7f 01       	movw	r14, r30
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <vfprintf+0x3a>
    1ec6:	ba c1       	rjmp	.+884    	; 0x223c <vfprintf+0x3ae>
    1ec8:	85 32       	cpi	r24, 0x25	; 37
    1eca:	39 f4       	brne	.+14     	; 0x1eda <vfprintf+0x4c>
    1ecc:	93 fd       	sbrc	r25, 3
    1ece:	85 91       	lpm	r24, Z+
    1ed0:	93 ff       	sbrs	r25, 3
    1ed2:	81 91       	ld	r24, Z+
    1ed4:	7f 01       	movw	r14, r30
    1ed6:	85 32       	cpi	r24, 0x25	; 37
    1ed8:	29 f4       	brne	.+10     	; 0x1ee4 <vfprintf+0x56>
    1eda:	b6 01       	movw	r22, r12
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    1ee2:	e7 cf       	rjmp	.-50     	; 0x1eb2 <vfprintf+0x24>
    1ee4:	91 2c       	mov	r9, r1
    1ee6:	21 2c       	mov	r2, r1
    1ee8:	31 2c       	mov	r3, r1
    1eea:	ff e1       	ldi	r31, 0x1F	; 31
    1eec:	f3 15       	cp	r31, r3
    1eee:	d8 f0       	brcs	.+54     	; 0x1f26 <vfprintf+0x98>
    1ef0:	8b 32       	cpi	r24, 0x2B	; 43
    1ef2:	79 f0       	breq	.+30     	; 0x1f12 <vfprintf+0x84>
    1ef4:	38 f4       	brcc	.+14     	; 0x1f04 <vfprintf+0x76>
    1ef6:	80 32       	cpi	r24, 0x20	; 32
    1ef8:	79 f0       	breq	.+30     	; 0x1f18 <vfprintf+0x8a>
    1efa:	83 32       	cpi	r24, 0x23	; 35
    1efc:	a1 f4       	brne	.+40     	; 0x1f26 <vfprintf+0x98>
    1efe:	23 2d       	mov	r18, r3
    1f00:	20 61       	ori	r18, 0x10	; 16
    1f02:	1d c0       	rjmp	.+58     	; 0x1f3e <vfprintf+0xb0>
    1f04:	8d 32       	cpi	r24, 0x2D	; 45
    1f06:	61 f0       	breq	.+24     	; 0x1f20 <vfprintf+0x92>
    1f08:	80 33       	cpi	r24, 0x30	; 48
    1f0a:	69 f4       	brne	.+26     	; 0x1f26 <vfprintf+0x98>
    1f0c:	23 2d       	mov	r18, r3
    1f0e:	21 60       	ori	r18, 0x01	; 1
    1f10:	16 c0       	rjmp	.+44     	; 0x1f3e <vfprintf+0xb0>
    1f12:	83 2d       	mov	r24, r3
    1f14:	82 60       	ori	r24, 0x02	; 2
    1f16:	38 2e       	mov	r3, r24
    1f18:	e3 2d       	mov	r30, r3
    1f1a:	e4 60       	ori	r30, 0x04	; 4
    1f1c:	3e 2e       	mov	r3, r30
    1f1e:	2a c0       	rjmp	.+84     	; 0x1f74 <vfprintf+0xe6>
    1f20:	f3 2d       	mov	r31, r3
    1f22:	f8 60       	ori	r31, 0x08	; 8
    1f24:	1d c0       	rjmp	.+58     	; 0x1f60 <vfprintf+0xd2>
    1f26:	37 fc       	sbrc	r3, 7
    1f28:	2d c0       	rjmp	.+90     	; 0x1f84 <vfprintf+0xf6>
    1f2a:	20 ed       	ldi	r18, 0xD0	; 208
    1f2c:	28 0f       	add	r18, r24
    1f2e:	2a 30       	cpi	r18, 0x0A	; 10
    1f30:	40 f0       	brcs	.+16     	; 0x1f42 <vfprintf+0xb4>
    1f32:	8e 32       	cpi	r24, 0x2E	; 46
    1f34:	b9 f4       	brne	.+46     	; 0x1f64 <vfprintf+0xd6>
    1f36:	36 fc       	sbrc	r3, 6
    1f38:	81 c1       	rjmp	.+770    	; 0x223c <vfprintf+0x3ae>
    1f3a:	23 2d       	mov	r18, r3
    1f3c:	20 64       	ori	r18, 0x40	; 64
    1f3e:	32 2e       	mov	r3, r18
    1f40:	19 c0       	rjmp	.+50     	; 0x1f74 <vfprintf+0xe6>
    1f42:	36 fe       	sbrs	r3, 6
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <vfprintf+0xc4>
    1f46:	8a e0       	ldi	r24, 0x0A	; 10
    1f48:	98 9e       	mul	r9, r24
    1f4a:	20 0d       	add	r18, r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	92 2e       	mov	r9, r18
    1f50:	11 c0       	rjmp	.+34     	; 0x1f74 <vfprintf+0xe6>
    1f52:	ea e0       	ldi	r30, 0x0A	; 10
    1f54:	2e 9e       	mul	r2, r30
    1f56:	20 0d       	add	r18, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	22 2e       	mov	r2, r18
    1f5c:	f3 2d       	mov	r31, r3
    1f5e:	f0 62       	ori	r31, 0x20	; 32
    1f60:	3f 2e       	mov	r3, r31
    1f62:	08 c0       	rjmp	.+16     	; 0x1f74 <vfprintf+0xe6>
    1f64:	8c 36       	cpi	r24, 0x6C	; 108
    1f66:	21 f4       	brne	.+8      	; 0x1f70 <vfprintf+0xe2>
    1f68:	83 2d       	mov	r24, r3
    1f6a:	80 68       	ori	r24, 0x80	; 128
    1f6c:	38 2e       	mov	r3, r24
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <vfprintf+0xe6>
    1f70:	88 36       	cpi	r24, 0x68	; 104
    1f72:	41 f4       	brne	.+16     	; 0x1f84 <vfprintf+0xf6>
    1f74:	f7 01       	movw	r30, r14
    1f76:	93 fd       	sbrc	r25, 3
    1f78:	85 91       	lpm	r24, Z+
    1f7a:	93 ff       	sbrs	r25, 3
    1f7c:	81 91       	ld	r24, Z+
    1f7e:	7f 01       	movw	r14, r30
    1f80:	81 11       	cpse	r24, r1
    1f82:	b3 cf       	rjmp	.-154    	; 0x1eea <vfprintf+0x5c>
    1f84:	98 2f       	mov	r25, r24
    1f86:	9f 7d       	andi	r25, 0xDF	; 223
    1f88:	95 54       	subi	r25, 0x45	; 69
    1f8a:	93 30       	cpi	r25, 0x03	; 3
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <vfprintf+0x10a>
    1f8e:	0c 5f       	subi	r16, 0xFC	; 252
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	9f e3       	ldi	r25, 0x3F	; 63
    1f94:	99 83       	std	Y+1, r25	; 0x01
    1f96:	0d c0       	rjmp	.+26     	; 0x1fb2 <vfprintf+0x124>
    1f98:	83 36       	cpi	r24, 0x63	; 99
    1f9a:	31 f0       	breq	.+12     	; 0x1fa8 <vfprintf+0x11a>
    1f9c:	83 37       	cpi	r24, 0x73	; 115
    1f9e:	71 f0       	breq	.+28     	; 0x1fbc <vfprintf+0x12e>
    1fa0:	83 35       	cpi	r24, 0x53	; 83
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <vfprintf+0x118>
    1fa4:	59 c0       	rjmp	.+178    	; 0x2058 <vfprintf+0x1ca>
    1fa6:	21 c0       	rjmp	.+66     	; 0x1fea <vfprintf+0x15c>
    1fa8:	f8 01       	movw	r30, r16
    1faa:	80 81       	ld	r24, Z
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	0e 5f       	subi	r16, 0xFE	; 254
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	88 24       	eor	r8, r8
    1fb4:	83 94       	inc	r8
    1fb6:	91 2c       	mov	r9, r1
    1fb8:	53 01       	movw	r10, r6
    1fba:	13 c0       	rjmp	.+38     	; 0x1fe2 <vfprintf+0x154>
    1fbc:	28 01       	movw	r4, r16
    1fbe:	f2 e0       	ldi	r31, 0x02	; 2
    1fc0:	4f 0e       	add	r4, r31
    1fc2:	51 1c       	adc	r5, r1
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	a0 80       	ld	r10, Z
    1fc8:	b1 80       	ldd	r11, Z+1	; 0x01
    1fca:	36 fe       	sbrs	r3, 6
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <vfprintf+0x146>
    1fce:	69 2d       	mov	r22, r9
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <vfprintf+0x14a>
    1fd4:	6f ef       	ldi	r22, 0xFF	; 255
    1fd6:	7f ef       	ldi	r23, 0xFF	; 255
    1fd8:	c5 01       	movw	r24, r10
    1fda:	0e 94 33 11 	call	0x2266	; 0x2266 <strnlen>
    1fde:	4c 01       	movw	r8, r24
    1fe0:	82 01       	movw	r16, r4
    1fe2:	f3 2d       	mov	r31, r3
    1fe4:	ff 77       	andi	r31, 0x7F	; 127
    1fe6:	3f 2e       	mov	r3, r31
    1fe8:	16 c0       	rjmp	.+44     	; 0x2016 <vfprintf+0x188>
    1fea:	28 01       	movw	r4, r16
    1fec:	22 e0       	ldi	r18, 0x02	; 2
    1fee:	42 0e       	add	r4, r18
    1ff0:	51 1c       	adc	r5, r1
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	a0 80       	ld	r10, Z
    1ff6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ff8:	36 fe       	sbrs	r3, 6
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <vfprintf+0x174>
    1ffc:	69 2d       	mov	r22, r9
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <vfprintf+0x178>
    2002:	6f ef       	ldi	r22, 0xFF	; 255
    2004:	7f ef       	ldi	r23, 0xFF	; 255
    2006:	c5 01       	movw	r24, r10
    2008:	0e 94 28 11 	call	0x2250	; 0x2250 <strnlen_P>
    200c:	4c 01       	movw	r8, r24
    200e:	f3 2d       	mov	r31, r3
    2010:	f0 68       	ori	r31, 0x80	; 128
    2012:	3f 2e       	mov	r3, r31
    2014:	82 01       	movw	r16, r4
    2016:	33 fc       	sbrc	r3, 3
    2018:	1b c0       	rjmp	.+54     	; 0x2050 <vfprintf+0x1c2>
    201a:	82 2d       	mov	r24, r2
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	88 16       	cp	r8, r24
    2020:	99 06       	cpc	r9, r25
    2022:	b0 f4       	brcc	.+44     	; 0x2050 <vfprintf+0x1c2>
    2024:	b6 01       	movw	r22, r12
    2026:	80 e2       	ldi	r24, 0x20	; 32
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    202e:	2a 94       	dec	r2
    2030:	f4 cf       	rjmp	.-24     	; 0x201a <vfprintf+0x18c>
    2032:	f5 01       	movw	r30, r10
    2034:	37 fc       	sbrc	r3, 7
    2036:	85 91       	lpm	r24, Z+
    2038:	37 fe       	sbrs	r3, 7
    203a:	81 91       	ld	r24, Z+
    203c:	5f 01       	movw	r10, r30
    203e:	b6 01       	movw	r22, r12
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2046:	21 10       	cpse	r2, r1
    2048:	2a 94       	dec	r2
    204a:	21 e0       	ldi	r18, 0x01	; 1
    204c:	82 1a       	sub	r8, r18
    204e:	91 08       	sbc	r9, r1
    2050:	81 14       	cp	r8, r1
    2052:	91 04       	cpc	r9, r1
    2054:	71 f7       	brne	.-36     	; 0x2032 <vfprintf+0x1a4>
    2056:	e8 c0       	rjmp	.+464    	; 0x2228 <vfprintf+0x39a>
    2058:	84 36       	cpi	r24, 0x64	; 100
    205a:	11 f0       	breq	.+4      	; 0x2060 <vfprintf+0x1d2>
    205c:	89 36       	cpi	r24, 0x69	; 105
    205e:	41 f5       	brne	.+80     	; 0x20b0 <vfprintf+0x222>
    2060:	f8 01       	movw	r30, r16
    2062:	37 fe       	sbrs	r3, 7
    2064:	07 c0       	rjmp	.+14     	; 0x2074 <vfprintf+0x1e6>
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	0c 5f       	subi	r16, 0xFC	; 252
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	08 c0       	rjmp	.+16     	; 0x2084 <vfprintf+0x1f6>
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	07 2e       	mov	r0, r23
    207a:	00 0c       	add	r0, r0
    207c:	88 0b       	sbc	r24, r24
    207e:	99 0b       	sbc	r25, r25
    2080:	0e 5f       	subi	r16, 0xFE	; 254
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	f3 2d       	mov	r31, r3
    2086:	ff 76       	andi	r31, 0x6F	; 111
    2088:	3f 2e       	mov	r3, r31
    208a:	97 ff       	sbrs	r25, 7
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <vfprintf+0x212>
    208e:	90 95       	com	r25
    2090:	80 95       	com	r24
    2092:	70 95       	com	r23
    2094:	61 95       	neg	r22
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	8f 4f       	sbci	r24, 0xFF	; 255
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	f0 68       	ori	r31, 0x80	; 128
    209e:	3f 2e       	mov	r3, r31
    20a0:	2a e0       	ldi	r18, 0x0A	; 10
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	a3 01       	movw	r20, r6
    20a6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__ultoa_invert>
    20aa:	88 2e       	mov	r8, r24
    20ac:	86 18       	sub	r8, r6
    20ae:	45 c0       	rjmp	.+138    	; 0x213a <vfprintf+0x2ac>
    20b0:	85 37       	cpi	r24, 0x75	; 117
    20b2:	31 f4       	brne	.+12     	; 0x20c0 <vfprintf+0x232>
    20b4:	23 2d       	mov	r18, r3
    20b6:	2f 7e       	andi	r18, 0xEF	; 239
    20b8:	b2 2e       	mov	r11, r18
    20ba:	2a e0       	ldi	r18, 0x0A	; 10
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	25 c0       	rjmp	.+74     	; 0x210a <vfprintf+0x27c>
    20c0:	93 2d       	mov	r25, r3
    20c2:	99 7f       	andi	r25, 0xF9	; 249
    20c4:	b9 2e       	mov	r11, r25
    20c6:	8f 36       	cpi	r24, 0x6F	; 111
    20c8:	c1 f0       	breq	.+48     	; 0x20fa <vfprintf+0x26c>
    20ca:	18 f4       	brcc	.+6      	; 0x20d2 <vfprintf+0x244>
    20cc:	88 35       	cpi	r24, 0x58	; 88
    20ce:	79 f0       	breq	.+30     	; 0x20ee <vfprintf+0x260>
    20d0:	b5 c0       	rjmp	.+362    	; 0x223c <vfprintf+0x3ae>
    20d2:	80 37       	cpi	r24, 0x70	; 112
    20d4:	19 f0       	breq	.+6      	; 0x20dc <vfprintf+0x24e>
    20d6:	88 37       	cpi	r24, 0x78	; 120
    20d8:	21 f0       	breq	.+8      	; 0x20e2 <vfprintf+0x254>
    20da:	b0 c0       	rjmp	.+352    	; 0x223c <vfprintf+0x3ae>
    20dc:	e9 2f       	mov	r30, r25
    20de:	e0 61       	ori	r30, 0x10	; 16
    20e0:	be 2e       	mov	r11, r30
    20e2:	b4 fe       	sbrs	r11, 4
    20e4:	0d c0       	rjmp	.+26     	; 0x2100 <vfprintf+0x272>
    20e6:	fb 2d       	mov	r31, r11
    20e8:	f4 60       	ori	r31, 0x04	; 4
    20ea:	bf 2e       	mov	r11, r31
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <vfprintf+0x272>
    20ee:	34 fe       	sbrs	r3, 4
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <vfprintf+0x278>
    20f2:	29 2f       	mov	r18, r25
    20f4:	26 60       	ori	r18, 0x06	; 6
    20f6:	b2 2e       	mov	r11, r18
    20f8:	06 c0       	rjmp	.+12     	; 0x2106 <vfprintf+0x278>
    20fa:	28 e0       	ldi	r18, 0x08	; 8
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <vfprintf+0x27c>
    2100:	20 e1       	ldi	r18, 0x10	; 16
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	02 c0       	rjmp	.+4      	; 0x210a <vfprintf+0x27c>
    2106:	20 e1       	ldi	r18, 0x10	; 16
    2108:	32 e0       	ldi	r19, 0x02	; 2
    210a:	f8 01       	movw	r30, r16
    210c:	b7 fe       	sbrs	r11, 7
    210e:	07 c0       	rjmp	.+14     	; 0x211e <vfprintf+0x290>
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0c 5f       	subi	r16, 0xFC	; 252
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	06 c0       	rjmp	.+12     	; 0x212a <vfprintf+0x29c>
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 5f       	subi	r16, 0xFE	; 254
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	a3 01       	movw	r20, r6
    212c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__ultoa_invert>
    2130:	88 2e       	mov	r8, r24
    2132:	86 18       	sub	r8, r6
    2134:	fb 2d       	mov	r31, r11
    2136:	ff 77       	andi	r31, 0x7F	; 127
    2138:	3f 2e       	mov	r3, r31
    213a:	36 fe       	sbrs	r3, 6
    213c:	0d c0       	rjmp	.+26     	; 0x2158 <vfprintf+0x2ca>
    213e:	23 2d       	mov	r18, r3
    2140:	2e 7f       	andi	r18, 0xFE	; 254
    2142:	a2 2e       	mov	r10, r18
    2144:	89 14       	cp	r8, r9
    2146:	58 f4       	brcc	.+22     	; 0x215e <vfprintf+0x2d0>
    2148:	34 fe       	sbrs	r3, 4
    214a:	0b c0       	rjmp	.+22     	; 0x2162 <vfprintf+0x2d4>
    214c:	32 fc       	sbrc	r3, 2
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <vfprintf+0x2d4>
    2150:	83 2d       	mov	r24, r3
    2152:	8e 7e       	andi	r24, 0xEE	; 238
    2154:	a8 2e       	mov	r10, r24
    2156:	05 c0       	rjmp	.+10     	; 0x2162 <vfprintf+0x2d4>
    2158:	b8 2c       	mov	r11, r8
    215a:	a3 2c       	mov	r10, r3
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <vfprintf+0x2d6>
    215e:	b8 2c       	mov	r11, r8
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <vfprintf+0x2d6>
    2162:	b9 2c       	mov	r11, r9
    2164:	a4 fe       	sbrs	r10, 4
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <vfprintf+0x2f8>
    2168:	fe 01       	movw	r30, r28
    216a:	e8 0d       	add	r30, r8
    216c:	f1 1d       	adc	r31, r1
    216e:	80 81       	ld	r24, Z
    2170:	80 33       	cpi	r24, 0x30	; 48
    2172:	21 f4       	brne	.+8      	; 0x217c <vfprintf+0x2ee>
    2174:	9a 2d       	mov	r25, r10
    2176:	99 7e       	andi	r25, 0xE9	; 233
    2178:	a9 2e       	mov	r10, r25
    217a:	09 c0       	rjmp	.+18     	; 0x218e <vfprintf+0x300>
    217c:	a2 fe       	sbrs	r10, 2
    217e:	06 c0       	rjmp	.+12     	; 0x218c <vfprintf+0x2fe>
    2180:	b3 94       	inc	r11
    2182:	b3 94       	inc	r11
    2184:	04 c0       	rjmp	.+8      	; 0x218e <vfprintf+0x300>
    2186:	8a 2d       	mov	r24, r10
    2188:	86 78       	andi	r24, 0x86	; 134
    218a:	09 f0       	breq	.+2      	; 0x218e <vfprintf+0x300>
    218c:	b3 94       	inc	r11
    218e:	a3 fc       	sbrc	r10, 3
    2190:	11 c0       	rjmp	.+34     	; 0x21b4 <vfprintf+0x326>
    2192:	a0 fe       	sbrs	r10, 0
    2194:	06 c0       	rjmp	.+12     	; 0x21a2 <vfprintf+0x314>
    2196:	b2 14       	cp	r11, r2
    2198:	88 f4       	brcc	.+34     	; 0x21bc <vfprintf+0x32e>
    219a:	28 0c       	add	r2, r8
    219c:	92 2c       	mov	r9, r2
    219e:	9b 18       	sub	r9, r11
    21a0:	0e c0       	rjmp	.+28     	; 0x21be <vfprintf+0x330>
    21a2:	b2 14       	cp	r11, r2
    21a4:	60 f4       	brcc	.+24     	; 0x21be <vfprintf+0x330>
    21a6:	b6 01       	movw	r22, r12
    21a8:	80 e2       	ldi	r24, 0x20	; 32
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    21b0:	b3 94       	inc	r11
    21b2:	f7 cf       	rjmp	.-18     	; 0x21a2 <vfprintf+0x314>
    21b4:	b2 14       	cp	r11, r2
    21b6:	18 f4       	brcc	.+6      	; 0x21be <vfprintf+0x330>
    21b8:	2b 18       	sub	r2, r11
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <vfprintf+0x332>
    21bc:	98 2c       	mov	r9, r8
    21be:	21 2c       	mov	r2, r1
    21c0:	a4 fe       	sbrs	r10, 4
    21c2:	10 c0       	rjmp	.+32     	; 0x21e4 <vfprintf+0x356>
    21c4:	b6 01       	movw	r22, r12
    21c6:	80 e3       	ldi	r24, 0x30	; 48
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    21ce:	a2 fe       	sbrs	r10, 2
    21d0:	17 c0       	rjmp	.+46     	; 0x2200 <vfprintf+0x372>
    21d2:	a1 fc       	sbrc	r10, 1
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <vfprintf+0x34e>
    21d6:	88 e7       	ldi	r24, 0x78	; 120
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <vfprintf+0x352>
    21dc:	88 e5       	ldi	r24, 0x58	; 88
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	b6 01       	movw	r22, r12
    21e2:	0c c0       	rjmp	.+24     	; 0x21fc <vfprintf+0x36e>
    21e4:	8a 2d       	mov	r24, r10
    21e6:	86 78       	andi	r24, 0x86	; 134
    21e8:	59 f0       	breq	.+22     	; 0x2200 <vfprintf+0x372>
    21ea:	a1 fe       	sbrs	r10, 1
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <vfprintf+0x364>
    21ee:	8b e2       	ldi	r24, 0x2B	; 43
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <vfprintf+0x366>
    21f2:	80 e2       	ldi	r24, 0x20	; 32
    21f4:	a7 fc       	sbrc	r10, 7
    21f6:	8d e2       	ldi	r24, 0x2D	; 45
    21f8:	b6 01       	movw	r22, r12
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2200:	89 14       	cp	r8, r9
    2202:	38 f4       	brcc	.+14     	; 0x2212 <vfprintf+0x384>
    2204:	b6 01       	movw	r22, r12
    2206:	80 e3       	ldi	r24, 0x30	; 48
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    220e:	9a 94       	dec	r9
    2210:	f7 cf       	rjmp	.-18     	; 0x2200 <vfprintf+0x372>
    2212:	8a 94       	dec	r8
    2214:	f3 01       	movw	r30, r6
    2216:	e8 0d       	add	r30, r8
    2218:	f1 1d       	adc	r31, r1
    221a:	80 81       	ld	r24, Z
    221c:	b6 01       	movw	r22, r12
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2224:	81 10       	cpse	r8, r1
    2226:	f5 cf       	rjmp	.-22     	; 0x2212 <vfprintf+0x384>
    2228:	22 20       	and	r2, r2
    222a:	09 f4       	brne	.+2      	; 0x222e <vfprintf+0x3a0>
    222c:	42 ce       	rjmp	.-892    	; 0x1eb2 <vfprintf+0x24>
    222e:	b6 01       	movw	r22, r12
    2230:	80 e2       	ldi	r24, 0x20	; 32
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2238:	2a 94       	dec	r2
    223a:	f6 cf       	rjmp	.-20     	; 0x2228 <vfprintf+0x39a>
    223c:	f6 01       	movw	r30, r12
    223e:	86 81       	ldd	r24, Z+6	; 0x06
    2240:	97 81       	ldd	r25, Z+7	; 0x07
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <vfprintf+0x3ba>
    2244:	8f ef       	ldi	r24, 0xFF	; 255
    2246:	9f ef       	ldi	r25, 0xFF	; 255
    2248:	2b 96       	adiw	r28, 0x0b	; 11
    224a:	e2 e1       	ldi	r30, 0x12	; 18
    224c:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__>

00002250 <strnlen_P>:
    2250:	fc 01       	movw	r30, r24
    2252:	05 90       	lpm	r0, Z+
    2254:	61 50       	subi	r22, 0x01	; 1
    2256:	70 40       	sbci	r23, 0x00	; 0
    2258:	01 10       	cpse	r0, r1
    225a:	d8 f7       	brcc	.-10     	; 0x2252 <strnlen_P+0x2>
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	8e 0f       	add	r24, r30
    2262:	9f 1f       	adc	r25, r31
    2264:	08 95       	ret

00002266 <strnlen>:
    2266:	fc 01       	movw	r30, r24
    2268:	61 50       	subi	r22, 0x01	; 1
    226a:	70 40       	sbci	r23, 0x00	; 0
    226c:	01 90       	ld	r0, Z+
    226e:	01 10       	cpse	r0, r1
    2270:	d8 f7       	brcc	.-10     	; 0x2268 <strnlen+0x2>
    2272:	80 95       	com	r24
    2274:	90 95       	com	r25
    2276:	8e 0f       	add	r24, r30
    2278:	9f 1f       	adc	r25, r31
    227a:	08 95       	ret

0000227c <fputc>:
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	fb 01       	movw	r30, r22
    2286:	23 81       	ldd	r18, Z+3	; 0x03
    2288:	21 fd       	sbrc	r18, 1
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <fputc+0x16>
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	9f ef       	ldi	r25, 0xFF	; 255
    2290:	2c c0       	rjmp	.+88     	; 0x22ea <fputc+0x6e>
    2292:	22 ff       	sbrs	r18, 2
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <fputc+0x46>
    2296:	46 81       	ldd	r20, Z+6	; 0x06
    2298:	57 81       	ldd	r21, Z+7	; 0x07
    229a:	24 81       	ldd	r18, Z+4	; 0x04
    229c:	35 81       	ldd	r19, Z+5	; 0x05
    229e:	42 17       	cp	r20, r18
    22a0:	53 07       	cpc	r21, r19
    22a2:	44 f4       	brge	.+16     	; 0x22b4 <fputc+0x38>
    22a4:	a0 81       	ld	r26, Z
    22a6:	b1 81       	ldd	r27, Z+1	; 0x01
    22a8:	9d 01       	movw	r18, r26
    22aa:	2f 5f       	subi	r18, 0xFF	; 255
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	31 83       	std	Z+1, r19	; 0x01
    22b0:	20 83       	st	Z, r18
    22b2:	8c 93       	st	X, r24
    22b4:	26 81       	ldd	r18, Z+6	; 0x06
    22b6:	37 81       	ldd	r19, Z+7	; 0x07
    22b8:	2f 5f       	subi	r18, 0xFF	; 255
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	37 83       	std	Z+7, r19	; 0x07
    22be:	26 83       	std	Z+6, r18	; 0x06
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <fputc+0x6e>
    22c2:	8b 01       	movw	r16, r22
    22c4:	ec 01       	movw	r28, r24
    22c6:	fb 01       	movw	r30, r22
    22c8:	00 84       	ldd	r0, Z+8	; 0x08
    22ca:	f1 85       	ldd	r31, Z+9	; 0x09
    22cc:	e0 2d       	mov	r30, r0
    22ce:	09 95       	icall
    22d0:	89 2b       	or	r24, r25
    22d2:	e1 f6       	brne	.-72     	; 0x228c <fputc+0x10>
    22d4:	d8 01       	movw	r26, r16
    22d6:	16 96       	adiw	r26, 0x06	; 6
    22d8:	8d 91       	ld	r24, X+
    22da:	9c 91       	ld	r25, X
    22dc:	17 97       	sbiw	r26, 0x07	; 7
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	17 96       	adiw	r26, 0x07	; 7
    22e2:	9c 93       	st	X, r25
    22e4:	8e 93       	st	-X, r24
    22e6:	16 97       	sbiw	r26, 0x06	; 6
    22e8:	ce 01       	movw	r24, r28
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	08 95       	ret

000022f4 <__ultoa_invert>:
    22f4:	fa 01       	movw	r30, r20
    22f6:	aa 27       	eor	r26, r26
    22f8:	28 30       	cpi	r18, 0x08	; 8
    22fa:	51 f1       	breq	.+84     	; 0x2350 <__ultoa_invert+0x5c>
    22fc:	20 31       	cpi	r18, 0x10	; 16
    22fe:	81 f1       	breq	.+96     	; 0x2360 <__ultoa_invert+0x6c>
    2300:	e8 94       	clt
    2302:	6f 93       	push	r22
    2304:	6e 7f       	andi	r22, 0xFE	; 254
    2306:	6e 5f       	subi	r22, 0xFE	; 254
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	af 4f       	sbci	r26, 0xFF	; 255
    2310:	b1 e0       	ldi	r27, 0x01	; 1
    2312:	3e d0       	rcall	.+124    	; 0x2390 <__ultoa_invert+0x9c>
    2314:	b4 e0       	ldi	r27, 0x04	; 4
    2316:	3c d0       	rcall	.+120    	; 0x2390 <__ultoa_invert+0x9c>
    2318:	67 0f       	add	r22, r23
    231a:	78 1f       	adc	r23, r24
    231c:	89 1f       	adc	r24, r25
    231e:	9a 1f       	adc	r25, r26
    2320:	a1 1d       	adc	r26, r1
    2322:	68 0f       	add	r22, r24
    2324:	79 1f       	adc	r23, r25
    2326:	8a 1f       	adc	r24, r26
    2328:	91 1d       	adc	r25, r1
    232a:	a1 1d       	adc	r26, r1
    232c:	6a 0f       	add	r22, r26
    232e:	71 1d       	adc	r23, r1
    2330:	81 1d       	adc	r24, r1
    2332:	91 1d       	adc	r25, r1
    2334:	a1 1d       	adc	r26, r1
    2336:	20 d0       	rcall	.+64     	; 0x2378 <__ultoa_invert+0x84>
    2338:	09 f4       	brne	.+2      	; 0x233c <__ultoa_invert+0x48>
    233a:	68 94       	set
    233c:	3f 91       	pop	r19
    233e:	2a e0       	ldi	r18, 0x0A	; 10
    2340:	26 9f       	mul	r18, r22
    2342:	11 24       	eor	r1, r1
    2344:	30 19       	sub	r19, r0
    2346:	30 5d       	subi	r19, 0xD0	; 208
    2348:	31 93       	st	Z+, r19
    234a:	de f6       	brtc	.-74     	; 0x2302 <__ultoa_invert+0xe>
    234c:	cf 01       	movw	r24, r30
    234e:	08 95       	ret
    2350:	46 2f       	mov	r20, r22
    2352:	47 70       	andi	r20, 0x07	; 7
    2354:	40 5d       	subi	r20, 0xD0	; 208
    2356:	41 93       	st	Z+, r20
    2358:	b3 e0       	ldi	r27, 0x03	; 3
    235a:	0f d0       	rcall	.+30     	; 0x237a <__ultoa_invert+0x86>
    235c:	c9 f7       	brne	.-14     	; 0x2350 <__ultoa_invert+0x5c>
    235e:	f6 cf       	rjmp	.-20     	; 0x234c <__ultoa_invert+0x58>
    2360:	46 2f       	mov	r20, r22
    2362:	4f 70       	andi	r20, 0x0F	; 15
    2364:	40 5d       	subi	r20, 0xD0	; 208
    2366:	4a 33       	cpi	r20, 0x3A	; 58
    2368:	18 f0       	brcs	.+6      	; 0x2370 <__ultoa_invert+0x7c>
    236a:	49 5d       	subi	r20, 0xD9	; 217
    236c:	31 fd       	sbrc	r19, 1
    236e:	40 52       	subi	r20, 0x20	; 32
    2370:	41 93       	st	Z+, r20
    2372:	02 d0       	rcall	.+4      	; 0x2378 <__ultoa_invert+0x84>
    2374:	a9 f7       	brne	.-22     	; 0x2360 <__ultoa_invert+0x6c>
    2376:	ea cf       	rjmp	.-44     	; 0x234c <__ultoa_invert+0x58>
    2378:	b4 e0       	ldi	r27, 0x04	; 4
    237a:	a6 95       	lsr	r26
    237c:	97 95       	ror	r25
    237e:	87 95       	ror	r24
    2380:	77 95       	ror	r23
    2382:	67 95       	ror	r22
    2384:	ba 95       	dec	r27
    2386:	c9 f7       	brne	.-14     	; 0x237a <__ultoa_invert+0x86>
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	61 05       	cpc	r22, r1
    238c:	71 05       	cpc	r23, r1
    238e:	08 95       	ret
    2390:	9b 01       	movw	r18, r22
    2392:	ac 01       	movw	r20, r24
    2394:	0a 2e       	mov	r0, r26
    2396:	06 94       	lsr	r0
    2398:	57 95       	ror	r21
    239a:	47 95       	ror	r20
    239c:	37 95       	ror	r19
    239e:	27 95       	ror	r18
    23a0:	ba 95       	dec	r27
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <__ultoa_invert+0xa2>
    23a4:	62 0f       	add	r22, r18
    23a6:	73 1f       	adc	r23, r19
    23a8:	84 1f       	adc	r24, r20
    23aa:	95 1f       	adc	r25, r21
    23ac:	a0 1d       	adc	r26, r0
    23ae:	08 95       	ret

000023b0 <eeprom_read_byte>:
    23b0:	f9 99       	sbic	0x1f, 1	; 31
    23b2:	fe cf       	rjmp	.-4      	; 0x23b0 <eeprom_read_byte>
    23b4:	92 bd       	out	0x22, r25	; 34
    23b6:	81 bd       	out	0x21, r24	; 33
    23b8:	f8 9a       	sbi	0x1f, 0	; 31
    23ba:	99 27       	eor	r25, r25
    23bc:	80 b5       	in	r24, 0x20	; 32
    23be:	08 95       	ret

000023c0 <eeprom_write_byte>:
    23c0:	26 2f       	mov	r18, r22

000023c2 <eeprom_write_r18>:
    23c2:	f9 99       	sbic	0x1f, 1	; 31
    23c4:	fe cf       	rjmp	.-4      	; 0x23c2 <eeprom_write_r18>
    23c6:	1f ba       	out	0x1f, r1	; 31
    23c8:	92 bd       	out	0x22, r25	; 34
    23ca:	81 bd       	out	0x21, r24	; 33
    23cc:	20 bd       	out	0x20, r18	; 32
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	fa 9a       	sbi	0x1f, 2	; 31
    23d4:	f9 9a       	sbi	0x1f, 1	; 31
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	08 95       	ret

000023dc <__prologue_saves__>:
    23dc:	2f 92       	push	r2
    23de:	3f 92       	push	r3
    23e0:	4f 92       	push	r4
    23e2:	5f 92       	push	r5
    23e4:	6f 92       	push	r6
    23e6:	7f 92       	push	r7
    23e8:	8f 92       	push	r8
    23ea:	9f 92       	push	r9
    23ec:	af 92       	push	r10
    23ee:	bf 92       	push	r11
    23f0:	cf 92       	push	r12
    23f2:	df 92       	push	r13
    23f4:	ef 92       	push	r14
    23f6:	ff 92       	push	r15
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	ca 1b       	sub	r28, r26
    2406:	db 0b       	sbc	r29, r27
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	09 94       	ijmp

00002414 <__epilogue_restores__>:
    2414:	2a 88       	ldd	r2, Y+18	; 0x12
    2416:	39 88       	ldd	r3, Y+17	; 0x11
    2418:	48 88       	ldd	r4, Y+16	; 0x10
    241a:	5f 84       	ldd	r5, Y+15	; 0x0f
    241c:	6e 84       	ldd	r6, Y+14	; 0x0e
    241e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2420:	8c 84       	ldd	r8, Y+12	; 0x0c
    2422:	9b 84       	ldd	r9, Y+11	; 0x0b
    2424:	aa 84       	ldd	r10, Y+10	; 0x0a
    2426:	b9 84       	ldd	r11, Y+9	; 0x09
    2428:	c8 84       	ldd	r12, Y+8	; 0x08
    242a:	df 80       	ldd	r13, Y+7	; 0x07
    242c:	ee 80       	ldd	r14, Y+6	; 0x06
    242e:	fd 80       	ldd	r15, Y+5	; 0x05
    2430:	0c 81       	ldd	r16, Y+4	; 0x04
    2432:	1b 81       	ldd	r17, Y+3	; 0x03
    2434:	aa 81       	ldd	r26, Y+2	; 0x02
    2436:	b9 81       	ldd	r27, Y+1	; 0x01
    2438:	ce 0f       	add	r28, r30
    243a:	d1 1d       	adc	r29, r1
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	ed 01       	movw	r28, r26
    2448:	08 95       	ret

0000244a <_exit>:
    244a:	f8 94       	cli

0000244c <__stop_program>:
    244c:	ff cf       	rjmp	.-2      	; 0x244c <__stop_program>
